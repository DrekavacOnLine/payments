{
	"info": {
		"_postman_id": "6f770cdc-4b7e-48a5-a9e0-a52c92d39657",
		"name": "MODULE: Payments (wip)",
		"description": "Integration of payment endpoints for SEPA and SWIFT payments against DBAN\r\n\r\nBased on clarification call from 24th of August 2018 efforts have been estimated to 140PD of development\r\n\r\n\"categoryPurposeCode\": \"SALA\" parameter is removed from all requests due incompatibility with BJB R200\r\n\r\nGlobal functions:\r\n- sessionGet // retrive session for access token (called in Tests folder Pre-request Script)\r\n- generateAccessToken // generate access token\r\n- paymentSwiftCreate // create SWIFT payment, sets {{newPaymentSwiftID}}\r\n- paymentSwiftDelete //deletes SWIFT payment, unsets {{newPaymentSwiftID}}, sets {{deletedPaymentSwiftID}}\r\n- paymentSepaCreate //creates SEPA payment, sets {{newPaymentSepaID}}\r\n- paymentSepaSoCreate // creates SEPA Standing Order payment, sets {{newPaymentSepaID}}\r\n- paymentSepaDelete //deletes SEPA payment, unsets {{newPaymentSepaID}}\r\n- paymentOrangeCreate // creates Orange payment, sets {{newPaymentOrangeID}}\r\n- paymentOrangeDelete //deletes Orange payment, unsets {{newPaymentOrangeID}}\r\n- paymentOrangeSoCreate // creates Orange (standing order) payment, sets {{newPaymentOrangeID}}\r\n- paymentRedCreate // creates Red payment, sets {{newPaymentRedID}}\r\n- paymentRedSoCreate // creates Red (standing order) payment, sets {{newPaymentRedID}}\r\n- paymentRedDelete //deletes Red payment, unsets {{newPaymentRedID}}\r\n- paymentDomesticCreate // creates Swiss Domestic payment, sets {{newPaymentDomesticID}}\r\n- paymentDomesticSoCreate // creates Swiss Domestic (standing order) payment, sets {{newPaymentDomesticID}}\r\n- paymentDomesticDelete //deletes Domestic payment, unsets {{newPaymentDomesticID}}\r\n- paymentUkCreate // creates UK payment, sets {{newPaymentUkID}}\r\n- paymentUkSoCreate // creates UK (standing order) payment, sets {{newPaymentUkID}}\r\n- paymentUkDelete //deletes UK payment, unsets {{newPaymentUkID}}\r\n- paymentBaCreate // creates Balance adjustment payment, sets {{newPaymentBaID}}\r\n- paymentBaDelete // deleted Balance adjustment payment, unsets {{newPaymentBaID}}\r\n- paymentQrBillCreate // creates QR-bill payment, sets {{newPaymentQrBillID}}\r\n- paymentQrBillSoCreate // creates QR-bill (standing order) payment, sets {{newPaymentQrBillID}}\r\n- paymentQrBillDelete // deleted QrBill payment, unsets {{newPaymentQrBillID}}\r\n- paymentAtCreate // creates Account transfer payment, sets {{newPaymentAtID}}\r\n- paymentAtSoCreate // creates Account transfer (standing order) payment, sets {{newPaymentAtID}}\r\n- paymentAtDelete // deleted Account transfer payment, unsets {{newPaymentAtID}}\r\n- paymentSearch // sets {{latestPaymentID}}\r\n- createPaymentBulk // creates (in bulk) payment, sets {{newPaymentBulkID}}\r\n \r\nTests to create in Test Rail\r\n- Update UK payment\r\n- Delete UK payment\r\n- Create UK (standing order) payment (ToDo)\r\n- Deliver UK (standing order) payment (ToDo)\r\n- Update UK (standing order) payment (ToDo)\r\n- Delete UK (standing order) Payment (ToDo)\r\n- Deliver payments in bulk (ToDo)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Config",
			"item": [
				{
					"name": "_Test session init",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ebd39f4e-9c85-400c-b519-af69bff3f623",
								"exec": [
									"//reset global variables for controling execution flow",
									"eval(globals.cleanup)();",
									"//clear list of executed TestRail tests",
									"pm.environment.set(\"testRailTestsInRun\", \"\");",
									"",
									"//specify list of tests to be executed in exact order",
									"//const testsScope = \"Full\"; [Full|Core|Full+TestRail]",
									"let testsScope = data.testsScope;",
									"",
									"var newmanRun = data.newmanRun;",
									"if (newmanRun) {",
									"    pm.globals.set(\"newmanRun\", data.newmanRun);",
									"    console.log(\"dataFile/newmanRun: \" + newmanRun);",
									"} else {",
									"    pm.globals.set(\"newmanRun\", 0);",
									"    console.log(\"newmanRun, default value: 0\");",
									"}",
									"",
									"var contractNumber = data.contractNumber;",
									"if (contractNumber) {",
									"    pm.environment.set(\"contract\", JSON.parse(data.contractNumber));",
									"    console.log(\"dataFile/contractNumber: \" + contractNumber);",
									"}",
									"",
									"var paymentType = data.paymentType;",
									"if (paymentType) {",
									"    pm.environment.set(\"paymentType\", data.paymentType);",
									"    console.log(\"dataFile/paymentType: \" + paymentType);",
									"}",
									"var beneficiaryAccount = data.beneficiaryAccountNo;",
									"if (beneficiaryAccount) {",
									"    pm.environment.set(\"beneficiaryAccount\", data.beneficiaryAccountNo);",
									"    console.log(\"dataFile/beneficiaryAccount: \" + beneficiaryAccount);",
									"}",
									"var beneficiaryAccountRouting = data.beneficiaryAccountRouting;",
									"if (beneficiaryAccountRouting) {",
									"    pm.environment.set(\"beneficiaryAccountRouting\", data.beneficiaryAccountRouting);",
									"    console.log(\"dataFile/beneficiaryAccountRouting: \" + beneficiaryAccountRouting);",
									"}",
									"var debtorAccountNo = data.debtorAccountNo;",
									"if (debtorAccountNo) {",
									"    pm.environment.set(\"debtorAccountNo\", data.debtorAccountNo);",
									"    console.log(\"dataFile/debtorAccountNo: \" + debtorAccountNo);",
									"}",
									"var debtorAccountName = data.debtorAccountName;",
									"if (debtorAccountName) {",
									"    pm.environment.set(\"debtorAccountName\", data.debtorAccountName);",
									"    console.log(\"dataFile/debtorAccountName: \" + debtorAccountName);",
									"}",
									"var debtorStreetName = data.debtorStreetName;",
									"if (debtorStreetName) {",
									"    pm.environment.set(\"debtorStreetName\", data.debtorStreetName);",
									"    console.log(\"dataFile/debtorStreetName: \" + debtorStreetName);",
									"}",
									"var debtorPostalCode = data.debtorPostalCode;",
									"if (debtorPostalCode) {",
									"    pm.environment.set(\"debtorPostalCode\", data.debtorPostalCode);",
									"    console.log(\"dataFile/debtorPostalCode: \" + debtorPostalCode);",
									"}",
									"var debtorTownName = data.debtorTownName;",
									"if (debtorTownName) {",
									"    pm.environment.set(\"debtorTownName\", data.debtorTownName);",
									"    console.log(\"dataFile/debtorTownName: \" + debtorTownName);",
									"}",
									"var creditorAccountNo2 = data.creditorAccountNo2;",
									"if (creditorAccountNo2) {",
									"    pm.environment.set(\"creditorAccountNo2\", data.creditorAccountNo2);",
									"    console.log(\"dataFile/creditorAccountNo2: \" + creditorAccountNo2);",
									"}",
									"var creditorAccountNo = data.creditorAccountNo;",
									"if (creditorAccountNo) {",
									"    pm.environment.set(\"creditorAccountNo\", data.creditorAccountNo);",
									"    console.log(\"dataFile/creditorAccountNo: \" + creditorAccountNo);",
									"}",
									"var creditorAccountNoUK = data.creditorAccountNoUK;",
									"if (creditorAccountNoUK) {",
									"    pm.environment.set(\"creditorAccountNoUK\", data.creditorAccountNoUK);",
									"    console.log(\"dataFile/creditorAccountNoUK: \" + creditorAccountNoUK);",
									"}",
									"var creditorAccountNoSwisDomestic = data.creditorAccountNoSwisDomestic;",
									"if (creditorAccountNoSwisDomestic) {",
									"    pm.environment.set(\"creditorAccountNoSwisDomestic\", data.creditorAccountNoSwisDomestic);",
									"    console.log(\"dataFile/creditorAccountNoSwisDomestic: \" + creditorAccountNoSwisDomestic);",
									"}",
									"var creditorAccountNoBalanceAdjustment = data.creditorAccountNoBalanceAdjustment;",
									"if (creditorAccountNoBalanceAdjustment) {",
									"    pm.environment.set(\"creditorAccountNoBalanceAdjustment\", data.creditorAccountNoBalanceAdjustment);",
									"    console.log(\"dataFile/creditorAccountNoBalanceAdjustment: \" + creditorAccountNoBalanceAdjustment);",
									"}",
									"var creditorAgentCountry = data.creditorAgentCountry;",
									"if (creditorAgentCountry) {",
									"    pm.environment.set(\"creditorAgentCountry\", data.creditorAgentCountry);",
									"    console.log(\"dataFile/creditorAgentCountry: \" + creditorAgentCountry);",
									"}",
									"var currencyCode = data.currencyCode;",
									"if (currencyCode) {",
									"    pm.environment.set(\"currencyCode\", data.currencyCode);",
									"    console.log(\"dataFile/currencyCode: \" + currencyCode);",
									"}",
									"var endToEndId = data.endToEndId;",
									"if (endToEndId) {",
									"    pm.environment.set(\"endToEndId\", data.endToEndId);",
									"    console.log(\"dataFile/endToEndId: \" + endToEndId);",
									"}",
									"var postalAccountNo = data.postalAccountNo;",
									"if (postalAccountNo) {",
									"    pm.environment.set(\"postalAccountNo\", data.postalAccountNo);",
									"    console.log(\"dataFile/postalAccountNo: \" + postalAccountNo);",
									"}",
									"var orangeAccountNo = data.orangeAccountNo;",
									"if (orangeAccountNo) {",
									"    pm.environment.set(\"orangeAccountNo\", data.orangeAccountNo);",
									"    console.log(\"dataFile/orangeAccountNo: \" + orangeAccountNo);",
									"}",
									"var creditorAccountNoSWIFT = data.creditorAccountNoSWIFT;",
									"if (creditorAccountNoSWIFT) {",
									"    pm.environment.set(\"creditorAccountNoSWIFT\", data.creditorAccountNoSWIFT);",
									"    console.log(\"dataFile/creditorAccountNoSWIFT: \" + creditorAccountNoSWIFT);",
									"}",
									"var creditorAccountNoSEPA = data.creditorAccountNoSEPA;",
									"if (creditorAccountNoSEPA) {",
									"    pm.environment.set(\"creditorAccountNoSEPA\", data.creditorAccountNoSEPA);",
									"    console.log(\"dataFile/creditorAccountNoSEPA: \" + creditorAccountNoSEPA);",
									"}",
									"var creditorAgentBicSWIFT = data.creditorAgentBicSWIFT;",
									"if (creditorAgentBicSWIFT) {",
									"    pm.environment.set(\"creditorAgentBicSWIFT\", data.creditorAgentBicSWIFT);",
									"    console.log(\"dataFile/creditorAgentBicSWIFT: \" + creditorAgentBicSWIFT);",
									"}",
									"var creditorAgentBankCodeSWIFT = data.creditorAgentBankCodeSWIFT;",
									"if (creditorAgentBankCodeSWIFT) {",
									"    pm.environment.set(\"creditorAgentBankCodeSWIFT\", data.creditorAgentBankCodeSWIFT);",
									"    console.log(\"dataFile/creditorAgentBankCodeSWIFT: \" + creditorAgentBankCodeSWIFT);",
									"}",
									"var creditorAgentBicSEPA = data.creditorAgentBicSEPA;",
									"if (creditorAgentBicSEPA) {",
									"    pm.environment.set(\"creditorAgentBicSEPA\", data.creditorAgentBicSEPA);",
									"    console.log(\"dataFile/creditorAgentBicSEPA: \" + creditorAgentBicSEPA);",
									"}",
									"var structuredRemittanceRF = data.structuredRemittanceRF;",
									"if (structuredRemittanceRF) {",
									"    pm.environment.set(\"structuredRemittanceRF\", data.structuredRemittanceRF);",
									"    console.log(\"dataFile/structuredRemittanceRF: \" + structuredRemittanceRF);",
									"}",
									"var creditorAccountNoSWIFTBankAcco = data.creditorAccountNoSWIFTBankAcco;",
									"if (creditorAccountNoSWIFTBankAcco) {",
									"    pm.environment.set(\"creditorAccountNoSWIFTBankAcco\", data.creditorAccountNoSWIFTBankAcco);",
									"    console.log(\"dataFile/creditorAccountNoSWIFTBankAcco: \" + creditorAccountNoSWIFTBankAcco);",
									"}",
									"var creditorAgentName1SWIFT = data.creditorAgentName1SWIFT;",
									"if (creditorAgentName1SWIFT) {",
									"    pm.environment.set(\"creditorAgentName1SWIFT\", data.creditorAgentName1SWIFT);",
									"    console.log(\"dataFile/creditorAgentName1SWIFT: \" + creditorAgentName1SWIFT);",
									"}",
									"var creditorAgentName2SWIFT = data.creditorAgentName2SWIFT;",
									"if (creditorAgentName2SWIFT) {",
									"    pm.environment.set(\"creditorAgentName2SWIFT\", data.creditorAgentName2SWIFT);",
									"    console.log(\"dataFile/creditorAgentName2SWIFT: \" + creditorAgentName2SWIFT);",
									"}",
									"var creditorAgentStreetSWIFT = data.creditorAgentStreetSWIFT;",
									"if (creditorAgentStreetSWIFT) {",
									"    pm.environment.set(\"creditorAgentStreetSWIFT\", data.creditorAgentStreetSWIFT);",
									"    console.log(\"dataFile/creditorAgentStreetSWIFT: \" + creditorAgentStreetSWIFT);",
									"}",
									"var creditorAgentCitySWIFT = data.creditorAgentCitySWIFT;",
									"if (creditorAgentCitySWIFT) {",
									"    pm.environment.set(\"creditorAgentCitySWIFT\", data.creditorAgentCitySWIFT);",
									"    console.log(\"dataFile/creditorAgentCitySWIFT: \" + creditorAgentCitySWIFT);",
									"}",
									"var creditorAgentCountrySWIFT = data.creditorAgentCountrySWIFT;",
									"if (creditorAgentCountrySWIFT) {",
									"    pm.environment.set(\"creditorAgentCountrySWIFT\", data.creditorAgentCountrySWIFT);",
									"    console.log(\"dataFile/creditorAgentCountrySWIFT: \" + creditorAgentCountrySWIFT);",
									"}",
									"var accountAlias = data.accountAlias;",
									"if (accountAlias) {",
									"    pm.environment.set(\"accountAlias\", data.accountAlias);",
									"    console.log(\"dataFile/accountAlias: \" + accountAlias);",
									"} else {",
									"    pm.environment.set(\"accountAlias\", \"1501 CHF\");",
									"    console.log(\"default/accountAlias: \" + \"1501 CHF\");",
									"}",
									"var userId_security = data.contractNumber;",
									"if (userId_security) {",
									"    pm.environment.set(\"userId_security\", JSON.parse(data.contractNumber));",
									"    console.log(\"dataFile/userId_security: \" + userId_security);",
									"}",
									"var language = data.language;",
									"if (language) {",
									"    pm.environment.set(\"language\", data.language);",
									"    console.log(\"dataFile/language: \" + language);",
									"} else {",
									"    pm.environment.set(\"language\", \"en\");",
									"    console.log(\"default/language: \" + \"en\");",
									"}",
									"var structuredRemittanceOrange = data.structuredRemittanceOrange;",
									"if (structuredRemittanceOrange) {",
									"    pm.environment.set(\"structuredRemittanceOrange\", data.structuredRemittanceOrange);",
									"    console.log(\"dataFile/structuredRemittanceOrange: \" + structuredRemittanceOrange);",
									"} else {",
									"    pm.environment.set(\"structuredRemittanceOrange\", \"224812900001336000000054583\");",
									"    console.log(\"default/structuredRemittanceOrange: \" + \"224812900001336000000054583\");",
									"}",
									"",
									"//console.log(testsScope); ",
									"switch (testsScope) {",
									"    case \"Full\":",
									"        var testSession = [",
									"            \"Create SEPA payment (C36240114)\",",
									"            \"Deliver SEPA payment (C34775338)\",",
									"            \"Update SEPA payment (C36275415)\",",
									"            \"Delete SEPA payment (C36240104)\",",
									"            \"Create SEPA (standing order) payment (C53860900)\",",
									"            \"Deliver SEPA (standing order) payment (C53860904)\",",
									"            \"Update SEPA (standing order) payment (C53860903)\",",
									"            \"Delete SEPA (standing order) payment (C53860905)\",",
									"            \"Create SWIFT payment (C36275411)\",",
									"            \"Create SWIFT payment V2 (C52650414)\",",
									"            \"Create SWIFT payment V3 (C52718222)\",",
									"            \"Deliver SWIFT payment (C36240103)\",",
									"            \"Update SWIFT payment (C36275416)\",",
									"            \"Delete SWIFT payment (C36240105)\",",
									"            \"Create Orange payment (C48109263)\",",
									"            \"Deliver Orange payment (C49915362)\",",
									"            \"Update Orange payment (C48109272)\",",
									"            \"Delete Orange payment (C49915363)\",",
									"            \"Create Orange (standing order) payment (C49915384)\",",
									"            \"Deliver Orange (standing order) payment (C49915385)\",",
									"            \"Update Orange (standing order) payment (C49915387)\",",
									"            \"Delete Orange (standing order) payment (C49915386)\",",
									"            \"Create Red payment (C51026510)\",",
									"            \"Deliver Red payment (C51026511)\",",
									"            \"Update Red payment (C52889235)\",",
									"            \"Delete Red payment (C52889236)\",",
									"            \"Create Red (standing order) payment (C52949280)\",",
									"            \"Deliver Red (standing order) payment (C52992053)\",",
									"            \"Update Red (standing order) payment (C52949281)\",",
									"            \"Delete Red (standing order) payment (C52992055)\",",
									"            \"Create Swiss domestic payment (C45840620)\",",
									"            \"Deliver Swiss domestic payment (C45989797)\",",
									"            \"Update Swiss domestic payment (C45840627)\",",
									"            \"Delete Swiss domestic payment (C45989799)\",",
									"            \"Create Swiss domestic (standing order) payment (C45989795)\",",
									"            \"Deliver Swiss domestic (standing order) payment (C45989798)\",",
									"            \"Update Swiss domestic (standing order) payment (C45989796)\",",
									"            \"Delete Swiss domestic (standing order) payment (C45989800)\",",
									"            \"Create balance adjustment payment (C47415764)\",",
									"            \"Deliver balance adjustment payment (C47473069)\",",
									"            \"Update balance adjustment payment (C47473068)\",",
									"            \"Delete balance adjustment payment (C47489450)\",",
									"            \"Create QR-bill payment (C50483879)\",",
									"            \"Deliver QR-bill payment (C50880198)\",",
									"            \"Update QR-bill payment (C50483885)\",",
									"            \"Delete QR-bill payment (C51051785)\",",
									"            \"Create QR-bill (standing order) payment (C50483887)\",",
									"            \"Deliver QR-bill (standing order) payment (C51051788)\",",
									"            \"Update QR-bill (standing order) payment (C50483889)\",",
									"            \"Delete QR-bill (standing order) payment (C51051791)\",",
									"            \"Create account transfer payment (C41939554)\",",
									"            \"Deliver account transfer payment (C41939552)\",",
									"            \"Update account transfer payment (C41939560)\",",
									"            \"Delete account transfer payment (C41939557)\",",
									"            \"Create account transfer (standing order) payment (C53388199)\",",
									"            \"Deliver account transfer (standing order) payment (C53388200)\",",
									"            \"Update account transfer (standing order) payment (C53388201)\",",
									"            \"Delete account transfer (account transfer) payment (C53388202)\",",
									"            \"Create UK payment (C51026517)\",",
									"            \"Deliver UK payment (C51026519)\",",
									"            \"Update UK payment (ToDo)\",",
									"            \"Delete UK payment (ToDo)\",",
									"            \"Create UK (standing order) payment (ToDo)\",",
									"            \"Deliver UK (standing order) payment (ToDo)\",",
									"            \"Update UK (standing order) payment (ToDo)\",",
									"            \"Delete UK (standing order) Payment (ToDo)\",",
									"            \"Search Payment Returns Unique Pages (C49445322)\",",
									"            \"Search Payment calculates payments count regardles page and size parameters value (C49577618)\",",
									"            \"Search Payment number of returned payments matches to “totalElements” property value (ToDo)\",",
									"            \"Search Payment using filter by 'paymentStatuses' (ToDo)\",",
									"            \"Search Payment deleted payments aren't included (ToDo)\",",
									"            \"PayTo input validation for Alias as input parameter (C34380150)\",",
									"            \"Create payment template (ToDo)\",",
									"            \"Deliver payment template (ToDo)\",",
									"            \"Delete payment template (ToDo)\",",
									"            \"Deliver payments in bulk (ToDo)\"",
									"        ]; break;",
									"    case \"Core.old\":",
									"        var testSession = [",
									"            \"Initialize parameters (ToDo)\",",
									"            \"Create SWIFT payment (C36275411)\",",
									"            \"Create SWIFT payment V2 (C52650414)\",",
									"            \"Create SWIFT payment V3 (C52718222)\",",
									"            \"Deliver SWIFT payment (C36240103)\",",
									"            \"Update SWIFT payment (C36275416)\",",
									"            \"Delete SWIFT payment (C36240105)\",",
									"            \"Create Orange payment (C48109263)\",",
									"            \"Deliver Orange payment (C49915362)\",",
									"            \"Update Orange payment (C48109272)\",",
									"            \"Delete Orange payment (C49915363)\",",
									"            \"Create Orange (standing order) payment (C49915384)\",",
									"            \"Deliver Orange (standing order) payment (C49915385)\",",
									"            \"Update Orange (standing order) payment (C49915387)\",",
									"            \"Delete Orange (standing order) payment (C49915386)\",",
									"            \"Create Red payment (C51026510)\",",
									"            \"Deliver Red payment (C51026511)\",",
									"            \"Update Red payment (C52889235)\",",
									"            \"Delete Red payment (C52889236)\",",
									"            \"Create Red (standing order) payment (C52949280)\",",
									"            \"Deliver Red (standing order) payment (C52992053)\",",
									"            \"Update Red (standing order) payment (C52949281)\",",
									"            \"Delete Red (standing order) payment (C52992055)\",",
									"            \"Create Swiss domestic payment (C45840620)\",",
									"            \"Deliver Swiss domestic payment (C45989797)\",",
									"            \"Update Swiss domestic payment (C45840627)\",",
									"            \"Delete Swiss domestic payment (C45989799)\",",
									"            \"Create Swiss domestic (standing order) payment (C45989795)\",",
									"            \"Deliver Swiss domestic (standing order) payment (C45989798)\",",
									"            \"Update Swiss domestic (standing order) payment (C45989796)\",",
									"            \"Delete Swiss domestic (standing order) payment (C45989800)\",",
									"            \"Create balance adjustment payment (C47415764)\",",
									"            \"Deliver balance adjustment payment (C47473069)\",",
									"            \"Update balance adjustment payment (C47473068)\",",
									"            \"Delete balance adjustment payment (C47489450)\",",
									"            \"Create QR-bill payment (C50483879)\",",
									"            \"Deliver QR-bill payment (C50880198)\",",
									"            \"Update QR-bill payment (C50483885)\",",
									"            \"Delete QR-bill payment (C51051785)\",",
									"            \"Create QR-bill (standing order) payment (C50483887)\",",
									"            \"Deliver QR-bill (standing order) payment (C51051788)\",",
									"            \"Update QR-bill (standing order) payment (C50483889)\",",
									"            \"Delete QR-bill (standing order) payment (C51051791)\",",
									"            \"Create account transfer payment (C41939554)\",",
									"            \"Deliver account transfer payment (C41939552)\",",
									"            \"Update account transfer payment (C41939560)\",",
									"            \"Delete account transfer payment (C41939557)\",",
									"            \"Create account transfer (standing order) payment (C53388199)\",",
									"            \"Deliver account transfer (standing order) payment (C53388200)\",",
									"            \"Update account transfer (standing order) payment (C53388201)\",",
									"            \"Delete account transfer (account transfer) payment (C53388202)\",",
									"            \"Search Payment Returns Unique Pages (C49445322)\",",
									"            \"Search Payment calculates payments count regardles page and size parameters value (C49577618)\",",
									"            \"Search Payment number of returned payments matches to “totalElements” property value (C41083327)\",",
									"            \"Search Payment using filter by 'paymentStatuses' (C66728670)\",",
									"            \"Search Payment deleted payments aren't included (C66728671)\",",
									"            \"PayTo input validation for Alias as input parameter (C34380150)\",",
									"            \"Create payment template (C53181160)\",",
									"            \"Deliver payment template (C53232556)\",",
									"            \"Delete payment template (C53232557)\" //,            \"Deliver payments in bulk (ToDo)\"",
									"        ]; break;",
									"    case \"Core\":",
									"        var testSession = [",
									"            //Types of payments > SWIFT",
									"            \"Create SWIFT payment (C36275411)\",",
									"            \"Create SWIFT payment V2 (C52650414)\",",
									"            \"Create SWIFT payment V3 (C52718222)\",",
									"            \"Deliver SWIFT payment (C36240103)\",",
									"            \"Update SWIFT payment (C36275416)\",",
									"            //Types of payments > SEPA",
									"            \"Create SEPA payment (C36240114)\",",
									"            \"Deliver SEPA payment (C34775338)\",",
									"            \"Update SEPA payment (C36275415)\",",
									"            \"Delete SEPA payment (C36240104)\",",
									"            \"Create SEPA (standing order) payment (C53860900)\",",
									"            \"Deliver SEPA (standing order) payment (C53860904)\",",
									"            \"Update SEPA (standing order) payment (C53860903)\",",
									"            \"Delete SEPA (standing order) payment (C53860905)\",",
									"            //Types of payments > Swis > Orange",
									"            \"Create Orange payment (C48109263)\",",
									"            \"Deliver Orange payment (C49915362)\",",
									"            \"Update Orange payment (C48109272)\",",
									"            \"Delete Orange payment (C49915363)\",",
									"            \"Create Orange (standing order) payment (C49915384)\",",
									"            \"Deliver Orange (standing order) payment (C49915385)\",",
									"            \"Update Orange (standing order) payment (C49915387)\",",
									"            \"Delete Orange (standing order) payment (C49915386)\",",
									"            //Types of payments > Swis > Red",
									"            \"Create Red payment (C51026510)\",",
									"            \"Deliver Red payment (C51026511)\",",
									"            \"Update Red payment (C52889235)\",",
									"            \"Delete Red payment (C52889236)\",",
									"            \"Create Red (standing order) payment (C52949280)\",",
									"            \"Deliver Red (standing order) payment (C52992053)\",",
									"            \"Update Red (standing order) payment (C52949281)\",",
									"            \"Delete Red (standing order) payment (C52992055)\",",
									"            //Types of payments > Swis > Domestic",
									"            \"Create Swiss domestic payment (C45840620)\",",
									"            \"Deliver Swiss domestic payment (C45989797)\",",
									"            \"Update Swiss domestic payment (C45840627)\",",
									"            \"Delete Swiss domestic payment (C45989799)\",",
									"            \"Create Swiss domestic (standing order) payment (C45989795)\",",
									"            \"Deliver Swiss domestic (standing order) payment (C45989798)\",",
									"            \"Update Swiss domestic (standing order) payment (C45989796)\",",
									"            \"Delete Swiss domestic (standing order) payment (C45989800)\",",
									"            //Types of payments > Swis > QR-bill",
									"            \"Create QR-bill payment (C50483879)\",",
									"            \"Deliver QR-bill payment (C50880198)\",",
									"            \"Update QR-bill payment (C50483885)\",",
									"            \"Delete QR-bill payment (C51051785)\",",
									"            \"Create QR-bill (standing order) payment (C50483887)\",",
									"            \"Deliver QR-bill (standing order) payment (C51051788)\",",
									"            \"Update QR-bill (standing order) payment (C50483889)\",",
									"            \"Delete QR-bill (standing order) payment (C51051791)\",",
									"            //Types of payments > UK",
									"            \"Create UK payment (C51026517)\",",
									"            \"Deliver UK payment (C51026519)\",",
									"            //Types of payments > Balance adjustment",
									"            \"Create balance adjustment payment (C47415764)\",",
									"            \"Deliver balance adjustment payment (C47473069)\",",
									"            \"Update balance adjustment payment (C47473068)\",",
									"            \"Delete balance adjustment payment (C47489450)\",",
									"            //Types of payments > Account transfer",
									"            \"Create account transfer payment (C41939554)\",",
									"            \"Deliver account transfer payment (C41939552)\",",
									"            \"Update account transfer payment (C41939560)\",",
									"            \"Delete account transfer payment (C41939557)\",",
									"            \"Create account transfer (standing order) payment (C53388199)\",",
									"            \"Deliver account transfer (standing order) payment (C53388200)\",",
									"            \"Update account transfer (standing order) payment (C53388201)\",",
									"            \"Delete account transfer (account transfer) payment (C53388202)\",",
									"            //Payments search",
									"            \"Search Payment Returns Unique Pages (C49445322)\",",
									"            \"Search Payment calculates payments count regardles page and size parameters value (C49577618)\",",
									"            \"Search Payment number of returned payments matches to “totalElements” property value (C41083327)\",",
									"            \"Search Payment using filter by 'paymentStatuses' (C66728670)\",",
									"            \"Search Payment deleted payments aren't included (C66728671)\",",
									"            //Payments routing",
									"            \"PayTo input validation for Alias as input parameter (C34380150)\"",
									"",
									"        ]; break;",
									"    case \"TestRailClean\":",
									"        var testSession = [",
									"            \"_Test session close\"",
									"        ]; break;",
									"    default:",
									"        throw new Error(\"No tests selected for execution!\")",
									"}",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(testSession, \"testSession\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0f49d6e6-f7be-4c06-801c-9a36be530157",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tests.v2",
			"item": [
				{
					"name": "Types of payments",
					"item": [
						{
							"name": "Swift",
							"item": [
								{
									"name": "Create SWIFT payment (C36275411)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "23d96713-10c1-447b-a1f3-7314c2d5612f",
												"exec": [
													"eval(globals.generateAccessToken)();",
													"setTimeout(function(){eval(globals.randomizeVariables)();}, 1000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "12e33119-c025-48fc-8850-6648f9ded4e6",
												"exec": [
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" SWIFT payment is created and validated\", function () {\r",
													"\r",
													"    //Validate if execution status is correct\r",
													"    pm.response.to.have.status(201);\r",
													"    \r",
													"    //Validate if instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount); \r",
													"    \r",
													"    //Validate if execution date is correct\r",
													"    let requestBodyExecutionDate = JSON.parse(request.data).paymentInformation.requestedExecutionDate;\r",
													"    let responseBodyExecutionDate = JSON.parse(responseBody).paymentInformation.requestedExecutionDate;   \r",
													"    pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate);\r",
													"    \r",
													"    //Validate if creditor agent is correct\r",
													"    let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent.bic;\r",
													"    let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent.bic;\r",
													"    pm.expect(responseBodyCreditorAgent.bic).to.eql(requestBodyCreditorAgent.bic);\r",
													"    \r",
													"    //Validate if debtor address is correct\r",
													"    let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
													"    let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
													"    pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName);\r",
													"    pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
													"    pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
													"    \r",
													"    //Validate if debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo;   \r",
													"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    \r",
													"    //Validate if creditor account is correct\r",
													"    let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
													"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;\r",
													"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"    \r",
													"    //Validate if charge bearer is correct    \r",
													"    let jsonDataResponseChargeBearer = pm.response.json().chargeBearer;\r",
													"    pm.expect(jsonDataResponseChargeBearer).to.eql(\"SHAR\");\r",
													"    \r",
													"    // check if payment is created\r",
													"    if (pm.response.code == 201){\r",
													"        var responseData = JSON.parse(responseBody);\r",
													"        pm.environment.set(\"newPaymentSwiftID\", responseData.paymentId);\r",
													"        console.log(\"New SWIFT payment ID: \" + pm.environment.get(\"newPaymentSwiftID\"));\r",
													"        \r",
													"    }\r",
													"    else {\r",
													"        console.log(\"Failed to create SWIFT payment with ID:\" + pm.environment.get(\"newPaymentSwiftID\"));\r",
													"        pm.environment.unset(\"newPaymentSwiftID\");\r",
													"    }\r",
													"});\r",
													"\r",
													"//Clean up: call global function to delete created Swift payment\r",
													"if (pm.response.code == 201){\r",
													"    eval(globals.paymentSwiftDelete)();\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"storeOnly\": false,\r\n    \"locked\": false,\r\n    \"paymentInformation\": {\r\n        \"endToEndId\": {{endToEndId}},\r\n        \"instructedAmount\": {\r\n            \"currency\": {\r\n            \t\"code\": \"GBP\"\r\n            },\r\n            \"value\": 1\r\n        },\r\n        \"remittanceInformation\": {\r\n            \"unstructured\": {{unstructured}},\r\n            \"structured\": {{structuredRemittanceRF}}\r\n        },\r\n        \"instructionIdentification\": {{instructionIdentification}},\r\n        \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n        \"instructionPriority\": \"NORMAL\",\r\n        \"creditor\": {\r\n            \"name\": {{name}},\r\n            \"address\": {\r\n                \"adrLine1\": {{adrLine1}},\r\n                \"adrLine2\": {{adrLine2}},\r\n                \"streetName\": {{streetName}},\r\n                \"buildingNm\": {{buildingNm}},\r\n                \"postalCode\": {{postalCode}},\r\n                \"townName\": {{townName}},\r\n                \"country\": {{country}}\r\n            }\r\n        },\r\n        \"creditorAccountNo\": {{creditorAccountNoSWIFT}},\r\n        \"creditorAgent\": {\r\n            \"bic\": {{creditorAgentBicSWIFT}}\r\n        },\r\n        \"debtor\": {\r\n            \"name\": {{debtorAccountName}},\r\n            \"address\": {\r\n                \"streetName\": {{debtorStreetName}},\r\n                \"postalCode\": {{debtorPostalCode}},\r\n                \"townName\": {{debtorTownName}}\r\n            }\r\n        },\r\n        \"debtorAccountNo\":  {{debtorAccountNo}}\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{env_payments}}/banking-api/payment/swift/{{tenant}}/v2/credittransfer",
											"host": [
												"{{env_payments}}"
											],
											"path": [
												"banking-api",
												"payment",
												"swift",
												"{{tenant}}",
												"v2",
												"credittransfer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create SWIFT payment V2 (C52650414)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6bd40450-09b6-4eb2-b672-981852dd7dea",
												"exec": [
													"eval(globals.generateAccessToken)();",
													"setTimeout(function(){eval(globals.randomizeVariables)();}, 1000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5e34c468-2683-411b-8d1e-986c358c4f21",
												"exec": [
													"//Validate results\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" SWIFT payment is created and validated\", function () {\r",
													"\r",
													"    //Validate if execution status is correct\r",
													"    pm.response.to.have.status(201);\r",
													"    \r",
													"    //Validate if instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount); \r",
													"    \r",
													"    //Validate if execution date is correct\r",
													"    let requestBodyExecutionDate = JSON.parse(request.data).paymentInformation.requestedExecutionDate;\r",
													"    let responseBodyExecutionDate = JSON.parse(responseBody).paymentInformation.requestedExecutionDate;   \r",
													"    pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate);\r",
													"    \r",
													"    //Validate if creditor agent is correct\r",
													"    let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent.bic;\r",
													"    let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent.bic;\r",
													"    pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
													"    \r",
													"    //Validate if debtor address is correct\r",
													"    let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
													"    let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
													"    pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName);\r",
													"    pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
													"    pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
													"    \r",
													"    //Validate if debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo;   \r",
													"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    \r",
													"    //Validate if creditor account is correct\r",
													"    let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
													"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;\r",
													"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"    \r",
													"    //Validate if charge bearer is correct    \r",
													"    let jsonDataResponseChargeBearer = pm.response.json().chargeBearer;\r",
													"    pm.expect(jsonDataResponseChargeBearer).to.eql(\"SHAR\");\r",
													"    \r",
													"    // check if payment is created\r",
													"    if (pm.response.code == 201){\r",
													"        var responseData = JSON.parse(responseBody);\r",
													"        pm.environment.set(\"newPaymentSwiftID\", responseData.paymentId);\r",
													"        console.log(\"New SWIFT payment ID: \" + pm.environment.get(\"newPaymentSwiftID\"));\r",
													"    }\r",
													"    else {\r",
													"        console.log(\"Failed to create SWIFT payment with ID:\" + pm.environment.get(\"newPaymentSwiftID\"));\r",
													"        pm.environment.unset(\"newPaymentSwiftID\");\r",
													"    }\r",
													"});\r",
													"\r",
													"//Clean up: call global function to delete created Swift payment\r",
													"if (pm.response.code == 201){\r",
													"    eval(globals.paymentSwiftDelete)();\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"storeOnly\": false,\r\n    \"locked\": false,\r\n    \"paymentInformation\": {\r\n        \"endToEndId\": {{endToEndId}},\r\n        \"instructedAmount\": {\r\n            \"currency\": {\r\n                \"code\": \"SEK\"\r\n            },\r\n            \"value\": 4.23\r\n        },\r\n        \"remittanceInformation\": {\r\n            \"unstructured\": {{unstructured}},\r\n            \"structured\": {{structuredRemittanceRF}}\r\n        },\r\n        \"instructionIdentification\": {{instructionIdentification}},\r\n        \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n        \"instructionPriority\": \"NORMAL\",\r\n        \"creditor\": {\r\n            \"name\": {{name}},\r\n            \"address\": {\r\n                \"adrLine1\": {{adrLine1}},\r\n                \"adrLine2\": {{adrLine2}},\r\n                \"streetName\": {{streetName}},\r\n                \"buildingNm\": {{buildingNm}},\r\n                \"postalCode\": {{postalCode}},\r\n                \"townName\": {{townName}},\r\n                \"country\": {{country}}\r\n            }\r\n        },\r\n        \"creditorAccountNo\": {{creditorAccountNoSWIFTBankAcco}},\r\n        \"creditorAgent\": {\r\n            \"name1\": {{creditorAgentName1SWIFT}},\r\n            \"name2\": {{creditorAgentName2SWIFT}},\r\n            \"street\": {{creditorAgentStreetSWIFT}},\r\n            \"city\": {{creditorAgentCitySWIFT}},\r\n            \"country\": {{creditorAgentCountrySWIFT}}\r\n        },\r\n        \"debtor\": {\r\n            \"name\": {{debtorAccountName}},\r\n            \"address\": {\r\n                \"streetName\": {{debtorStreetName}},\r\n                \"postalCode\": {{debtorPostalCode}},\r\n                \"townName\": {{debtorTownName}}\r\n            }\r\n        },\r\n        \"debtorAccountNo\": {{debtorAccountNo}}\r\n    }\t\r\n}"
										},
										"url": {
											"raw": "{{env_payments}}/banking-api/payment/swift/{{tenant}}/v2/credittransfer",
											"host": [
												"{{env_payments}}"
											],
											"path": [
												"banking-api",
												"payment",
												"swift",
												"{{tenant}}",
												"v2",
												"credittransfer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create SWIFT payment V3 (C52718222)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6bd40450-09b6-4eb2-b672-981852dd7dea",
												"exec": [
													"eval(globals.generateAccessToken)();",
													"setTimeout(function(){eval(globals.randomizeVariables)();}, 1000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5e34c468-2683-411b-8d1e-986c358c4f21",
												"exec": [
													"//Validate results\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" SWIFT payment is created and validated\", function () {\r",
													"\r",
													"    //Validate if execution status is correct\r",
													"    pm.response.to.have.status(201);\r",
													"    \r",
													"    //Validate if instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount); \r",
													"    \r",
													"    //Validate if execution date is correct\r",
													"    let requestBodyExecutionDate = JSON.parse(request.data).paymentInformation.requestedExecutionDate;\r",
													"    let responseBodyExecutionDate = JSON.parse(responseBody).paymentInformation.requestedExecutionDate;   \r",
													"    pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate);\r",
													"    \r",
													"    //Validate if creditor agent is correct\r",
													"    let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent.bic;\r",
													"    let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent.bic;\r",
													"    pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
													"    \r",
													"    //Validate if debtor address is correct\r",
													"    let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
													"    let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
													"    pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName);\r",
													"    pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
													"    pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
													"    \r",
													"    //Validate if debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo;   \r",
													"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    \r",
													"    //Validate if creditor account is correct\r",
													"    let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
													"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;\r",
													"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"    \r",
													"    //Validate if charge bearer is correct    \r",
													"    let jsonDataResponseChargeBearer = pm.response.json().chargeBearer;\r",
													"    pm.expect(jsonDataResponseChargeBearer).to.eql(\"SHAR\");\r",
													"    \r",
													"    // check if payment is created\r",
													"    if (pm.response.code == 201){\r",
													"        var responseData = JSON.parse(responseBody);\r",
													"        pm.environment.set(\"newPaymentSwiftID\", responseData.paymentId);\r",
													"        console.log(\"New SWIFT payment ID: \" + pm.environment.get(\"newPaymentSwiftID\"));\r",
													"    }\r",
													"    else {\r",
													"        console.log(\"Failed to create SWIFT payment with ID:\" + pm.environment.get(\"newPaymentSwiftID\"));\r",
													"        pm.environment.unset(\"newPaymentSwiftID\");\r",
													"    }\r",
													"});\r",
													"\r",
													"//Clean up: call global function to delete created Swift payment\r",
													"if (pm.response.code == 201){\r",
													"    eval(globals.paymentSwiftDelete)();\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"storeOnly\": false,\r\n    \"locked\": false,\r\n    \"paymentInformation\": {\r\n        \"endToEndId\": {{endToEndId}},\r\n        \"instructedAmount\": {\r\n            \"currency\": {\r\n                \"code\": \"SEK\"\r\n            },\r\n            \"value\": 4.23\r\n        },\r\n        \"remittanceInformation\": {\r\n            \"unstructured\": {{unstructured}},\r\n            \"structured\": {{structuredRemittanceRF}}\r\n        },\r\n        \"instructionIdentification\": {{instructionIdentification}},\r\n        \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n        \"instructionPriority\": \"NORMAL\",\r\n        \"creditor\": {\r\n            \"name\": {{name}},\r\n            \"address\": {\r\n                \"adrLine1\": {{adrLine1}},\r\n                \"adrLine2\": {{adrLine2}},\r\n                \"streetName\": {{streetName}},\r\n                \"buildingNm\": {{buildingNm}},\r\n                \"postalCode\": {{postalCode}},\r\n                \"townName\": {{townName}},\r\n                \"country\": {{country}}\r\n            }\r\n        },\r\n        \"creditorAccountNo\": {{creditorAccountNoSWIFTBankAcco}},\r\n        \"creditorAgent\": {\r\n            \"name1\": {{creditorAgentName1SWIFT}},\r\n            \"name2\": {{creditorAgentName2SWIFT}},\r\n            \"street\": {{creditorAgentStreetSWIFT}},\r\n            \"city\": {{creditorAgentCitySWIFT}},\r\n            \"country\": {{creditorAgentCountrySWIFT}}\r\n        },\r\n        \"debtor\": {\r\n            \"name\": {{debtorAccountName}},\r\n            \"address\": {\r\n                \"streetName\": {{debtorStreetName}},\r\n                \"postalCode\": {{debtorPostalCode}},\r\n                \"townName\": {{debtorTownName}}\r\n            }\r\n        },\r\n        \"debtorAccountNo\": {{debtorAccountNo}}\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{env_payments}}/banking-api/payment/swift/{{tenant}}/v2/credittransfer",
											"host": [
												"{{env_payments}}"
											],
											"path": [
												"banking-api",
												"payment",
												"swift",
												"{{tenant}}",
												"v2",
												"credittransfer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Deliver SWIFT payment (C36240103)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9c72540c-8b6e-4022-beb7-ef4a180f1b6b",
												"exec": [
													"eval(globals.generateAccessToken)();\r",
													"//Pre-condition: create SWIFT payment\r",
													"setTimeout(function(){eval(globals.paymentSwiftCreate)();}, 1000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "05a88f70-ba02-48cd-9fae-2c7979c3c899",
												"exec": [
													"//Validate results\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" SWIFT payment is delivered\", function () {\r",
													"\r",
													"    //Validate if execution status is correct\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Validate if debtor is correct\r",
													"    let jsonDataDebtorName = pm.response.json().paymentInformation.debtor.name;\r",
													"    let jsonDataDebtorAccount = pm.response.json().paymentInformation.debtorAccountNo;\r",
													"    pm.expect(jsonDataDebtorName).to.eql(JSON.parse(pm.environment.get(\"debtorAccountName\")));\r",
													"    pm.expect(jsonDataDebtorAccount).to.eql(JSON.parse(pm.environment.get(\"debtorAccountNo\")));\r",
													"      \r",
													"    //Validate if creditor agent is correct\r",
													"    let jsonResponseCreditorAgent = pm.response.json().paymentInformation.creditorAgent.bic;\r",
													"    pm.expect(jsonResponseCreditorAgent).to.eql(JSON.parse(pm.environment.get(\"creditorAgentBicSWIFT\")));\r",
													"\r",
													"    //Validate if response contains debtor account\r",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.environment.get(\"debtorAccountName\")));\r",
													"});\r",
													"\r",
													"//Clean up: call global function to delete created Swift payment\r",
													"if (pm.response.code == 200){\r",
													"    eval(globals.paymentSwiftDelete)();\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_payments}}/banking-api/payment/swift/{{tenant}}/v2/credittransfer/{{newPaymentSwiftID}}",
											"host": [
												"{{env_payments}}"
											],
											"path": [
												"banking-api",
												"payment",
												"swift",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"{{newPaymentSwiftID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update SWIFT payment (C36275416)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99e48e52-0f3e-4849-8aaf-b607243a0667",
												"exec": [
													"//Validate results\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" SWIFT payment is updated\", function () {\r",
													"\r",
													"    //Validate if execution status is correct\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Validate if instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    \r",
													"    //Validate if execution date is correct    \r",
													"    let requestBodyExecutionDate = JSON.parse(request.data).paymentInformation.requestedExecutionDate;\r",
													"    let responseBodyExecutionDate = JSON.parse(responseBody).paymentInformation.requestedExecutionDate;    \r",
													"    pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate);\r",
													"    \r",
													"    //Validate if creditor agent is correct    \r",
													"    let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent.bic;\r",
													"    let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent.bic;\r",
													"    pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
													"    \r",
													"    //Validate if debtor address is correct    \r",
													"    let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
													"    let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
													"    pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName);\r",
													"    pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
													"    pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
													"      \r",
													"    //Validate if debtor account is correct    \r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo;   \r",
													"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    \r",
													"    //Validate if creditor account is correct    \r",
													"    let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
													"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;   \r",
													"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"    \r",
													"    //Validate if charge bearer is correct    \r",
													"    let requestBodyChargeBearer = JSON.parse(request.data).chargeBearer;\r",
													"    let responseBodyChargeBearer = JSON.parse(responseBody).chargeBearer;       \r",
													"    pm.expect(responseBodyChargeBearer).to.eql(requestBodyChargeBearer);\r",
													"});\r",
													"\r",
													"//Clean up: call global function to delete created Swift payment\r",
													"if (pm.response.code == 200){\r",
													"    eval(globals.paymentSwiftDelete)();\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0415c0ea-9fa8-4aec-adfb-7b35a10b7f05",
												"exec": [
													"eval(globals.generateAccessToken)();",
													"setTimeout(function(){eval(globals.randomizeVariables)();}, 1000);",
													"//Pre-condition: call global function to create Swift payment",
													"setTimeout(function(){eval(globals.paymentSwiftCreate)();}, 1500);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"storeOnly\": false,\r\n    \"locked\": false,\r\n    \"paymentInformation\": {\r\n        \"endToEndId\": {{endToEndId}},\r\n        \"instructedAmount\": {\r\n            \"currency\": {\r\n                \"code\": \"GBP\"\r\n            },\r\n            \"value\": 45\r\n        },\r\n        \"remittanceInformation\": {\r\n            \"unstructured\": {{unstructured}},\r\n            \"structured\": {{structuredRemittanceRF}}\r\n        },\r\n        \"instructionIdentification\": {{instructionIdentification}},\r\n        \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n        \"instructionPriority\": \"NORMAL\",\r\n        \"creditor\": {\r\n            \"name\": \"MDB-R191-Test\",\r\n            \"address\": {\r\n                \"adrLine1\": {{adrLine1}},\r\n                \"adrLine2\": {{adrLine2}},\r\n                \"streetName\": {{streetName}},\r\n                \"buildingNm\": {{buildingNm}},\r\n                \"postalCode\": {{postalCode}},\r\n                \"townName\": {{townName}},\r\n                \"country\": {{country}}\r\n            }\r\n        },\r\n        \"creditorAccountNo\": {{creditorAccountNoSWIFT}},\r\n        \"creditorAgent\": {\r\n            \"bic\": {{creditorAgentBicSWIFT}}\r\n        },\r\n        \"debtor\": {\r\n            \"name\": {{debtorAccountName}},\r\n            \"address\": {\r\n                \"streetName\": {{debtorStreetName}},\r\n                \"postalCode\": {{debtorPostalCode}},\r\n                \"townName\": {{debtorTownName}}\r\n            }\r\n        },\r\n        \"debtorAccountNo\":  {{debtorAccountNo}}\r\n    },\r\n    \"chargeBearer\": \"SHAR\"\r\n}"
										},
										"url": {
											"raw": "{{env_payments}}/banking-api/payment/swift/{{tenant}}/v2/credittransfer/{{newPaymentSwiftID}}",
											"host": [
												"{{env_payments}}"
											],
											"path": [
												"banking-api",
												"payment",
												"swift",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"{{newPaymentSwiftID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete SWIFT payment (C36240105)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7bea7b10-ea3c-4e3d-9ded-3ccda02daa46",
												"exec": [
													"//Validate results\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" SWIFT payment is deleted\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Log important stuff\r",
													"if (pm.response.code == 200){\r",
													"    console.log(\"Deleted Swift payment ID:\" + pm.environment.get(\"newPaymentSwiftID\"));\r",
													"    pm.environment.set(\"deletedPaymentSwiftID\",pm.environment.get(\"newPaymentSwiftID\"));\r",
													"    pm.environment.unset(\"newPaymentSwiftID\");\r",
													"}\r",
													"else {\r",
													"    console.log(\"Failed to delete SWIFT payment with ID:\" + pm.environment.get(\"newPaymentSwiftID\"));\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "105b0d7b-03f1-4fdb-adb0-e4de60df722a",
												"exec": [
													"eval(globals.generateAccessToken)();",
													"//Pre-condition: call global function to create Swift payment",
													"setTimeout(function(){eval(globals.paymentSwiftCreate)();}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json",
												"disabled": true
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_payments}}/banking-api/payment/swift/{{tenant}}/v2/credittransfer/{{newPaymentSwiftID}}",
											"host": [
												"{{env_payments}}"
											],
											"path": [
												"banking-api",
												"payment",
												"swift",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"{{newPaymentSwiftID}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Sepa",
							"item": [
								{
									"name": "Standing order",
									"item": [
										{
											"name": "Create SEPA (standing order) payment (C53860900)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
														"exec": [
															"//Validate results\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" SEPA (standing order) payment is created and validated\", function () {\r",
															"\r",
															"    //Validate if execution status is correct\r",
															"    pm.response.to.have.status(201);\r",
															"    \r",
															"    //Validate if instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount); \r",
															"    \r",
															"    //Validate if creditor agent is correct\r",
															"    let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent.bic;\r",
															"    let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent.bic;\r",
															"    pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
															"    \r",
															"    //Validate if debtor address is correct\r",
															"    let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
															"    let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
															"    pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName);\r",
															"    pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
															"    pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
															"    \r",
															"    //Validate if debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo;   \r",
															"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    \r",
															"    //Validate if creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;\r",
															"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    \r",
															"    //Validate if structured remittance information is correct\r",
															"    let requestBodyStructuredRemittance = JSON.parse(request.data).paymentInformation.remittanceInformation.structured;\r",
															"    let responseBodyStructuredRemittance = JSON.parse(responseBody).paymentInformation.remittanceInformation.structured;\r",
															"    pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance);\r",
															"    \r",
															"    //Validate if standing order info is correct\r",
															"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
															"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
															"    pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"    \r",
															"    // check if payment is created\r",
															"    if (pm.response.code == 201){\r",
															"        var responseData = JSON.parse(responseBody);\r",
															"        pm.environment.set(\"newPaymentSepaID\", responseData.paymentId);\r",
															"        pm.environment.set(\"newPaymentSepaStOrInfo\", responseData.standingOrder);\r",
															"        console.log(\"New SEPA (standing order) payment ID: \" + pm.environment.get(\"newPaymentSepaID\"));\r",
															"        // Store the used parameters (test relevant)\r",
															"        let response = pm.response.json().paymentInformation.standingOrder;\r",
															"        let savedData = JSON.stringify(response);\r",
															"        pm.environment.set(\"standingOrder\", savedData);\r",
															"        pm.environment.set(\"instructedAmount\", (JSON.parse(request.data).paymentInformation.instructedAmount));\r",
															"    }\r",
															"    else {\r",
															"        console.log(\"Failed to create SEPA (standing order) payment\");\r",
															"        pm.environment.unset(\"newPaymentSepaID\");\r",
															"    }\r",
															"});\r",
															"\r",
															"//Clean up: call global function to delete created Sepa (standing order) payment\r",
															"if (pm.response.code == 201){\r",
															"    eval(globals.paymentSepaDelete)();\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
														"exec": [
															"eval(globals.generateAccessToken)();",
															"setTimeout(function(){eval(globals.randomizeVariables)();}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"storeOnly\": false,\r\n\t\"locked\": false,\r\n\t\"paymentInformation\": {\r\n\t\t\"instructedAmount\": {\r\n\t\t\t\"currency\": {\r\n\t\t\t\t\"code\": \"EUR\"\r\n\t\t\t},\r\n\t\t\t\"value\": 9.99\r\n\t\t},\r\n\t\t\"remittanceInformation\": {\r\n\t\t\t\"unstructured\": {{unstructured}},\r\n\t\t\t\"structured\": {{structuredRemittanceRF}}\r\n\t\t},\r\n\t\t\"instructionIdentification\": {{instructionIdentification}},\r\n\t\t\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\t\"instructionPriority\": \"NORMAL\",\r\n\t\t\"creditor\": {\r\n\t\t\t\"name\": {{name}},\r\n\t\t\t\"address\": {\r\n\t\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\t\"townName\": {{townName}},\r\n\t\t\t\t\"country\": {{country}}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"creditorAccountNo\": {{creditorAccountNoSEPA}},\r\n\t\t\"creditorAgent\": {\r\n\t\t\t\"bic\": {{creditorAgentBicSEPA}}\r\n\t\t},\r\n\t\t\"debtor\": {\r\n\t\t\t\"name\": {{debtorAccountName}},\r\n\t\t\t\"address\": {\r\n\t\t\t\t\"streetName\": {{debtorStreetName}},\r\n\t\t\t\t\"postalCode\": {{debtorPostalCode}},\r\n\t\t\t\t\"townName\": {{debtorTownName}}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"debtorAccountNo\":  {{debtorAccountNo}},\r\n\t\t\"standingOrder\": {\r\n\t\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\t\"beforeHoliday\": true,\r\n\t\t\t\"interval\": \"WEEKLY\",\r\n\t\t\t\"active\": true,\r\n\t\t\t\"ultimo\": false\t\t\r\n\t\t}\r\n\t}\r\n}"
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/sepa/{{tenant}}/v2/credittransfer",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"sepa",
														"{{tenant}}",
														"v2",
														"credittransfer"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deliver SEPA (standing order) payment (C53860904)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
														"exec": [
															"//Validate results\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" SEPA (standing order) payment is delivered\", function () {\r",
															"\r",
															"    //Validate if execution status is correct\r",
															"    pm.response.to.have.status(200);\r",
															"    \r",
															"    //Validate if instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    \r",
															"    //Validate if creditor agent is correct\r",
															"    let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent.bic;\r",
															"    let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent.bic;\r",
															"    pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
															"    \r",
															"    //Validate if debtor address is correct\r",
															"    let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
															"    let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
															"    pm.expect(responseBodyDebtorAddress.streetName).to.eql(JSON.parse(pm.environment.get(\"debtorStreetName\")));\r",
															"    pm.expect(responseBodyDebtorAddress.postalCode).to.eql(JSON.parse(pm.environment.get(\"debtorPostalCode\")));\r",
															"    pm.expect(responseBodyDebtorAddress.townName).to.eql(JSON.parse(pm.environment.get(\"debtorTownName\"))); \r",
															"    \r",
															"    //Validate if debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo; \r",
															"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    \r",
															"    //Validate if creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;  \r",
															"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    \r",
															"    //Validate if structured remittance information is correct\r",
															"    let requestBodyStructuredRemittance = JSON.parse(request.data).paymentInformation.remittanceInformation.structured;\r",
															"    let responseBodyStructuredRemittance = JSON.parse(responseBody).paymentInformation.remittanceInformation.structured; \r",
															"    pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance);\r",
															"    \r",
															"    //Validate if standing order info is correct\r",
															"    let responseBodyStandingOrder = JSON.parse(responseBody).paymentInformation.standingOrder; \r",
															"    pm.expect(responseBodyStandingOrder).to.eql(JSON.parse(pm.environment.get(\"standingOrder\")));\r",
															"});\r",
															"\r",
															"//Clean up: call global function to delete created Sepa (standing order) payment\r",
															"if (pm.response.code == 200){\r",
															"    eval(globals.paymentSepaDelete)();\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
														"exec": [
															"eval(globals.generateAccessToken)();\r",
															"//Pre-condition: call global function to create Sepa (standing order) payment\r",
															"setTimeout(function(){eval(globals.paymentSepaSoCreate)();}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"storeOnly\": false,\r\n    \"locked\": false,\r\n    \"paymentInformation\": {\r\n        \"instructedAmount\": {\r\n            \"currency\": {\r\n                \"code\": \"EUR\"\r\n            },\r\n            \"value\": 9.99\r\n        },\r\n        \"remittanceInformation\": {\r\n            \"unstructured\": {{unstructured}},\r\n            \"structured\": {{structuredRemittanceRF}}\r\n        },\r\n        \"instructionIdentification\": {{instructionIdentification}},\r\n        \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n        \"instructionPriority\": \"NORMAL\",\r\n        \"creditor\": {\r\n            \"name\": {{name}},\r\n            \"address\": {\r\n                \"adrLine1\": {{adrLine1}},\r\n                \"adrLine2\": {{adrLine2}},\r\n                \"streetName\": {{streetName}},\r\n                \"buildingNm\": {{buildingNm}},\r\n                \"postalCode\": {{postalCode}},\r\n                \"townName\": {{townName}},\r\n                \"country\": {{country}}\r\n            }\r\n        },\r\n        \"creditorAccountNo\": {{creditorAccountNoSEPA}},\r\n        \"creditorAgent\": {\r\n            \"bic\": {{creditorAgentBicSEPA}}\r\n        },\r\n        \"debtor\": {\r\n            \"name\": {{debtorAccountName}},\r\n            \"address\": {\r\n                \"streetName\": {{debtorStreetName}},\r\n                \"postalCode\": {{debtorPostalCode}},\r\n                \"townName\": {{debtorTownName}}\r\n            }\r\n        },\r\n        \"debtorAccountNo\":  {{debtorAccountNo}}\r\n    },\r\n    \"standingOrder\": {\r\n        \"firstOn\": {{PrS:futureWorkingDay}},\r\n        \"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n        \"beforeHoliday\": true,\r\n        \"interval\": \"WEEKLY\",\r\n        \"active\": true,\r\n        \"ultimo\": false\t\t\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/sepa/{{tenant}}/v2/credittransfer/{{newPaymentSepaID}}",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"sepa",
														"{{tenant}}",
														"v2",
														"credittransfer",
														"{{newPaymentSepaID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update SEPA (standing order) payment (C53860903)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
														"exec": [
															"//Validate results\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" SEPA (standing order) payment is updated and assertions are passed\", function () {\r",
															"\r",
															"    //Validate if execution status is correct\r",
															"    pm.response.to.have.status(200);\r",
															"    \r",
															"    //Validate if instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    \r",
															"    //Validate if creditor agent is correct\r",
															"    let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent.bic;\r",
															"    let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent.bic;\r",
															"    pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
															"    \r",
															"    //Validate if debtor address is correct\r",
															"    let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
															"    let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
															"    pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName);\r",
															"    pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
															"    pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
															"    \r",
															"    //Validate if debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo; \r",
															"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    \r",
															"    //Validate if creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;\r",
															"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    \r",
															"    //Validate if structured remittance information is correct\r",
															"    let requestBodyStructuredRemittance = JSON.parse(request.data).paymentInformation.remittanceInformation.structured;\r",
															"    let responseBodyStructuredRemittance = JSON.parse(responseBody).paymentInformation.remittanceInformation.structured; \r",
															"    pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance);\r",
															"    \r",
															"    //Validate if standing order info is correct\r",
															"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
															"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
															"    pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"});\r",
															"\r",
															"//Clean up: call global function to delete created Sepa (standing order) payment\r",
															"if (pm.response.code == 200){\r",
															"    eval(globals.paymentSepaDelete)();\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
														"exec": [
															"eval(globals.generateAccessToken)();",
															"setTimeout(function(){eval(globals.randomizeVariables)();}, 1000);",
															"//Pre-condition: call global function to create Sepa (standing order) payment",
															"setTimeout(function(){eval(globals.paymentSepaSoCreate)();}, 1500);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"storeOnly\": false,\r\n    \"locked\": false,\r\n    \"paymentInformation\": {\r\n        \"instructedAmount\": {\r\n            \"currency\": {\r\n                \"code\": \"EUR\"\r\n            },\r\n            \"value\": 10.99\r\n        },\r\n        \"remittanceInformation\": {\r\n            \"unstructured\": {{unstructured}},\r\n            \"structured\": {{structuredRemittanceRF}}\r\n        },\r\n        \"instructionIdentification\": {{instructionIdentification}},\r\n        \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n        \"instructionPriority\": \"NORMAL\",\r\n        \"creditor\": {\r\n            \"name\": {{name}},\r\n            \"address\": {\r\n                \"adrLine1\": {{adrLine1}},\r\n                \"adrLine2\": {{adrLine2}},\r\n                \"streetName\": {{streetName}},\r\n                \"buildingNm\": {{buildingNm}},\r\n                \"postalCode\": {{postalCode}},\r\n                \"townName\": {{townName}},\r\n                \"country\": {{country}}\r\n            }\r\n        },\r\n        \"creditorAccountNo\": {{creditorAccountNoSEPA}},\r\n        \"creditorAgent\": {\r\n            \"bic\": {{creditorAgentBicSEPA}}\r\n        },\r\n        \"debtor\": {\r\n            \"name\": {{debtorAccountName}},\r\n            \"address\": {\r\n                \"streetName\": {{debtorStreetName}},\r\n                \"postalCode\": {{debtorPostalCode}},\r\n                \"townName\": {{debtorTownName}}\r\n            }\r\n        },\r\n        \"debtorAccountNo\":  {{debtorAccountNo}},\r\n        \"standingOrder\": {\r\n            \"firstOn\": {{PrS:futureWorkingDay}},\r\n            \"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n            \"beforeHoliday\": false,\r\n            \"interval\": \"DAILY\",\r\n            \"active\": true,\r\n            \"ultimo\": false\t\t\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/sepa/{{tenant}}/v2/credittransfer/{{newPaymentSepaID}}",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"sepa",
														"{{tenant}}",
														"v2",
														"credittransfer",
														"{{newPaymentSepaID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete SEPA (standing order) payment (C53860905)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b805315b-12ae-4f45-85f9-14230e6cb91e",
														"exec": [
															"//Validate results\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" SEPA (standing order) payment is deleted\", function () {\r",
															"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
															"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
															"    pm.response.to.have.status(200); \r",
															"    pm.expect(responseBodyStatus).to.eql(true);\r",
															"    pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
															"});\r",
															"\r",
															"// Log important stuff\r",
															"if (pm.response.code == 200){\r",
															"    console.log(\"Deleted SEPA (standing order) payment ID:\" + pm.environment.get(\"newPaymentSepaID\"));\r",
															"    pm.environment.set(\"deletedSepaPaymentID\",pm.globals.get(\"newPaymentSepaID\"));\r",
															"    pm.environment.unset(\"newPaymentSepaID\");\r",
															"    pm.environment.unset(\"newPaymentSepaStOrInfo\");\r",
															"}\r",
															"else {\r",
															"    console.log(\"Failed to delete SEPA (standing order) payment with ID:\" + pm.globals.get(\"newPaymentSepaID\"));\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8b0efd50-c002-40d7-bf02-ad82c22ce7a7",
														"exec": [
															"eval(globals.generateAccessToken)();\r",
															"//Pre-condition: call global function to create Sepa (standing order) payment\r",
															"setTimeout(function(){eval(globals.paymentSepaSoCreate)();}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/sepa/{{tenant}}/v2/credittransfer/{{newPaymentSepaID}}",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"sepa",
														"{{tenant}}",
														"v2",
														"credittransfer",
														"{{newPaymentSepaID}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Create SEPA payment (C36240114)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9c72540c-8b6e-4022-beb7-ef4a180f1b6b",
												"exec": [
													"eval(globals.generateAccessToken)();",
													"setTimeout(function(){eval(globals.randomizeVariables)();}, 1000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "05a88f70-ba02-48cd-9fae-2c7979c3c899",
												"exec": [
													"//Validate results\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" SEPA payment is created and validated\", function () {\r",
													"    \r",
													"    //Validate if execution status is correct\r",
													"    pm.response.to.have.status(201);\r",
													"    \r",
													"    //Validate if instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount); \r",
													"    \r",
													"    //Validate if execution date is correct\r",
													"    let requestBodyExecutionDate = JSON.parse(request.data).paymentInformation.requestedExecutionDate;\r",
													"    let responseBodyExecutionDate = JSON.parse(responseBody).paymentInformation.requestedExecutionDate;   \r",
													"    pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate);\r",
													"\r",
													"    //Validate if creditor agent is correct\r",
													"    let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent.bic;\r",
													"    let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent.bic;\r",
													"    pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
													"    \r",
													"    //Validate if debtor address is correct\r",
													"    let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
													"    let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
													"    pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName);\r",
													"    pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
													"    pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
													"    \r",
													"    //Validate if debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo;   \r",
													"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    \r",
													"    //Validate if creditor account is correct\r",
													"    let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
													"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;\r",
													"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"    \r",
													"    //Validate if structured remittance information is correct\r",
													"    let requestBodyStructuredRemittance = JSON.parse(request.data).paymentInformation.remittanceInformation.structured;\r",
													"    let responseBodyStructuredRemittance = JSON.parse(responseBody).paymentInformation.remittanceInformation.structured;\r",
													"    pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance);\r",
													"    \r",
													"    // check if payment is created\r",
													"    if (pm.response.code == 201){\r",
													"        var responseData = JSON.parse(responseBody);\r",
													"        pm.environment.set(\"newPaymentSepaID\", responseData.paymentId);\r",
													"        console.log(\"New SEPA payment ID: \" + pm.environment.get(\"newPaymentSepaID\"));\r",
													"        // Store the used parameters (test relevant)\r",
													"        pm.environment.set(\"instructedAmount\", (JSON.parse(request.data).paymentInformation.instructedAmount));\r",
													"        pm.environment.set(\"requestedExecutionDate\", (JSON.parse(request.data).paymentInformation.requestedExecutionDate));        \r",
													"    }\r",
													"    else {\r",
													"        console.log(\"Failed to create SEPA payment with ID:\" + pm.environment.get(\"newPaymentSepaID\"));\r",
													"        pm.environment.unset(\"newPaymentSepaID\");\r",
													"    }\r",
													"});\r",
													"\r",
													"//Clean up: call global function to delete created Sepa payment\r",
													"if (pm.response.code == 201){\r",
													"    eval(globals.paymentSepaDelete)();\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"storeOnly\": false,\r\n\t\"locked\": false,\r\n\t\"paymentInformation\": {\r\n\t\t\"endToEndId\": {{endToEndId}},\r\n\t\t\"instructedAmount\": {\r\n\t\t\t\"currency\": {\r\n\t\t\t\t\"code\": \"EUR\"\r\n\t\t\t},\r\n\t\t\t\"value\": 312.00\r\n\t\t},\r\n\t\t\"remittanceInformation\": {\r\n\t\t\t\"unstructured\": {{unstructured}},\r\n\t\t\t\"structured\": {{structuredRemittanceRF}}\r\n\t\t},\r\n\t\t\"instructionIdentification\": {{instructionIdentification}},\r\n\t\t\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\t\"instructionPriority\": \"NORMAL\",\r\n\t\t\"creditor\": {\r\n\t\t\t\"name\": {{name}},\r\n\t\t\t\"address\": {\r\n\t\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\t\"townName\": {{townName}},\r\n\t\t\t\t\"country\": {{country}}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"creditorAccountNo\": {{creditorAccountNoSEPA}},\r\n\t\t\"creditorAgent\": {\r\n\t\t\t\"bic\": {{creditorAgentBicSEPA}}\r\n\t\t},\r\n\t\t\"debtor\": {\r\n\t\t\t\"name\": {{debtorAccountName}},\r\n\t\t\t\"address\": {\r\n\t\t\t\t\"streetName\": {{debtorStreetName}},\r\n\t\t\t\t\"postalCode\": {{debtorPostalCode}},\r\n\t\t\t\t\"townName\": {{debtorTownName}}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"debtorAccountNo\":  {{debtorAccountNo}}\r\n\t}\r\n}"
										},
										"url": {
											"raw": "{{env_payments}}/banking-api/payment/sepa/{{tenant}}/v2/credittransfer",
											"host": [
												"{{env_payments}}"
											],
											"path": [
												"banking-api",
												"payment",
												"sepa",
												"{{tenant}}",
												"v2",
												"credittransfer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Deliver SEPA payment (C34775338)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9c72540c-8b6e-4022-beb7-ef4a180f1b6b",
												"exec": [
													"eval(globals.generateAccessToken)();\r",
													"//Pre-condition: call global function to create Sepa payment\r",
													"setTimeout(function(){eval(globals.paymentSepaCreate)();}, 1000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "05a88f70-ba02-48cd-9fae-2c7979c3c899",
												"exec": [
													"//Validate results\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" SEPA payment is delivered\", function () {\r",
													"\r",
													"    //Validate if execution status is correct\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Validate if instructed amount is correct\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(pm.environment.get(\"instructedAmount\"));\r",
													"    \r",
													"    //Validate if execution date is correct\r",
													"    let requestBodyExecutionDate = JSON.parse(request.data).paymentInformation.requestedExecutionDate;\r",
													"    let responseBodyExecutionDate = JSON.parse(responseBody).paymentInformation.requestedExecutionDate;  \r",
													"    pm.expect(responseBodyExecutionDate).to.eql(pm.environment.get(\"requestedExecutionDate\"));\r",
													"\r",
													"    //Validate if creditor agent is correct\r",
													"    let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent.bic;\r",
													"    pm.expect(responseBodyCreditorAgent).to.eql(JSON.parse(pm.environment.get(\"creditorAgentBicSEPA\")));\r",
													"    \r",
													"    //Validate if debtor address is correct\r",
													"    let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
													"    let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
													"    pm.expect(responseBodyDebtorAddress.streetName).to.eql(JSON.parse(pm.environment.get(\"debtorStreetName\")));\r",
													"    pm.expect(responseBodyDebtorAddress.postalCode).to.eql(JSON.parse(pm.environment.get(\"debtorPostalCode\")));\r",
													"    pm.expect(responseBodyDebtorAddress.townName).to.eql(JSON.parse(pm.environment.get(\"debtorTownName\")));    \r",
													"    \r",
													"    //Validate if debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo; \r",
													"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    \r",
													"    //Validate if creditor account is correct\r",
													"    let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
													"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;  \r",
													"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"    \r",
													"    //Validate if structured remittance information is correct\r",
													"    let requestBodyStructuredRemittance = JSON.parse(request.data).paymentInformation.remittanceInformation.structured;\r",
													"    let responseBodyStructuredRemittance = JSON.parse(responseBody).paymentInformation.remittanceInformation.structured; \r",
													"    pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance);\r",
													"});\r",
													"\r",
													"//Clean up: call global function to delete created Sepa payment\r",
													"if (pm.response.code == 200){\r",
													"    eval(globals.paymentSepaDelete)();\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"storeOnly\": false,\r\n    \"locked\": false,\r\n    \"paymentInformation\": {\r\n        \"endToEndId\": {{endToEndId}},\r\n        \"instructedAmount\": {\r\n            \"currency\": {\r\n                \"code\": \"EUR\"\r\n            },\r\n            \"value\": 312.00\r\n        },\r\n        \"remittanceInformation\": {\r\n            \"unstructured\": {{unstructured}},\r\n            \"structured\": {{structuredRemittanceRF}}\r\n        },\r\n        \"instructionIdentification\": {{instructionIdentification}},\r\n        \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n        \"instructionPriority\": \"NORMAL\",\r\n        \"creditor\": {\r\n            \"name\": {{name}},\r\n            \"address\": {\r\n                \"adrLine1\": {{adrLine1}},\r\n                \"adrLine2\": {{adrLine2}},\r\n                \"streetName\": {{streetName}},\r\n                \"buildingNm\": {{buildingNm}},\r\n                \"postalCode\": {{postalCode}},\r\n                \"townName\": {{townName}},\r\n                \"country\": {{country}}\r\n            }\r\n        },\r\n        \"creditorAccountNo\": {{creditorAccountNoSEPA}},\r\n        \"creditorAgent\": {\r\n            \"bic\": {{creditorAgentBicSEPA}}\r\n        },\r\n        \"debtor\": {\r\n            \"name\": {{debtorAccountName}},\r\n            \"address\": {\r\n                \"streetName\": {{debtorStreetName}},\r\n                \"postalCode\": {{debtorPostalCode}},\r\n                \"townName\": {{debtorTownName}}\r\n            }\r\n        },\r\n        \"debtorAccountNo\":  {{debtorAccountNo}}\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{env_payments}}/banking-api/payment/sepa/{{tenant}}/v2/credittransfer/{{newPaymentSepaID}}",
											"host": [
												"{{env_payments}}"
											],
											"path": [
												"banking-api",
												"payment",
												"sepa",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"{{newPaymentSepaID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update SEPA payment (C36275415)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96ee9651-4e6e-4a83-a257-55d56e136859",
												"exec": [
													"//Validate results\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" SEPA payment is updated\", function () {\r",
													"\r",
													"    //Validate if execution status is correct\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Validate if instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    \r",
													"    //Validate if execution date is correct    \r",
													"    let requestBodyExecutionDate = JSON.parse(request.data).paymentInformation.requestedExecutionDate;\r",
													"    let responseBodyExecutionDate = JSON.parse(responseBody).paymentInformation.requestedExecutionDate;    \r",
													"    pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate);\r",
													"    \r",
													"    //Validate if creditor agent is correct    \r",
													"    let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent.bic;\r",
													"    let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent.bic;\r",
													"    pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
													"    \r",
													"    //Validate if debtor address is correct    \r",
													"    let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
													"    let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
													"    pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName);\r",
													"    pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
													"    pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
													"    \r",
													"    //Validate if debtor account is correct    \r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo;   \r",
													"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    \r",
													"    //Validate if creditor account is correct    \r",
													"    let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
													"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;   \r",
													"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"    \r",
													"    //Validate if structured remittance information is correct\r",
													"    let requestBodyStructuredRemittance = JSON.parse(request.data).paymentInformation.remittanceInformation.structured;\r",
													"    let responseBodyStructuredRemittance = JSON.parse(responseBody).paymentInformation.remittanceInformation.structured; \r",
													"    pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance);\r",
													"});\r",
													"\r",
													"//Clean up: call global function to delete created Sepa payment\r",
													"if (pm.response.code == 200){\r",
													"    eval(globals.paymentSepaDelete)();\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ed4149e4-3b82-4013-8999-2fa27812ab16",
												"exec": [
													"eval(globals.generateAccessToken)();",
													"setTimeout(function(){eval(globals.randomizeVariables)();}, 1000);",
													"//Pre-condition: call global function to create Sepa payment",
													"setTimeout(function(){eval(globals.paymentSepaCreate)();}, 1500);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "content-type",
												"value": "application/json; charset=UTF-8"
											},
											{
												"key": "accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"storeOnly\": false,\r\n    \"locked\": false,\r\n    \"paymentInformation\": {\r\n        \"endToEndId\": {{endToEndId}},\r\n        \"instructedAmount\": {\r\n            \"currency\": {\r\n                \"code\": \"EUR\"\r\n            },\r\n            \"value\": 122.00\r\n        },\r\n        \"remittanceInformation\": {\r\n            \"unstructured\": {{unstructured}},\r\n            \"structured\": {{structuredRemittanceRF}}\r\n        },\r\n        \"instructionIdentification\": {{instructionIdentification}},\r\n        \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n        \"instructionPriority\": \"NORMAL\",\r\n        \"creditor\": {\r\n            \"name\": {{name}},\r\n            \"address\": {\r\n                \"adrLine1\": {{adrLine1}},\r\n                \"adrLine2\": {{adrLine2}},\r\n                \"streetName\": {{streetName}},\r\n                \"buildingNm\": {{buildingNm}},\r\n                \"postalCode\": {{postalCode}},\r\n                \"townName\": {{townName}},\r\n                \"country\": {{country}}\r\n            }\r\n        },\r\n        \"creditorAccountNo\": {{creditorAccountNoSEPA}},\r\n        \"creditorAgent\": {\r\n            \"bic\": {{creditorAgentBicSEPA}}\r\n        },\r\n        \"debtor\": {\r\n            \"name\": {{debtorAccountName}},\r\n            \"address\": {\r\n                \"streetName\": {{debtorStreetName}},\r\n                \"postalCode\": {{debtorPostalCode}},\r\n                \"townName\": {{debtorTownName}}\r\n            }\r\n        },\r\n        \"debtorAccountNo\":  {{debtorAccountNo}}\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{env_payments}}/banking-api/payment/sepa/{{tenant}}/v2/credittransfer/{{newPaymentSepaID}}",
											"host": [
												"{{env_payments}}"
											],
											"path": [
												"banking-api",
												"payment",
												"sepa",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"{{newPaymentSepaID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete SEPA payment (C36240104)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b805315b-12ae-4f45-85f9-14230e6cb91e",
												"exec": [
													"//Validate results\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" SEPA payment is deleted\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Log important stuff\r",
													"if (pm.response.code == 200){\r",
													"    console.log(\"Deleted SEPA payment ID:\" + pm.environment.get(\"newPaymentSepaID\"));\r",
													"    pm.environment.set(\"deletedPaymentSepaID\",pm.environment.get(\"newPaymentSepaID\"));\r",
													"    pm.environment.unset(\"newPaymentSepaID\");\r",
													"}\r",
													"else {\r",
													"    console.log(\"Failed to delete SEPA payment with ID: \" + pm.environment.get(\"newPaymentSepaID\"));\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8b0efd50-c002-40d7-bf02-ad82c22ce7a7",
												"exec": [
													"eval(globals.generateAccessToken)();",
													"//Pre-condition: call global function to create Sepa payment",
													"setTimeout(function(){eval(globals.paymentSepaCreate)();}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_payments}}/banking-api/payment/sepa/{{tenant}}/v2/credittransfer/{{newPaymentSepaID}}",
											"host": [
												"{{env_payments}}"
											],
											"path": [
												"banking-api",
												"payment",
												"sepa",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"{{newPaymentSepaID}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Swiss",
							"item": [
								{
									"name": "Orange",
									"item": [
										{
											"name": "Standing order",
											"item": [
												{
													"name": "Create Orange (standing order) payment (C49915384)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "31ab74fa-6b4d-4d44-af5a-67c9bf520b43",
																"exec": [
																	"//Validate results\r",
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Orange (standing order) payment is created and assertions are passed\", function () {\r",
																	"\r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    \r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    \r",
																	"    //Postal account is correct\r",
																	"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
																	"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo; \r",
																	"    pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
																	"    \r",
																	"    //categoryPurposeCode is correct\r",
																	"    let requestBodyCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
																	"    let responseBodyCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode; \r",
																	"    pm.expect(responseBodyCategoryPurposeCode).to.eql(requestBodyCategoryPurposeCode);\r",
																	"    \r",
																	"    //Standing order info is correct\r",
																	"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
																	"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
																	"    pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"    \r",
																	"    //Remittance Information is correct\r",
																	"    let requestBodyRemittanceInformation = JSON.parse(request.data).remittanceInformation;\r",
																	"    let responseBodyRemittanceInformation = JSON.parse(responseBody).remittanceInformation; \r",
																	"    pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
																	"\r",
																	"    // check if payment is created\r",
																	"    if (pm.response.to.have.status(201)){\r",
																	"        var responseData = JSON.parse(responseBody);\r",
																	"        pm.environment.set(\"newPaymentOrangeID\", responseData.paymentId);\r",
																	"        pm.environment.set(\"newPaymentOrangeStOrInfo\", responseData.standingOrder);\r",
																	"        console.log(\"New Orange (standing order) payment ID: \" + pm.environment.get(\"newPaymentOrangeID\"));\r",
																	"    }\r",
																	"    else {\r",
																	"        console.log(\"Failed to create Orange (standing order) payment\");\r",
																	"    }\r",
																	"});\r",
																	"\r",
																	"//Clean up: call global function to delete created Orange (standing order) payment\r",
																	"if (pm.response.code == 201){\r",
																	"    eval(globals.paymentOrangeDelete)();\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "a0d60bb2-3d87-4db0-8d65-c2af10f01cfd",
																"exec": [
																	"eval(globals.generateAccessToken)();",
																	"setTimeout(function(){eval(globals.randomizeVariables)();}, 1000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"creditorAccountNo\":  {{orangeAccountNo}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.01\r\n    },\r\n    \"structuredRemittanceInformation\": {{structuredRemittanceOrange}},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n    \"debitNote\": \"Expenses during company trip\",\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
														},
														"url": {
															"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/orange/",
															"host": [
																"{{env_payments}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"orange",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Deliver Orange (standing order) payment (C49915385)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "322f8b16-9b48-4ec1-92f3-2567bbb81bd8",
																"exec": [
																	"//Validate results\r",
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Orange (standing order) payment is retrieved and assertions are passed\", function () {\r",
																	"\r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    \r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    \r",
																	"    //Postal account is correct\r",
																	"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
																	"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
																	"    pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
																	"    \r",
																	"    //Category purpose code is correct\r",
																	"    let requestBodyResponseCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
																	"    let responseBodyResponseCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode;   \r",
																	"    pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
																	"    \r",
																	"    //Standing order info is correct\r",
																	"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
																	"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
																	"    pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"    \r",
																	"    //Remittance Information is correct\r",
																	"    let requestBodyRemittanceInformation = JSON.parse(request.data).remittanceInformation;\r",
																	"    let responseBodyRemittanceInformation = JSON.parse(responseBody).remittanceInformation; \r",
																	"    pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
																	"});\r",
																	"\r",
																	"//Clean up: call global function to delete created Orange (standing order) payment\r",
																	"if (pm.response.code == 200){\r",
																	"    eval(globals.paymentOrangeDelete)();\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "d528176e-6d1f-4a76-8c8f-3eea79288fbe",
																"exec": [
																	"eval(globals.generateAccessToken)();\r",
																	"//Pre-condition: call global function to create Orange (standing order) payment\r",
																	"setTimeout(function(){eval(globals.paymentOrangeSoCreate)();}, 1000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"creditorAccountNo\":  {{orangeAccountNo}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.01\r\n    },\r\n    \"structuredRemittanceInformation\": {{structuredRemittanceOrange}},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n    \"debitNote\": \"Expenses during company trip\",\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
														},
														"url": {
															"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/orange/{{newPaymentOrangeID}}",
															"host": [
																"{{env_payments}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"orange",
																"{{newPaymentOrangeID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update Orange (standing order) payment (C49915387)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "de0cb7b1-d454-41be-8806-66bc76d4fd2c",
																"exec": [
																	"//Validate results\r",
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Orange (standing order) payment is created and assertions are passed\", function () {\r",
																	"\r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    \r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    \r",
																	"    //Postal account is correct\r",
																	"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
																	"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
																	"    pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
																	"    \r",
																	"    //Category purpose code is correct\r",
																	"    let requestBodyResponseCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
																	"    let responseBodyResponseCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode; \r",
																	"    pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
																	"    \r",
																	"    //Standing order info is correct\r",
																	"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
																	"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
																	"    pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"    \r",
																	"    //Remittance Information is correct\r",
																	"    let requestBodyRemittanceInformation = JSON.parse(request.data).remittanceInformation;\r",
																	"    let responseBodyRemittanceInformation = JSON.parse(responseBody).remittanceInformation; \r",
																	"    pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
																	"});\r",
																	"\r",
																	"//Clean up: call global function to delete created Orange (standing order) payment\r",
																	"if (pm.response.code == 200){\r",
																	"    eval(globals.paymentOrangeDelete)();\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "b7716df7-9d6e-44ef-9a82-cd9da3e2bcb2",
																"exec": [
																	"eval(globals.generateAccessToken)();",
																	"setTimeout(function(){eval(globals.randomizeVariables)();}, 1000);",
																	"//Pre-condition: call global function to create Orange (standing order) payment",
																	"setTimeout(function(){eval(globals.paymentOrangeSoCreate)();}, 1500);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"creditorAccountNo\":  {{orangeAccountNo}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.02\r\n    },\r\n    \"structuredRemittanceInformation\": {{structuredRemittanceOrange}},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n    \"debitNote\": \"Expenses during company trip\",\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": true\t\t\r\n\t}\r\n}"
														},
														"url": {
															"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/orange/{{newPaymentOrangeID}}",
															"host": [
																"{{env_payments}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"orange",
																"{{newPaymentOrangeID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Orange (standing order) payment (C49915386)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "b052005f-2923-4187-b074-d57b9d528ac5",
																"exec": [
																	"//Validate results\r",
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Orange (standing order) payment is deleted and not exists anymore\", function () {\r",
																	"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
																	"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.expect(responseBodyStatus).to.eql(true);\r",
																	"    pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
																	"});\r",
																	"\r",
																	"// Log important stuff\r",
																	"if (pm.response.to.have.status(200)){\r",
																	"    console.log(\"Deleted Orange (standing order) payment ID:\" + pm.environment.get(\"newPaymentOrangeID\"));\r",
																	"    pm.environment.set(\"deletedPaymentOrangeID\",pm.environment.get(\"newPaymentOrangeID\"));\r",
																	"    pm.environment.unset(\"newPaymentOrangeID\");\r",
																	"    pm.environment.unset(\"newPaymentOrangeStOrInfo\");\r",
																	"}\r",
																	"else {\r",
																	"    console.log(\"Failed to delete Orange (standing order) payment with ID:\" + pm.environment.get(\"newPaymentOrangeID\"));\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c6432cf5-6612-4349-bfe9-09f07fb5ad81",
																"exec": [
																	"eval(globals.generateAccessToken)();",
																	"//Pre-condition: call global function to create Orange (standing order) payment",
																	"setTimeout(function(){eval(globals.paymentOrangeSoCreate)();}, 1000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/orange/{{newPaymentOrangeID}}",
															"host": [
																"{{env_payments}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"orange",
																"{{newPaymentOrangeID}}"
															]
														}
													},
													"response": []
												}
											],
											"_postman_isSubFolder": true
										},
										{
											"name": "Create Orange payment (C48109263)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7865f16f-6d20-42b5-8eba-1f36d56c12fe",
														"exec": [
															"//Validate results\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Orange payment is created and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    \r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    \r",
															"    //Postal account is correct\r",
															"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
															"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo; \r",
															"    pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
															"    \r",
															"    //Remittance Information is correct\r",
															"    let requestBodyRemittanceInformation = JSON.parse(request.data).remittanceInformation;\r",
															"    let responseBodyRemittanceInformation = JSON.parse(responseBody).remittanceInformation; \r",
															"    pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
															"    \r",
															"    // check if payment is created\r",
															"    if (pm.response.to.have.status(201)){\r",
															"        var responseData = JSON.parse(responseBody);\r",
															"        pm.environment.set(\"newPaymentOrangeID\", responseData.paymentId);\r",
															"        console.log(\"New Orange payment ID: \" + pm.environment.get(\"newPaymentOrangeID\"));\r",
															"    }\r",
															"    else {\r",
															"        console.log(\"Failed to create Orange payment\");\r",
															"    }\r",
															"});\r",
															"\r",
															"//Clean up: call global function to delete created Orange payment\r",
															"if (pm.response.code == 201){\r",
															"    eval(globals.paymentOrangeDelete)();\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "43ec7908-90fa-4ed3-aeb0-469e63bed2c8",
														"exec": [
															"eval(globals.generateAccessToken)();",
															"setTimeout(function(){eval(globals.randomizeVariables)();}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"creditorAccountNo\":  {{orangeAccountNo}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.01\r\n    },\r\n    \"structuredRemittanceInformation\": {{structuredRemittanceOrange}},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n    \"debitNote\": \"Expenses during company trip\"\r\n}"
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/orange/",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"orange",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Deliver Orange payment (C49915362)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c0ad3113-3213-4a17-b4ba-bd7b37c92701",
														"exec": [
															"//Validate results\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Orange payment is retrieved and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    \r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    \r",
															"    //Postal account is correct\r",
															"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
															"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo; \r",
															"    pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
															"    \r",
															"    //Remittance Information is correct\r",
															"    let requestBodyRemittanceInformation = JSON.parse(request.data).remittanceInformation;\r",
															"    let responseBodyRemittanceInformation = JSON.parse(responseBody).remittanceInformation; \r",
															"    pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
															"});\r",
															"\r",
															"//Clean up: call global function to delete created Orange payment\r",
															"if (pm.response.code == 200){\r",
															"    eval(globals.paymentOrangeDelete)();\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ce014b34-a6c2-4f4b-8888-24c6fb947e85",
														"exec": [
															"eval(globals.generateAccessToken)();\r",
															"//Pre-condition: call global function to create Orange payment\r",
															"setTimeout(function(){eval(globals.paymentOrangeCreate)();}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"creditorAccountNo\":  {{orangeAccountNo}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.01\r\n    },\r\n    \"structuredRemittanceInformation\": {{structuredRemittanceOrange}},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n    \"debitNote\": \"Expenses during company trip\"\r\n}"
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/orange/{{newPaymentOrangeID}}",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"orange",
														"{{newPaymentOrangeID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Orange payment (C48109272)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6f176309-21db-4d5d-a0cb-862f288f13c4",
														"exec": [
															"//Validate results\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Orange payment is created and assertions are passed\", function () {\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    \r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"\r",
															"    //Postal account is correct\r",
															"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
															"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
															"    pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
															"\r",
															"    //Remittance Information is correct\r",
															"    let requestBodyRemittanceInformation = JSON.parse(request.data).remittanceInformation;\r",
															"    let responseBodyRemittanceInformation = JSON.parse(responseBody).remittanceInformation; \r",
															"    pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
															"});\r",
															"\r",
															"//Clean up: call global function to delete created Orange payment\r",
															"if (pm.response.code == 200){\r",
															"    eval(globals.paymentOrangeDelete)();\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f4270e1f-0e4c-4ef5-b43f-47ea37b0030c",
														"exec": [
															"eval(globals.generateAccessToken)();",
															"setTimeout(function(){eval(globals.randomizeVariables)();}, 1000);",
															"//Pre-condition: call global function to create Orange payment",
															"setTimeout(function(){eval(globals.paymentOrangeCreate)();}, 1500);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"creditorAccountNo\":  {{orangeAccountNo}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.02\r\n    },\r\n    \"structuredRemittanceInformation\": {{structuredRemittanceOrange}},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n    \"debitNote\": \"Expenses during private trip\"\r\n}"
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/orange/{{newPaymentOrangeID}}",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"orange",
														"{{newPaymentOrangeID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Orange payment (C49915363)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "92fd80cf-1182-4d29-97ab-fef9cc0b49d3",
														"exec": [
															"//Validate results\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Orange payment is deleted and not exists anymore\", function () {\r",
															"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
															"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
															"    pm.response.to.have.status(200); \r",
															"    pm.expect(responseBodyStatus).to.eql(true);\r",
															"    pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
															"});\r",
															"\r",
															"// Log important stuff\r",
															"if (pm.response.code == 200){\r",
															"    console.log(\"Deleted Orange payment ID:\" + pm.environment.get(\"newPaymentOrangeID\"));\r",
															"    pm.environment.set(\"deletedPaymentOrangeID\",pm.environment.get(\"newPaymentOrangeID\"));\r",
															"    pm.environment.unset(\"newPaymentOrangeID\");\r",
															"}\r",
															"else {\r",
															"    console.log(\"Failed to delete Orange payment with ID:\" + pm.environment.get(\"newPaymentOrangeID\"));\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f11ec94c-1897-45fd-9d8f-6d4d1edf00d1",
														"exec": [
															"eval(globals.generateAccessToken)();",
															"//Pre-condition: call global function to create Orange payment",
															"setTimeout(function(){eval(globals.paymentOrangeCreate)();}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/orange/{{newPaymentOrangeID}}",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"orange",
														"{{newPaymentOrangeID}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Red",
									"item": [
										{
											"name": "Standing order",
											"item": [
												{
													"name": "Create Red (standing order) payment (C52949280)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "870c5874-a029-447a-9a85-9312132fe949",
																"exec": [
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Red payment (standing order) is created and assertions are passed\", function () {\r",
																	"\r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    \r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    \r",
																	"    //Postal account is correct\r",
																	"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
																	"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;  \r",
																	"    pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
																	"    \r",
																	"    //Standing order info is correct\r",
																	"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
																	"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder;\r",
																	"    pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"    \r",
																	"    //Remittance information is correct\r",
																	"    let requestBodyRemittanceInformation = JSON.parse(request.data).RemittanceInformation;\r",
																	"    let responseBodyRemittanceInformation = JSON.parse(responseBody).RemittanceInformation; \r",
																	"    pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
																	"    \r",
																	"    // check if payment is created\r",
																	"    if (pm.response.to.have.status(201)){\r",
																	"        var responseData = JSON.parse(responseBody);\r",
																	"         pm.globals.set(\"newPaymentRedID\", responseData.paymentId);\r",
																	"        pm.globals.set(\"newPaymentRedStOrInfo\", responseData.standingOrder);\r",
																	"        console.log(\"New Red payment (standing order) ID: \" + pm.globals.get(\"newPaymentRedID\"));\r",
																	"    }\r",
																	"    else {\r",
																	"        console.log(\"Failed to create Red payment (standing order)\");\r",
																	"    }\r",
																	"});\r",
																	"\r",
																	"//Clean up: call global function to delete created Red payment\r",
																	"if (pm.response.code == 201){\r",
																	"    eval(globals.paymentRedDelete)();\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "2131bdfd-43a5-49ad-bf29-71737aaa9e1d",
																"exec": [
																	"eval(globals.generateAccessToken)();",
																	"setTimeout(function(){eval(globals.randomizeVariables)();}, 1000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"postalAccountNo\": {{postalAccountNo}},\t\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t  \r\n    \"remittanceInformation\": {\r\n        \"unstructured\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\"\r\n    },\r\n    \"debitNote\": \"Debit reference\",   \r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}}, \r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
														},
														"url": {
															"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/red",
															"host": [
																"{{env_payments}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"red"
															]
														}
													},
													"response": []
												},
												{
													"name": "Deliver Red (standing order) payment (C52992053)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "f4d83bcc-5fde-4f5f-8c08-65ceefe8f1f3",
																"exec": [
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Red payment (standing order) is retrieved and assertions are passed\", function () {\r",
																	"\r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    \r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    \r",
																	"    //Postal account is correct\r",
																	"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
																	"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
																	"    pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
																	"    \r",
																	"    //Standing order info is correct\r",
																	"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
																	"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder;\r",
																	"    pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"    \r",
																	"    //Remittance information is correct\r",
																	"    let requestBodyRemittanceInformation = JSON.parse(request.data).RemittanceInformation;\r",
																	"    let responseBodyRemittanceInformation = JSON.parse(responseBody).RemittanceInformation; \r",
																	"    pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
																	"    \r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//Clean up: call global function to delete created Red payment\r",
																	"if (pm.response.code == 201){\r",
																	"    eval(globals.paymentRedDelete)();\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c5195533-b8b7-43d2-aecc-58dae7055210",
																"exec": [
																	"eval(globals.generateAccessToken)();\r",
																	"//Pre-condition: call global function to create Red (standing order) payment\r",
																	"setTimeout(function(){eval(globals.paymentRedSoCreate)();}, 1000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"remittanceInformation\": {\r\n        \"unstructured\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\"\r\n    },\r\n\t\"postalAccountNo\": {{postalAccountNo}},\t\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
														},
														"url": {
															"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/red/{{newPaymentRedID}}",
															"host": [
																"{{env_payments}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"red",
																"{{newPaymentRedID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update Red (standing order) payment (C52949281)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "d08c7627-cc81-483c-a4b5-370e06eb9716",
																"exec": [
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Red payment (standing order) is updated and assertions are passed\", function () {\r",
																	"\r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    \r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    \r",
																	"    //Postal account is correct\r",
																	"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
																	"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
																	"    pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
																	"    \r",
																	"    //Standing order info is correct\r",
																	"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
																	"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder;\r",
																	"    pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"    \r",
																	"    //Remittance information is correct\r",
																	"    let requestBodyRemittanceInformation = JSON.parse(request.data).RemittanceInformation;\r",
																	"    let responseBodyRemittanceInformation = JSON.parse(responseBody).RemittanceInformation; \r",
																	"    pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
																	"    \r",
																	"    pm.response.to.have.status(200);\r",
																	"\r",
																	"});\r",
																	"\r",
																	"//Clean up: call global function to delete created Red payment\r",
																	"if (pm.response.code == 200){\r",
																	"    eval(globals.paymentRedDelete)();\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "52f8511d-93d7-466f-ad15-ff6cf621a0dc",
																"exec": [
																	"eval(globals.generateAccessToken)();",
																	"setTimeout(function(){eval(globals.randomizeVariables)();}, 1000);",
																	"//Pre-condition: call global function to create Red (standing) payment",
																	"setTimeout(function(){eval(globals.paymentRedSoCreate)();}, 1500);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"storeOnly\": false,\r\n\t\"locked\": false,       \r\n\t\"postalAccountNo\": {{postalAccountNo}},\t\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.02\r\n\t},\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
														},
														"url": {
															"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/red/{{newPaymentRedID}}",
															"host": [
																"{{env_payments}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"red",
																"{{newPaymentRedID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Red (standing order) payment (C52992055)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "605d9c26-dcb5-4b4b-8375-02963c18e1a5",
																"exec": [
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Red (standing order) payment is deleted and not exists anymore\", function () {\r",
																	"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
																	"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.expect(responseBodyStatus).to.eql(true);\r",
																	"    pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
																	"});\r",
																	"\r",
																	"// Log important stuff\r",
																	"if (pm.response.to.have.status(200)){\r",
																	"    console.log(\"Deleted Red (standing order) payment ID:\" + pm.globals.get(\"newPaymentRedID\"));\r",
																	"    pm.globals.set(\"deletedPaymentRedID\",pm.globals.get(\"newPaymentRedID\"));\r",
																	"    pm.globals.unset(\"newPaymentRedID\");\r",
																	"    pm.globals.unset(\"newPaymentRedStOrInfo\");\r",
																	"}\r",
																	"else {\r",
																	"    console.log(\"Failed to delete Red (standing order) payment with ID:\" + pm.globals.get(\"newPaymentRedID\"));\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "d5c1a20a-0e2c-485f-aad3-16319786b651",
																"exec": [
																	"eval(globals.generateAccessToken)();",
																	"//Pre-condition: call global function to create Red (standing order) payment",
																	"setTimeout(function(){eval(globals.paymentRedSoCreate)();}, 1000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{token}}",
																"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
																"disabled": true
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/red/{{newPaymentRedID}}",
															"host": [
																"{{env_payments}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"red",
																"{{newPaymentRedID}}"
															]
														}
													},
													"response": []
												}
											],
											"_postman_isSubFolder": true
										},
										{
											"name": "Create Red payment (C51026510)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ab95b32e-c392-49e0-9310-46388960361a",
														"exec": [
															"//Validate results\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Red payment is created and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    \r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    \r",
															"    //Postal account is correct\r",
															"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
															"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo; \r",
															"    pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
															"    \r",
															"    //Remittance information is correct\r",
															"    let requestBodyRemittanceInformation = JSON.parse(request.data).RemittanceInformation;\r",
															"    let responseBodyRemittanceInformation = JSON.parse(responseBody).RemittanceInformation; \r",
															"    pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
															"\r",
															"\r",
															"    // check if payment is created\r",
															"    if (pm.response.to.have.status(201)){\r",
															"        var responseData = JSON.parse(responseBody);\r",
															"        pm.environment.set(\"newPaymentRedID\", responseData.paymentId);\r",
															"        console.log(\"New Red payment ID: \" + pm.environment.get(\"newPaymentRedID\"));\r",
															"    }\r",
															"    else {\r",
															"        console.log(\"Failed to create Red payment\");\r",
															"    }\r",
															"});\r",
															"\r",
															"//Clean up: call global function to delete created Red payment\r",
															"if (pm.response.code == 201){\r",
															"    eval(globals.paymentRedDelete)();\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1a6ceb6b-a729-43ca-8095-c36e90996703",
														"exec": [
															"eval(globals.generateAccessToken)();",
															"setTimeout(function(){eval(globals.randomizeVariables)();}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"postalAccountNo\": {{postalAccountNo}},\t\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t  \r\n    \"remittanceInformation\": {\r\n        \"unstructured\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\"\r\n    },\r\n    \"debitNote\": \"Debit reference\",    \r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t}\r\n}"
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/red",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"red"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deliver Red payment (C51026511)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "654a109e-93b5-414d-8250-ddcc710cb544",
														"exec": [
															"//Validate results\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Red payment is retrieved and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    \r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    \r",
															"    //Postal account is correct\r",
															"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
															"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
															"    pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
															"    \r",
															"    //Remittance information is correct\r",
															"    let requestBodyRemittanceInformation = JSON.parse(request.data).RemittanceInformation;\r",
															"    let responseBodyRemittanceInformation = JSON.parse(responseBody).RemittanceInformation; \r",
															"    pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
															"});\r",
															"\r",
															"//Clean up: call global function to delete created Red payment\r",
															"if (pm.response.code == 200){\r",
															"    eval(globals.paymentRedDelete)();\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "934b422b-6fc8-4c21-bd40-474c24a5ccf8",
														"exec": [
															"eval(globals.generateAccessToken)();\r",
															"//Pre-condition: call global function to create Red payment\r",
															"setTimeout(function(){eval(globals.paymentRedCreate)();}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n    \"remittanceInformation\": {\r\n        \"unstructured\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\"\r\n    },\r\n\t\"postalAccountNo\": {{postalAccountNo}},\t\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t}\r\n}"
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/red/{{newPaymentRedID}}",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"red",
														"{{newPaymentRedID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Red payment (C52889235)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5abb5b8e-c8dc-4731-a541-40b5d55e3c73",
														"exec": [
															"//Validate results\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Red payment is updated and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    \r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    \r",
															"    //Postal account is correct\r",
															"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
															"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
															"    pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
															"});\r",
															"\r",
															"//Clean up: call global function to delete created Red payment\r",
															"if (pm.response.code == 200){\r",
															"    eval(globals.paymentRedDelete)();\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "18e736de-b01c-4111-889a-8b9aeeee3b3e",
														"exec": [
															"eval(globals.generateAccessToken)();",
															"setTimeout(function(){eval(globals.randomizeVariables)();}, 1000);",
															"//Pre-condition: call global function to create Red payment",
															"setTimeout(function(){eval(globals.paymentRedCreate)();}, 1500);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"storeOnly\": false,\r\n\t\"locked\": false,       \r\n\t\"postalAccountNo\": {{postalAccountNo}},\t\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},    \r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.02\r\n\t}\r\n}"
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/red/{{newPaymentRedID}}",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"red",
														"{{newPaymentRedID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Red payment (C52889236)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8f0160e2-fd21-4896-8f51-5fbaa9ffc775",
														"exec": [
															"//Validate results\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Red payment is deleted and not exists anymore\", function () {\r",
															"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
															"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.expect(responseBodyStatus).to.eql(true);\r",
															"    pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
															"});\r",
															"\r",
															"// Log important stuff\r",
															"if (pm.response.to.have.status(200)){\r",
															"    console.log(\"Deleted Red payment ID:\" + pm.environment.get(\"newPaymentRedID\"));\r",
															"    pm.environment.set(\"deletedPaymentRedID\",pm.environment.get(\"newPaymentRedID\"));\r",
															"    pm.environment.unset(\"newPaymentRedID\");\r",
															"}\r",
															"else {\r",
															"    console.log(\"Failed to delete Red payment with ID:\" + pm.environment.get(\"newPaymentRedID\"));\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b0a25018-3fa7-4a18-9823-374422cd5906",
														"exec": [
															"eval(globals.generateAccessToken)();",
															"//Pre-condition: call global function to create Red payment",
															"setTimeout(function(){eval(globals.paymentRedCreate)();}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token}}",
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"disabled": true
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/red/{{newPaymentRedID}}",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"red",
														"{{newPaymentRedID}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Domestic",
									"item": [
										{
											"name": "Standing order",
											"item": [
												{
													"name": "Create Swiss domestic (standing order) payment (C45989795)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "e211b186-176e-48b0-b389-a0de926f3aef",
																"exec": [
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Swiss Domestic (standing order) payment is created and assertions are passed\", function () {\r",
																	"\r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    \r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    \r",
																	"    //Creditor account is correct\r",
																	"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
																	"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
																	"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
																	"    \r",
																	"    //chargesBearer is correct\r",
																	"    let responseBodyChargesBearer = JSON.parse(responseBody).chargesBearer; \r",
																	"    pm.expect(responseBodyChargesBearer).to.eql(\"SHAR\");\r",
																	"    \r",
																	"    //Standing order info is correct\r",
																	"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
																	"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
																	"    pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"    \r",
																	"    // check if payment is created\r",
																	"    if (pm.response.to.have.status(201)){\r",
																	"        var responseData = JSON.parse(responseBody);\r",
																	"        pm.globals.set(\"newPaymentDomesticID\", responseData.paymentId);\r",
																	"        pm.globals.set(\"newPaymentDomesticStOrInfo\", responseData.standingOrder);\r",
																	"        console.log(\"New Swiss Domestic (standing order) payment ID: \" + pm.globals.get(\"newPaymentDomesticID\"));\r",
																	"    }\r",
																	"    else {\r",
																	"        console.log(\"Failed to create Swiss Domestic (standing order) payment\");\r",
																	"    }\r",
																	"});\r",
																	"\r",
																	"//Clean up: call global function to delete created Domestic (standing order) payment\r",
																	"if (pm.response.code == 201){\r",
																	"    eval(globals.paymentDomesticDelete)();\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "8af75744-e90f-46e0-87f9-93ef669fe5fa",
																"exec": [
																	"eval(globals.generateAccessToken)();",
																	"setTimeout(function(){eval(globals.randomizeVariables)();}, 1000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoSwisDomestic}},\t\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"No debit information\",\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
														},
														"url": {
															"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/swiss/",
															"host": [
																"{{env_payments}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"swiss",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Deliver Swiss domestic (standing order) payment (C45989798)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "f099f638-e4c5-4d6f-a29d-7b48cb19a82c",
																"exec": [
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Swiss Domestic (standing order) payment is retrieved and assertions are passed\", function () {\r",
																	"\r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    \r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    \r",
																	"    //Creditor account is correct\r",
																	"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
																	"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
																	"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
																	"    \r",
																	"    //chargesBearer is correct\r",
																	"    let responseBodyChargesBearer = JSON.parse(responseBody).chargesBearer; \r",
																	"    pm.expect(responseBodyChargesBearer).to.eql(\"DEBT\");\r",
																	"    \r",
																	"    //Standing order info is correct\r",
																	"    let requestBodyStandingOrder = pm.environment.get(\"newPaymentDomesticStOrInfo\");\r",
																	"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
																	"    pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"});\r",
																	"\r",
																	"//Clean up: call global function to delete created Swiss Domnestic (standing order) payment\r",
																	"if (pm.response.code == 200){\r",
																	"    eval(globals.paymentDomesticDelete)();\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "cb881aa5-5c00-4045-b69d-12d0d5026b5f",
																"exec": [
																	"eval(globals.generateAccessToken)();\r",
																	"//Pre-condition: call global function to create Swiss Domestic (standing order) payment\r",
																	"setTimeout(function(){eval(globals.paymentDomesticSoCreate)();}, 1000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoSwisDomestic}},\t\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"No debit information\",\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
														},
														"url": {
															"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/swiss/{{newPaymentDomesticID}}",
															"host": [
																"{{env_payments}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"swiss",
																"{{newPaymentDomesticID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update Swiss domestic (standing order) payment (C45989796)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "24d2badb-88cf-4d86-a4ec-23f6ca4ecaae",
																"exec": [
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Swiss Domestic (standing order) payment is updated and assertions are passed\", function () {\r",
																	"\r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    \r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    \r",
																	"    //Creditor account is correct\r",
																	"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
																	"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
																	"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
																	"    \r",
																	"    //chargesBearer is correct\r",
																	"    let responseBodyChargesBearer = JSON.parse(responseBody).chargesBearer; \r",
																	"    pm.expect(responseBodyChargesBearer).to.eql(\"SHAR\");\r",
																	"    \r",
																	"    //Creditor info is correct\r",
																	"    let requestBodyCreditorInfo = JSON.parse(request.data).creditor;\r",
																	"    let responseBodyCreditorInfo = JSON.parse(responseBody).creditor; \r",
																	"    pm.expect(responseBodyCreditorInfo).to.eql(requestBodyCreditorInfo);\r",
																	"    \r",
																	"    //Debit note is correct\r",
																	"    let requestBodyDebitNote = JSON.parse(request.data).debitNote;\r",
																	"    let responseBodyDebitNote = JSON.parse(responseBody).debitNote; \r",
																	"    pm.expect(responseBodyDebitNote).to.eql(requestBodyDebitNote);\r",
																	"    \r",
																	"    //Standing order info is correct\r",
																	"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
																	"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
																	"    pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"});\r",
																	"\r",
																	"//Clean up: call global function to delete created Swiss Domnestic (standing order) payment\r",
																	"if (pm.response.code == 200){\r",
																	"    eval(globals.paymentDomesticDelete)();\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "91c366f4-91b6-4881-a626-f6f45fb23293",
																"exec": [
																	"eval(globals.generateAccessToken)();",
																	"setTimeout(function(){eval(globals.randomizeVariables)();}, 1000);",
																	"//Pre-condition: call global function to create Swiss Domestic (standing order) payment",
																	"setTimeout(function(){eval(globals.paymentDomesticSoCreate)();}, 1500);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoSwisDomestic}},\t\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.02\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"No debit information\",\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": true\t\t\r\n\t}\r\n}"
														},
														"url": {
															"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/swiss/{{newPaymentDomesticID}}",
															"host": [
																"{{env_payments}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"swiss",
																"{{newPaymentDomesticID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Swiss domestic (standing order) payment (C45989800)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "3a62feb7-b8de-4e54-90ee-a397b5b737a3",
																"exec": [
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Swiss Domestic (standing order) payment is deleted and not exists anymore\", function () {\r",
																	"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
																	"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
																	"    pm.response.to.have.status(200); \r",
																	"    pm.expect(responseBodyStatus).to.eql(true);\r",
																	"    pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
																	"});\r",
																	"\r",
																	"// Log important stuff\r",
																	"if (pm.response.to.have.status(200)){\r",
																	"    console.log(\"Deleted Swiss Domestic (standing order) payment ID:\" + pm.globals.get(\"newPaymentDomesticID\"));\r",
																	"    pm.globals.set(\"deletedDomesticPaymentID\",pm.globals.get(\"newPaymentDomesticID\"));\r",
																	"    pm.globals.unset(\"newPaymentDomesticID\");\r",
																	"    pm.globals.unset(\"newPaymentDomesticStOrInfo\");\r",
																	"}\r",
																	"else {\r",
																	"    console.log(\"Failed to delete Swiss Domestic (standing order) payment with ID:\" + pm.globals.get(\"newPaymentDomesticID\"));\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "e5cf2ede-61a0-4999-a2da-0859df76cb77",
																"exec": [
																	"eval(globals.generateAccessToken)();",
																	"//Pre-condition: call global function to create Domestic (standing order) payment",
																	"setTimeout(function(){eval(globals.paymentDomesticSoCreate)();}, 1000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{token}}",
																"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
																"disabled": true
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/swiss/{{newPaymentDomesticID}}",
															"host": [
																"{{env_payments}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"swiss",
																"{{newPaymentDomesticID}}"
															]
														}
													},
													"response": []
												}
											],
											"_postman_isSubFolder": true
										},
										{
											"name": "Create Swiss domestic payment (C45840620)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "50a7bd43-c9f2-4fbb-b759-7362bb5c20cf",
														"exec": [
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Swiss Domestic payment is created and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    \r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    \r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
															"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    \r",
															"    //chargesBearer is correct\r",
															"    let requestBodyChargesBearer = JSON.parse(request.data).chargesBearer;\r",
															"    let responseBodyChargesBearer = JSON.parse(responseBody).chargesBearer; \r",
															"    pm.expect(responseBodyChargesBearer).to.eql(requestBodyChargesBearer);\r",
															"    \r",
															"    // check if payment is created\r",
															"    if (pm.response.to.have.status(201)){\r",
															"        var responseData = JSON.parse(responseBody);\r",
															"        pm.globals.set(\"newPaymentDomesticID\", responseData.paymentId);\r",
															"        console.log(\"New Swiss Domestic payment ID: \" + pm.globals.get(\"newPaymentDomesticID\"));\r",
															"    }\r",
															"    else {\r",
															"        console.log(\"Failed to create Swiss Domestic payment\");\r",
															"    }\r",
															"});\r",
															"\r",
															"//Clean up: call global function to delete created Domestic payment\r",
															"if (pm.response.code == 201){\r",
															"    eval(globals.paymentDomesticDelete)();\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "bcd7c76b-0b6c-47f1-84a6-c58af26607fe",
														"exec": [
															"eval(globals.generateAccessToken)();",
															"setTimeout(function(){eval(globals.randomizeVariables)();}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoSwisDomestic}},\t\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"remittanceInformation\": {\r\n        \"unstructured\": \"unstructured\"\r\n    },    \r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"No new information needed\",\r\n    \"chargesBearer\": \"DEBT\"\r\n}"
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/swiss/",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"swiss",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Deliver Swiss domestic payment (C45989797)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6103ffb5-00e8-4dbb-88f8-35556a86d0e7",
														"exec": [
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Swiss Domestic payment is retrieved and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    \r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    \r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
															"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    \r",
															"    //chargesBearer is correct\r",
															"    let requestBodyChargesBearer = JSON.parse(request.data).chargesBearer;\r",
															"    let responseBodyChargesBearer = JSON.parse(responseBody).chargesBearer; \r",
															"    pm.expect(responseBodyChargesBearer).to.eql(requestBodyChargesBearer);\r",
															"});\r",
															"\r",
															"//Clean up: call global function to delete created Swiss Domnestic payment\r",
															"if (pm.response.code == 200){\r",
															"    eval(globals.paymentDomesticDelete)();\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0452d030-fd3d-45fd-a12e-87884059be24",
														"exec": [
															"eval(globals.generateAccessToken)();\r",
															"//Pre-condition: call global function to create Swiss Domestic payment\r",
															"setTimeout(function(){eval(globals.paymentDomesticCreate)();}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoSwisDomestic}},\t\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"remittanceInformation\": {\r\n        \"unstructured\": \"unstructured\"\r\n    },    \r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"No new information needed\",\r\n    \"chargesBearer\": \"DEBT\"\r\n}"
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/swiss/{{newPaymentDomesticID}}",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"swiss",
														"{{newPaymentDomesticID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Swiss domestic payment (C45840627)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c99db165-75c4-4058-881d-8c54916aed1d",
														"exec": [
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Swiss Domestic payment is updated and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    \r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    \r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
															"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    \r",
															"    //chargesBearer is correct\r",
															"    let requestBodyChargesBearer = JSON.parse(request.data).chargesBearer;\r",
															"    let responseBodyChargesBearer = JSON.parse(responseBody).chargesBearer; \r",
															"    pm.expect(responseBodyChargesBearer).to.eql(requestBodyChargesBearer);\r",
															"    \r",
															"    //Creditor info is correct\r",
															"    let requestBodyCreditorInfo = JSON.parse(request.data).creditor;\r",
															"    let responseBodyCreditorInfo = JSON.parse(responseBody).creditor; \r",
															"    pm.expect(responseBodyCreditorInfo).to.eql(requestBodyCreditorInfo);\r",
															"    \r",
															"    //Debit note is correct\r",
															"    let requestBodyDebitNote = JSON.parse(request.data).debitNote;\r",
															"    let responseBodyDebitNote = JSON.parse(responseBody).debitNote; \r",
															"    pm.expect(responseBodyDebitNote).to.eql(requestBodyDebitNote);\r",
															"});\r",
															"\r",
															"//Clean up: call global function to delete created Swiss Domnestic payment\r",
															"if (pm.response.code == 200){\r",
															"    eval(globals.paymentDomesticDelete)();\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "494e2d6b-40d8-4a7a-8c8f-efe8aaf7f8eb",
														"exec": [
															"eval(globals.generateAccessToken)();",
															"setTimeout(function(){eval(globals.randomizeVariables)();}, 1000);",
															"//Pre-condition: call global function to create Swiss Domestic payment",
															"setTimeout(function(){eval(globals.paymentDomesticCreate)();}, 1500);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoSwisDomestic}},\t\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.02\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"Still no debit information\",\r\n    \"chargesBearer\": \"SHAR\"\t\r\n}"
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/swiss/{{newPaymentDomesticID}}",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"swiss",
														"{{newPaymentDomesticID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Swiss domestic payment (C45989799)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ad627cc4-48b4-4a6d-b2ee-2024d377c61d",
														"exec": [
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Swiss Domestic payment is deleted and not exists anymore\", function () {\r",
															"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
															"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
															"    pm.response.to.have.status(200); \r",
															"    pm.expect(responseBodyStatus).to.eql(true);\r",
															"    pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
															"});\r",
															"\r",
															"// Log important stuff\r",
															"if (pm.response.to.have.status(200)){\r",
															"    console.log(\"Deleted Swiss Domestic payment ID:\" + pm.globals.get(\"newPaymentDomesticID\"));\r",
															"    pm.globals.set(\"deletedDomesticPaymentID\",pm.globals.get(\"newPaymentDomesticID\"));\r",
															"    pm.globals.unset(\"newPaymentDomesticID\");\r",
															"}\r",
															"else {\r",
															"    console.log(\"Failed to delete Swiss Domestic payment with ID:\" + pm.globals.get(\"newPaymentDomesticID\"));\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3452172b-a6df-4e25-be52-47a4a764380d",
														"exec": [
															"eval(globals.generateAccessToken)();",
															"//Pre-condition: call global function to create Domestic payment",
															"setTimeout(function(){eval(globals.paymentDomesticCreate)();}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token}}",
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"disabled": true
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/swiss/{{newPaymentDomesticID}}",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"swiss",
														"{{newPaymentDomesticID}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "QR-bill",
									"item": [
										{
											"name": "Standing order",
											"item": [
												{
													"name": "Create QR-bill (standing order) payment (C50483887)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "fdbbfd42-16d8-462e-8975-3879b781bec5",
																"exec": [
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" QR-bill (standing order) payment is created and assertions are passed\", function () {\r",
																	"\r",
																	"    //Creditor account is correct\r",
																	"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
																	"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo;   \r",
																	"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
																	"    \r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    \r",
																	"    //Creditor info is correct\r",
																	"    let requestBodyCreditor = JSON.parse(request.data).creditor;\r",
																	"    let responseBodyCreditor = JSON.parse(responseBody).creditor;\r",
																	"    pm.expect(responseBodyCreditor).to.eql(requestBodyCreditor);\r",
																	"    \r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    \r",
																	"    //Ultimate debtor info is correct\r",
																	"    let requestBodyUltimateDebtor = JSON.parse(request.data).ultimateDebtor;\r",
																	"    let responseBodyUltimateDebtor = JSON.parse(responseBody).ultimateDebtor;    \r",
																	"    pm.expect(responseBodyUltimateDebtor).to.eql(requestBodyUltimateDebtor);\r",
																	"    \r",
																	"    //Standing order info is correct\r",
																	"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
																	"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
																	"    pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"    \r",
																	"    // check if payment is created\r",
																	"    if (pm.response.to.have.status(201)){\r",
																	"        var responseData = JSON.parse(responseBody);\r",
																	"        pm.globals.set(\"newPaymentQrBillID\", responseData.paymentId);\r",
																	"        pm.globals.set(\"newPaymentQrBillStOrInfo\", responseData.standingOrder);\r",
																	"        console.log(\"New QR-bill (standing order) payment ID: \" + pm.globals.get(\"newPaymentQrBillID\"));\r",
																	"    }\r",
																	"    else {\r",
																	"        console.log(\"Failed to create QR-bill (standing order) payment with ID:\" + pm.globals.get(\"newPaymentQrBillID\"));\r",
																	"        pm.globals.unset(\"newPaymentQrBillID\");\r",
																	"    }\r",
																	"});\r",
																	"\r",
																	"//Clean up: call global function to delete created QR-bill (standing order) payment\r",
																	"if (pm.response.code == 201){\r",
																	"    eval(globals.paymentQrBillDelete)();\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "a07eb3a9-70c8-4381-a88a-0fe461483df7",
																"exec": [
																	"eval(globals.randomizeVariables)();",
																	"eval(globals.generateAccessToken)();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoBalanceAdjustment}},\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n\t\"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"requestedExecutionDate\":  {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"Expenses during company trip\",\r\n    \"ultimateDebtor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
														},
														"url": {
															"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/QRbill/",
															"host": [
																"{{env_payments}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"QRbill",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Deliver QR-bill (standing order) payment (C51051788)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "51346101-16fa-46ee-8757-d3809b1a5492",
																"exec": [
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" QR-bill (standing order) payment is retrieved and assertions are passed\", function () {\r",
																	"\r",
																	"    //Creditor account is correct\r",
																	"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
																	"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
																	"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
																	"    \r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    \r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    \r",
																	"    //Standing order info is correct\r",
																	"    let requestBodyStandingOrder = pm.environment.get(\"newPaymentQrBillStOrInfo\");\r",
																	"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
																	"    pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"});\r",
																	"\r",
																	"//Clean up: call global function to delete created QR-bill (standing order) payment\r",
																	"eval(globals.paymentQrBillDelete)();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "ee2f08c4-d83b-4c76-8587-6580014266de",
																"exec": [
																	"eval(globals.generateAccessToken)();\r",
																	"//Pre-condition: call global function to create QR-bill (standing order) payment\r",
																	"setTimeout(function(){eval(globals.paymentQrBillSoCreate)();}, 1000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "content-type",
																"value": "application/json; charset=UTF-8"
															},
															{
																"key": "accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoBalanceAdjustment}},\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n\t\"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"requestedExecutionDate\":  {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"Expenses during company trip\",\r\n    \"ultimateDebtor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    }\r\n}"
														},
														"url": {
															"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/QRbill/{{newPaymentQrBillID}}",
															"host": [
																"{{env_payments}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"QRbill",
																"{{newPaymentQrBillID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update QR-bill (standing order) payment (C50483889)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "01f41148-54e8-487f-b76f-2fb3704e42c4",
																"exec": [
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" QR-bill (standing order) payment is updated and assertions are passed\", function () {\r",
																	"\r",
																	"    //Creditor account is correct\r",
																	"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
																	"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
																	"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
																	"    \r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    \r",
																	"    //Creditor info is correct\r",
																	"    let requestBodyCreditor = JSON.parse(request.data).creditor;\r",
																	"    let responseBodyCreditor = JSON.parse(responseBody).creditor;\r",
																	"    pm.expect(responseBodyCreditor).to.eql(requestBodyCreditor);\r",
																	"    \r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    \r",
																	"    //Ultimate debtor info is correct\r",
																	"    let requestBodyUltimateDebtor = JSON.parse(request.data).ultimateDebtor;\r",
																	"    let responseBodyUltimateDebtor = JSON.parse(responseBody).ultimateDebtor;    \r",
																	"    pm.expect(responseBodyUltimateDebtor).to.eql(requestBodyUltimateDebtor);\r",
																	"    \r",
																	"    //Standing order info is correct\r",
																	"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
																	"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
																	"    pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"});\r",
																	"\r",
																	"//Clean up: call global function to delete created QR-bill (standing order) payment\r",
																	"eval(globals.paymentQrBillDelete)();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "b77e68b2-b83b-421c-bb29-8bc41474f1fd",
																"exec": [
																	"eval(globals.randomizeVariables)();",
																	"eval(globals.generateAccessToken)();",
																	"//Pre-condition: call global function to create QR-bill (standing order) payment",
																	"setTimeout(function(){eval(globals.paymentQrBillSoCreate)();}, 1000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoBalanceAdjustment}},\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.02\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n\t\"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"requestedExecutionDate\":  {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"Expenses business lunch\",\r\n    \"ultimateDebtor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t},    \r\n\t\"categoryPurposeCode\": \"SALA\"\r\n}"
														},
														"url": {
															"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/QRbill/{{newPaymentQrBillID}}",
															"host": [
																"{{env_payments}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"QRbill",
																"{{newPaymentQrBillID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete QR-bill (standing order) payment (C51051791)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "ed6141bc-69fe-4781-8ed5-8d1e1d7bef30",
																"exec": [
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" QR-bill (standing order) payment is deleted and not exists anymore\", function () {\r",
																	"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
																	"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
																	"    pm.response.to.have.status(200); \r",
																	"    pm.expect(responseBodyStatus).to.eql(true);\r",
																	"    pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
																	"});\r",
																	"\r",
																	"// Log important stuff\r",
																	"if (pm.response.to.have.status(200)){\r",
																	"    console.log(\"Deleted QR-bill (standing order) payment ID:\" + pm.environment.get(\"newPaymentQrBillID\"));\r",
																	"    pm.environment.set(\"deletedPaymentQrBillID\",pm.environment.get(\"newPaymentQrBillID\"));\r",
																	"    pm.environment.unset(\"newPaymentQrBillID\");\r",
																	"    pm.environment.unset(\"newPaymentQrBillStOrInfo\");\r",
																	"}\r",
																	"else {\r",
																	"    console.log(\"Failed to delete QR-bill (standing order) payment with ID:\" + pm.environment.get(\"newPaymentQrBillID\"));\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "9d13711b-3f60-44b2-8888-73ad2b57116f",
																"exec": [
																	"eval(globals.generateAccessToken)();",
																	"//Pre-condition: call global function to create QR-bill (standing order) payment",
																	"setTimeout(function(){eval(globals.paymentQrBillSoCreate)();}, 1000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{token}}",
																"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
																"disabled": true
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/QRbill/{{newPaymentQrBillID}}",
															"host": [
																"{{env_payments}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"QRbill",
																"{{newPaymentQrBillID}}"
															]
														}
													},
													"response": []
												}
											],
											"_postman_isSubFolder": true
										},
										{
											"name": "Create QR-bill payment (C50483879)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e287c947-06a6-404d-9551-46b5ba95d05c",
														"exec": [
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" QR-bill payment is created and assertions are passed\", function () {\r",
															"\r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo;   \r",
															"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    \r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    \r",
															"    //Creditor info is correct\r",
															"    let requestBodyCreditor = JSON.parse(request.data).creditor;\r",
															"    let responseBodyCreditor = JSON.parse(responseBody).creditor;\r",
															"    pm.expect(responseBodyCreditor).to.eql(requestBodyCreditor);\r",
															"    \r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    \r",
															"    //Execution date is correct\r",
															"    let requestBodyExecutionDate = JSON.parse(request.data).requestedExecutionDate;\r",
															"    let responseBodyExecutionDate = JSON.parse(responseBody).requestedExecutionDate;    \r",
															"    pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate);\r",
															"    \r",
															"    //Ultimate debtor info is correct\r",
															"    let requestBodyUltimateDebtor = JSON.parse(request.data).ultimateDebtor;\r",
															"    let responseBodyUltimateDebtor = JSON.parse(responseBody).ultimateDebtor;    \r",
															"    pm.expect(responseBodyUltimateDebtor).to.eql(requestBodyUltimateDebtor);\r",
															"    \r",
															"    // check if payment is created\r",
															"    if (pm.response.to.have.status(201)){\r",
															"        var responseData = JSON.parse(responseBody);\r",
															"        pm.environment.set(\"newPaymentQrBillID\", responseData.paymentId);\r",
															"        console.log(\"New QR-bill payment ID: \" + pm.environment.get(\"newPaymentQrBillID\"));\r",
															"    }\r",
															"    else {\r",
															"        console.log(\"Failed to create QR-bill payment with ID:\" + pm.environment.get(\"newPaymentQrBillID\"));\r",
															"        pm.environment.unset(\"newPaymentQrBillID\");\r",
															"    }\r",
															"});\r",
															"\r",
															"//Clean up: call global function to delete created QR-bill payment\r",
															"if (pm.response.code == 201){\r",
															"    eval(globals.paymentQrBillDelete)();\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3bc107b7-20ed-499b-a48f-259d67679ac7",
														"exec": [
															"eval(globals.randomizeVariables)();",
															"eval(globals.generateAccessToken)();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoBalanceAdjustment}},\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n\t\"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"requestedExecutionDate\":  {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"Expenses during company trip\",\r\n    \"ultimateDebtor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n            \"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/QRbill/",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"QRbill",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Deliver QR-bill payment (C50880198)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8f3d2653-75f4-4dd0-8bd1-a232e8bdbbd8",
														"exec": [
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" QR-bill payment is retrieved and assertions are passed\", function () {\r",
															"\r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
															"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    \r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    \r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"});\r",
															"\r",
															"//Clean up: call global function to delete created QR-bill payment\r",
															"eval(globals.paymentQrBillDelete)();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2227a318-4bbb-4b2b-a11f-cc53f4d41e23",
														"exec": [
															"eval(globals.generateAccessToken)();\r",
															"//Pre-condition: call global function to create QR-bill payment\r",
															"setTimeout(function(){eval(globals.paymentQrBillCreate)();}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json; charset=UTF-8"
													},
													{
														"key": "accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoBalanceAdjustment}},\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n\t\"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"requestedExecutionDate\":  {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"Expenses during company trip\",\r\n    \"ultimateDebtor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/QRbill/{{newPaymentQrBillID}}",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"QRbill",
														"{{newPaymentQrBillID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update QR-bill payment (C50483885)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9aff2ee6-50d9-44f7-abf1-e34f28f6bfb7",
														"exec": [
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" QR-bill payment is updated and assertions are passed\", function () {\r",
															"\r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
															"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    \r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    \r",
															"    //Creditor info is correct\r",
															"    let requestBodyCreditor = JSON.parse(request.data).creditor;\r",
															"    let responseBodyCreditor = JSON.parse(responseBody).creditor;\r",
															"    pm.expect(responseBodyCreditor).to.eql(requestBodyCreditor);\r",
															"    \r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    \r",
															"    //Ultimate debtor info is correct\r",
															"    let requestBodyUltimateDebtor = JSON.parse(request.data).ultimateDebtor;\r",
															"    let responseBodyUltimateDebtor = JSON.parse(responseBody).ultimateDebtor;    \r",
															"    pm.expect(responseBodyUltimateDebtor).to.eql(requestBodyUltimateDebtor);\r",
															"});\r",
															"\r",
															"//Clean up: call global function to delete created QR-bill payment\r",
															"eval(globals.paymentQrBillDelete)();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "da1da022-d7f8-4ee1-ba50-c724e5515a59",
														"exec": [
															"eval(globals.randomizeVariables)();",
															"eval(globals.generateAccessToken)();",
															"//Pre-condition: call global function to create QR-bill payment",
															"setTimeout(function(){eval(globals.paymentQrBillCreate)();}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoBalanceAdjustment}},\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.02\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n\t\"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"requestedExecutionDate\":  {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"Expenses business lunch\",\r\n    \"ultimateDebtor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/QRbill/{{newPaymentQrBillID}}",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"QRbill",
														"{{newPaymentQrBillID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete QR-bill payment (C51051785)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0831273b-8674-4859-952b-839af0effd71",
														"exec": [
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" QR-bill payment is deleted and not exists anymore\", function () {\r",
															"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
															"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
															"    pm.response.to.have.status(200); \r",
															"    pm.expect(responseBodyStatus).to.eql(true);\r",
															"    pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
															"});\r",
															"\r",
															"// Log important stuff\r",
															"if (pm.response.to.have.status(200)){\r",
															"    console.log(\"Deleted QR-bill payment ID:\" + pm.environment.get(\"newPaymentQrBillID\"));\r",
															"    pm.environment.set(\"deletedPaymentQrBillID\",pm.environment.get(\"newPaymentQrBillID\"));\r",
															"    pm.environment.unset(\"newPaymentQrBillID\");\r",
															"}\r",
															"else {\r",
															"    console.log(\"Failed to delete QR-bill payment with ID:\" + pm.environment.get(\"newPaymentQrBillID\"));\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5216b8e8-53b8-4d73-b1ad-93a539d94df8",
														"exec": [
															"eval(globals.generateAccessToken)();\r",
															"//Pre-condition: call global function to create QR-bill payment\r",
															"setTimeout(function(){eval(globals.paymentQrBillCreate)();}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/QRbill/{{newPaymentQrBillID}}",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"QRbill",
														"{{newPaymentQrBillID}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "UK",
							"item": [
								{
									"name": "Standing order",
									"item": [
										{
											"name": "Create UK (standing order) payment (ToDo)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3e23ab1a-159a-4529-9401-f978245caa7a",
														"exec": [
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" UK (standing order) payment is created and assertions are passed\", function () {\r",
															"\r",
															"    //Payment type is correct\r",
															"    let requestBodyPaymentType = JSON.parse(request.data).paymentType;\r",
															"    let responseBodyPaymentType = JSON.parse(responseBody).paymentType;\r",
															"    pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType);\r",
															"    \r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    \r",
															"    //Creditor agent sort code is correct\r",
															"    let requestBodyCreditorAgentSortCode = JSON.parse(request.data).creditorAgentSortCode;\r",
															"    let responseBodyCreditorAgentSortCode = JSON.parse(responseBody).creditorAgentSortCode;\r",
															"    pm.expect(responseBodyCreditorAgentSortCode).to.eql(requestBodyCreditorAgentSortCode);\r",
															"    \r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    \r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo;   \r",
															"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    \r",
															"    //Postal account is correct\r",
															"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
															"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo; \r",
															"    pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
															"    \r",
															"    //categoryPurposeCode is correct\r",
															"    let requestBodyCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
															"    let responseBodyCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode; \r",
															"    pm.expect(responseBodyCategoryPurposeCode).to.eql(requestBodyCategoryPurposeCode);\r",
															"    \r",
															"    //Standing order info is correct\r",
															"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
															"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
															"    pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"    \r",
															"    // check if payment is created\r",
															"    if (pm.response.to.have.status(201)){\r",
															"        var responseData = JSON.parse(responseBody);\r",
															"        pm.globals.set(\"newPaymentUkID\", responseData.paymentId);\r",
															"        pm.globals.set(\"newPaymentUKStOrInfo\", responseData.standingOrder);\r",
															"        console.log(\"New UK (standing order) payment ID: \" + pm.globals.get(\"newPaymentUkID\"));\r",
															"    }\r",
															"    else {\r",
															"        console.log(\"Failed to create UK (standing order) payment\");\r",
															"    }\r",
															"});\r",
															"\r",
															"//Clean up: call global function to delete created UK (standing order) payment\r",
															"if (pm.response.code == 201){\r",
															"    eval(globals.paymentUkDelete)();\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6b5bde46-7ddd-4fb1-a0fa-a89e6006834f",
														"exec": [
															"// paymentType: [Faster,CHAPS]",
															"let paymentTypeUK = parseInt(Math.random() * 2) ?  \"Faster\" : \"CHAPS\";",
															"pm.environment.set(\"paymentTypeUK\", paymentTypeUK);",
															"",
															"eval(globals.generateAccessToken)();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"paymentType\": \"{{paymentTypeUK}}\",\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"GBP\"\r\n        },\r\n        \"value\": 2.01\r\n    },\r\n    \"remittanceInformation\": {\r\n        \"structured\": \"224812900001336000000054583\"\r\n    },\r\n    \"creditorAccountNo\": {{creditorAccountNo}},\r\n    \"creditorAgentSortCode\": \"601437\",\r\n    \"creditor\": {\r\n        \"name\": \"{{$randomFullName}}\"\r\n    },\r\n    \t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t},\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"template\": true,\r\n\t\"debitNote\": \"Expenses during company trip\"\r\n}"
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/UKPayment/{{tenant}}/v1/credittransfer",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"UKPayment",
														"{{tenant}}",
														"v1",
														"credittransfer"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deliver UK (standing order) payment (ToDo)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d2767019-f149-4c1b-9654-c75d1abad58c",
														"exec": [
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" UK (standing order) payment is retrieved and assertions are passed\", function () {\r",
															"\r",
															"    //Payment type is correct\r",
															"    let requestBodyPaymentType = JSON.parse(request.data).paymentType;\r",
															"    let responseBodyPaymentType = JSON.parse(responseBody).paymentType;\r",
															"    pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType);\r",
															"    \r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    \r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    \r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo;     \r",
															"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    \r",
															"    //Postal account is correct\r",
															"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
															"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
															"    pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
															"    \r",
															"    //Category purpose code is correct\r",
															"    let requestBodyResponseCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
															"    let responseBodyResponseCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode;   \r",
															"    pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
															"    \r",
															"    //Standing order info is correct\r",
															"    let requestBodyStandingOrder = pm.globals.get(\"newPaymentUKStOrInfo\");\r",
															"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
															"    pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"});\r",
															"\r",
															"//Clean up: call global function to delete created UK (standing order) payment\r",
															"if (pm.response.code == 201){\r",
															"    eval(globals.paymentUkDelete)();\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f1f305f0-0dea-42ab-9946-1d52d300ec0d",
														"exec": [
															"eval(globals.generateAccessToken)();\r",
															"//Pre-condition: call global function to create UK (standing order) payment\r",
															"setTimeout(function(){eval(globals.paymentUkSoCreate)();}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"paymentType\": \"{{paymentTypeUK}}\",\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"GBP\"\r\n        },\r\n        \"value\": 2.01\r\n    },\r\n    \"remittanceInformation\": {\r\n        \"structured\": \"224812900001336000000054583\"\r\n    },\r\n    \"creditorAccountNo\": {{creditorAccountNo}},\r\n    \"creditorAgentSortCode\": \"601437\",\r\n    \"creditor\": {\r\n        \"name\": \"{{$randomFullName}}\"\r\n    },\r\n    \t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t},\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"template\": true,\r\n\t\"debitNote\": \"Expenses during company trip\"\r\n}"
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/UKPayment/{{tenant}}/v1/credittransfer/{{newPaymentUkID}}",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"UKPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"{{newPaymentUkID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update UK (standing order) payment (ToDo)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ecd7c02c-4264-4a4f-8a67-f5800928f162",
														"exec": [
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" UK (standing order) payment is created and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    \r",
															"    //Payment type is correct\r",
															"    let requestBodyPaymentType = JSON.parse(request.data).paymentType;\r",
															"    let responseBodyPaymentType = JSON.parse(responseBody).paymentType;\r",
															"    pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType);\r",
															"    \r",
															"    //Creditor agent sort code is correct\r",
															"    let requestBodyCreditorAgentSortCode = JSON.parse(request.data).creditorAgentSortCode;\r",
															"    let responseBodyCreditorAgentSortCode = JSON.parse(responseBody).creditorAgentSortCode;\r",
															"    pm.expect(responseBodyCreditorAgentSortCode).to.eql(requestBodyCreditorAgentSortCode);\r",
															"    \r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    \r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo;   \r",
															"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    \r",
															"    //Postal account is correct\r",
															"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
															"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
															"    pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
															"    \r",
															"    //Category purpose code is correct\r",
															"    let requestBodyResponseCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
															"    let responseBodyResponseCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode; \r",
															"    pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
															"});\r",
															"\r",
															"//Clean up: call global function to delete created UK (standing order) payment\r",
															"if (pm.response.code == 201){\r",
															"    eval(globals.paymentUkDelete)();\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0edc5b34-9c99-4666-b3eb-46b396a09e16",
														"exec": [
															"eval(globals.generateAccessToken)();",
															"//Pre-condition: call global function to create UK (standing order) payment",
															"setTimeout(function(){eval(globals.paymentUkSoCreate)();}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"paymentType\": \"{{paymentTypeUK}}\",\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"GBP\"\r\n        },\r\n        \"value\": 2.02\r\n    },\r\n    \"remittanceInformation\": {\r\n        \"structured\": \"224812900001336000000054385\"\r\n    },\r\n    \"creditorAccountNo\": {{creditorAccountNo}},\r\n    \"creditorAgentSortCode\": \"601437\",\r\n    \"creditor\": {\r\n        \"name\": \"{{$randomFullName}}\"\r\n    },\r\n    \t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t},\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"template\": true,\r\n\t\"debitNote\": \"Expenses during company trip\"\r\n}"
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/UKPayment/{{tenant}}/v1/credittransfer/{{newPaymentUkID}}",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"UKPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"{{newPaymentUkID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete UK (standing order) Payment (ToDo)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "71210c0f-4e2b-4047-aec7-e3686073def3",
														"exec": [
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" UK (standing order) payment is deleted and not exists anymore\", function () {\r",
															"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
															"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
															"    pm.response.to.have.status(200); \r",
															"    pm.expect(responseBodyStatus).to.eql(true);\r",
															"    pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
															"});\r",
															"\r",
															"// Log important stuff\r",
															"if (pm.response.to.have.status(200)){\r",
															"    console.log(\"Deleted UK (standing order) payment ID:\" + pm.globals.get(\"newPaymentUkID\"));\r",
															"    pm.globals.set(\"deletedPaymentUkID\",pm.globals.get(\"newPaymentUkID\"));\r",
															"    pm.globals.unset(\"newPaymentUkID\");\r",
															"    pm.globals.unset(\"newPaymentUKStOrInfo\");\r",
															"}\r",
															"else {\r",
															"    console.log(\"Failed to delete UK (standing order) payment with ID:\" + pm.globals.get(\"newPaymentUkID\"));\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "080138d5-ac82-44a6-a0b4-daef28a4aa60",
														"exec": [
															"eval(globals.generateAccessToken)();",
															"//Pre-condition: call global function to create UK (standing order) payment",
															"setTimeout(function(){eval(globals.paymentUkSoCreate)();}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token}}",
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"disabled": true
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/UKPayment/{{tenant}}/v1/credittransfer/{{newPaymentUkID}}",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"UKPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"{{newPaymentUkID}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Create UK payment (C51026517)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "546145dd-d921-4c60-b0f3-b168773dfc4d",
												"exec": [
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" UK payment is created and assertions are passed\", function () {\r",
													"\r",
													"    //Payment type is correct\r",
													"    let requestBodyPaymentType = JSON.parse(request.data).paymentType;\r",
													"    let responseBodyPaymentType = JSON.parse(responseBody).paymentType;\r",
													"    pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType);\r",
													"    \r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    \r",
													"    //Creditor agent sort code is correct\r",
													"    let requestBodyCreditorAgentSortCode = JSON.parse(request.data).creditorAgentSortCode;\r",
													"    let responseBodyCreditorAgentSortCode = JSON.parse(responseBody).creditorAgentSortCode;\r",
													"    pm.expect(responseBodyCreditorAgentSortCode).to.eql(requestBodyCreditorAgentSortCode);\r",
													"    \r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    \r",
													"    //Postal account is correct\r",
													"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
													"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo; \r",
													"    pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
													"    \r",
													"    //remittanceInfo is correct\r",
													"    let requestBodyRemittanceInfo = JSON.parse(request.data).remittanceInfo;\r",
													"    let responseBodyRemittanceInfo = JSON.parse(responseBody).remittanceInfo;\r",
													"    pm.expect(responseBodyRemittanceInfo).to.eql(requestBodyRemittanceInfo);\r",
													"    \r",
													"    // check if payment is created\r",
													"    if (pm.response.to.have.status(201)){\r",
													"        var responseData = JSON.parse(responseBody);\r",
													"        pm.environment.set(\"newPaymentUkID\", responseData.paymentId);\r",
													"        console.log(\"New UK payment ID: \" + pm.environment.get(\"newPaymentUkID\"));\r",
													"    }\r",
													"    else {\r",
													"        console.log(\"Failed to create UK payment\");\r",
													"    }\r",
													"});\r",
													"\r",
													"//Clean up: call global function to delete created UK payment\r",
													"if (pm.response.code == 201){\r",
													"    eval(globals.paymentUkDelete)();\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "24f9b8ed-b514-4be8-a2b3-9ed20c8c9558",
												"exec": [
													"let paymentTypeUK = parseInt(Math.random() * 2) ?  \"UK_FASTER\" : \"UK_CHAPS\";",
													"pm.environment.set(\"paymentTypeUK\", paymentTypeUK);",
													"",
													"eval(globals.generateAccessToken)();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"paymentType\": \"{{paymentTypeUK}}\",\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"GBP\"\r\n        },\r\n        \"value\": 2.01\r\n    },\r\n\t\"remittanceInfo\": {\r\n    \t\"unstructured\": \"Beneficiary reference\"\r\n\t},\r\n    \"creditorAccountNo\": {{creditorAccountNoUK}},\r\n    \"creditorAgentSortCode\": \"601437\",\r\n    \"creditor\": {\r\n        \"name\": \"{{$randomFullName}}\"\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"template\": true,\r\n\t\"debitNote\": \"Expenses during company trip\"\r\n}"
										},
										"url": {
											"raw": "{{env_payments}}/banking-api/payment/UKPayment/{{tenant}}/v1/credittransfer",
											"host": [
												"{{env_payments}}"
											],
											"path": [
												"banking-api",
												"payment",
												"UKPayment",
												"{{tenant}}",
												"v1",
												"credittransfer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Deliver UK payment (C51026519)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b52cbab6-2779-41ca-8883-b471b5c6b644",
												"exec": [
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" UK payment is retrieved and assertions are passed\", function () {\r",
													"\r",
													"    //Payment type is correct\r",
													"    let requestBodyPaymentType = JSON.parse(request.data).paymentType;\r",
													"    let responseBodyPaymentType = JSON.parse(responseBody).paymentType;\r",
													"    pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType);\r",
													"    \r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    \r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"\r",
													"    //Postal account is correct\r",
													"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
													"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
													"    pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
													"    \r",
													"    //remittanceInfo is correct\r",
													"    let requestBodyRemittanceInfo = JSON.parse(request.data).remittanceInfo;\r",
													"    let responseBodyRemittanceInfo = JSON.parse(responseBody).remittanceInfo;\r",
													"    pm.expect(responseBodyRemittanceInfo).to.eql(requestBodyRemittanceInfo);\r",
													"});\r",
													"\r",
													"//Clean up: call global function to delete created UK payment\r",
													"eval(globals.paymentUkDelete)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ee6a7df7-84e9-472b-9325-6993404f0957",
												"exec": [
													"eval(globals.generateAccessToken)();\r",
													"//Pre-condition: call global function to create UK payment\r",
													"setTimeout(function(){eval(globals.paymentUkCreate)();}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"paymentType\": {{paymentTypeUK}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"GBP\"\r\n        },\r\n        \"value\": 2.01\r\n    },\r\n\t\"remittanceInfo\": {\r\n    \t\"unstructured\": \"Beneficiary reference\"\r\n\t},\r\n    \"creditorAccountNo\": {{creditorAccountNoUK}},\r\n    \"creditorAgentSortCode\": \"601437\",\r\n    \"creditor\": {\r\n        \"name\": \"{{$randomFullName}}\"\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"template\": true,\r\n\t\"debitNote\": \"Expenses during company trip\"\r\n}"
										},
										"url": {
											"raw": "{{env_payments}}/banking-api/payment/UKPayment/{{tenant}}/v1/credittransfer/{{newPaymentUkID}}",
											"host": [
												"{{env_payments}}"
											],
											"path": [
												"banking-api",
												"payment",
												"UKPayment",
												"{{tenant}}",
												"v1",
												"credittransfer",
												"{{newPaymentUkID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update UK payment (ToDo)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7fceecf8-f81f-4f14-9f13-8b4578e591eb",
												"exec": [
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" UK payment is created and assertions are passed\", function () {\r",
													"\r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    \r",
													"    //Payment type is correct\r",
													"    let requestBodyPaymentType = JSON.parse(request.data).paymentType;\r",
													"    let responseBodyPaymentType = JSON.parse(responseBody).paymentType;\r",
													"    pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType);\r",
													"    \r",
													"    //Creditor agent sort code is correct\r",
													"    let requestBodyCreditorAgentSortCode = JSON.parse(request.data).creditorAgentSortCode;\r",
													"    let responseBodyCreditorAgentSortCode = JSON.parse(responseBody).creditorAgentSortCode;\r",
													"    pm.expect(responseBodyCreditorAgentSortCode).to.eql(requestBodyCreditorAgentSortCode);\r",
													"    \r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"\r",
													"    //Postal account is correct\r",
													"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
													"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
													"    pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
													"});\r",
													"\r",
													"//Clean up: call global function to delete created UK payment\r",
													"eval(globals.paymentUkDelete)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2c3be08b-a4da-4ef0-8010-4d457bcdd1c4",
												"exec": [
													"eval(globals.generateAccessToken)();",
													"//Pre-condition: call global function to create UK payment",
													"setTimeout(function(){eval(globals.paymentUkCreate)();}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"paymentType\": {{paymentTypeUK}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"GBP\"\r\n        },\r\n        \"value\": 2.01\r\n    },\r\n    \"remittanceInformation\": {\r\n        \"structured\": \"224812900001336000000054385\"\r\n    },\r\n    \"creditorAccountNo\": {{creditorAccountNoUK}},\r\n    \"creditorAgentSortCode\": \"601437\",\r\n    \"creditor\": {\r\n        \"name\": \"{{$randomFullName}}\"\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"template\": true,\r\n\t\"debitNote\": \"Expenses during company trip\"\r\n}"
										},
										"url": {
											"raw": "{{env_payments}}/banking-api/payment/UKPayment/{{tenant}}/v1/credittransfer/{{newPaymentUkID}}",
											"host": [
												"{{env_payments}}"
											],
											"path": [
												"banking-api",
												"payment",
												"UKPayment",
												"{{tenant}}",
												"v1",
												"credittransfer",
												"{{newPaymentUkID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete UK payment (ToDo)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3949ddb-ea3b-4c74-a3a2-a2d7d6d72bf2",
												"exec": [
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" UK payment is deleted and not exists anymore\", function () {\r",
													"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
													"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(responseBodyStatus).to.eql(true);\r",
													"    pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
													"});\r",
													"\r",
													"// Log important stuff\r",
													"if (pm.response.to.have.status(200)){\r",
													"    console.log(\"Deleted UK payment ID:\" + pm.environment.get(\"newPaymentUkID\"));\r",
													"    pm.environment.set(\"deletedPaymentUkID\",pm.environment.get(\"newPaymentUkID\"));\r",
													"    pm.environment.unset(\"newPaymentUkID\");\r",
													"}\r",
													"else {\r",
													"    console.log(\"Failed to delete UK payment with ID:\" + pm.environment.get(\"newPaymentUkID\"));\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "883fca44-a00c-42bc-b5fa-bb1430863644",
												"exec": [
													"eval(globals.generateAccessToken)();",
													"//Pre-condition: call global function to create UK payment",
													"setTimeout(function(){eval(globals.paymentUkCreate)();}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"disabled": true
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_payments}}/banking-api/payment/UKPayment/{{tenant}}/v1/credittransfer/{{newPaymentUkID}}",
											"host": [
												"{{env_payments}}"
											],
											"path": [
												"banking-api",
												"payment",
												"UKPayment",
												"{{tenant}}",
												"v1",
												"credittransfer",
												"{{newPaymentUkID}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Balance adjustment",
							"item": [
								{
									"name": "Create balance adjustment payment (C47415764)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4dace1b6-cb4d-4966-b172-a7299924785a",
												"exec": [
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Balance adjustment payment is created and assertions are passed\", function () {\r",
													"\r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    \r",
													"    //Transfer type is correct\r",
													"    let requestBodyTypeOfTransfer = JSON.parse(request.data).typeOfTransfer;\r",
													"    let responseBodyTypeOfTransfer = JSON.parse(responseBody).typeOfTransfer; \r",
													"    pm.expect(responseBodyTypeOfTransfer).to.eql(requestBodyTypeOfTransfer);\r",
													"    \r",
													"    //Type of amount is correct\r",
													"    let requestBodyTypeOfAmount = JSON.parse(request.data).typeOfAmount;\r",
													"    let responseBodyTypeOfAmount = JSON.parse(responseBody).typeOfAmount; \r",
													"    pm.expect(responseBodyTypeOfAmount).to.eql(requestBodyTypeOfAmount);\r",
													"    \r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    \r",
													"    //Creditor account is correct\r",
													"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
													"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo;   \r",
													"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"    \r",
													"    // check if payment is created\r",
													"    if (pm.response.to.have.status(201)){\r",
													"        var responseData = JSON.parse(responseBody);\r",
													"        pm.environment.set(\"newPaymentBaID\", responseData.paymentId);\r",
													"        console.log(\"New balance adjustment payment ID: \" + pm.environment.get(\"newPaymentBaID\"));\r",
													"    }\r",
													"    else {\r",
													"        console.log(\"Failed to create balance adjustment payment\");\r",
													"    }\r",
													"});\r",
													"\r",
													"//Clean up: call global function to delete created Balance adjustment payment\r",
													"if (pm.response.code == 201){\r",
													"    eval(globals.paymentBaDelete)();\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b346dad3-fd1d-4e0c-b3ac-27457f016680",
												"exec": [
													"// 1248081507: CH9512312001248081507, CH6312312001248081501",
													"eval(globals.generateAccessToken)();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"typeOfTransfer\": \"TRANSFER_SPARE_CASH_TO_CREDIT_ACCOUNT\",\r\n\t\"cashBalanceThreshold\": 2303.56,\r\n\t\"typeOfAmount\": \"FIXED_AMOUNT\",\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.34\r\n    },\r\n\t\"remittanceInformation\": {\r\n    \t\"unstructured\": \"unstructured remittance\"\r\n\t},\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"creditorAccountNo\": {{creditorAccountNoBalanceAdjustment}},\r\n\t\"debitNote\": \"Expenses for SW implementation\",\r\n\t\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitForm\": \"SIA\"\r\n}"
										},
										"url": {
											"raw": "{{env_payments}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/balanceadjustment",
											"host": [
												"{{env_payments}}"
											],
											"path": [
												"banking-api",
												"payment",
												"accounttransfer",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"balanceadjustment"
											]
										}
									},
									"response": []
								},
								{
									"name": "Deliver balance adjustment payment (C47473069)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24b57fa3-c13a-486e-be5a-10867e9d2d2b",
												"exec": [
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Balance adjustment payment is retrieved and assertions are passed\", function () {\r",
													"\r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    \r",
													"    //Transfer type is correct\r",
													"    let requestBodyTypeOfTransfer = JSON.parse(request.data).typeOfTransfer;\r",
													"    let responseBodyTypeOfTransfer = JSON.parse(responseBody).typeOfTransfer;    \r",
													"    pm.expect(responseBodyTypeOfTransfer).to.eql(requestBodyTypeOfTransfer);\r",
													"    \r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    \r",
													"    //Category purpose code is correct\r",
													"    let requestBodyResponseCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
													"    let responseBodyResponseCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode;   \r",
													"    pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
													"});\r",
													"\r",
													"//Clean up: call global function to delete created Balance adjustment payment\r",
													"eval(globals.paymentBaDelete)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3968a109-515f-4a5c-b510-854f9346619e",
												"exec": [
													"eval(globals.generateAccessToken)();\r",
													"//Pre-condition: call global function to create Balance adjustment payment\r",
													"setTimeout(function(){eval(globals.paymentBaCreate)();}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"typeOfTransfer\": \"TRANSFER_SPARE_CASH_TO_CREDIT_ACCOUNT\",\r\n\t\"cashBalanceThreshold\": 2303.56,\r\n\t\"typeOfAmount\": \"FIXED_AMOUNT\",\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.34\r\n    },\r\n\t\"remittanceInformation\": {\r\n    \t\"unstructured\": \"\"\r\n\t},\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"creditorAccountNo\": {{creditorAccountNoBalanceAdjustment}},\r\n\t\"debitNote\": \"Expenses for SW implementation\",\r\n\t\"debitForm\": \"SIA\"\r\n}"
										},
										"url": {
											"raw": "{{env_payments}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/balanceadjustment/{{newPaymentBaID}}",
											"host": [
												"{{env_payments}}"
											],
											"path": [
												"banking-api",
												"payment",
												"accounttransfer",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"balanceadjustment",
												"{{newPaymentBaID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update balance adjustment payment (C47473068)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "754cd522-8ebc-4598-82b9-bf1b79d1b02b",
												"exec": [
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Balance adjustment payment is created and assertions are passed\", function () {\r",
													"\r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    \r",
													"    //Type of transfer\r",
													"    let requestBodyTypeOfTransfer = JSON.parse(request.data).typeOfTransfer;\r",
													"    let responseBodyTypeOfTransfer = JSON.parse(responseBody).typeOfTransfer;\r",
													"    pm.expect(responseBodyTypeOfTransfer).to.eql(requestBodyTypeOfTransfer);\r",
													"    \r",
													"    //Creditor agent sort code is correct\r",
													"    let requestBodyCreditorAgentSortCode = JSON.parse(request.data).creditorAgentSortCode;\r",
													"    let responseBodyCreditorAgentSortCode = JSON.parse(responseBody).creditorAgentSortCode;\r",
													"    pm.expect(responseBodyCreditorAgentSortCode).to.eql(requestBodyCreditorAgentSortCode);\r",
													"    \r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    \r",
													"    //Postal account is correct\r",
													"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
													"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
													"    pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
													"});\r",
													"\r",
													"//Clean up: call global function to delete created Balance adjustment payment\r",
													"eval(globals.paymentBaDelete)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b2a93fb7-d10e-4e17-a7ee-cd2474ffbcb6",
												"exec": [
													"eval(globals.generateAccessToken)();",
													"//Pre-condition: call global function to create Balance adjustment payment",
													"setTimeout(function(){eval(globals.paymentBaCreate)();}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"typeOfTransfer\": \"TRANSFER_SPARE_CASH_TO_CREDIT_ACCOUNT\",\r\n\t\"cashBalanceThreshold\": 2303.63,\r\n\t\"typeOfAmount\": \"FIXED_AMOUNT\",\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.43\r\n    },\r\n\t\"remittanceInformation\": {\r\n    \t\"unstructured\": \"\"\r\n\t},\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"creditorAccountNo\": {{creditorAccountNoBalanceAdjustment}},\r\n\t\"debitNote\": \"Expenses for SW implementation\",\r\n\t\"requestedExecutionDate\": {{PrS:nextWorkingDay}}\r\n}"
										},
										"url": {
											"raw": "{{env_payments}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/balanceadjustment/{{newPaymentBaID}}",
											"host": [
												"{{env_payments}}"
											],
											"path": [
												"banking-api",
												"payment",
												"accounttransfer",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"balanceadjustment",
												"{{newPaymentBaID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete balance adjustment payment (C47489450)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "268206d4-81bd-4bc9-a3be-e6a7919b0f4d",
												"exec": [
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Balance adjustment is deleted and not exists anymore\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													"// Log important stuff\r",
													"if (pm.response.to.have.status(204)){\r",
													"    console.log(\"Deleted balance adjustment ID:\" + pm.environment.get(\"newPaymentBaID\"));\r",
													"    pm.environment.set(\"deletedPaymentBaID\",pm.environment.get(\"newPaymentBaID\"));\r",
													"    pm.environment.unset(\"newPaymentBaID\");\r",
													"}\r",
													"else {\r",
													"    console.log(\"Failed to delete balance adjustment payment with ID:\" + pm.environment.get(\"newPaymentBaID\"));\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d4ac93f7-1432-44d3-9ccd-1440aa8cd753",
												"exec": [
													"eval(globals.generateAccessToken)();",
													"//Pre-condition: call global function to create Balance adjustent payment",
													"setTimeout(function(){eval(globals.paymentBaCreate)();}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"disabled": true
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_payments}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/balanceadjustment/{{newPaymentBaID}}",
											"host": [
												"{{env_payments}}"
											],
											"path": [
												"banking-api",
												"payment",
												"accounttransfer",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"balanceadjustment",
												"{{newPaymentBaID}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Account transfer",
							"item": [
								{
									"name": "Standing order",
									"item": [
										{
											"name": "Create account transfer (standing order) payment (C53388199)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6cfb0bd9-a1f2-413b-ad6b-526e79aebea2",
														"exec": [
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Account transfer (standing order) payment is created and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    \r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    \r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo2 = JSON.parse(request.data).creditorAccountNo2;\r",
															"    let responseBodyCreditorAccountNo2 = JSON.parse(responseBody).creditorAccountNo2;  \r",
															"    pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2);\r",
															"    \r",
															"    //Standing order info is correct\r",
															"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
															"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder;\r",
															"    pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"\r",
															"    // check if payment is created\r",
															"    if (pm.response.to.have.status(201)){\r",
															"        var responseData = JSON.parse(responseBody);\r",
															"        pm.environment.set(\"newPaymentAtID\", responseData.paymentId);\r",
															"        pm.environment.set(\"newPaymentAtStOrInfo\", responseData.standingOrder);\r",
															"        console.log(\"New account transfer (standing order) payment ID: \" + pm.environment.get(\"newPaymentAtID\"));\r",
															"    }\r",
															"    else {\r",
															"        console.log(\"Failed to create account transfer (standing order) payment\");\r",
															"    }\r",
															"});\r",
															"\r",
															"//Clean up: call global function to delete created Account transfer (standing order) payment\r",
															"if (pm.response.code == 201){\r",
															"    eval(globals.paymentAtDelete)();\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "79daa21a-6eab-4e99-9427-1f0c74200376",
														"exec": [
															"/*\r",
															"const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\r",
															"const s = Array.from({length:20}, _ => c[Math.floor(Math.random()*c.length)]).join('')\r",
															"pm.environment.set(\"paymentAccountTransferRemittanceInformationUnstructured\",s);\r",
															"*/\r",
															"eval(globals.generateAccessToken)();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"creditorAccountNo\": {{creditorAccountNo2}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.34\r\n    },\r\n\t\"remittanceInformation\": {\r\n    \t\"unstructured\": \"\"\r\n\t},\r\n\t\"debitNote\": \"New reference\",\r\n\t\"debitForm\": \"SIA\",\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/accounttransfer",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"accounttransfer",
														"{{tenant}}",
														"v2",
														"credittransfer",
														"accounttransfer"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deliver account transfer (standing order) payment (C53388200)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6c51714f-3259-424c-8c82-3d3866d1b71c",
														"exec": [
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Account transfer (standing order) payment is retrieved and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    \r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    \r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo2 = JSON.parse(request.data).creditorAccountNo2;\r",
															"    let responseBodyCreditorAccountNo2 = JSON.parse(responseBody).creditorAccountNo2;  \r",
															"    pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2);\r",
															"    \r",
															"    //Standing order info is correct\r",
															"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
															"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder;\r",
															"    pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"});\r",
															"\r",
															"//Clean up: call global function to delete created Account transfer (standing order) payment\r",
															"eval(globals.paymentAtDelete)();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "cb5c2f9f-2f63-41fb-a821-dfcbcacfd71e",
														"exec": [
															"eval(globals.generateAccessToken)();",
															"//Pre-condition: call global function to create Account transfer (standing order) payment",
															"setTimeout(function(){eval(globals.paymentAtSoCreate)();}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"creditorAccountNo\": {{creditorAccountNo2}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.34\r\n    },\r\n\t\"remittanceInformation\": {\r\n    \t\"unstructured\": \"\"\r\n\t},\r\n\t\"debitNote\": \"New reference\",\r\n\t\"debitForm\": \"SIA\",\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/accounttransfer/{{newPaymentAtID}}",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"accounttransfer",
														"{{tenant}}",
														"v2",
														"credittransfer",
														"accounttransfer",
														"{{newPaymentAtID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update account transfer (standing order) payment (C53388201)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2598ba08-8d6c-4972-b4d3-25c5a4763aab",
														"exec": [
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Account transfer (standing order) payment is created and assertions are passed\", function () {\r",
															"    \r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    \r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    \r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo2 = JSON.parse(request.data).creditorAccountNo2;\r",
															"    let responseBodyCreditorAccountNo2 = JSON.parse(responseBody).creditorAccountNo2;  \r",
															"    pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2);\r",
															"    \r",
															"    //Standing order info is correct\r",
															"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
															"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder;\r",
															"    pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"});\r",
															"\r",
															"//Clean up: call global function to delete created Account transfer (standing order) payment\r",
															"eval(globals.paymentAtDelete)();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "09d4fdee-4912-4e00-b6a0-21b672be4605",
														"exec": [
															"/*\r",
															"const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
															"const s = Array.from({length:20}, _ => c[Math.floor(Math.random()*c.length)]).join('');\r",
															"pm.environment.set(\"paymentAccountTransferRemittanceInformationUnstructured\",s);\r",
															"*/\r",
															"\r",
															"eval(globals.generateAccessToken)();\r",
															"//Pre-condition: call global function to create Account transfer (standing order) payment\r",
															"setTimeout(function(){eval(globals.paymentAtSoCreate)();}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"creditorAccountNo\": {{creditorAccountNo2}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.43\r\n    },\r\n\t\"remittanceInformation\": {\r\n    \t\"unstructured\": \"\"\r\n\t},\r\n\t\"debitNote\": \"New reference\",\r\n\t\"debitForm\": \"SIA\",\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/accounttransfer/{{newPaymentAtID}}",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"accounttransfer",
														"{{tenant}}",
														"v2",
														"credittransfer",
														"accounttransfer",
														"{{newPaymentAtID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete account transfer (account transfer) payment (C53388202)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5ffd1e4d-a8e5-4e61-9840-fd775f4e01ef",
														"exec": [
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Account transfer (standing order) is deleted and not exists anymore\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															"\r",
															"// Log important stuff\r",
															"if (pm.response.to.have.status(204)){\r",
															"    console.log(\"Deleted account transfer (standing order) payment ID:\" + pm.environment.get(\"newPaymentAtID\"));\r",
															"    pm.environment.set(\"deletedPaymentAtID\",pm.globals.get(\"newPaymentAtID\"));\r",
															"    pm.environment.unset(\"newPaymentAtID\");\r",
															"    pm.environment.unset(\"paymentAccountTransferRemittanceInformationUnstructured\");\r",
															"    pm.environment.unset(\"newPaymentAtStOrInfo\");\r",
															"}\r",
															"else {\r",
															"    console.log(\"Failed to delete account transfer (standing order) payment with ID:\" + pm.environment.get(\"newPaymentAtID\"));\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "561d1860-7cdc-4a7b-be11-082aa20e2e09",
														"exec": [
															"eval(globals.generateAccessToken)();",
															"//Pre-condition: call global function to create Account transfer (standing order) payment",
															"setTimeout(function(){eval(globals.paymentAtSoCreate)();}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token}}",
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"disabled": true
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/accounttransfer/{{newPaymentAtID}}",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"accounttransfer",
														"{{tenant}}",
														"v2",
														"credittransfer",
														"accounttransfer",
														"{{newPaymentAtID}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6f333f34-00af-453e-a66d-4c48070725f9",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "76cd3198-0e8c-4e5c-9399-b6179e13b876",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Create account transfer payment (C41939554)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "afa9d1b7-6a31-4a1f-8b86-c68abe3a3ea4",
												"exec": [
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Account transfer payment is created and assertions are passed\", function () {\r",
													"\r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    \r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    \r",
													"    //Creditor account is correct\r",
													"    let requestBodyCreditorAccountNo2 = JSON.parse(request.data).creditorAccountNo2;\r",
													"    let responseBodyCreditorAccountNo2 = JSON.parse(responseBody).creditorAccountNo2;  \r",
													"    pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2);\r",
													"    \r",
													"    //Requested execution date is correct\r",
													"    let requestBodyRequestedExecutionDate = JSON.parse(request.data).requestedExecutionDate;\r",
													"    let responseBodyRequestedExecutionDate = JSON.parse(responseBody).requestedExecutionDate;  \r",
													"    pm.expect(responseBodyRequestedExecutionDate).to.eql(requestBodyRequestedExecutionDate);\r",
													"    \r",
													"    // check if payment is created\r",
													"    if (pm.response.to.have.status(201)){\r",
													"        var responseData = JSON.parse(responseBody);\r",
													"        pm.environment.set(\"newPaymentAtID\", responseData.paymentId);\r",
													"        console.log(\"New account transfer payment ID: \" + pm.environment.get(\"newPaymentAtID\"));\r",
													"    }\r",
													"    else {\r",
													"        console.log(\"Failed to create account transfer payment\");\r",
													"    }\r",
													"});\r",
													"\r",
													"//Clean up: call global function to delete created Account transfer payment\r",
													"if (pm.response.code == 201){\r",
													"    eval(globals.paymentAtDelete)();\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d751b425-60e8-4c82-a4ea-3245bcc1c780",
												"exec": [
													"/*\r",
													"const c = '0123456789';\r",
													"const s = Array.from({length:20}, _ => c[Math.floor(Math.random()*c.length)]).join('');\r",
													"pm.environment.set(\"paymentAccountTransferRemittanceInformationUnstructured\",s);\r",
													"*/\r",
													"\r",
													"eval(globals.generateAccessToken)();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"creditorAccountNo\": {{creditorAccountNo2}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.34\r\n    },\r\n\t\"remittanceInformation\": {\r\n    \t\"unstructured\": \"\"\r\n\t},\r\n\t\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"New reference\",\r\n\t\"debitForm\": \"SIA\"\r\n}"
										},
										"url": {
											"raw": "{{env_payments}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/accounttransfer",
											"host": [
												"{{env_payments}}"
											],
											"path": [
												"banking-api",
												"payment",
												"accounttransfer",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"accounttransfer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Deliver account transfer payment (C41939552)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4335864a-e4a8-4b5f-b300-a84d547e3aa4",
												"exec": [
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Account transfer payment is retrieved and assertions are passed\", function () {\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    \r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    \r",
													"    //Creditor account is correct\r",
													"    let requestBodyCreditorAccountNo2 = JSON.parse(request.data).creditorAccountNo2;\r",
													"    let responseBodyCreditorAccountNo2 = JSON.parse(responseBody).creditorAccountNo2;  \r",
													"    pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2);\r",
													"});\r",
													"\r",
													"//Clean up: call global function to delete created Account transfer payment\r",
													"eval(globals.paymentAtDelete)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0933776d-4149-40a4-ac72-68a3cf740b68",
												"exec": [
													"eval(globals.generateAccessToken)();\r",
													"//Pre-condition: call global function to create Account transfer payment\r",
													"setTimeout(function(){eval(globals.paymentAtCreate)();}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"creditorAccountNo\": {{creditorAccountNo2}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.34\r\n    },\r\n\t\"remittanceInformation\": {\r\n    \t\"unstructured\": \"{{paymentAccountTransferRemittanceInformationUnstructured}}\"\r\n\t},\r\n\t\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"New reference\",\r\n\t\"debitForm\": \"SIA\"\r\n}"
										},
										"url": {
											"raw": "{{env_payments}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/accounttransfer/{{newPaymentAtID}}",
											"host": [
												"{{env_payments}}"
											],
											"path": [
												"banking-api",
												"payment",
												"accounttransfer",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"accounttransfer",
												"{{newPaymentAtID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update account transfer payment (C41939560)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6167ec5e-f1b4-49bc-8248-b794e2668134",
												"exec": [
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Account transfer payment is updated and assertions are passed\", function () {\r",
													"    \r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    \r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    \r",
													"    //Creditor account is correct\r",
													"    let requestBodyCreditorAccountNo2 = JSON.parse(request.data).creditorAccountNo2;\r",
													"    let responseBodyCreditorAccountNo2 = JSON.parse(responseBody).creditorAccountNo2;  \r",
													"    pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2);\r",
													"});\r",
													"\r",
													"//Clean up: call global function to delete created Account transfer payment\r",
													"eval(globals.paymentAtDelete)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d92abb28-8ed8-4f82-ac2a-ac6b1a51e9dd",
												"exec": [
													"/*\r",
													"const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"const s = Array.from({length:20}, _ => c[Math.floor(Math.random()*c.length)]).join('');\r",
													"pm.environment.set(\"paymentAccountTransferRemittanceInformationUnstructured\",s);\r",
													"*/\r",
													"\r",
													"eval(globals.generateAccessToken)();\r",
													"//Pre-condition: call global function to create Account transfer payment\r",
													"setTimeout(function(){eval(globals.paymentAtCreate)();}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"creditorAccountNo\": {{creditorAccountNo2}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.43\r\n    },\r\n\t\"remittanceInformation\": {\r\n    \t\"unstructured\": \"\"\r\n\t},\r\n\t\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"New reference\",\r\n\t\"debitForm\": \"SIA\"\r\n}"
										},
										"url": {
											"raw": "{{env_payments}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/accounttransfer/{{newPaymentAtID}}",
											"host": [
												"{{env_payments}}"
											],
											"path": [
												"banking-api",
												"payment",
												"accounttransfer",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"accounttransfer",
												"{{newPaymentAtID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete account transfer payment (C41939557)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "faba468b-3bf1-46cc-885a-8eb0e2a5b5be",
												"exec": [
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Account transfer is deleted and not exists anymore\", function () {\r",
													"    pm.response.to.have.status(204) \r",
													"});\r",
													"\r",
													"// Log important stuff\r",
													"if (pm.response.to.have.status(204)){\r",
													"    console.log(\"Deleted account transfer payment ID:\" + pm.environment.get(\"newPaymentAtID\"));\r",
													"    pm.environment.set(\"deletedPaymentAtID\",pm.globals.get(\"newPaymentAtID\"));\r",
													"    pm.environment.unset(\"newPaymentAtID\");\r",
													"    pm.environment.unset(\"paymentAccountTransferRemittanceInformationUnstructured\");\r",
													"}\r",
													"else {\r",
													"    console.log(\"Failed to delete account transfer payment with ID:\" + pm.environment.get(\"newPaymentAtID\"));\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "eeaa2a69-34a3-4e73-a403-051a22ae1abe",
												"exec": [
													"eval(globals.generateAccessToken)();",
													"//Pre-condition: call global function to create Account transfer payment",
													"setTimeout(function(){eval(globals.paymentAtCreate)();}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"disabled": true
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_payments}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/accounttransfer/{{newPaymentAtID}}",
											"host": [
												"{{env_payments}}"
											],
											"path": [
												"banking-api",
												"payment",
												"accounttransfer",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"accounttransfer",
												"{{newPaymentAtID}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f6bd9c60-9380-447a-b3fb-62e92d2ca8eb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c2edb766-60b4-4854-a676-4a5cfa485291",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Payments search",
					"item": [
						{
							"name": "Search Payment Returns Unique Pages (C49445322)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "175719ac-18dd-4394-adb0-029d108c61fb",
										"exec": [
											"//precondition check\r",
											"let skipTests = true;\r",
											"let latestPaymentID = pm.environment.get(\"latestPaymentID\");\r",
											"if (pm.response.to.have.status(200)){\r",
											"    if (latestPaymentID){\r",
											"        skipTests = false;\r",
											"    } else {\r",
											"        console.log(\"Not enough test data!!!\");\r",
											"    }\r",
											"}\r",
											"else {\r",
											"    console.log(\"Failed to retrieve payments!!!\");\r",
											"    pm.environment.unset(\"latestPaymentID\");\r",
											"}\r",
											"\r",
											"//validation\r",
											"(skipTests ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" Payments are retrieved and assertions are passed\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    let responseData = JSON.parse(responseBody);\r",
											"    //Validate latest payment from previous page is not in the list\r",
											"    pm.expect(pm.response.text()).not.to.include(latestPaymentID);\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "747e0638-9544-4373-b17b-ea7468f965ac",
										"exec": [
											"eval(globals.generateAccessToken)();\r",
											"//Pre-condition: call global function to retrive payments\r",
											"setTimeout(function(){eval(globals.paymentSearch)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"pageRequest\": {\r\n    \"page\": 1,\r\n    \"size\": 5\r\n  },\r\n  \"paymentFilter\": {\r\n    \"paymentType\":\"SWIFT_INTERNATIONAL\"\r\n  },\r\n  \"orderBy\": {\r\n    \"field\": \"CREATION_DATE\",\r\n    \"sortOrder\": \"DESC\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{env_payments}}/banking-api/payment/payments/{{tenant}}/v2/payment/search?page=1&size=20",
									"host": [
										"{{env_payments}}"
									],
									"path": [
										"banking-api",
										"payment",
										"payments",
										"{{tenant}}",
										"v2",
										"payment",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search Payment calculates payments count regardles page and size parameters value (C49577618)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a41234f8-be87-40d5-9404-f3b305c4b2fe",
										"exec": [
											"//precondition check\r",
											"let skipTests = true;\r",
											"let responseData = JSON.parse(responseBody);\r",
											"if (pm.response.to.have.status(200)){\r",
											"    if (responseData.pageResponse.totalElements>0){\r",
											"        skipTests = false;\r",
											"    } else {\r",
											"        console.log(\"Not enough test data!!!\");\r",
											"    }\r",
											"}\r",
											"else {\r",
											"    console.log(\"Failed to retrieve payments!!!\");\r",
											"}\r",
											"\r",
											"(skipTests ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" Search Payment calculates payments count regardles page and size parameters value, assertions are passed\", function () {\r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    let valueToCompare = parseInt(responseData.pageResponse.size,10);\r",
											"    if(parseInt(responseData.pageResponse.size,10)>parseInt(responseData.pageResponse.totalElements,10)){\r",
											"        valueToCompare = parseInt(responseData.pageResponse.totalElements,10);\r",
											"    }\r",
											"    \r",
											"    //Value of 'totalElements' property matches to number of payments retrieved\r",
											"    pm.expect(valueToCompare).to.eql(responseData.payments.length);\r",
											"\r",
											"    let deletedPaymentID = pm.environment.get(\"deletedPaymentSwiftID\");\r",
											"    if (deletedPaymentID){\r",
											"        pm.expect(pm.response.text()).not.to.include(deletedPaymentID) \r",
											"        && pm.response.to.have.status(200) \r",
											"        && pm.expect(valueToCompare).to.eql(responseData.payments.length);\r",
											"        pm.environment.unset(\"deletedPaymentSwiftID\");\r",
											"    } else {\r",
											"        pm.response.to.have.status(200) \r",
											"        && pm.expect(valueToCompare).to.eql(responseData.payments.length);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3b42a91e-4a9c-4c0b-8dae-32d1d0a1d871",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"//create then delete SWIFT payment in order to validate it is not shown in response",
											"setTimeout(function(){eval(globals.paymentSwiftCreate)();}, 1000);",
											"setTimeout(function(){eval(globals.paymentSwiftDelete)();}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"pageRequest\": {\n  \"page\": 0,\n  \"size\": 100\n  },\n  \"paymentFilter\": {\n\t\"paymentType\":\"SWIFT_INTERNATIONAL\"\n  },\n  \"orderBy\": {\n    \"field\": \"CREATION_DATE\",\n    \"sortOrder\": \"DESC\"\n  }\n}"
								},
								"url": {
									"raw": "{{env_payments}}/banking-api/payment/payments/{{tenant}}/v2/payment/search?size=1000",
									"host": [
										"{{env_payments}}"
									],
									"path": [
										"banking-api",
										"payment",
										"payments",
										"{{tenant}}",
										"v2",
										"payment",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search Payment number of returned payments matches to “totalElements” property value (C41083327)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a41234f8-be87-40d5-9404-f3b305c4b2fe",
										"exec": [
											"//precondition check\r",
											"let skipTests = true;\r",
											"let responseData = JSON.parse(responseBody);\r",
											"if (pm.response.to.have.status(200)){\r",
											"    if (responseData.pageResponse.totalElements>0){\r",
											"        skipTests = false;\r",
											"    } else {\r",
											"        console.log(\"Not enough test data!!!\");\r",
											"    }\r",
											"}\r",
											"else {\r",
											"    console.log(\"Failed to retrieve payments!!!\");\r",
											"}\r",
											"\r",
											"(skipTests ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" Value of 'totalElements' property matches to number of payments retrieved and assertions are passed\", function () {\r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    let valueToCompare = parseInt(responseData.pageResponse.size,10);\r",
											"    if(parseInt(responseData.pageResponse.size,10)>parseInt(responseData.pageResponse.totalElements,10)){\r",
											"        valueToCompare = parseInt(responseData.pageResponse.totalElements,10);\r",
											"    }\r",
											"    \r",
											"    //Value of 'totalElements' property matches to number of payments retrieved\r",
											"    pm.expect(valueToCompare).to.eql(responseData.payments.length);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3b42a91e-4a9c-4c0b-8dae-32d1d0a1d871",
										"exec": [
											"eval(globals.generateAccessToken)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"pageRequest\": {\n    \"page\": 0,\n    \"size\": 100\n  },\n  \"paymentFilter\": {\n\t\"paymentType\": \"SWIFT_INTERNATIONAL\"\n  },\n  \"orderBy\": {\n    \"field\": \"CREATION_DATE\",\n    \"sortOrder\": \"DESC\"\n  }\n}"
								},
								"url": {
									"raw": "{{env_payments}}/banking-api/payment/payments/{{tenant}}/v2/payment/search?size=1000",
									"host": [
										"{{env_payments}}"
									],
									"path": [
										"banking-api",
										"payment",
										"payments",
										"{{tenant}}",
										"v2",
										"payment",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search Payment using filter by 'paymentStatuses' (C66728670)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d43ce236-ffa4-43f2-a358-f4c6a766e89f",
										"exec": [
											"//precondition check\r",
											"let skipTests = true;\r",
											"let responseData = JSON.parse(responseBody);\r",
											"if (pm.response.to.have.status(200)){\r",
											"    if (responseData.pageResponse.totalElements>0){\r",
											"        skipTests = false;\r",
											"    } else {\r",
											"        console.log(\"Not enough test data!!!\");\r",
											"    }\r",
											"}\r",
											"else {\r",
											"    console.log(\"Failed to retrieve payments!!!\");\r",
											"}\r",
											"\r",
											"(skipTests ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" Returned payments are filtered by 'paymentStatuses' property and all assertions are passed\", function () {\r",
											"\r",
											"    let isTrue = true;\r",
											"    //Returned payments are filtered by 'paymentStatuses'\r",
											"    var body = {\r",
											"      \"pageRequest\": {\r",
											"      \"page\": 0,\r",
											"      \"size\": 100\r",
											"      },\r",
											"      \"paymentFilter\": {\r",
											"    \t\"paymentStatuses\": [\"READY_FOR_EXECUTION\", \"BOOKED\"]\r",
											"      },\r",
											"      \"orderBy\": {\r",
											"        \"field\": \"CREATION_DATE\",\r",
											"        \"sortOrder\": \"DESC\"\r",
											"      }\r",
											"    };\r",
											"    pm.environment.set(\"body\", JSON.stringify(body));\r",
											"    let filter = pm.environment.get(\"body\");\r",
											"    let n = filter.lastIndexOf(\"[\");\r",
											"    filter = filter.substr(n, filter.length - n - 2);\r",
											"    // check if all returned payments have 'paymentStatuses' property matching to defined filter\r",
											"    for(let i = 0; i < responseData.payments.length; ++i){\r",
											"        isTrue = isTrue && filter.includes(responseData.payments[i].payment.paymentState);\r",
											"    }\r",
											"    pm.response.to.have.status(200) \r",
											"    && pm.expect(isTrue).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c0d4d863-8155-47d6-a106-e598f087fde3",
										"exec": [
											"eval(globals.generateAccessToken)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"pageRequest\": {\n    \"page\": 0,\n    \"size\": 100\n  },\n  \"paymentFilter\": {\n\t\"paymentStatuses\": [\"READY_FOR_EXECUTION\", \"BOOKED\"]\n  },\n  \"orderBy\": {\n    \"field\": \"CREATION_DATE\",\n    \"sortOrder\": \"DESC\"\n  }\n}"
								},
								"url": {
									"raw": "{{env_payments}}/banking-api/payment/payments/{{tenant}}/v2/payment/search?size=1000",
									"host": [
										"{{env_payments}}"
									],
									"path": [
										"banking-api",
										"payment",
										"payments",
										"{{tenant}}",
										"v2",
										"payment",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search Payment deleted payments aren't included (C66728671)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a41234f8-be87-40d5-9404-f3b305c4b2fe",
										"exec": [
											"//precondition check\r",
											"let skipTests = true;\r",
											"let responseData = JSON.parse(responseBody);\r",
											"let deletedPaymentID = pm.environment.get(\"deletedPaymentSwiftID\");\r",
											"if (pm.response.to.have.status(200)){\r",
											"    if (responseData.pageResponse.totalElements>0 && deletedPaymentID){\r",
											"        skipTests = false;\r",
											"    } else {\r",
											"        console.log(\"Not enough test data!!!\");\r",
											"    }\r",
											"}\r",
											"else {\r",
											"    console.log(\"Failed to retrieve payments!!!\");\r",
											"}\r",
											"\r",
											"(skipTests ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" Payments search functionality doesn't return deleted payments \", function () {\r",
											"    \r",
											"    pm.expect(pm.response.text()).not.to.include(deletedPaymentID) \r",
											"    && pm.response.to.have.status(200); \r",
											"    pm.environment.unset(\"deletedPaymentSwiftID\");\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3b42a91e-4a9c-4c0b-8dae-32d1d0a1d871",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"//create then delete SWIFT payment in order to validate it is not shown in response",
											"setTimeout(function(){eval(globals.paymentSwiftCreate)();}, 1000);",
											"setTimeout(function(){eval(globals.paymentSwiftDelete)();}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"pageRequest\": {\n  \"page\": 0,\n  \"size\": 1000\n  },\n  \"paymentStatuses\": [\"READY_FOR_EXECUTION\", \"BOOKED\", \"IN_PROCESS\"],\n  \"orderBy\": {\n    \"field\": \"CREATION_DATE\",\n    \"sortOrder\": \"DESC\"\n  }\n}"
								},
								"url": {
									"raw": "{{env_payments}}/banking-api/payment/payments/{{tenant}}/v2/payment/search?size=1000",
									"host": [
										"{{env_payments}}"
									],
									"path": [
										"banking-api",
										"payment",
										"payments",
										"{{tenant}}",
										"v2",
										"payment",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Payments routing",
					"item": [
						{
							"name": "PayTo input validation for Alias as input parameter (C34380150)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bba85912-4cae-4936-b803-c6d7c3568b44",
										"exec": [
											"//pm.environment.set(\"accountAlias\",\"1501 CHF\")",
											"//pm.environment.set(\"accountAlias\",\"Test1320369\")",
											"",
											"eval(globals.generateAccessToken)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9027d66e-c246-4510-b0cb-40aea8cd9af6",
										"exec": [
											"var notExists = typeof undefined;\r",
											"let paymentType = JSON.parse(pm.environment.get(\"paymentType\"));\r",
											"if (typeof paymentType == notExists) {\r",
											"    paymentType = \"ACCOUNT_TRANSFER\"; \r",
											"}\r",
											"let beneficiaryAccount = pm.environment.get(\"beneficiaryAccountRouting\");\r",
											"if (typeof beneficiaryAccount == notExists) {\r",
											"    beneficiaryAccount = \"CH6312312001248081501\"; \r",
											"}\r",
											"\r",
											"const isMasterTestK8S = pm.environment.get(\"envName\") == 'MDB-MASTER-TESTK8S';\r",
											"(isMasterTestK8S ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" PayTo input validation for Alias\", function () {\r",
											"\r",
											"    //Payment type\r",
											"    let jsonDataPaymentType = pm.response.json().paymentType;\r",
											"    \r",
											"    //Beneficiary account\r",
											"    let jsonDataBeneficiaryAccount = JSON.stringify(pm.response.json().beneficiaryAccount);\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    pm.expect(jsonDataPaymentType).to.eql(paymentType);\r",
											"\r",
											"    pm.expect(jsonDataBeneficiaryAccount).to.eql(beneficiaryAccount);\r",
											"\r",
											"    pm.expect(pm.response.text()).to.include(\"beneficiaryAccountId\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_payments}}/banking-api/payment/payments/{{tenant}}/v1/routing/analyze?routingRequest={{accountAlias}}",
									"host": [
										"{{env_payments}}"
									],
									"path": [
										"banking-api",
										"payment",
										"payments",
										"{{tenant}}",
										"v1",
										"routing",
										"analyze"
									],
									"query": [
										{
											"key": "routingRequest",
											"value": "{{accountAlias}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Payments bulk operations",
					"item": [
						{
							"name": "Deliver payments in bulk (ToDo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55453143-b8d7-4138-8bcc-ea89ad208ea8",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment (created in bulk) is retrieved and assertions are passed\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Response header 'Content-Type' exists and has correct value\r",
											"    pm.response.to.have.header('Content-Type', 'application/zip');\r",
											"    \r",
											"    //Response header 'Content-Disposition' exists and has correct value\r",
											"    pm.response.to.have.header('Content-Disposition', 'attachment; filename=pain001.zip');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a3eb16ca-ad5d-4815-8cc6-7227e2b104fe",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"//create new payment in bulk",
											"setTimeout(function(){eval(globals.createPaymentBulk)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/zip"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_payments}}/banking-api/payments/pain/v1/credittransfer/{{newPaymentBulkID}}",
									"host": [
										"{{env_payments}}"
									],
									"path": [
										"banking-api",
										"payments",
										"pain",
										"v1",
										"credittransfer",
										"{{newPaymentBulkID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8e5ba3a0-a287-4c03-bd45-deb648e5fcb0",
						"type": "text/javascript",
						"exec": [
							"/*determine test case ID from request name*/",
							"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
							"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
							"",
							"/*add current test case ID to list of already executed tests*/",
							"eval(globals.testsExecuted)(testRailTestCases);",
							"pm.globals.set(\"testRailTestCases\", testRailTestCases);",
							"",
							"//store test case ID of current request for linking with Test Rail",
							"pm.globals.set(\"_tr_\" + request.name, testRailTestCases);",
							"",
							"//get session for access token",
							"eval(globals.sessionGet)();"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "749540e8-9050-42c5-9142-1dac04fc6fcf",
						"type": "text/javascript",
						"exec": [
							"eval(globals.sessionNavigate)();"
						]
					}
				}
			]
		},
		{
			"name": "Tests.v1",
			"item": [
				{
					"name": "Payments: Template",
					"item": [
						{
							"name": "Create payment template (C53181160)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "31d5a27c-608a-4602-b1e1-7ac74d058f34",
										"exec": [
											"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
											"eval(globals.testsExecuted)(testRailTestCases);",
											"",
											"var requestsToRun = [",
											"        \"createPaymentTemplate\",",
											"        \"deletePaymentTemplate\"",
											"    ]; ",
											"    pm.globals.set(\"_tr_createPaymentTemplate\",testRailTestCases);",
											"    pm.globals.set(\"_tr_deletePaymentTemplate\",\"<cleanUp>\");",
											"",
											"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
											"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fa1c8679-747c-4a91-aa29-c9479a113fab",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "httpbin.org/uuid",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"uuid"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deliver payment template (C53232556)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "07936a38-a1f2-4c0d-98f6-417582b282a7",
										"exec": [
											"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
											"eval(globals.testsExecuted)(testRailTestCases);",
											"",
											"var requestsToRun = [",
											"        \"createPaymentTemplate\",",
											"        \"getPaymentTemplate\",",
											"        \"deletePaymentTemplate\"",
											"    ]; ",
											"    pm.globals.set(\"_tr_createPaymentTemplate\",\"<preCondition>\");",
											"    pm.globals.set(\"_tr_getPaymentTemplate\",testRailTestCases);",
											"    pm.globals.set(\"_tr_deletePaymentTemplate\",\"<cleanUp>\");",
											"",
											"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
											"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1531b978-f128-443b-bc73-c776d2376589",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "httpbin.org/uuid",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"uuid"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete payment template (C53232557)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "da8b4df5-4328-4e82-8c26-759cd5e34c1c",
										"exec": [
											"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
											"eval(globals.testsExecuted)(testRailTestCases);",
											"",
											"var requestsToRun = [",
											"        \"createPaymentTemplate\",",
											"        \"deletePaymentTemplate\"",
											"    ]; ",
											"    pm.globals.set(\"_tr_createPaymentTemplate\",\"<preCondition>\");",
											"    pm.globals.set(\"_tr_deletePaymentTemplate\",testRailTestCases);",
											"",
											"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
											"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3d6a06ce-e15a-4abb-aa58-43c9467a0477",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "httpbin.org/uuid",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"uuid"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Deliver a specific pain.001 file (ToDo)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5984e496-05e4-4b43-9127-5ffc98c830b1",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"createPaymentBulk\",",
									"        \"getPaymentBulk\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_createPaymentBulk\",\"preCondition\");",
									"    pm.globals.set(\"_tr_getPaymentBulk\",testRailTestCases);",
									"",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d07e1bda-9261-4fcf-a18c-6e609c9ec21c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-5629"
					},
					"response": []
				},
				{
					"name": "SWIFT payment CD",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "651b630d-cad7-4089-a251-99b5dd881e6a",
								"exec": [
									"testRailTestCases = \"C36275411 C36240105\"",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Create SWIFT payment\",",
									"        \"Delete SWIFT payment\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Create SWIFT payment\",\"C36275411\");",
									"    pm.globals.set(\"_tr_Delete SWIFT payment\",\"C36240105\");",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "abba2f80-e10d-4314-a3a5-38259aa55d16",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "SWIFT payment CRUD",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c38927c2-1947-4eda-8832-fe36b3e046aa",
								"exec": [
									"var testRailTestCases = \"C36275411 C36240103 C36275416 C36240105\"",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Create SWIFT payment\",",
									"        \"Get SWIFT payment\", ",
									"        \"Update SWIFT payment\",",
									"        \"Delete SWIFT payment\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Create SWIFT payment\",\"C36275411\");",
									"    pm.globals.set(\"_tr_Get SWIFT payment\",\"C36240103\");",
									"    pm.globals.set(\"_tr_Update SWIFT payment\",\"C36275416\");",
									"    pm.globals.set(\"_tr_Delete SWIFT payment\",\"C36240105\");",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2b336601-9963-4203-a348-9fb59c30d9f2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "_Test session close",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f65b03ab-4bcb-42be-b070-b4e71cd3e63a",
								"exec": [
									"var requestsToRun = ",
									"    [",
									"        \"Clean TestRail Run\"",
									"    ]; ",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cf05b137-54d1-4191-a3b9-ec3b76277349",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Requests",
			"item": [
				{
					"name": "Payments: Payment type",
					"item": [
						{
							"name": "SEPA",
							"item": [
								{
									"name": "Standing order",
									"item": [
										{
											"name": "createPaymentSepaSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3ee4a81a-06af-4b4c-84f1-f45402b16b6b",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" SEPA (standing order) payment is created and assertions are passed\", function () {\r",
															"\r",
															"  //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
															"    //State is correct\r",
															"    let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
															"    //Creditor agent is correct\r",
															"    let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent.bic;\r",
															"    let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent.bic;\r",
															"    //Debtor address is correct\r",
															"    let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
															"    let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo; \r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;   \r",
															"    //Structured remittance information is correct\r",
															"    let requestBodyStructuredRemittance = JSON.parse(request.data).paymentInformation.remittanceInformation.structured;\r",
															"    let responseBodyStructuredRemittance = JSON.parse(responseBody).paymentInformation.remittanceInformation.structured; \r",
															"    //Standing order info is correct\r",
															"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
															"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Creditor agent is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Debtor address is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName);\r",
															"      pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
															"      pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Creditor account is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Structured remittance information is correct\", () => {\r",
															"      pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Standing order info is correct\", () => {\r",
															"      pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"    });\r",
															"\r",
															"    // check if payment is created\r",
															"    if (pm.response.to.have.status(201)){\r",
															"        var responseData = JSON.parse(responseBody);\r",
															"        pm.globals.set(\"newPaymentSepaID\", responseData.paymentId);\r",
															"        pm.globals.set(\"newPaymentSepaStOrInfo\", responseData.standingOrder);\r",
															"        console.log(\"New SEPA (standing order) payment ID: \" + pm.globals.get(\"newPaymentSepaID\"));\r",
															"    }\r",
															"    else {\r",
															"        console.log(\"Failed to create SEPA (standing order) payment\");\r",
															"    }\r",
															"\r",
															"    //Determine if assertion passed at whole\r",
															"    pm.response.to.have.status(201)\r",
															"    && pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyCreditorAgent.bic).to.eql(requestBodyCreditorAgent.bic) \r",
															"    && pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName) \r",
															"    && pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode) \r",
															"    && pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
															"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
															"    && pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance)\r",
															"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"});\r",
															"\r",
															"// Store the used parameters (test relevant)\r",
															"pm.environment.set(\"instructedAmount\", (JSON.parse(request.data).paymentInformation.instructedAmount));\r",
															"let response = pm.response.json().paymentInformation.standingOrder,\r",
															"    savedData = JSON.stringify(response);\r",
															"pm.environment.set(\"standingOrder\", savedData);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1d155514-6d97-4dcd-b899-827166c02b84",
														"exec": [
															"eval(globals.randomizeVariables)();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"storeOnly\": false,\r\n\t\"locked\": false,\r\n\t\"paymentInformation\": {\r\n\t\t\"instructedAmount\": {\r\n\t\t\t\"currency\": {\r\n\t\t\t\t\"code\": \"EUR\"\r\n\t\t\t},\r\n\t\t\t\"value\": 9.99\r\n\t\t},\r\n\t\t\"remittanceInformation\": {\r\n\t\t\t\"unstructured\": {{unstructured}},\r\n\t\t\t\"structured\": {{structuredRemittanceRF}}\r\n\t\t},\r\n\t\t\"instructionIdentification\": {{instructionIdentification}},\r\n\t\t\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\t\"instructionPriority\": \"NORMAL\",\r\n\t\t\"creditor\": {\r\n\t\t\t\"name\": {{name}},\r\n\t\t\t\"address\": {\r\n\t\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\t\"townName\": {{townName}},\r\n\t\t\t\t\"country\": {{country}}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"creditorAccountNo\": {{creditorAccountNoSEPA}},\r\n\t\t\"creditorAgent\": {\r\n\t\t\t\"bic\": {{creditorAgentBicSEPA}}\r\n\t\t},\r\n\t\t\"debtor\": {\r\n\t\t\t\"name\": {{debtorAccountName}},\r\n\t\t\t\"address\": {\r\n\t\t\t\t\"streetName\": {{debtorStreetName}},\r\n\t\t\t\t\"postalCode\": {{debtorPostalCode}},\r\n\t\t\t\t\"townName\": {{debtorTownName}}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"debtorAccountNo\":  {{debtorAccountNo}},\r\n\t\t\"standingOrder\": {\r\n\t\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\t\"beforeHoliday\": true,\r\n\t\t\t\"interval\": \"WEEKLY\",\r\n\t\t\t\"active\": true,\r\n\t\t\t\"ultimo\": false\t\t\r\n\t\t}\r\n\t}\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/sepa/{{tenant}}/v2/credittransfer",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"sepa",
														"{{tenant}}",
														"v2",
														"credittransfer"
													]
												}
											},
											"response": []
										},
										{
											"name": "getPaymentSepaSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5bdb6f49-933b-48e9-af87-59590ce68841",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" SEPA (standing order) payment is retrieved and assertions are passed\", function () {\r",
															"\r",
															"  //Instructed amount is correct\r",
															"let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
															"let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
															"//State is correct\r",
															"let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
															"//Creditor agent is correct\r",
															"let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent.bic;\r",
															"let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent.bic;\r",
															"//Debtor address is correct\r",
															"let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
															"let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
															"//Debtor account is correct\r",
															"let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
															"let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo; \r",
															"//Creditor account is correct\r",
															"let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
															"let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;   \r",
															"//Structured remittance information is correct\r",
															"let requestBodyStructuredRemittance = JSON.parse(request.data).paymentInformation.remittanceInformation.structured;\r",
															"let responseBodyStructuredRemittance = JSON.parse(responseBody).paymentInformation.remittanceInformation.structured; \r",
															"//Standing order info is correct\r",
															"let responseBodyStandingOrder = JSON.parse(responseBody).paymentInformation.standingOrder; \r",
															"\r",
															"pm.test(\"Payment (standing order) is retrieved\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Instructed amount is correct\", () => {\r",
															"  pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"});\r",
															"\r",
															"pm.test(\"Creditor agent is correct\", () => {\r",
															"  pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
															"});\r",
															"\r",
															"pm.test(\"Debtor address is correct\", () => {\r",
															"  pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName);\r",
															"  pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
															"  pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
															"});\r",
															"\r",
															"pm.test(\"Debtor account is correct\", () => {\r",
															"  pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"});\r",
															"\r",
															"pm.test(\"Creditor account is correct\", () => {\r",
															"  pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"});\r",
															"\r",
															"pm.test(\"Structured remittance information is correct\", () => {\r",
															"  pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance);\r",
															"});\r",
															"\r",
															"pm.test(\"Standing order info is correct\", () => {\r",
															"  pm.expect(responseBodyStandingOrder).to.eql(JSON.parse(pm.environment.get(\"standingOrder\")));\r",
															"});\r",
															"\r",
															"//Determine if assertion passed at whole\r",
															"pm.response.to.have.status(200)\r",
															"&& pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"&& pm.expect(responseBodyCreditorAgent.bic).to.eql(requestBodyCreditorAgent.bic) \r",
															"&& pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName) \r",
															"&& pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode) \r",
															"&& pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName) \r",
															"&& pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
															"&& pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
															"&& pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance)\r",
															"&& pm.expect(responseBodyStandingOrder).to.eql(JSON.parse(pm.environment.get(\"standingOrder\")));\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "35a693f5-7927-451d-a342-a390ee7fc40a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"storeOnly\": false,\r\n\"locked\": false,\r\n\"paymentInformation\": {\r\n\"instructedAmount\": {\r\n\"currency\": {\r\n\"code\": \"EUR\"\r\n},\r\n\"value\": 9.99\r\n},\r\n\"remittanceInformation\": {\r\n\"unstructured\": {{unstructured}},\r\n\"structured\": {{structuredRemittanceRF}}\r\n},\r\n\"instructionIdentification\": {{instructionIdentification}},\r\n\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\"instructionPriority\": \"NORMAL\",\r\n\"creditor\": {\r\n\"name\": {{name}},\r\n\"address\": {\r\n\"adrLine1\": {{adrLine1}},\r\n\"adrLine2\": {{adrLine2}},\r\n\"streetName\": {{streetName}},\r\n\"buildingNm\": {{buildingNm}},\r\n\"postalCode\": {{postalCode}},\r\n\"townName\": {{townName}},\r\n\"country\": {{country}}\r\n}\r\n},\r\n\"creditorAccountNo\": {{creditorAccountNoSEPA}},\r\n\"creditorAgent\": {\r\n\"bic\": {{creditorAgentBicSEPA}}\r\n},\r\n\"debtor\": {\r\n\"name\": {{debtorAccountName}},\r\n\"address\": {\r\n\"streetName\": {{debtorStreetName}},\r\n\"postalCode\": {{debtorPostalCode}},\r\n\"townName\": {{debtorTownName}}\r\n}\r\n},\r\n\"debtorAccountNo\":  {{debtorAccountNo}}\r\n},\r\n\"standingOrder\": {\r\n\"firstOn\": {{PrS:futureWorkingDay}},\r\n\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\"beforeHoliday\": true,\r\n\"interval\": \"WEEKLY\",\r\n\"active\": true,\r\n\"ultimo\": false\t\t\r\n}\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/sepa/{{tenant}}/v2/credittransfer/{{newPaymentSepaID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"sepa",
														"{{tenant}}",
														"v2",
														"credittransfer",
														"{{newPaymentSepaID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "updatePaymentSepaSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "053476a2-dd69-46dc-87a0-d7a76f8503ed",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" SEPA (standing order) payment is updated and assertions are passed\", function () {\r",
															"\r",
															"  //Instructed amount is correct\r",
															"let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
															"let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
															"//State is correct\r",
															"let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
															"//Creditor agent is correct\r",
															"let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent.bic;\r",
															"let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent.bic;\r",
															"//Debtor address is correct\r",
															"let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
															"let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
															"//Debtor account is correct\r",
															"let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
															"let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo; \r",
															"//Creditor account is correct\r",
															"let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
															"let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;\r",
															"//Structured remittance information is correct\r",
															"let requestBodyStructuredRemittance = JSON.parse(request.data).paymentInformation.remittanceInformation.structured;\r",
															"let responseBodyStructuredRemittance = JSON.parse(responseBody).paymentInformation.remittanceInformation.structured; \r",
															"//Standing order info is correct\r",
															"let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
															"let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
															"\r",
															"pm.test(\"Payment (standing order) is updated\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Instructed amount is correct\", () => {\r",
															"  pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"});\r",
															"\r",
															"pm.test(\"Creditor agent is correct\", () => {\r",
															"  pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
															"});\r",
															"\r",
															"pm.test(\"Debtor address is correct\", () => {\r",
															"  pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName);\r",
															"  pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
															"  pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
															"});\r",
															"\r",
															"pm.test(\"Debtor account is correct\", () => {\r",
															"  pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"});\r",
															"\r",
															"pm.test(\"Creditor account is correct\", () => {\r",
															"  pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"});\r",
															"\r",
															"pm.test(\"Structured remittance information is correct\", () => {\r",
															"  pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance);\r",
															"});\r",
															"\r",
															"pm.test(\"Standing order info is correct\", () => {\r",
															"  pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"});\r",
															"\r",
															"\r",
															"//Determine if assertion passed at whole\r",
															"pm.response.to.have.status(200)\r",
															"&& pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"&& pm.expect(responseBodyCreditorAgent.bic).to.eql(requestBodyCreditorAgent.bic) \r",
															"&& pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName) \r",
															"&& pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode) \r",
															"&& pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName) \r",
															"&& pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
															"&& pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
															"&& pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance)\r",
															"&& pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e507ff9c-2b15-48e3-8a50-7ff7f2d474f9",
														"exec": [
															"eval(globals.randomizeVariables)();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"storeOnly\": false,\r\n\"locked\": false,\r\n\"paymentInformation\": {\r\n\"instructedAmount\": {\r\n\"currency\": {\r\n\"code\": \"EUR\"\r\n},\r\n\"value\": 10.99\r\n},\r\n\"remittanceInformation\": {\r\n\"unstructured\": {{unstructured}},\r\n\"structured\": {{structuredRemittanceRF}}\r\n},\r\n\"instructionIdentification\": {{instructionIdentification}},\r\n\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\"instructionPriority\": \"NORMAL\",\r\n\"creditor\": {\r\n\"name\": {{name}},\r\n\"address\": {\r\n\"adrLine1\": {{adrLine1}},\r\n\"adrLine2\": {{adrLine2}},\r\n\"streetName\": {{streetName}},\r\n\"buildingNm\": {{buildingNm}},\r\n\"postalCode\": {{postalCode}},\r\n\"townName\": {{townName}},\r\n\"country\": {{country}}\r\n}\r\n},\r\n\"creditorAccountNo\": {{creditorAccountNoSEPA}},\r\n\"creditorAgent\": {\r\n\"bic\": {{creditorAgentBicSEPA}}\r\n},\r\n\"debtor\": {\r\n\"name\": {{debtorAccountName}},\r\n\"address\": {\r\n\"streetName\": {{debtorStreetName}},\r\n\"postalCode\": {{debtorPostalCode}},\r\n\"townName\": {{debtorTownName}}\r\n}\r\n},\r\n\"debtorAccountNo\":  {{debtorAccountNo}},\r\n\"standingOrder\": {\r\n\"firstOn\": {{PrS:futureWorkingDay}},\r\n\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\"beforeHoliday\": false,\r\n\"interval\": \"DAILY\",\r\n\"active\": true,\r\n\"ultimo\": false\t\t\r\n}\r\n}\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/sepa/{{tenant}}/v2/credittransfer/{{newPaymentSepaID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"sepa",
														"{{tenant}}",
														"v2",
														"credittransfer",
														"{{newPaymentSepaID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "deletePaymentSepaSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "782f4338-513a-4858-a402-213b1b31cfe9",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" SEPA (standing order) payment is deleted and not exists anymore\", function () {\r",
															"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
															"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
															"    pm.response.to.have.status(200) \r",
															"    && pm.expect(responseBodyStatus).to.eql(true)\r",
															"    && pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
															"});\r",
															"\r",
															"// Log important stuff\r",
															"if (pm.response.to.have.status(200)){\r",
															"    console.log(\"Deleted SEPA (standing order) payment ID:\" + pm.globals.get(\"newPaymentSepaID\"));\r",
															"    pm.globals.set(\"deletedSepaPaymentID\",pm.globals.get(\"newPaymentSepaID\"));\r",
															"    pm.globals.unset(\"newPaymentSepaID\");\r",
															"    pm.globals.unset(\"newPaymentSepaStOrInfo\");\r",
															"}\r",
															"else {\r",
															"    console.log(\"Failed to delete SEPA (standing order) payment with ID:\" + pm.globals.get(\"newPaymentSepaID\"));\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4e15b19c-7cd1-4f1a-bdcd-9555a5528440",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token}}",
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"disabled": true
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/sepa/{{tenant}}/v2/credittransfer/{{newPaymentSepaID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"sepa",
														"{{tenant}}",
														"v2",
														"credittransfer",
														"{{newPaymentSepaID}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "createPaymentSepa",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3be25552-0b5b-4670-9dc8-8416452a16f1",
												"exec": [
													"eval(globals.randomizeVariables)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b5d1e3d9-8f52-421b-93b2-91f6ba86ccbf",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"//pm.test(pm.globals.get(\"testRailTestCases\") + \" Payment is created and assertions are passed\", function () {\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment is created and assertions are passed\", function () {\r",
													"\r",
													"  //Instructed amount is correct\r",
													"  let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
													"  let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
													"  //Execution date is correct\r",
													"  let requestBodyExecutionDate = JSON.parse(request.data).paymentInformation.requestedExecutionDate;\r",
													"  let responseBodyExecutionDate = JSON.parse(responseBody).paymentInformation.requestedExecutionDate;\r",
													"  //State is correct\r",
													"  let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
													"  //Creditor agent is correct\r",
													"  let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent.bic;\r",
													"  let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent.bic;\r",
													"  //Debtor address is correct\r",
													"  let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
													"  let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
													"  //Debtor account is correct\r",
													"  let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
													"  let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo;\r",
													"  //Creditor account is correct\r",
													"  let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
													"  let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;\r",
													"  //Structured remittance information is correct\r",
													"  let requestBodyStructuredRemittance = JSON.parse(request.data).paymentInformation.remittanceInformation.structured;\r",
													"  let responseBodyStructuredRemittance = JSON.parse(responseBody).paymentInformation.remittanceInformation.structured;\r",
													"\r",
													"  pm.test(\"Instructed amount is correct\", () => {\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"  });\r",
													"\r",
													"  pm.test(\"Execution date is correct\", () => {\r",
													"    pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate);\r",
													"  });\r",
													"\r",
													"  pm.test(\"Creditor agent is correct\", () => {\r",
													"    pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
													"  });\r",
													"\r",
													"  pm.test(\"Debtor address is correct\", () => {\r",
													"    pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName);\r",
													"    pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
													"    pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
													"  });\r",
													"\r",
													"  pm.test(\"Debtor account is correct\", () => {\r",
													"    pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"  });\r",
													"\r",
													"  pm.test(\"Creditor account is correct\", () => {\r",
													"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"  });\r",
													"\r",
													"  pm.test(\"Structured remittance information is correct\", () => {\r",
													"    pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance);\r",
													"  });\r",
													"\r",
													"  // check if payment is created\r",
													"  if (pm.response.to.have.status(201)) {\r",
													"    var responseData = JSON.parse(responseBody);\r",
													"    pm.globals.set(\"newPaymentSepaID\", responseData.paymentId);\r",
													"    console.log(\"New payment ID: \" + pm.globals.get(\"newPaymentSepaID\"));\r",
													"  }\r",
													"  else {\r",
													"    console.log(\"Failed to create payment with ID:\" + pm.globals.get(\"newPaymentSepaID\"));\r",
													"    pm.globals.unset(\"newPaymentSepaID\");\r",
													"  }\r",
													"\r",
													"  //Determine if assertion passed at whole\r",
													"  pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount)\r",
													"    && pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate)\r",
													"    && pm.expect(responseBodyCreditorAgent.bic).to.eql(requestBodyCreditorAgent.bic)\r",
													"    && pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName)\r",
													"    && pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode)\r",
													"    && pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName)\r",
													"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
													"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo)\r",
													"    && pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance);\r",
													"});\r",
													"\r",
													"// Store the used parameters (test relevant)\r",
													"pm.environment.set(\"instructedAmount\", (JSON.parse(request.data).paymentInformation.instructedAmount));\r",
													"pm.environment.set(\"requestedExecutionDate\", (JSON.parse(request.data).paymentInformation.requestedExecutionDate));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"storeOnly\": false,\r\n\t\"locked\": false,\r\n\t\"paymentInformation\": {\r\n\t\t\"endToEndId\": {{endToEndId}},\r\n\t\t\"instructedAmount\": {\r\n\t\t\t\"currency\": {\r\n\t\t\t\t\"code\": \"EUR\"\r\n\t\t\t},\r\n\t\t\t\"value\": 312.00\r\n\t\t},\r\n\t\t\"remittanceInformation\": {\r\n\t\t\t\"unstructured\": {{unstructured}},\r\n\t\t\t\"structured\": {{structuredRemittanceRF}}\r\n\t\t},\r\n\t\t\"instructionIdentification\": {{instructionIdentification}},\r\n\t\t\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\t\"instructionPriority\": \"NORMAL\",\r\n\t\t\"creditor\": {\r\n\t\t\t\"name\": {{name}},\r\n\t\t\t\"address\": {\r\n\t\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\t\"townName\": {{townName}},\r\n\t\t\t\t\"country\": {{country}}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"creditorAccountNo\": {{creditorAccountNoSEPA}},\r\n\t\t\"creditorAgent\": {\r\n\t\t\t\"bic\": {{creditorAgentBicSEPA}}\r\n\t\t},\r\n\t\t\"debtor\": {\r\n\t\t\t\"name\": {{debtorAccountName}},\r\n\t\t\t\"address\": {\r\n\t\t\t\t\"streetName\": {{debtorStreetName}},\r\n\t\t\t\t\"postalCode\": {{debtorPostalCode}},\r\n\t\t\t\t\"townName\": {{debtorTownName}}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"debtorAccountNo\":  {{debtorAccountNo}}\r\n\t}\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/sepa/{{tenant}}/v2/credittransfer",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"sepa",
												"{{tenant}}",
												"v2",
												"credittransfer"
											]
										}
									},
									"response": []
								},
								{
									"name": "getPaymentSepa",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "76f9ba47-0995-45bb-b6d5-247c9c794280",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "512b532c-211e-4676-bb43-df087cc8d7cc",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"//pm.test(pm.globals.get(\"testRailTestCases\") + \" Payment is created and assertions are passed\", function () {\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment is retrieved and assertions are passed\", function () {\r",
													"\r",
													"//Instructed amount is correct\r",
													"let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
													"//Execution date is correct\r",
													"let requestBodyExecutionDate = JSON.parse(request.data).paymentInformation.requestedExecutionDate;\r",
													"let responseBodyExecutionDate = JSON.parse(responseBody).paymentInformation.requestedExecutionDate;    \r",
													"//State is correct\r",
													"let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
													"//Creditor agent is correct\r",
													"let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent.bic;\r",
													"//Debtor address is correct\r",
													"let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
													"let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
													"//Debtor account is correct\r",
													"let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
													"let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo; \r",
													"//Creditor account is correct\r",
													"let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
													"let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;   \r",
													"//Structured remittance information is correct\r",
													"let requestBodyStructuredRemittance = JSON.parse(request.data).paymentInformation.remittanceInformation.structured;\r",
													"let responseBodyStructuredRemittance = JSON.parse(responseBody).paymentInformation.remittanceInformation.structured; \r",
													"\r",
													"pm.test(\"Payment is retrieved\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Instructed amount is correct\", () => {\r",
													"  pm.expect(responseBodyInstructedAmount).to.eql(pm.environment.get(\"instructedAmount\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Execution date is correct\", () => {\r",
													"  pm.expect(responseBodyExecutionDate).to.eql(pm.environment.get(\"requestedExecutionDate\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Creditor agent is correct\", () => {\r",
													"  pm.expect(responseBodyCreditorAgent).to.eql(JSON.parse(pm.environment.get(\"creditorAgentBicSEPA\")));\r",
													"});\r",
													"\r",
													"pm.test(\"Debtor address is correct\", () => {\r",
													"  pm.expect(responseBodyDebtorAddress.streetName).to.eql(JSON.parse(pm.environment.get(\"debtorStreetName\")));\r",
													"  pm.expect(responseBodyDebtorAddress.postalCode).to.eql(JSON.parse(pm.environment.get(\"debtorPostalCode\")));\r",
													"  pm.expect(responseBodyDebtorAddress.townName).to.eql(JSON.parse(pm.environment.get(\"debtorTownName\")));\r",
													"});\r",
													"\r",
													"pm.test(\"Debtor account is correct\", () => {\r",
													"  pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"});\r",
													"\r",
													"pm.test(\"Creditor account is correct\", () => {\r",
													"  pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"});\r",
													"\r",
													"pm.test(\"Structured remittance information is correct\", () => {\r",
													"  pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance);\r",
													"});\r",
													"\r",
													"//Determine if assertion passed at whole\r",
													"pm.response.to.have.status(200)\r",
													"&& pm.expect(responseBodyInstructedAmount).to.eql(pm.environment.get(\"instructedAmount\"))\r",
													"&& pm.expect(responseBodyExecutionDate).to.eql(pm.environment.get(\"requestedExecutionDate\"))\r",
													"&& pm.expect(responseBodyCreditorAgent).to.eql(JSON.parse(pm.environment.get(\"creditorAgentBicSEPA\")))\r",
													"&& pm.expect(responseBodyDebtorAddress.streetName).to.eql(JSON.parse(pm.environment.get(\"debtorStreetName\")))\r",
													"&& pm.expect(responseBodyDebtorAddress.postalCode).to.eql(JSON.parse(pm.environment.get(\"debtorPostalCode\")))\r",
													"&& pm.expect(responseBodyDebtorAddress.townName).to.eql(JSON.parse(pm.environment.get(\"debtorTownName\")))\r",
													"&& pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
													"&& pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
													"&& pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"storeOnly\": false,\r\n\"locked\": false,\r\n\"paymentInformation\": {\r\n\"endToEndId\": {{endToEndId}},\r\n\"instructedAmount\": {\r\n\"currency\": {\r\n\"code\": \"EUR\"\r\n},\r\n\"value\": 312.00\r\n},\r\n\"remittanceInformation\": {\r\n\"unstructured\": {{unstructured}},\r\n\"structured\": {{structuredRemittanceRF}}\r\n},\r\n\"instructionIdentification\": {{instructionIdentification}},\r\n\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\"instructionPriority\": \"NORMAL\",\r\n\"creditor\": {\r\n\"name\": {{name}},\r\n\"address\": {\r\n\"adrLine1\": {{adrLine1}},\r\n\"adrLine2\": {{adrLine2}},\r\n\"streetName\": {{streetName}},\r\n\"buildingNm\": {{buildingNm}},\r\n\"postalCode\": {{postalCode}},\r\n\"townName\": {{townName}},\r\n\"country\": {{country}}\r\n}\r\n},\r\n\"creditorAccountNo\": {{creditorAccountNoSEPA}},\r\n\"creditorAgent\": {\r\n\"bic\": {{creditorAgentBicSEPA}}\r\n},\r\n\"debtor\": {\r\n\"name\": {{debtorAccountName}},\r\n\"address\": {\r\n\"streetName\": {{debtorStreetName}},\r\n\"postalCode\": {{debtorPostalCode}},\r\n\"townName\": {{debtorTownName}}\r\n}\r\n},\r\n\"debtorAccountNo\":  {{debtorAccountNo}}\r\n}\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/sepa/{{tenant}}/v2/credittransfer/{{newPaymentSepaID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"sepa",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"{{newPaymentSepaID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "updatePaymentSepa",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d8cec9b-e0ac-48d5-93aa-62d9678c957a",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"//pm.test(pm.globals.get(\"testRailTestCases\") + \" Payment is created and assertions are passed\", function () {\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment is updated and assertions are passed\", function () {\r",
													"\r",
													"//Instructed amount is correct\r",
													"let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
													"let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
													"//Execution date is correct\r",
													"let requestBodyExecutionDate = JSON.parse(request.data).paymentInformation.requestedExecutionDate;\r",
													"let responseBodyExecutionDate = JSON.parse(responseBody).paymentInformation.requestedExecutionDate;    \r",
													"//State is correct\r",
													"let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
													"//Creditor agent is correct\r",
													"let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent.bic;\r",
													"let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent.bic;\r",
													"//Debtor address is correct\r",
													"let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
													"let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
													"//Debtor account is correct\r",
													"let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
													"let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo; \r",
													"//Creditor account is correct\r",
													"let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
													"let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;   \r",
													"//Structured remittance information is correct\r",
													"let requestBodyStructuredRemittance = JSON.parse(request.data).paymentInformation.remittanceInformation.structured;\r",
													"let responseBodyStructuredRemittance = JSON.parse(responseBody).paymentInformation.remittanceInformation.structured; \r",
													"\r",
													"pm.test(\"Payment is updated\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Instructed amount is correct\", () => {\r",
													"  pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"});\r",
													"\r",
													"pm.test(\"Execution date is correct\", () => {\r",
													"  pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate);\r",
													"});\r",
													"\r",
													"pm.test(\"Creditor agent is correct\", () => {\r",
													"  pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
													"});\r",
													"\r",
													"pm.test(\"Debtor address is correct\", () => {\r",
													"  pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName);\r",
													"  pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
													"  pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
													"});\r",
													"\r",
													"pm.test(\"Debtor account is correct\", () => {\r",
													"  pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"});\r",
													"\r",
													"pm.test(\"Creditor account is correct\", () => {\r",
													"  pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"});\r",
													"\r",
													"pm.test(\"Structured remittance information is correct\", () => {\r",
													"  pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance);\r",
													"});\r",
													"\r",
													"//Determine if assertion passed at whole\r",
													"pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"&& pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate) \r",
													"&& pm.expect(responseBodyCreditorAgent.bic).to.eql(requestBodyCreditorAgent.bic) \r",
													"&& pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName) \r",
													"&& pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode) \r",
													"&& pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName) \r",
													"&& pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
													"&& pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
													"&& pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "984b1b8d-a878-4ae6-aa21-2900604fa352",
												"exec": [
													"eval(globals.randomizeVariables)();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "content-type",
												"value": "application/json; charset=UTF-8"
											},
											{
												"key": "accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"disabled": true
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"storeOnly\": false,\r\n\"locked\": false,\r\n\"paymentInformation\": {\r\n\"endToEndId\": {{endToEndId}},\r\n\"instructedAmount\": {\r\n\"currency\": {\r\n\"code\": \"EUR\"\r\n},\r\n\"value\": 122.00\r\n},\r\n\"remittanceInformation\": {\r\n\"unstructured\": {{unstructured}},\r\n\"structured\": {{structuredRemittanceRF}}\r\n},\r\n\"instructionIdentification\": {{instructionIdentification}},\r\n\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\"instructionPriority\": \"NORMAL\",\r\n\"creditor\": {\r\n\"name\": {{name}},\r\n\"address\": {\r\n\"adrLine1\": {{adrLine1}},\r\n\"adrLine2\": {{adrLine2}},\r\n\"streetName\": {{streetName}},\r\n\"buildingNm\": {{buildingNm}},\r\n\"postalCode\": {{postalCode}},\r\n\"townName\": {{townName}},\r\n\"country\": {{country}}\r\n}\r\n},\r\n\"creditorAccountNo\": {{creditorAccountNoSEPA}},\r\n\"creditorAgent\": {\r\n\"bic\": {{creditorAgentBicSEPA}}\r\n},\r\n\"debtor\": {\r\n\"name\": {{debtorAccountName}},\r\n\"address\": {\r\n\"streetName\": {{debtorStreetName}},\r\n\"postalCode\": {{debtorPostalCode}},\r\n\"townName\": {{debtorTownName}}\r\n}\r\n},\r\n\"debtorAccountNo\":  {{debtorAccountNo}}\r\n}\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/sepa/{{tenant}}/v2/credittransfer/{{newPaymentSepaID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"sepa",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"{{newPaymentSepaID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "deletePaymentSepa",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3785a04a-9b13-4e86-bd57-50ddeaf75b81",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" SEPA payment is deleted and not exists anymore\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Log important stuff\r",
													"if (pm.response.to.have.status(200)){\r",
													"    console.log(\"Deleted SEPA payment ID:\" + pm.globals.get(\"newPaymentSepaID\"));\r",
													"    pm.globals.set(\"deletedPaymentSepaID\",pm.globals.get(\"newPaymentSepaID\"));\r",
													"    pm.globals.unset(\"newPaymentSepaID\");\r",
													"}\r",
													"else {\r",
													"    console.log(\"Failed to delete SEPA payment with ID: \" + pm.globals.get(\"newPaymentSepaID\"));\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "17b37329-f91d-4a53-861f-4568d200e832",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/sepa/{{tenant}}/v2/credittransfer/{{newPaymentSepaID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"sepa",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"{{newPaymentSepaID}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "SWIFT",
							"item": [
								{
									"name": "createPaymentSwift",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f4995e45-85eb-44cd-95f1-a080eb5c2ddc",
												"exec": [
													"eval(globals.randomizeVariables)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e2c22a91-1077-44ed-b5b0-622eb26d0273",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"//pm.test(pm.globals.get(\"testRailTestCases\") + \" Payment is created and assertions are passed\", function () {\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment is created and assertions are passed\", function () {\r",
													"\r",
													"//Instructed amount is correct\r",
													"let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
													"let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
													"//Execution date is correct\r",
													"let requestBodyExecutionDate = JSON.parse(request.data).paymentInformation.requestedExecutionDate;\r",
													"let responseBodyExecutionDate = JSON.parse(responseBody).paymentInformation.requestedExecutionDate;    \r",
													"//State is correct\r",
													"let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
													"//Creditor agent is correct\r",
													"let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent.bic;\r",
													"let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent.bic;\r",
													"//Debtor address is correct\r",
													"let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
													"let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
													"//Debtor account is correct\r",
													"let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
													"let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo;   \r",
													"//Creditor account is correct\r",
													"let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
													"let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;   \r",
													"//Charge bearer is correct    \r",
													"let jsonDataResponseChargeBearer = pm.response.json().chargeBearer;\r",
													"\r",
													"pm.test(\"Instructed amount is correct\", () => {\r",
													"  pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"});\r",
													"\r",
													"pm.test(\"Execution date is correct\", () => {\r",
													"  pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate);\r",
													"});\r",
													"\r",
													"pm.test(\"Creditor agent is correct\", () => {\r",
													"  pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
													"});\r",
													"\r",
													"pm.test(\"Debtor address is correct\", () => {\r",
													"  pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName);\r",
													"  pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
													"  pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
													"});\r",
													"\r",
													"pm.test(\"Debtor account is correct\", () => {\r",
													"  pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"});\r",
													"\r",
													"pm.test(\"Creditor account is correct\", () => {\r",
													"  pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"});\r",
													"\r",
													"pm.test(\"Charge bearer is correct\", () => {\r",
													"  pm.expect(jsonDataResponseChargeBearer).to.eql(\"SHAR\");\r",
													"});\r",
													"\r",
													"// check if payment is created\r",
													"if (pm.response.to.have.status(201)){\r",
													"    var responseData = JSON.parse(responseBody);\r",
													"    pm.globals.set(\"newPaymentSwiftID\", responseData.paymentId);\r",
													"    console.log(\"New payment ID: \" + pm.globals.get(\"newPaymentSwiftID\"));\r",
													"}\r",
													"else {\r",
													"    console.log(\"Failed to create payment with ID:\" + pm.globals.get(\"newPaymentSwiftID\"));\r",
													"    pm.globals.unset(\"newPaymentSwiftID\");\r",
													"}\r",
													"\r",
													"//Determine if assertion passed at whole\r",
													"pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"&& pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate) \r",
													"&& pm.expect(responseBodyCreditorAgent.bic).to.eql(requestBodyCreditorAgent.bic) \r",
													"&& pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName) \r",
													"&& pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode) \r",
													"&& pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName) \r",
													"&& pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
													"&& pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
													"&& pm.expect(jsonDataResponseChargeBearer).to.eql(\"SHAR\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"storeOnly\": false,\n    \"locked\": false,\n    \"paymentInformation\": {\n        \"endToEndId\": {{endToEndId}},\n        \"instructedAmount\": {\n            \"currency\": {\n                \"code\": \"GBP\"\n            },\n            \"value\": 1\n        },\n        \"remittanceInformation\": {\n            \"unstructured\": {{unstructured}},\n            \"structured\": {{structuredRemittanceRF}}\n        },\n        \"instructionIdentification\": {{instructionIdentification}},\n        \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\n        \"instructionPriority\": \"NORMAL\",\n        \"creditor\": {\n            \"name\": {{name}},\n            \"address\": {\n                \"adrLine1\": {{adrLine1}},\n                \"adrLine2\": {{adrLine2}},\n                \"streetName\": {{streetName}},\n                \"buildingNm\": {{buildingNm}},\n                \"postalCode\": {{postalCode}},\n                \"townName\": {{townName}},\n                \"country\": {{country}}\n            }\n        },\n        \"creditorAccountNo\": {{creditorAccountNoSWIFT}},\n        \"creditorAgent\": {\n            \"bic\": {{creditorAgentBicSWIFT}}\n        },\n        \"debtor\": {\n            \"name\": {{debtorAccountName}},\n            \"address\": {\n                \"streetName\": {{debtorStreetName}},\n                \"postalCode\": {{debtorPostalCode}},\n                \"townName\": {{debtorTownName}}\n            }\n        },\n        \"debtorAccountNo\":  {{debtorAccountNo}}\n    }\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/swift/{{tenant}}/v2/credittransfer",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"swift",
												"{{tenant}}",
												"v2",
												"credittransfer"
											]
										}
									},
									"response": []
								},
								{
									"name": "createPaymentSwiftV2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e5fa496e-1439-43da-9cb2-674fba7bb2d5",
												"exec": [
													"eval(globals.randomizeVariables)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b872a500-dd73-46e6-8779-63893ae9dff1",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"//pm.test(pm.globals.get(\"testRailTestCases\") + \" Payment is created and assertions are passed\", function () {\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment is created and assertions are passed\", function () {\r",
													"\r",
													"//Instructed amount is correct\r",
													"let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
													"let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
													"//Execution date is correct\r",
													"let requestBodyExecutionDate = JSON.parse(request.data).paymentInformation.requestedExecutionDate;\r",
													"let responseBodyExecutionDate = JSON.parse(responseBody).paymentInformation.requestedExecutionDate;    \r",
													"//State is correct\r",
													"let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
													"//Creditor agent is correct\r",
													"let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent;\r",
													"let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent;\r",
													"//Debtor address is correct\r",
													"let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
													"let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
													"//Debtor account is correct\r",
													"let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
													"let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo;   \r",
													"//Creditor account is correct\r",
													"let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
													"let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;   \r",
													"//Charge bearer is correct    \r",
													"let jsonDataResponseChargeBearer = pm.response.json().chargeBearer;\r",
													"\r",
													"pm.test(\"Instructed amount is correct\", () => {\r",
													"  pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"});\r",
													"\r",
													"pm.test(\"Execution date is correct\", () => {\r",
													"  pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate);\r",
													"});\r",
													"\r",
													"pm.test(\"Creditor agent is correct\", () => {\r",
													"  pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
													"});\r",
													"\r",
													"pm.test(\"Debtor address is correct\", () => {\r",
													"  pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName);\r",
													"  pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
													"  pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
													"});\r",
													"\r",
													"pm.test(\"Debtor account is correct\", () => {\r",
													"  pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"});\r",
													"\r",
													"pm.test(\"Creditor account is correct\", () => {\r",
													"  pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"});\r",
													"\r",
													"pm.test(\"Charge bearer is correct\", () => {\r",
													"  pm.expect(jsonDataResponseChargeBearer).to.eql(\"SHAR\");\r",
													"});\r",
													"\r",
													"// check if payment is created\r",
													"if (pm.response.to.have.status(201)){\r",
													"    var responseData = JSON.parse(responseBody);\r",
													"    pm.globals.set(\"newPaymentSwiftID\", responseData.paymentId);\r",
													"    console.log(\"New payment ID: \" + pm.globals.get(\"newPaymentSwiftID\"));\r",
													"}\r",
													"else {\r",
													"    console.log(\"Failed to create payment with ID:\" + pm.globals.get(\"newPaymentSwiftID\"));\r",
													"    pm.globals.unset(\"newPaymentSwiftID\");\r",
													"}\r",
													"\r",
													"//Determine if assertion passed at whole\r",
													"pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"&& pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate) \r",
													"&& pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent) \r",
													"&& pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName) \r",
													"&& pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode) \r",
													"&& pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName) \r",
													"&& pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
													"&& pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
													"&& pm.expect(jsonDataResponseChargeBearer).to.eql(\"SHAR\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"storeOnly\": false,\r\n\"locked\": false,\r\n\"paymentInformation\": {\r\n\"endToEndId\": {{endToEndId}},\r\n\"instructedAmount\": {\r\n\"currency\": {\r\n\"code\": \"SEK\"\r\n},\r\n\"value\": 4.23\r\n},\r\n\"remittanceInformation\": {\r\n\"unstructured\": {{unstructured}},\r\n\"structured\": {{structuredRemittanceRF}}\r\n},\r\n\"instructionIdentification\": {{instructionIdentification}},\r\n\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\"instructionPriority\": \"NORMAL\",\r\n\"creditor\": {\r\n\"name\": {{name}},\r\n\"address\": {\r\n\"adrLine1\": {{adrLine1}},\r\n\"adrLine2\": {{adrLine2}},\r\n\"streetName\": {{streetName}},\r\n\"buildingNm\": {{buildingNm}},\r\n\"postalCode\": {{postalCode}},\r\n\"townName\": {{townName}},\r\n\"country\": {{country}}\r\n}\r\n},\r\n\"creditorAccountNo\": {{creditorAccountNoSWIFTBankAcco}},\r\n\"creditorAgent\": {\r\n    \t\t\"name1\": {{creditorAgentName1SWIFT}},\r\n    \t\t\"name2\": {{creditorAgentName2SWIFT}},\r\n    \t\t\"street\": {{creditorAgentStreetSWIFT}},\r\n    \t\t\"city\": {{creditorAgentCitySWIFT}},\r\n    \t\t\"country\": {{creditorAgentCountrySWIFT}}\r\n},\r\n\"debtor\": {\r\n\"name\": {{debtorAccountName}},\r\n\"address\": {\r\n\"streetName\": {{debtorStreetName}},\r\n\"postalCode\": {{debtorPostalCode}},\r\n\"townName\": {{debtorTownName}}\r\n}\r\n},\r\n\"debtorAccountNo\": {{debtorAccountNo}}\r\n}\t\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/swift/{{tenant}}/v2/credittransfer",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"swift",
												"{{tenant}}",
												"v2",
												"credittransfer"
											]
										}
									},
									"response": []
								},
								{
									"name": "createPaymentSwiftV3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a33fe098-ff99-4d99-a361-89af30ce1074",
												"exec": [
													"eval(globals.randomizeVariables)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bd25d897-1d02-4e78-8a4b-36ffb898135c",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"//pm.test(pm.globals.get(\"testRailTestCases\") + \" Payment is created and assertions are passed\", function () {\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment is created and assertions are passed\", function () {\r",
													"\r",
													"//Instructed amount is correct\r",
													"let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
													"let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
													"//Execution date is correct\r",
													"let requestBodyExecutionDate = JSON.parse(request.data).paymentInformation.requestedExecutionDate;\r",
													"let responseBodyExecutionDate = JSON.parse(responseBody).paymentInformation.requestedExecutionDate;    \r",
													"//State is correct\r",
													"let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
													"//Creditor agent is correct\r",
													"let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent;\r",
													"let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent;\r",
													"//Debtor address is correct\r",
													"let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
													"let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
													"//Debtor account is correct\r",
													"let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
													"let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo;   \r",
													"//Creditor account is correct\r",
													"let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
													"let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;   \r",
													"//Charge bearer is correct    \r",
													"let jsonDataResponseChargeBearer = pm.response.json().chargeBearer;\r",
													"\r",
													"pm.test(\"Instructed amount is correct\", () => {\r",
													"  pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"});\r",
													"\r",
													"pm.test(\"Execution date is correct\", () => {\r",
													"  pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate);\r",
													"});\r",
													"\r",
													"pm.test(\"Creditor agent is correct\", () => {\r",
													"  pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
													"});\r",
													"\r",
													"pm.test(\"Debtor address is correct\", () => {\r",
													"  pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName);\r",
													"  pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
													"  pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
													"});\r",
													"\r",
													"pm.test(\"Debtor account is correct\", () => {\r",
													"  pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"});\r",
													"\r",
													"pm.test(\"Creditor account is correct\", () => {\r",
													"  pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"});\r",
													"\r",
													"pm.test(\"Charge bearer is correct\", () => {\r",
													"  pm.expect(jsonDataResponseChargeBearer).to.eql(\"SHAR\");\r",
													"});\r",
													"\r",
													"// check if payment is created\r",
													"if (pm.response.to.have.status(201)){\r",
													"    var responseData = JSON.parse(responseBody);\r",
													"    pm.globals.set(\"newPaymentSwiftID\", responseData.paymentId);\r",
													"    console.log(\"New payment ID: \" + pm.globals.get(\"newPaymentSwiftID\"));\r",
													"}\r",
													"else {\r",
													"    console.log(\"Failed to create payment with ID:\" + pm.globals.get(\"newPaymentSwiftID\"));\r",
													"    pm.globals.unset(\"newPaymentSwiftID\");\r",
													"}\r",
													"\r",
													"//Determine if assertion passed at whole\r",
													"pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"&& pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate) \r",
													"&& pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent) \r",
													"&& pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName) \r",
													"&& pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode) \r",
													"&& pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName) \r",
													"&& pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
													"&& pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
													"&& pm.expect(jsonDataResponseChargeBearer).to.eql(\"SHAR\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"storeOnly\": false,\r\n\"locked\": false,\r\n\"paymentInformation\": {\r\n\"endToEndId\": {{endToEndId}},\r\n\"instructedAmount\": {\r\n\"currency\": {\r\n\"code\": \"SEK\"\r\n},\r\n\"value\": 4.23\r\n},\r\n\"remittanceInformation\": {\r\n\"unstructured\": {{unstructured}},\r\n\"structured\": {{structuredRemittanceRF}}\r\n},\r\n\"instructionIdentification\": {{instructionIdentification}},\r\n\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\"instructionPriority\": \"NORMAL\",\r\n\"creditor\": {\r\n\"name\": {{name}},\r\n\"address\": {\r\n\"adrLine1\": {{adrLine1}},\r\n\"adrLine2\": {{adrLine2}},\r\n\"streetName\": {{streetName}},\r\n\"buildingNm\": {{buildingNm}},\r\n\"postalCode\": {{postalCode}},\r\n\"townName\": {{townName}},\r\n\"country\": {{country}}\r\n}\r\n},\r\n\"creditorAccountNo\": {{creditorAccountNoSWIFTBankAcco}},\r\n\"creditorAgent\": {\r\n    \t\t\"name1\": {{creditorAgentName1SWIFT}},\r\n    \t\t\"name2\": {{creditorAgentName2SWIFT}},\r\n    \t\t\"street\": {{creditorAgentStreetSWIFT}},\r\n    \t\t\"city\": {{creditorAgentCitySWIFT}},\r\n    \t\t\"country\": {{creditorAgentCountrySWIFT}}\r\n},\r\n\"debtor\": {\r\n\"name\": {{debtorAccountName}},\r\n\"address\": {\r\n\"streetName\": {{debtorStreetName}},\r\n\"postalCode\": {{debtorPostalCode}},\r\n\"townName\": {{debtorTownName}}\r\n}\r\n},\r\n\"debtorAccountNo\": {{debtorAccountNo}}\r\n}\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/swift/{{tenant}}/v2/credittransfer",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"swift",
												"{{tenant}}",
												"v2",
												"credittransfer"
											]
										}
									},
									"response": []
								},
								{
									"name": "getPaymentSwift",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c0a15afe-495f-4457-8de5-3792121e5c7c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "aff23d81-db65-47bc-8b58-e8df0fc4b5d5",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment is retrieved and assertions are passed\", function () {\r",
													"\r",
													"    //Payment status is correct\r",
													"    let jsonDataPaymentState = pm.response.json().paymentState;\r",
													"    //Debtor is correct\r",
													"    let jsonDataDebtorName = pm.response.json().paymentInformation.debtor.name;\r",
													"    let jsonDataDebtorAccount = pm.response.json().paymentInformation.debtorAccountNo;\r",
													"    //Creditor agent is correct\r",
													"    let jsonResponseCreditorAgent = pm.response.json().paymentInformation.creditorAgent.bic;\r",
													"\r",
													"\r",
													"    pm.test(\"Payment is retrieved\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Debtor is correct\", () => {\r",
													"      pm.expect(jsonDataDebtorName).to.eql(JSON.parse(pm.environment.get(\"debtorAccountName\")));\r",
													"      pm.expect(jsonDataDebtorAccount).to.eql(JSON.parse(pm.environment.get(\"debtorAccountNo\")));\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Creditor agent is correct\", () => {\r",
													"      pm.expect(jsonResponseCreditorAgent).to.eql(JSON.parse(pm.environment.get(\"creditorAgentBicSWIFT\")));\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Body matches string\", function () {\r",
													"      pm.expect(pm.response.text()).to.include(JSON.parse(pm.environment.get(\"debtorAccountName\")));\r",
													"    });\r",
													"\r",
													"    pm.response.to.have.status(200)\r",
													"    && pm.expect(jsonDataDebtorName).to.eql(JSON.parse(pm.environment.get(\"debtorAccountName\")))\r",
													"    && pm.expect(jsonDataDebtorAccount).to.eql(JSON.parse(pm.environment.get(\"debtorAccountNo\")))\r",
													"    && pm.expect(jsonResponseCreditorAgent).to.eql(JSON.parse(pm.environment.get(\"creditorAgentBicSWIFT\")))\r",
													"    && pm.expect(pm.response.text()).to.include(JSON.parse(pm.environment.get(\"debtorAccountName\")));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/swift/{{tenant}}/v2/credittransfer/{{newPaymentSwiftID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"swift",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"{{newPaymentSwiftID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "updatePaymentSwift",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c67aa84a-b0a0-45c8-97c7-dcfd28bb85b6",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment is updated and assertions are passed\", function () {\r",
													"\r",
													"//Instructed amount is correct\r",
													"let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
													"let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
													"//Execution date is correct    \r",
													"let requestBodyExecutionDate = JSON.parse(request.data).paymentInformation.requestedExecutionDate;\r",
													"let responseBodyExecutionDate = JSON.parse(responseBody).paymentInformation.requestedExecutionDate;    \r",
													"//State is correct\r",
													"let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
													"//Creditor agent is correct    \r",
													"let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent.bic;\r",
													"let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent.bic;\r",
													"//Debtor address is correct    \r",
													"let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
													"let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
													"//Debtor account is correct    \r",
													"let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
													"let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo;   \r",
													"//Creditor account is correct    \r",
													"let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
													"let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;   \r",
													"//Charge bearer is correct    \r",
													"let requestBodyChargeBearer = JSON.parse(request.data).chargeBearer;\r",
													"let responseBodyChargeBearer = JSON.parse(responseBody).chargeBearer;       \r",
													"\r",
													"\r",
													"pm.test(\"Payment is updated\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Instructed amount is correct\", () => {\r",
													"  pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"});\r",
													"\r",
													"pm.test(\"Execution date is correct\", () => {\r",
													"  pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate);\r",
													"});\r",
													"\r",
													"pm.test(\"Creditor agent is correct\", () => {\r",
													"  pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
													"});\r",
													"\r",
													"pm.test(\"Debtor address is correct\", () => {\r",
													"  pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName);\r",
													"  pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
													"  pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
													"});\r",
													"\r",
													"pm.test(\"Debtor account is correct\", () => {\r",
													"  pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"});\r",
													"\r",
													"pm.test(\"Creditor account is correct\", () => {\r",
													"  pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"});\r",
													"\r",
													"pm.test(\"Charge bearer is correct\", () => {\r",
													"  pm.expect(responseBodyChargeBearer).to.eql(requestBodyChargeBearer);\r",
													"});\r",
													"\r",
													"pm.response.to.have.status(200)\r",
													"&& pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount)\r",
													"&& pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate)\r",
													"&& pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent)\r",
													"&& pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName)\r",
													"&& pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode)\r",
													"&& pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName)\r",
													"&& pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
													"&& pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo)\r",
													"&& pm.expect(requestBodyChargeBearer).to.eql(responseBodyChargeBearer);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ceffd360-37db-432f-bfda-e718091c42e0",
												"exec": [
													"eval(globals.randomizeVariables)();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"storeOnly\": false,\r\n\"locked\": false,\r\n\"paymentInformation\": {\r\n\"endToEndId\": {{endToEndId}},\r\n\"instructedAmount\": {\r\n\"currency\": {\r\n\"code\": \"GBP\"\r\n},\r\n\"value\": 45\r\n},\r\n\"remittanceInformation\": {\r\n\"unstructured\": {{unstructured}},\r\n\"structured\": {{structuredRemittanceRF}}\r\n},\r\n\"instructionIdentification\": {{instructionIdentification}},\r\n\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\"instructionPriority\": \"NORMAL\",\r\n\"creditor\": {\r\n\"name\": \"MDB-R191-Test\",\r\n\"address\": {\r\n\"adrLine1\": {{adrLine1}},\r\n\"adrLine2\": {{adrLine2}},\r\n\"streetName\": {{streetName}},\r\n\"buildingNm\": {{buildingNm}},\r\n\"postalCode\": {{postalCode}},\r\n\"townName\": {{townName}},\r\n\"country\": {{country}}\r\n}\r\n},\r\n\"creditorAccountNo\": {{creditorAccountNoSWIFT}},\r\n\"creditorAgent\": {\r\n\"bic\": {{creditorAgentBicSWIFT}}\r\n},\r\n\"debtor\": {\r\n\"name\": {{debtorAccountName}},\r\n\"address\": {\r\n\"streetName\": {{debtorStreetName}},\r\n\"postalCode\": {{debtorPostalCode}},\r\n\"townName\": {{debtorTownName}}\r\n}\r\n},\r\n\"debtorAccountNo\":  {{debtorAccountNo}}\r\n},\r\n\"chargeBearer\": \"SHAR\"\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/swift/{{tenant}}/v2/credittransfer/{{newPaymentSwiftID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"swift",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"{{newPaymentSwiftID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "deletePaymentSwift",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5c7a78c-221b-4de1-84b3-08b0973279de",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment is deleted and not exists anymore\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Log important stuff\r",
													"if (pm.response.to.have.status(200)){\r",
													"    console.log(\"Deleted payment ID:\" + pm.globals.get(\"newPaymentSwiftID\"));\r",
													"    pm.globals.unset(\"newPaymentSwiftID\");\r",
													"}\r",
													"else {\r",
													"    console.log(\"Failed to delete payment with ID:\" + pm.globals.get(\"newPaymentSwiftID\"));\r",
													"    pm.globals.set(\"newPaymentSwiftID\", \"ERROR!\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text",
												"disabled": true
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/swift/{{tenant}}/v2/credittransfer/{{newPaymentSwiftID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"swift",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"{{newPaymentSwiftID}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Swiss",
							"item": [
								{
									"name": "Orange",
									"item": [
										{
											"name": "Standing order",
											"item": [
												{
													"name": "createPaymentOrangeSO",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "31ab74fa-6b4d-4d44-af5a-67c9bf520b43",
																"exec": [
																	"// Execute standard tests from PrS using eval()\r",
																	"//eval(globals.commonTests)();\r",
																	"\r",
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Orange (standing order) payment is created and assertions are passed\", function () {\r",
																	"\r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    //Postal account is correct\r",
																	"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
																	"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo; \r",
																	"    //categoryPurposeCode is correct\r",
																	"    let requestBodyCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
																	"    let responseBodyCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode; \r",
																	"    //Standing order info is correct\r",
																	"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
																	"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
																	"    //Remittance Information is correct\r",
																	"    let requestBodyRemittanceInformation = JSON.parse(request.data).remittanceInformation;\r",
																	"    let responseBodyRemittanceInformation = JSON.parse(responseBody).remittanceInformation; \r",
																	"    \r",
																	"    pm.test(\"Instructed amount is correct\", () => {\r",
																	"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Debtor account is correct\", () => {\r",
																	"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Postal account is correct\", () => {\r",
																	"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Category purpose code is correct\", () => {\r",
																	"      pm.expect(responseBodyCategoryPurposeCode).to.eql(requestBodyCategoryPurposeCode);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Standing order info is correct\", () => {\r",
																	"      pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Remittance Information is correct\", () => {\r",
																	"      pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
																	"    });\r",
																	"    \r",
																	"    // check if payment is created\r",
																	"    if (pm.response.to.have.status(201)){\r",
																	"        var responseData = JSON.parse(responseBody);\r",
																	"        pm.globals.set(\"newPaymentOrangeID\", responseData.paymentId);\r",
																	"        pm.globals.set(\"newPaymentOrangeStOrInfo\", responseData.standingOrder);\r",
																	"        console.log(\"New Orange (standing order) payment ID: \" + pm.globals.get(\"newPaymentOrangeID\"));\r",
																	"    }\r",
																	"    else {\r",
																	"        console.log(\"Failed to create Orange (standing order) payment\");\r",
																	"    }\r",
																	"    \r",
																	"    //Determine if assertion passed at whole\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
																	"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
																	"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
																	"    && pm.expect(responseBodyCategoryPurposeCode).to.eql(requestBodyCategoryPurposeCode)\r",
																	"    && pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation)\r",
																	"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "a0d60bb2-3d87-4db0-8d65-c2af10f01cfd",
																"exec": [
																	"eval(globals.randomizeVariables)();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"creditorAccountNo\":  {{orangeAccountNo}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.01\r\n    },\r\n    \"structuredRemittanceInformation\": {{structuredRemittanceOrange}},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n    \"debitNote\": \"Expenses during company trip\",\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
														},
														"url": {
															"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/orange/",
															"host": [
																"{{environment}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"orange",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "getPaymentOrangeSO",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "322f8b16-9b48-4ec1-92f3-2567bbb81bd8",
																"exec": [
																	"// Execute standard tests from PrS using eval()\r",
																	"//eval(globals.commonTests)();\r",
																	"\r",
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Orange (standing order) payment is retrieved and assertions are passed\", function () {\r",
																	"\r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    //Postal account is correct\r",
																	"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
																	"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
																	"    //Category purpose code is correct\r",
																	"    let requestBodyResponseCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
																	"    let responseBodyResponseCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode;   \r",
																	"    //Standing order info is correct\r",
																	"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
																	"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
																	"    //Remittance Information is correct\r",
																	"    let requestBodyRemittanceInformation = JSON.parse(request.data).remittanceInformation;\r",
																	"    let responseBodyRemittanceInformation = JSON.parse(responseBody).remittanceInformation; \r",
																	"    \r",
																	"    pm.test(\"Instructed amount is correct\", () => {\r",
																	"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Debtor account is correct\", () => {\r",
																	"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Postal account is correct\", () => {\r",
																	"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Category purpose code account is correct\", () => {\r",
																	"      pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Standing order info is correct\", () => {\r",
																	"      pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Remittance Information is correct\", () => {\r",
																	"      pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
																	"    });\r",
																	"    \r",
																	"    //Determine if assertion passed at whole\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
																	"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
																	"    && pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode)\r",
																	"    && pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation)\r",
																	"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "d528176e-6d1f-4a76-8c8f-3eea79288fbe",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"creditorAccountNo\":  {{orangeAccountNo}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.01\r\n    },\r\n    \"structuredRemittanceInformation\": {{structuredRemittanceOrange}},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n    \"debitNote\": \"Expenses during company trip\",\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
														},
														"url": {
															"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/orange/{{newPaymentOrangeID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"orange",
																"{{newPaymentOrangeID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "updatePaymentOrangeSO",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "de0cb7b1-d454-41be-8806-66bc76d4fd2c",
																"exec": [
																	"// Execute standard tests from PrS using eval()\r",
																	"//eval(globals.commonTests)();\r",
																	"\r",
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Orange (standing order) payment is created and assertions are passed\", function () {\r",
																	"\r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    //Postal account is correct\r",
																	"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
																	"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
																	"    //Category purpose code is correct\r",
																	"    let requestBodyResponseCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
																	"    let responseBodyResponseCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode; \r",
																	"    //Standing order info is correct\r",
																	"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
																	"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
																	"    //Remittance Information is correct\r",
																	"    let requestBodyRemittanceInformation = JSON.parse(request.data).remittanceInformation;\r",
																	"    let responseBodyRemittanceInformation = JSON.parse(responseBody).remittanceInformation; \r",
																	"    \r",
																	"    pm.test(\"Instructed amount is correct\", () => {\r",
																	"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Debtor account is correct\", () => {\r",
																	"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Postal account is correct\", () => {\r",
																	"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Category purpose code account is correct\", () => {\r",
																	"      pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Standing order info is correct\", () => {\r",
																	"      pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Remittance Information is correct\", () => {\r",
																	"      pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
																	"    });\r",
																	"        \r",
																	"    //Determine if assertion passed at whole\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
																	"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
																	"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
																	"    && pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode)\r",
																	"    && pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation)\r",
																	"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);    \r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "b7716df7-9d6e-44ef-9a82-cd9da3e2bcb2",
																"exec": [
																	"eval(globals.randomizeVariables)();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"creditorAccountNo\":  {{orangeAccountNo}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.02\r\n    },\r\n    \"structuredRemittanceInformation\": {{structuredRemittanceOrange}},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n    \"debitNote\": \"Expenses during company trip\",\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": true\t\t\r\n\t}\r\n}"
														},
														"url": {
															"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/orange/{{newPaymentOrangeID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"orange",
																"{{newPaymentOrangeID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "deletePaymentOrangeSO",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "b052005f-2923-4187-b074-d57b9d528ac5",
																"exec": [
																	"// Execute standard tests from PrS using eval()\r",
																	"//eval(globals.commonTests)();\r",
																	"\r",
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Orange (standing order) payment is deleted and not exists anymore\", function () {\r",
																	"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
																	"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
																	"    pm.response.to.have.status(200) \r",
																	"    && pm.expect(responseBodyStatus).to.eql(true)\r",
																	"    && pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
																	"});\r",
																	"\r",
																	"// Log important stuff\r",
																	"if (pm.response.to.have.status(200)){\r",
																	"    console.log(\"Deleted Orange (standing order) payment ID:\" + pm.globals.get(\"newPaymentOrangeID\"));\r",
																	"    pm.globals.set(\"deletedPaymentOrangeID\",pm.globals.get(\"newPaymentOrangeID\"));\r",
																	"    pm.globals.unset(\"newPaymentOrangeID\");\r",
																	"    pm.globals.unset(\"newPaymentOrangeStOrInfo\");\r",
																	"}\r",
																	"else {\r",
																	"    console.log(\"Failed to delete Orange (standing order) payment with ID:\" + pm.globals.get(\"newPaymentOrangeID\"));\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c6432cf5-6612-4349-bfe9-09f07fb5ad81",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/orange/{{newPaymentOrangeID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"orange",
																"{{newPaymentOrangeID}}"
															]
														}
													},
													"response": []
												}
											],
											"_postman_isSubFolder": true
										},
										{
											"name": "createPaymentOrange",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7865f16f-6d20-42b5-8eba-1f36d56c12fe",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Orange payment is created and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Postal account is correct\r",
															"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
															"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo; \r",
															"    //Remittance Information is correct\r",
															"    let requestBodyRemittanceInformation = JSON.parse(request.data).remittanceInformation;\r",
															"    let responseBodyRemittanceInformation = JSON.parse(responseBody).remittanceInformation; \r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Postal account is correct\", () => {\r",
															"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Remittance Information is correct\", () => {\r",
															"      pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
															"    });\r",
															"    \r",
															"    // check if payment is created\r",
															"    if (pm.response.to.have.status(201)){\r",
															"        var responseData = JSON.parse(responseBody);\r",
															"        pm.globals.set(\"newPaymentOrangeID\", responseData.paymentId);\r",
															"        console.log(\"New Orange payment ID: \" + pm.globals.get(\"newPaymentOrangeID\"));\r",
															"    }\r",
															"    else {\r",
															"        console.log(\"Failed to create Orange payment\");\r",
															"    }\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
															"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
															"    && pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "43ec7908-90fa-4ed3-aeb0-469e63bed2c8",
														"exec": [
															"eval(globals.randomizeVariables)();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"creditorAccountNo\":  {{orangeAccountNo}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.01\r\n    },\r\n    \"structuredRemittanceInformation\": {{structuredRemittanceOrange}},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n    \"debitNote\": \"Expenses during company trip\"\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/orange/",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"orange",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "getPaymentOrange",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c0ad3113-3213-4a17-b4ba-bd7b37c92701",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Orange payment is retrieved and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Postal account is correct\r",
															"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
															"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;    \r",
															"    //Remittance Information is correct\r",
															"    let requestBodyRemittanceInformation = JSON.parse(request.data).remittanceInformation;\r",
															"    let responseBodyRemittanceInformation = JSON.parse(responseBody).remittanceInformation; \r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Postal account is correct\", () => {\r",
															"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Remittance Information is correct\", () => {\r",
															"      pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
															"    });\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
															"    && pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ce014b34-a6c2-4f4b-8888-24c6fb947e85",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"creditorAccountNo\":  {{orangeAccountNo}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.01\r\n    },\r\n    \"structuredRemittanceInformation\": {{structuredRemittanceOrange}},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n    \"debitNote\": \"Expenses during company trip\"\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/orange/{{newPaymentOrangeID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"orange",
														"{{newPaymentOrangeID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "updatePaymentOrange",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6f176309-21db-4d5d-a0cb-862f288f13c4",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Orange payment is created and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Postal account is correct\r",
															"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
															"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
															"    //Remittance Information is correct\r",
															"    let requestBodyRemittanceInformation = JSON.parse(request.data).remittanceInformation;\r",
															"    let responseBodyRemittanceInformation = JSON.parse(responseBody).remittanceInformation; \r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Postal account is correct\", () => {\r",
															"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Remittance Information is correct\", () => {\r",
															"      pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
															"    });\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
															"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
															"    && pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f4270e1f-0e4c-4ef5-b43f-47ea37b0030c",
														"exec": [
															"eval(globals.randomizeVariables)();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"creditorAccountNo\":  {{orangeAccountNo}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.02\r\n    },\r\n    \"structuredRemittanceInformation\": {{structuredRemittanceOrange}},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n    \"debitNote\": \"Expenses during private trip\"\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/orange/{{newPaymentOrangeID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"orange",
														"{{newPaymentOrangeID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "deletePaymentOrange",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "92fd80cf-1182-4d29-97ab-fef9cc0b49d3",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Orange payment is deleted and not exists anymore\", function () {\r",
															"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
															"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
															"    pm.response.to.have.status(200) \r",
															"    && pm.expect(responseBodyStatus).to.eql(true)\r",
															"    && pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
															"});\r",
															"\r",
															"// Log important stuff\r",
															"if (pm.response.to.have.status(200)){\r",
															"    console.log(\"Deleted Orange payment ID:\" + pm.globals.get(\"newPaymentOrangeID\"));\r",
															"    pm.globals.set(\"deletedPaymentOrangeID\",pm.globals.get(\"newPaymentOrangeID\"));\r",
															"    pm.globals.unset(\"newPaymentOrangeID\");\r",
															"}\r",
															"else {\r",
															"    console.log(\"Failed to delete Orange payment with ID:\" + pm.globals.get(\"newPaymentOrangeID\"));\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f11ec94c-1897-45fd-9d8f-6d4d1edf00d1",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/orange/{{newPaymentOrangeID}}",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"orange",
														"{{newPaymentOrangeID}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Red",
									"item": [
										{
											"name": "Standing order",
											"item": [
												{
													"name": "createPaymentRedSO",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "870c5874-a029-447a-9a85-9312132fe949",
																"exec": [
																	"// Execute standard tests from PrS using eval()\r",
																	"//eval(globals.commonTests)();\r",
																	"\r",
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Red payment (standing order) is created and assertions are passed\", function () {\r",
																	"\r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    //State is correct\r",
																	"    let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    //Postal account is correct\r",
																	"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
																	"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;  \r",
																	"    //Standing order info is correct\r",
																	"   let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
																	"   let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder;\r",
																	"    //Remittance information is correct\r",
																	"    let requestBodyRemittanceInformation = JSON.parse(request.data).RemittanceInformation;\r",
																	"    let responseBodyRemittanceInformation = JSON.parse(responseBody).RemittanceInformation; \r",
																	"    \r",
																	"    pm.test(\"Instructed amount is correct\", () => {\r",
																	"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Debtor account is correct\", () => {\r",
																	"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Postal account is correct\", () => {\r",
																	"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Standing order info is correct\", () => {\r",
																	"     pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"   });\r",
																	"\r",
																	"    pm.test(\"Remittance information is correct\", () => {\r",
																	"      pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
																	"    });\r",
																	"    \r",
																	"    // check if payment is created\r",
																	"    if (pm.response.to.have.status(201)){\r",
																	"        var responseData = JSON.parse(responseBody);\r",
																	"         pm.globals.set(\"newPaymentRedID\", responseData.paymentId);\r",
																	"        pm.globals.set(\"newPaymentRedStOrInfo\", responseData.standingOrder);\r",
																	"        console.log(\"New Red payment (standing order) ID: \" + pm.globals.get(\"newPaymentRedID\"));\r",
																	"    }\r",
																	"    else {\r",
																	"        console.log(\"Failed to create Red payment (standing order)\");\r",
																	"    }\r",
																	"    \r",
																	"    //Determine if assertion passed at whole\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
																	"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
																	"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
																	"    && pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation)\r",
																	"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "2131bdfd-43a5-49ad-bf29-71737aaa9e1d",
																"exec": [
																	"eval(globals.randomizeVariables)();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"postalAccountNo\": {{postalAccountNo}},\t\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t  \r\n    \"remittanceInformation\": {\r\n        \"unstructured\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\"\r\n    },\r\n    \"debitNote\": \"Debit reference\",   \r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}}, \r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
														},
														"url": {
															"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/red",
															"host": [
																"{{environment}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"red"
															]
														}
													},
													"response": []
												},
												{
													"name": "getPaymentRedSO",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "f4d83bcc-5fde-4f5f-8c08-65ceefe8f1f3",
																"exec": [
																	"// Execute standard tests from PrS using eval()\r",
																	"//eval(globals.commonTests)();\r",
																	"\r",
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Red payment (standing order) is retrieved and assertions are passed\", function () {\r",
																	"\r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    //State is correct\r",
																	"    let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    //Postal account is correct\r",
																	"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
																	"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
																	"    //Standing order info is correct\r",
																	"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
																	"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder;\r",
																	"    //Remittance information is correct\r",
																	"    let requestBodyRemittanceInformation = JSON.parse(request.data).RemittanceInformation;\r",
																	"    let responseBodyRemittanceInformation = JSON.parse(responseBody).RemittanceInformation; \r",
																	"\r",
																	"    pm.test(\"Standing order is retrieved\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Instructed amount is correct\", () => {\r",
																	"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Debtor account is correct\", () => {\r",
																	"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Postal account is correct\", () => {\r",
																	"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Standing order info is correct\", () => {\r",
																	"      pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Remittance information is correct\", () => {\r",
																	"      pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
																	"    });\r",
																	"    \r",
																	"    //Determine if assertion passed at whole\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
																	"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
																	"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
																	"    && pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation)\r",
																	"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c5195533-b8b7-43d2-aecc-58dae7055210",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"remittanceInformation\": {\r\n        \"unstructured\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\"\r\n    },\r\n\t\"postalAccountNo\": {{postalAccountNo}},\t\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
														},
														"url": {
															"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/red/{{newPaymentRedID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"red",
																"{{newPaymentRedID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "updatePaymentRedSO",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "d08c7627-cc81-483c-a4b5-370e06eb9716",
																"exec": [
																	"// Execute standard tests from PrS using eval()\r",
																	"//eval(globals.commonTests)();\r",
																	"\r",
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Red payment (standing order) is updated and assertions are passed\", function () {\r",
																	"\r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    //State is correct\r",
																	"    let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    //Postal account is correct\r",
																	"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
																	"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
																	"    //Standing order info is correct\r",
																	"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
																	"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder;\r",
																	"    //Remittance information is correct\r",
																	"    let requestBodyRemittanceInformation = JSON.parse(request.data).RemittanceInformation;\r",
																	"    let responseBodyRemittanceInformation = JSON.parse(responseBody).RemittanceInformation; \r",
																	"    \r",
																	"    pm.test(\"Standing order is updated\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Instructed amount is correct\", () => {\r",
																	"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Debtor account is correct\", () => {\r",
																	"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Postal account is correct\", () => {\r",
																	"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Remittance information is correct\", () => {\r",
																	"      pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Standing order info is correct\", () => {\r",
																	"      pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"    });\r",
																	"    \r",
																	"    //Determine if assertion passed at whole\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
																	"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
																	"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
																	"    && pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation)\r",
																	"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "52f8511d-93d7-466f-ad15-ff6cf621a0dc",
																"exec": [
																	"eval(globals.randomizeVariables)();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"storeOnly\": false,\r\n\t\"locked\": false,       \r\n\t\"postalAccountNo\": {{postalAccountNo}},\t\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.02\r\n\t},\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
														},
														"url": {
															"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/red/{{newPaymentRedID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"red",
																"{{newPaymentRedID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "deletePaymentRedSO",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "605d9c26-dcb5-4b4b-8375-02963c18e1a5",
																"exec": [
																	"// Execute standard tests from PrS using eval()\r",
																	"//eval(globals.commonTests)();\r",
																	"\r",
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Red (standing order) payment is deleted and not exists anymore\", function () {\r",
																	"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
																	"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
																	"    pm.response.to.have.status(200) \r",
																	"    && pm.expect(responseBodyStatus).to.eql(true)\r",
																	"    && pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
																	"});\r",
																	"\r",
																	"// Log important stuff\r",
																	"if (pm.response.to.have.status(200)){\r",
																	"    console.log(\"Deleted Red (standing order) payment ID:\" + pm.globals.get(\"newPaymentRedID\"));\r",
																	"    pm.globals.set(\"deletedPaymentRedID\",pm.globals.get(\"newPaymentRedID\"));\r",
																	"    pm.globals.unset(\"newPaymentRedID\");\r",
																	"    pm.globals.unset(\"newPaymentRedStOrInfo\");\r",
																	"}\r",
																	"else {\r",
																	"    console.log(\"Failed to delete Red (standing order) payment with ID:\" + pm.globals.get(\"newPaymentRedID\"));\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "d5c1a20a-0e2c-485f-aad3-16319786b651",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{token}}",
																"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
																"disabled": true
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/red/{{newPaymentRedID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"red",
																"{{newPaymentRedID}}"
															]
														}
													},
													"response": []
												}
											],
											"_postman_isSubFolder": true
										},
										{
											"name": "createPaymentRed",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ab95b32e-c392-49e0-9310-46388960361a",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Red payment is created and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //State is correct\r",
															"    let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Postal account is correct\r",
															"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
															"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo; \r",
															"    //Remittance information is correct\r",
															"    let requestBodyRemittanceInformation = JSON.parse(request.data).RemittanceInformation;\r",
															"    let responseBodyRemittanceInformation = JSON.parse(responseBody).RemittanceInformation; \r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Postal account is correct\", () => {\r",
															"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Remittance information is correct\", () => {\r",
															"      pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
															"    });\r",
															"    \r",
															"    // check if payment is created\r",
															"    if (pm.response.to.have.status(201)){\r",
															"        var responseData = JSON.parse(responseBody);\r",
															"        pm.globals.set(\"newPaymentRedID\", responseData.paymentId);\r",
															"        console.log(\"New Red payment ID: \" + pm.globals.get(\"newPaymentRedID\"));\r",
															"    }\r",
															"    else {\r",
															"        console.log(\"Failed to create Red payment\");\r",
															"    }\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
															"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
															"    && pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1a6ceb6b-a729-43ca-8095-c36e90996703",
														"exec": [
															"eval(globals.randomizeVariables)();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"postalAccountNo\": {{postalAccountNo}},\t\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t  \r\n    \"remittanceInformation\": {\r\n        \"unstructured\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\"\r\n    },\r\n    \"debitNote\": \"Debit reference\",    \r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t}\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/red",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"red"
													]
												}
											},
											"response": []
										},
										{
											"name": "getPaymentRed",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "654a109e-93b5-414d-8250-ddcc710cb544",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Red payment is retrieved and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //State is correct\r",
															"    let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Postal account is correct\r",
															"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
															"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
															"    //Remittance information is correct\r",
															"    let requestBodyRemittanceInformation = JSON.parse(request.data).RemittanceInformation;\r",
															"    let responseBodyRemittanceInformation = JSON.parse(responseBody).RemittanceInformation; \r",
															"\r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Postal account is correct\", () => {\r",
															"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Remittance information is correct\", () => {\r",
															"      pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
															"    });\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
															"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
															"    && pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "934b422b-6fc8-4c21-bd40-474c24a5ccf8",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n    \"remittanceInformation\": {\r\n        \"unstructured\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\"\r\n    },\r\n\t\"postalAccountNo\": {{postalAccountNo}},\t\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t}\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/red/{{newPaymentRedID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"red",
														"{{newPaymentRedID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "updatePaymentRed",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5abb5b8e-c8dc-4731-a541-40b5d55e3c73",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Red payment is updated and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //State is correct\r",
															"    let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Postal account is correct\r",
															"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
															"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Postal account is correct\", () => {\r",
															"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
															"    });\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
															"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "18e736de-b01c-4111-889a-8b9aeeee3b3e",
														"exec": [
															"eval(globals.randomizeVariables)();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"storeOnly\": false,\r\n\t\"locked\": false,       \r\n\t\"postalAccountNo\": {{postalAccountNo}},\t\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},    \r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.02\r\n\t}\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/red/{{newPaymentRedID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"red",
														"{{newPaymentRedID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "deletePaymentRed",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8f0160e2-fd21-4896-8f51-5fbaa9ffc775",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Red payment is deleted and not exists anymore\", function () {\r",
															"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
															"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
															"    pm.response.to.have.status(200) \r",
															"    && pm.expect(responseBodyStatus).to.eql(true)\r",
															"    && pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
															"});\r",
															"\r",
															"// Log important stuff\r",
															"if (pm.response.to.have.status(200)){\r",
															"    console.log(\"Deleted Red payment ID:\" + pm.globals.get(\"newPaymentRedID\"));\r",
															"    pm.globals.set(\"deletedPaymentRedID\",pm.globals.get(\"newPaymentRedID\"));\r",
															"    pm.globals.unset(\"newPaymentRedID\");\r",
															"}\r",
															"else {\r",
															"    console.log(\"Failed to delete Red payment with ID:\" + pm.globals.get(\"newPaymentRedID\"));\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b0a25018-3fa7-4a18-9823-374422cd5906",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token}}",
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"disabled": true
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{env_payments}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/red/{{newPaymentRedID}}",
													"host": [
														"{{env_payments}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"red",
														"{{newPaymentRedID}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Domestic",
									"item": [
										{
											"name": "Standing order",
											"item": [
												{
													"name": "createPaymentSwissDomesticSO",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "e211b186-176e-48b0-b389-a0de926f3aef",
																"exec": [
																	"// Execute standard tests from PrS using eval()\r",
																	"//eval(globals.commonTests)();\r",
																	"\r",
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Swiss domestic (standing order) payment is created and assertions are passed\", function () {\r",
																	"\r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    //Creditor account is correct\r",
																	"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
																	"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
																	"    //chargesBearer is correct\r",
																	"    let responseBodyChargesBearer = JSON.parse(responseBody).chargesBearer; \r",
																	"    //Standing order info is correct\r",
																	"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
																	"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
																	"    \r",
																	"    pm.test(\"Instructed amount is correct\", () => {\r",
																	"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Debtor account is correct\", () => {\r",
																	"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Creditor account is correct\", () => {\r",
																	"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Charges bearer is correct\", () => {\r",
																	"      pm.expect(responseBodyChargesBearer).to.eql(\"SHAR\");\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Standing order info is correct\", () => {\r",
																	"      pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"    });\r",
																	"    \r",
																	"    // check if payment is created\r",
																	"    if (pm.response.to.have.status(201)){\r",
																	"        var responseData = JSON.parse(responseBody);\r",
																	"        pm.globals.set(\"newPaymentSwissDomesticID\", responseData.paymentId);\r",
																	"        pm.globals.set(\"newPaymentSwissDomesticStOrInfo\", responseData.standingOrder);\r",
																	"        console.log(\"New Swiss domestic (standing order) payment ID: \" + pm.globals.get(\"newPaymentSwissDomesticID\"));\r",
																	"    }\r",
																	"    else {\r",
																	"        console.log(\"Failed to create Swiss domestic (standing order) payment\");\r",
																	"    }\r",
																	"    \r",
																	"    //Determine if assertion passed at whole\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
																	"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
																	"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo)\r",
																	"    && pm.expect(responseBodyChargesBearer).to.eql(\"SHAR\")\r",
																	"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "8af75744-e90f-46e0-87f9-93ef669fe5fa",
																"exec": [
																	"eval(globals.randomizeVariables)();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoSwisDomestic}},\t\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"No debit information\",\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
														},
														"url": {
															"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/swiss/",
															"host": [
																"{{environment}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"swiss",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "getPaymentSwissDomesticSO",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "f099f638-e4c5-4d6f-a29d-7b48cb19a82c",
																"exec": [
																	"// Execute standard tests from PrS using eval()\r",
																	"//eval(globals.commonTests)();\r",
																	"\r",
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Swiss domestic (standing order) payment is retrieved and assertions are passed\", function () {\r",
																	"\r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    //Creditor account is correct\r",
																	"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
																	"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
																	"    //chargesBearer is correct\r",
																	"    let responseBodyChargesBearer = JSON.parse(responseBody).chargesBearer; \r",
																	"    //Standing order info is correct\r",
																	"    let requestBodyStandingOrder = pm.globals.get(\"newPaymentSwissDomesticStOrInfo\");\r",
																	"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
																	"    \r",
																	"    pm.test(\"Instructed amount is correct\", () => {\r",
																	"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Debtor account is correct\", () => {\r",
																	"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Creditor account is correct\", () => {\r",
																	"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Charges bearer is correct\", () => {\r",
																	"      pm.expect(responseBodyChargesBearer).to.eql(\"SHAR\");\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Standing order info is correct\", () => {\r",
																	"      pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"    });\r",
																	"    \r",
																	"    //Determine if assertion passed at whole\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
																	"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
																	"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo)\r",
																	"    && pm.expect(responseBodyChargesBearer).to.eql(\"SHAR\")\r",
																	"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "cb881aa5-5c00-4045-b69d-12d0d5026b5f",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoSwisDomestic}},\t\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"No debit information\",\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
														},
														"url": {
															"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/swiss/{{newPaymentSwissDomesticID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"swiss",
																"{{newPaymentSwissDomesticID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "updatePaymentSwissDomesticSO",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "24d2badb-88cf-4d86-a4ec-23f6ca4ecaae",
																"exec": [
																	"// Execute standard tests from PrS using eval()\r",
																	"//eval(globals.commonTests)();\r",
																	"\r",
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Swiss domestic (standing order) payment is updated and assertions are passed\", function () {\r",
																	"\r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    //Creditor account is correct\r",
																	"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
																	"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
																	"    //chargesBearer is correct\r",
																	"    let responseBodyChargesBearer = JSON.parse(responseBody).chargesBearer; \r",
																	"    //Creditor info is correct\r",
																	"    let requestBodyCreditorInfo = JSON.parse(request.data).creditor;\r",
																	"    let responseBodyCreditorInfo = JSON.parse(responseBody).creditor; \r",
																	"    //Debit note is correct\r",
																	"    let requestBodyDebitNote = JSON.parse(request.data).debitNote;\r",
																	"    let responseBodyDebitNote = JSON.parse(responseBody).debitNote; \r",
																	"    //Standing order info is correct\r",
																	"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
																	"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
																	"    \r",
																	"    pm.test(\"Instructed amount is correct\", () => {\r",
																	"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Debtor account is correct\", () => {\r",
																	"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Creditor account is correct\", () => {\r",
																	"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Creditor info is correct\", () => {\r",
																	"      pm.expect(responseBodyCreditorInfo).to.eql(requestBodyCreditorInfo);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Debit note is correct\", () => {\r",
																	"      pm.expect(responseBodyDebitNote).to.eql(requestBodyDebitNote);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Charges bearer is correct\", () => {\r",
																	"      pm.expect(responseBodyChargesBearer).to.eql(\"SHAR\");\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Standing order info is correct\", () => {\r",
																	"      pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"    });\r",
																	"    \r",
																	"    //Determine if assertion passed at whole\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
																	"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
																	"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo)\r",
																	"    && pm.expect(responseBodyCreditorInfo).to.eql(requestBodyCreditorInfo)\r",
																	"    && pm.expect(responseBodyDebitNote).to.eql(requestBodyDebitNote)\r",
																	"    && pm.expect(responseBodyChargesBearer).to.eql(\"SHAR\")\r",
																	"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "91c366f4-91b6-4881-a626-f6f45fb23293",
																"exec": [
																	"eval(globals.randomizeVariables)();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoSwisDomestic}},\t\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.02\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"No debit information\",\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": true\t\t\r\n\t}\r\n}"
														},
														"url": {
															"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/swiss/{{newPaymentSwissDomesticID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"swiss",
																"{{newPaymentSwissDomesticID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "deletePaymentSwissDomesticSO",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "3a62feb7-b8de-4e54-90ee-a397b5b737a3",
																"exec": [
																	"// Execute standard tests from PrS using eval()\r",
																	"//eval(globals.commonTests)();\r",
																	"\r",
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Swiss domestic (standing order) payment is deleted and not exists anymore\", function () {\r",
																	"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
																	"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
																	"    pm.response.to.have.status(200) \r",
																	"    && pm.expect(responseBodyStatus).to.eql(true)\r",
																	"    && pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
																	"});\r",
																	"\r",
																	"// Log important stuff\r",
																	"if (pm.response.to.have.status(200)){\r",
																	"    console.log(\"Deleted Swiss domestic (standing order) payment ID:\" + pm.globals.get(\"newPaymentSwissDomesticID\"));\r",
																	"    pm.globals.set(\"deletedSwissDomesticPaymentID\",pm.globals.get(\"newPaymentSwissDomesticID\"));\r",
																	"    pm.globals.unset(\"newPaymentSwissDomesticID\");\r",
																	"    pm.globals.unset(\"newPaymentSwissDomesticStOrInfo\");\r",
																	"}\r",
																	"else {\r",
																	"    console.log(\"Failed to delete Swiss domestic (standing order) payment with ID:\" + pm.globals.get(\"newPaymentSwissDomesticID\"));\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "e5cf2ede-61a0-4999-a2da-0859df76cb77",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{token}}",
																"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
																"disabled": true
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/swiss/{{newPaymentSwissDomesticID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"swiss",
																"{{newPaymentSwissDomesticID}}"
															]
														}
													},
													"response": []
												}
											],
											"_postman_isSubFolder": true
										},
										{
											"name": "createPaymentSwissDomestic",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "50a7bd43-c9f2-4fbb-b759-7362bb5c20cf",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Swiss domestic payment is created and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
															"    //chargesBearer is correct\r",
															"    let requestBodyChargesBearer = JSON.parse(request.data).chargesBearer;\r",
															"    let responseBodyChargesBearer = JSON.parse(responseBody).chargesBearer; \r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Creditor account is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Charges bearer is correct\", () => {\r",
															"      pm.expect(responseBodyChargesBearer).to.eql(requestBodyChargesBearer);\r",
															"    });\r",
															"    \r",
															"    // check if payment is created\r",
															"    if (pm.response.to.have.status(201)){\r",
															"        var responseData = JSON.parse(responseBody);\r",
															"        pm.globals.set(\"newPaymentSwissDomesticID\", responseData.paymentId);\r",
															"        console.log(\"New Swiss domestic payment ID: \" + pm.globals.get(\"newPaymentSwissDomesticID\"));\r",
															"    }\r",
															"    else {\r",
															"        console.log(\"Failed to create Swiss domestic payment\");\r",
															"    }\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
															"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo)\r",
															"    && pm.expect(responseBodyChargesBearer).to.eql(requestBodyChargesBearer);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "bcd7c76b-0b6c-47f1-84a6-c58af26607fe",
														"exec": [
															"eval(globals.randomizeVariables)();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoSwisDomestic}},\t\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"remittanceInformation\": {\r\n        \"unstructured\": \"unstructured\"\r\n    },    \r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"No new information needed\",\r\n    \"chargesBearer\": \"DEBT\"\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/swiss/",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"swiss",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "getPaymentSwissDomestic",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6103ffb5-00e8-4dbb-88f8-35556a86d0e7",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Swiss domestic payment is retrieved and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
															"    //chargesBearer is correct\r",
															"    let requestBodyChargesBearer = JSON.parse(request.data).chargesBearer;\r",
															"    let responseBodyChargesBearer = JSON.parse(responseBody).chargesBearer; \r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Creditor account is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Charges bearer is correct\", () => {\r",
															"      pm.expect(responseBodyChargesBearer).to.eql(requestBodyChargesBearer);\r",
															"    });\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
															"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo)\r",
															"    && pm.expect(responseBodyChargesBearer).to.eql(requestBodyChargesBearer);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0452d030-fd3d-45fd-a12e-87884059be24",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoSwisDomestic}},\t\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"remittanceInformation\": {\r\n        \"unstructured\": \"unstructured\"\r\n    },    \r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"No new information needed\",\r\n    \"chargesBearer\": \"DEBT\"\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/swiss/{{newPaymentSwissDomesticID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"swiss",
														"{{newPaymentSwissDomesticID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "updatePaymentSwissDomestic",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c99db165-75c4-4058-881d-8c54916aed1d",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Swiss domestic payment is updated and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
															"    //chargesBearer is correct\r",
															"    let requestBodyChargesBearer = JSON.parse(request.data).chargesBearer;\r",
															"    let responseBodyChargesBearer = JSON.parse(responseBody).chargesBearer; \r",
															"    //Creditor info is correct\r",
															"    let requestBodyCreditorInfo = JSON.parse(request.data).creditor;\r",
															"    let responseBodyCreditorInfo = JSON.parse(responseBody).creditor; \r",
															"    //Debit note is correct\r",
															"    let requestBodyDebitNote = JSON.parse(request.data).debitNote;\r",
															"    let responseBodyDebitNote = JSON.parse(responseBody).debitNote; \r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Creditor account is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Creditor info is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorInfo).to.eql(requestBodyCreditorInfo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debit note is correct\", () => {\r",
															"      pm.expect(responseBodyDebitNote).to.eql(requestBodyDebitNote);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Charges bearer is correct\", () => {\r",
															"      pm.expect(responseBodyChargesBearer).to.eql(requestBodyChargesBearer);\r",
															"    });\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
															"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo)\r",
															"    && pm.expect(responseBodyCreditorInfo).to.eql(requestBodyCreditorInfo)\r",
															"    && pm.expect(responseBodyDebitNote).to.eql(requestBodyDebitNote)\r",
															"    && pm.expect(responseBodyChargesBearer).to.eql(requestBodyChargesBearer);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "494e2d6b-40d8-4a7a-8c8f-efe8aaf7f8eb",
														"exec": [
															"eval(globals.randomizeVariables)();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoSwisDomestic}},\t\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.02\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"Still no debit information\",\r\n    \"chargesBearer\": \"SHAR\"\t\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/swiss/{{newPaymentSwissDomesticID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"swiss",
														"{{newPaymentSwissDomesticID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "deletePaymentSwissDomestic",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ad627cc4-48b4-4a6d-b2ee-2024d377c61d",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Swiss domestic payment is deleted and not exists anymore\", function () {\r",
															"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
															"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
															"    pm.response.to.have.status(200) \r",
															"    && pm.expect(responseBodyStatus).to.eql(true)\r",
															"    && pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
															"});\r",
															"\r",
															"// Log important stuff\r",
															"if (pm.response.to.have.status(200)){\r",
															"    console.log(\"Deleted Swiss domestic payment ID:\" + pm.globals.get(\"newPaymentSwissDomesticID\"));\r",
															"    pm.globals.set(\"deletedSwissDomesticPaymentID\",pm.globals.get(\"newPaymentSwissDomesticID\"));\r",
															"    pm.globals.unset(\"newPaymentSwissDomesticID\");\r",
															"}\r",
															"else {\r",
															"    console.log(\"Failed to delete Swiss domestic payment with ID:\" + pm.globals.get(\"newPaymentSwissDomesticID\"));\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3452172b-a6df-4e25-be52-47a4a764380d",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token}}",
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"disabled": true
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/swiss/{{newPaymentSwissDomesticID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"swiss",
														"{{newPaymentSwissDomesticID}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "UK",
							"item": [
								{
									"name": "Standing order",
									"item": [
										{
											"name": "createPaymentUKSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3e23ab1a-159a-4529-9401-f978245caa7a",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" UK (standing order) payment is created and assertions are passed\", function () {\r",
															"\r",
															"    //Payment type is correct\r",
															"    let requestBodyPaymentType = JSON.parse(request.data).paymentType;\r",
															"    let responseBodyPaymentType = JSON.parse(responseBody).paymentType;\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //Creditor agent sort code is correct\r",
															"    let requestBodyCreditorAgentSortCode = JSON.parse(request.data).creditorAgentSortCode;\r",
															"    let responseBodyCreditorAgentSortCode = JSON.parse(responseBody).creditorAgentSortCode;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo;   \r",
															"    //Postal account is correct\r",
															"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
															"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo; \r",
															"    //categoryPurposeCode is correct\r",
															"    let requestBodyCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
															"    let responseBodyCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode; \r",
															"    //Standing order info is correct\r",
															"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
															"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
															"\r",
															"    pm.test(\"Payment type is correct\", () => {\r",
															"      pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Creditor agent sort code is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAgentSortCode).to.eql(requestBodyCreditorAgentSortCode);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Creditor account is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Postal account is correct\", () => {\r",
															"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Category purpose code is correct\", () => {\r",
															"      pm.expect(responseBodyCategoryPurposeCode).to.eql(requestBodyCategoryPurposeCode);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Standing order info is correct\", () => {\r",
															"      pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"    });\r",
															"    \r",
															"    // check if payment is created\r",
															"    if (pm.response.to.have.status(201)){\r",
															"        var responseData = JSON.parse(responseBody);\r",
															"        pm.globals.set(\"newPaymentUkID\", responseData.paymentId);\r",
															"        pm.globals.set(\"newPaymentUKStOrInfo\", responseData.standingOrder);\r",
															"        console.log(\"New UK (standing order) payment ID: \" + pm.globals.get(\"newPaymentUkID\"));\r",
															"    }\r",
															"    else {\r",
															"        console.log(\"Failed to create UK (standing order) payment\");\r",
															"    }\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType)\r",
															"    && pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyCreditorAgentSortCode).to.eql(requestBodyCreditorAgentSortCode)\r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
															"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo)\r",
															"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
															"    && pm.expect(responseBodyCategoryPurposeCode).to.eql(requestBodyCategoryPurposeCode)\r",
															"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6b5bde46-7ddd-4fb1-a0fa-a89e6006834f",
														"exec": [
															"// paymentType: [Faster,CHAPS]",
															"let paymentTypeUK = parseInt(Math.random() * 2) ?  \"Faster\" : \"CHAPS\";",
															"pm.environment.set(\"paymentTypeUK\", paymentTypeUK);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"paymentType\": \"{{paymentTypeUK}}\",\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"GBP\"\r\n        },\r\n        \"value\": 2.01\r\n    },\r\n    \"remittanceInformation\": {\r\n        \"structured\": \"224812900001336000000054583\"\r\n    },\r\n    \"creditorAccountNo\": {{creditorAccountNo}},\r\n    \"creditorAgentSortCode\": \"601437\",\r\n    \"creditor\": {\r\n        \"name\": \"{{$randomFullName}}\"\r\n    },\r\n    \t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t},\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"template\": true,\r\n\t\"debitNote\": \"Expenses during company trip\"\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/UKPayment/{{tenant}}/v1/credittransfer",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"UKPayment",
														"{{tenant}}",
														"v1",
														"credittransfer"
													]
												}
											},
											"response": []
										},
										{
											"name": "getPaymentUKSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d2767019-f149-4c1b-9654-c75d1abad58c",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" UK (standing order) payment is retrieved and assertions are passed\", function () {\r",
															"\r",
															"    //Payment type is correct\r",
															"    let requestBodyPaymentType = JSON.parse(request.data).paymentType;\r",
															"    let responseBodyPaymentType = JSON.parse(responseBody).paymentType;\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo;     \r",
															"    //Postal account is correct\r",
															"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
															"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
															"    //Category purpose code is correct\r",
															"    let requestBodyResponseCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
															"    let responseBodyResponseCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode;   \r",
															"    //Standing order info is correct\r",
															"    let requestBodyStandingOrder = pm.globals.get(\"newPaymentUKStOrInfo\");\r",
															"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
															"\r",
															"    pm.test(\"Payment type is correct\", () => {\r",
															"      pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Creditor account is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Postal account is correct\", () => {\r",
															"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Category purpose code account is correct\", () => {\r",
															"      pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Standing order info is correct\", () => {\r",
															"      pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"    });\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType)\r",
															"    && pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
															"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo)\r",
															"    && pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode)\r",
															"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f1f305f0-0dea-42ab-9946-1d52d300ec0d",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"paymentType\": \"{{paymentTypeUK}}\",\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"GBP\"\r\n        },\r\n        \"value\": 2.01\r\n    },\r\n    \"remittanceInformation\": {\r\n        \"structured\": \"224812900001336000000054583\"\r\n    },\r\n    \"creditorAccountNo\": {{creditorAccountNo}},\r\n    \"creditorAgentSortCode\": \"601437\",\r\n    \"creditor\": {\r\n        \"name\": \"{{$randomFullName}}\"\r\n    },\r\n    \t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t},\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"template\": true,\r\n\t\"debitNote\": \"Expenses during company trip\"\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/UKPayment/{{tenant}}/v1/credittransfer/{{newPaymentUkID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"UKPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"{{newPaymentUkID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "updatePaymentUKSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ecd7c02c-4264-4a4f-8a67-f5800928f162",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" UK (standing order) payment is created and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //Payment type is correct\r",
															"    let requestBodyPaymentType = JSON.parse(request.data).paymentType;\r",
															"    let responseBodyPaymentType = JSON.parse(responseBody).paymentType;\r",
															"    //Creditor agent sort code is correct\r",
															"    let requestBodyCreditorAgentSortCode = JSON.parse(request.data).creditorAgentSortCode;\r",
															"    let responseBodyCreditorAgentSortCode = JSON.parse(responseBody).creditorAgentSortCode;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo;   \r",
															"    //Postal account is correct\r",
															"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
															"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
															"    //Category purpose code is correct\r",
															"    let requestBodyResponseCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
															"    let responseBodyResponseCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode; \r",
															"\r",
															"    pm.test(\"Payment type is correct\", () => {\r",
															"      pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Creditor agent sort code is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAgentSortCode).to.eql(requestBodyCreditorAgentSortCode);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Creditor account is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Postal account is correct\", () => {\r",
															"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Category purpose code account is correct\", () => {\r",
															"      pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
															"    });\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType) \r",
															"    && pm.expect(responseBodyCreditorAgentSortCode).to.eql(requestBodyCreditorAgentSortCode)\r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
															"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo)\r",
															"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
															"    && pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0edc5b34-9c99-4666-b3eb-46b396a09e16",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"paymentType\": \"{{paymentTypeUK}}\",\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"GBP\"\r\n        },\r\n        \"value\": 2.02\r\n    },\r\n    \"remittanceInformation\": {\r\n        \"structured\": \"224812900001336000000054385\"\r\n    },\r\n    \"creditorAccountNo\": {{creditorAccountNo}},\r\n    \"creditorAgentSortCode\": \"601437\",\r\n    \"creditor\": {\r\n        \"name\": \"{{$randomFullName}}\"\r\n    },\r\n    \t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t},\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"template\": true,\r\n\t\"debitNote\": \"Expenses during company trip\"\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/UKPayment/{{tenant}}/v1/credittransfer/{{newPaymentUkID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"UKPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"{{newPaymentUkID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "deletePaymentUKSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "71210c0f-4e2b-4047-aec7-e3686073def3",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" UK (standing order) payment is deleted and not exists anymore\", function () {\r",
															"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
															"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
															"    pm.response.to.have.status(200) \r",
															"    && pm.expect(responseBodyStatus).to.eql(true)\r",
															"    && pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
															"});\r",
															"\r",
															"// Log important stuff\r",
															"if (pm.response.to.have.status(200)){\r",
															"    console.log(\"Deleted UK (standing order) payment ID:\" + pm.globals.get(\"newPaymentUkID\"));\r",
															"    pm.globals.set(\"deletedPaymentUkID\",pm.globals.get(\"newPaymentUkID\"));\r",
															"    pm.globals.unset(\"newPaymentUkID\");\r",
															"    pm.globals.unset(\"newPaymentUKStOrInfo\");\r",
															"}\r",
															"else {\r",
															"    console.log(\"Failed to delete UK (standing order) payment with ID:\" + pm.globals.get(\"newPaymentUkID\"));\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "080138d5-ac82-44a6-a0b4-daef28a4aa60",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token}}",
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"disabled": true
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/UKPayment/{{tenant}}/v1/credittransfer/{{newPaymentUkID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"UKPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"{{newPaymentUkID}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "createPaymentUK",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "546145dd-d921-4c60-b0f3-b168773dfc4d",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" UK payment is created and assertions are passed\", function () {\r",
													"\r",
													"    //Payment type is correct\r",
													"    let requestBodyPaymentType = JSON.parse(request.data).paymentType;\r",
													"    let responseBodyPaymentType = JSON.parse(responseBody).paymentType;\r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    //Creditor agent sort code is correct\r",
													"    let requestBodyCreditorAgentSortCode = JSON.parse(request.data).creditorAgentSortCode;\r",
													"    let responseBodyCreditorAgentSortCode = JSON.parse(responseBody).creditorAgentSortCode;\r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"    //Postal account is correct\r",
													"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
													"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo; \r",
													"    //remittanceInfo is correct\r",
													"    let requestBodyRemittanceInfo = JSON.parse(request.data).remittanceInfo;\r",
													"    let responseBodyRemittanceInfo = JSON.parse(responseBody).remittanceInfo;\r",
													"\r",
													"    pm.test(\"Payment type is correct\", () => {\r",
													"      pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Instructed amount is correct\", () => {\r",
													"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Creditor agent sort code is correct\", () => {\r",
													"      pm.expect(responseBodyCreditorAgentSortCode).to.eql(requestBodyCreditorAgentSortCode);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Debtor account is correct\", () => {\r",
													"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Postal account is correct\", () => {\r",
													"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Remittance info is correct\", () => {\r",
													"      pm.expect(responseBodyRemittanceInfo).to.eql(requestBodyRemittanceInfo);\r",
													"    });\r",
													"    \r",
													"    // check if payment is created\r",
													"    if (pm.response.to.have.status(201)){\r",
													"        var responseData = JSON.parse(responseBody);\r",
													"        pm.globals.set(\"newPaymentUkID\", responseData.paymentId);\r",
													"        console.log(\"New UK payment ID: \" + pm.globals.get(\"newPaymentUkID\"));\r",
													"    }\r",
													"    else {\r",
													"        console.log(\"Failed to create UK payment\");\r",
													"    }\r",
													"    \r",
													"    //Determine if assertion passed at whole\r",
													"    pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType)\r",
													"    && pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"    && pm.expect(responseBodyCreditorAgentSortCode).to.eql(requestBodyCreditorAgentSortCode)\r",
													"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
													"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
													"    && pm.expect(responseBodyRemittanceInfo).to.eql(requestBodyRemittanceInfo);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "24f9b8ed-b514-4be8-a2b3-9ed20c8c9558",
												"exec": [
													"// paymentType: [Faster,CHAPS]",
													"let paymentTypeUK = parseInt(Math.random() * 2) ?  \"Faster\" : \"CHAPS\";",
													"pm.environment.set(\"paymentTypeUK\", paymentTypeUK);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"paymentType\": \"{{paymentTypeUK}}\",\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"GBP\"\r\n        },\r\n        \"value\": 2.01\r\n    },\r\n\t\"remittanceInfo\": {\r\n    \t\"unstructured\": \"Beneficiary reference\"\r\n\t},\r\n    \"creditorAccountNo\": {{creditorAccountNoUK}},\r\n    \"creditorAgentSortCode\": \"601437\",\r\n    \"creditor\": {\r\n        \"name\": \"{{$randomFullName}}\"\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"template\": true,\r\n\t\"debitNote\": \"Expenses during company trip\"\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/UKPayment/{{tenant}}/v1/credittransfer",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"UKPayment",
												"{{tenant}}",
												"v1",
												"credittransfer"
											]
										}
									},
									"response": []
								},
								{
									"name": "getPaymentUK",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b52cbab6-2779-41ca-8883-b471b5c6b644",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" UK payment is retrieved and assertions are passed\", function () {\r",
													"\r",
													"    //Payment type is correct\r",
													"    let requestBodyPaymentType = JSON.parse(request.data).paymentType;\r",
													"    let responseBodyPaymentType = JSON.parse(responseBody).paymentType;\r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    //State is correct\r",
													"    let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"    //Postal account is correct\r",
													"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
													"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
													"    //remittanceInfo is correct\r",
													"    let requestBodyRemittanceInfo = JSON.parse(request.data).remittanceInfo;\r",
													"    let responseBodyRemittanceInfo = JSON.parse(responseBody).remittanceInfo;\r",
													"\r",
													"    pm.test(\"Payment type is correct\", () => {\r",
													"      pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Instructed amount is correct\", () => {\r",
													"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Debtor account is correct\", () => {\r",
													"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Postal account is correct\", () => {\r",
													"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Remittance info is correct\", () => {\r",
													"      pm.expect(responseBodyRemittanceInfo).to.eql(requestBodyRemittanceInfo);\r",
													"    });\r",
													"    \r",
													"    //Determine if assertion passed at whole\r",
													"    pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType)\r",
													"    && pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
													"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
													"    && pm.expect(responseBodyRemittanceInfo).to.eql(requestBodyRemittanceInfo);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ee6a7df7-84e9-472b-9325-6993404f0957",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"paymentType\": \"{{paymentTypeUK}}\",\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"GBP\"\r\n        },\r\n        \"value\": 2.01\r\n    },\r\n\t\"remittanceInfo\": {\r\n    \t\"unstructured\": \"Beneficiary reference\"\r\n\t},\r\n    \"creditorAccountNo\": {{creditorAccountNoUK}},\r\n    \"creditorAgentSortCode\": \"601437\",\r\n    \"creditor\": {\r\n        \"name\": \"{{$randomFullName}}\"\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"template\": true,\r\n\t\"debitNote\": \"Expenses during company trip\"\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/UKPayment/{{tenant}}/v1/credittransfer/{{newPaymentUkID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"UKPayment",
												"{{tenant}}",
												"v1",
												"credittransfer",
												"{{newPaymentUkID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "updatePaymentUK",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7fceecf8-f81f-4f14-9f13-8b4578e591eb",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" UK payment is created and assertions are passed\", function () {\r",
													"\r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    //Payment type is correct\r",
													"    let requestBodyPaymentType = JSON.parse(request.data).paymentType;\r",
													"    let responseBodyPaymentType = JSON.parse(responseBody).paymentType;\r",
													"    //Creditor agent sort code is correct\r",
													"    let requestBodyCreditorAgentSortCode = JSON.parse(request.data).creditorAgentSortCode;\r",
													"    let responseBodyCreditorAgentSortCode = JSON.parse(responseBody).creditorAgentSortCode;\r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"    //Postal account is correct\r",
													"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
													"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
													"\r",
													"    pm.test(\"Payment type is correct\", () => {\r",
													"      pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Instructed amount is correct\", () => {\r",
													"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Creditor agent sort code is correct\", () => {\r",
													"      pm.expect(responseBodyCreditorAgentSortCode).to.eql(requestBodyCreditorAgentSortCode);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Debtor account is correct\", () => {\r",
													"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Postal account is correct\", () => {\r",
													"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
													"    });\r",
													"    \r",
													"    //Determine if assertion passed at whole\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"    && pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType) \r",
													"    && pm.expect(responseBodyCreditorAgentSortCode).to.eql(requestBodyCreditorAgentSortCode)\r",
													"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
													"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2c3be08b-a4da-4ef0-8010-4d457bcdd1c4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"paymentType\": \"{{paymentTypeUK}}\",\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"GBP\"\r\n        },\r\n        \"value\": 2.01\r\n    },\r\n    \"remittanceInformation\": {\r\n        \"structured\": \"224812900001336000000054385\"\r\n    },\r\n    \"creditorAccountNo\": {{creditorAccountNo}},\r\n    \"creditorAgentSortCode\": \"601437\",\r\n    \"creditor\": {\r\n        \"name\": \"{{$randomFullName}}\"\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"template\": true,\r\n\t\"debitNote\": \"Expenses during company trip\"\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/UKPayment/{{tenant}}/v1/credittransfer/{{newPaymentUkID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"UKPayment",
												"{{tenant}}",
												"v1",
												"credittransfer",
												"{{newPaymentUkID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "deletePaymentUK",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3949ddb-ea3b-4c74-a3a2-a2d7d6d72bf2",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" UK payment is deleted and not exists anymore\", function () {\r",
													"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
													"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
													"    pm.response.to.have.status(200) \r",
													"    && pm.expect(responseBodyStatus).to.eql(true)\r",
													"    && pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
													"});\r",
													"\r",
													"// Log important stuff\r",
													"if (pm.response.to.have.status(200)){\r",
													"    console.log(\"Deleted UK payment ID:\" + pm.globals.get(\"newPaymentUkID\"));\r",
													"    pm.globals.set(\"deletedPaymentUkID\",pm.globals.get(\"newPaymentUkID\"));\r",
													"    pm.globals.unset(\"newPaymentUkID\");\r",
													"}\r",
													"else {\r",
													"    console.log(\"Failed to delete UK payment with ID:\" + pm.globals.get(\"newPaymentUkID\"));\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "883fca44-a00c-42bc-b5fa-bb1430863644",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"disabled": true
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/UKPayment/{{tenant}}/v1/credittransfer/{{newPaymentUkID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"UKPayment",
												"{{tenant}}",
												"v1",
												"credittransfer",
												"{{newPaymentUkID}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Balance adjustment",
							"item": [
								{
									"name": "createPaymentBalanceAdjustment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4dace1b6-cb4d-4966-b172-a7299924785a",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Balance adjustment payment is created and assertions are passed\", function () {\r",
													"\r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    \r",
													"    //REMOVED: Impossible to setup all needed requirements for automated execution\r",
													"    //State is correct\r",
													"    //let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
													"\r",
													"    //Transfer type is correct\r",
													"    let requestBodyTypeOfTransfer = JSON.parse(request.data).typeOfTransfer;\r",
													"    let responseBodyTypeOfTransfer = JSON.parse(responseBody).typeOfTransfer; \r",
													"\r",
													"    //Type of amount is correct\r",
													"    let requestBodyTypeOfAmount = JSON.parse(request.data).typeOfAmount;\r",
													"    let responseBodyTypeOfAmount = JSON.parse(responseBody).typeOfAmount; \r",
													"    \r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"\r",
													"    //Creditor account is correct\r",
													"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
													"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo;   \r",
													"\r",
													"    pm.test(\"Instructed amount is correct\", () => {\r",
													"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    });\r",
													"\r",
													"    //pm.test(\"State is correct\", () => {\r",
													"    //  pm.expect(jsonDataResponsePaymentState).to.eql(\"READY_FOR_EXECUTION\");\r",
													"    //});\r",
													"\r",
													"    pm.test(\"Type of transfer is correct\", () => {\r",
													"      pm.expect(responseBodyTypeOfTransfer).to.eql(requestBodyTypeOfTransfer);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Type of amount is correct\", () => {\r",
													"      pm.expect(responseBodyTypeOfAmount).to.eql(requestBodyTypeOfAmount);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Debtor account is correct\", () => {\r",
													"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Creditor account is correct\", () => {\r",
													"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"    });\r",
													"    \r",
													"    // check if payment is created\r",
													"    if (pm.response.to.have.status(201)){\r",
													"        var responseData = JSON.parse(responseBody);\r",
													"        pm.globals.set(\"newPaymentBalanceAdjustmentID\", responseData.paymentId);\r",
													"        console.log(\"New balance adjustment payment ID: \" + pm.globals.get(\"newPaymentBalanceAdjustmentID\"));\r",
													"    }\r",
													"    else {\r",
													"        console.log(\"Failed to create balance adjustment payment\");\r",
													"    }\r",
													"    \r",
													"    //Determine if assertion passed at whole\r",
													"    pm.expect(responseBodyTypeOfTransfer).to.eql(requestBodyTypeOfTransfer)\r",
													"    && pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"    // && pm.expect(jsonDataResponsePaymentState).to.eql(\"READY_FOR_EXECUTION\") \r",
													"    && pm.expect(responseBodyTypeOfAmount).to.eql(requestBodyTypeOfAmount)\r",
													"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
													"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b346dad3-fd1d-4e0c-b3ac-27457f016680",
												"exec": [
													"// 1248081507: CH9512312001248081507, CH6312312001248081501"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"typeOfTransfer\": \"TRANSFER_SPARE_CASH_TO_CREDIT_ACCOUNT\",\r\n\t\"cashBalanceThreshold\": 2303.56,\r\n\t\"typeOfAmount\": \"FIXED_AMOUNT\",\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.34\r\n    },\r\n\t\"remittanceInformation\": {\r\n    \t\"unstructured\": \"unstructured remittance\"\r\n\t},\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"creditorAccountNo\": {{creditorAccountNoBalanceAdjustment}},\r\n\t\"debitNote\": \"Expenses for SW implementation\",\r\n\t\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitForm\": \"SIA\"\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/balanceadjustment",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"accounttransfer",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"balanceadjustment"
											]
										}
									},
									"response": []
								},
								{
									"name": "getPaymentBalanceAdjustment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24b57fa3-c13a-486e-be5a-10867e9d2d2b",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Balance adjustment payment is retrieved and assertions are passed\", function () {\r",
													"\r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    \r",
													"    //REMOVED: Impossible to setup all needed requirements for automated execution\r",
													"    //State is correct\r",
													"    //let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
													"    \r",
													"    //Transfer type is correct\r",
													"    let requestBodyTypeOfTransfer = JSON.parse(request.data).typeOfTransfer;\r",
													"    let responseBodyTypeOfTransfer = JSON.parse(responseBody).typeOfTransfer;    \r",
													"    \r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"    \r",
													"    //Category purpose code is correct\r",
													"    let requestBodyResponseCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
													"    let responseBodyResponseCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode;   \r",
													"\r",
													"    pm.test(\"Instructed amount is correct\", () => {\r",
													"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    });\r",
													"\r",
													"    //pm.test(\"State is correct\", () => {\r",
													"    //  pm.expect(jsonDataResponsePaymentState).to.eql(\"READY_FOR_EXECUTION\");\r",
													"    //});\r",
													"\r",
													"    pm.test(\"Type of transfer is correct\", () => {\r",
													"      pm.expect(responseBodyTypeOfTransfer).to.eql(requestBodyTypeOfTransfer);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Debtor account is correct\", () => {\r",
													"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Category purpose code account is correct\", () => {\r",
													"      pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
													"    });\r",
													"    \r",
													"    //Determine if assertion passed at whole\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"    // && pm.expect(jsonDataResponsePaymentState).to.eql(\"READY_FOR_EXECUTION\") \r",
													"    && pm.expect(responseBodyTypeOfTransfer).to.eql(requestBodyTypeOfTransfer)\r",
													"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
													"    && pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3968a109-515f-4a5c-b510-854f9346619e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"typeOfTransfer\": \"TRANSFER_SPARE_CASH_TO_CREDIT_ACCOUNT\",\r\n\t\"cashBalanceThreshold\": 2303.56,\r\n\t\"typeOfAmount\": \"FIXED_AMOUNT\",\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.34\r\n    },\r\n\t\"remittanceInformation\": {\r\n    \t\"unstructured\": \"\"\r\n\t},\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"creditorAccountNo\": {{creditorAccountNoBalanceAdjustment}},\r\n\t\"debitNote\": \"Expenses for SW implementation\",\r\n\t\"debitForm\": \"SIA\"\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/balanceadjustment/{{newPaymentBalanceAdjustmentID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"accounttransfer",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"balanceadjustment",
												"{{newPaymentBalanceAdjustmentID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "updatePaymentBalanceAdjustment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "754cd522-8ebc-4598-82b9-bf1b79d1b02b",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Balance adjustment payment is created and assertions are passed\", function () {\r",
													"\r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    //Type of transfer\r",
													"    let requestBodyTypeOfTransfer = JSON.parse(request.data).typeOfTransfer;\r",
													"    let responseBodyTypeOfTransfer = JSON.parse(responseBody).typeOfTransfer;\r",
													"    //Creditor agent sort code is correct\r",
													"    let requestBodyCreditorAgentSortCode = JSON.parse(request.data).creditorAgentSortCode;\r",
													"    let responseBodyCreditorAgentSortCode = JSON.parse(responseBody).creditorAgentSortCode;\r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"    //Postal account is correct\r",
													"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
													"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
													"    //Category purpose code is correct\r",
													"    let requestBodyResponseCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
													"    let responseBodyResponseCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode; \r",
													"\r",
													"    pm.test(\"Type of transfer is correct\", () => {\r",
													"      pm.expect(responseBodyTypeOfTransfer).to.eql(requestBodyTypeOfTransfer);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Instructed amount is correct\", () => {\r",
													"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Creditor agent sort code is correct\", () => {\r",
													"      pm.expect(responseBodyCreditorAgentSortCode).to.eql(requestBodyCreditorAgentSortCode);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Debtor account is correct\", () => {\r",
													"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Postal account is correct\", () => {\r",
													"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Category purpose code account is correct\", () => {\r",
													"      pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
													"    });\r",
													"    \r",
													"    //Determine if assertion passed at whole\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"    && pm.expect(responseBodyTypeOfTransfer).to.eql(requestBodyTypeOfTransfer) \r",
													"    && pm.expect(responseBodyCreditorAgentSortCode).to.eql(requestBodyCreditorAgentSortCode)\r",
													"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
													"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
													"    && pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b2a93fb7-d10e-4e17-a7ee-cd2474ffbcb6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"typeOfTransfer\": \"TRANSFER_SPARE_CASH_TO_CREDIT_ACCOUNT\",\r\n\t\"cashBalanceThreshold\": 2303.63,\r\n\t\"typeOfAmount\": \"FIXED_AMOUNT\",\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.43\r\n    },\r\n\t\"remittanceInformation\": {\r\n    \t\"unstructured\": \"\"\r\n\t},\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"creditorAccountNo\": {{creditorAccountNoBalanceAdjustment}},\r\n\t\"debitNote\": \"Expenses for SW implementation\",\r\n\t\"requestedExecutionDate\": {{PrS:nextWorkingDay}}\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/balanceadjustment/{{newPaymentBalanceAdjustmentID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"accounttransfer",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"balanceadjustment",
												"{{newPaymentBalanceAdjustmentID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "deletePaymentBalanceAdjustment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "268206d4-81bd-4bc9-a3be-e6a7919b0f4d",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Balance adjustment is deleted and not exists anymore\", function () {\r",
													"    //let responseBodyStatus = JSON.parse(responseBody)._status; \r",
													"    //let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
													"    pm.response.to.have.status(204) \r",
													"    //&& pm.expect(responseBodyStatus).to.eql(false);\r",
													"    // && pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
													"});\r",
													"\r",
													"// Log important stuff\r",
													"if (pm.response.to.have.status(204)){\r",
													"    console.log(\"Deleted balance adjustment ID:\" + pm.globals.get(\"newPaymentBalanceAdjustmentID\"));\r",
													"    pm.globals.set(\"deletedPaymentBalanceAdjustmentID\",pm.globals.get(\"newPaymentBalanceAdjustmentID\"));\r",
													"    pm.globals.unset(\"newPaymentBalanceAdjustmentID\");\r",
													"}\r",
													"else {\r",
													"    console.log(\"Failed to delete balance adjustment payment with ID:\" + pm.globals.get(\"newPaymentBalanceAdjustmentID\"));\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d4ac93f7-1432-44d3-9ccd-1440aa8cd753",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"disabled": true
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/balanceadjustment/{{newPaymentBalanceAdjustmentID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"accounttransfer",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"balanceadjustment",
												"{{newPaymentBalanceAdjustmentID}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "QR-bill",
							"item": [
								{
									"name": "Standing order",
									"item": [
										{
											"name": "createPaymentQrBillSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fdbbfd42-16d8-462e-8975-3879b781bec5",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"//pm.test(pm.globals.get(\"testRailTestCases\") + \" Payment is created and assertions are passed\", function () {\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" QR-bill (standing order) payment is created and assertions are passed\", function () {\r",
															"\r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo;   \r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //Creditor info is correct\r",
															"    let requestBodyCreditor = JSON.parse(request.data).creditor;\r",
															"    let responseBodyCreditor = JSON.parse(responseBody).creditor;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Category purpose code is correct    \r",
															"    let jsonDataResponseCategoryPurposeCode = pm.response.json().categoryPurposeCode;\r",
															"    //Ultimate debtor info is correct\r",
															"    let requestBodyUltimateDebtor = JSON.parse(request.data).ultimateDebtor;\r",
															"    let responseBodyUltimateDebtor = JSON.parse(responseBody).ultimateDebtor;    \r",
															"    //Standing order info is correct\r",
															"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
															"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
															"    \r",
															"    pm.test(\"Creditor account is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Creditor info is correct\", () => {\r",
															"      pm.expect(responseBodyCreditor).to.eql(requestBodyCreditor);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"\t\r",
															"    pm.test(\"Category purpose code is correct\", () => {\r",
															"      pm.expect(jsonDataResponseCategoryPurposeCode).to.eql(\"SALA\");\r",
															"    });\r",
															"\r",
															"    pm.test(\"Ultimate debtor info is correct\", () => {\r",
															"      pm.expect(responseBodyUltimateDebtor).to.eql(requestBodyUltimateDebtor);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Standing order info is correct\", () => {\r",
															"      pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"    });\r",
															"    \r",
															"    // check if payment is created\r",
															"    if (pm.response.to.have.status(201)){\r",
															"        var responseData = JSON.parse(responseBody);\r",
															"        pm.globals.set(\"newQrBillPaymentID\", responseData.paymentId);\r",
															"        pm.globals.set(\"newPaymentQrBillStOrInfo\", responseData.standingOrder);\r",
															"        console.log(\"New QR-bill (standing order) payment ID: \" + pm.globals.get(\"newQrBillPaymentID\"));\r",
															"    }\r",
															"    else {\r",
															"        console.log(\"Failed to create QR-bill (standing order) payment with ID:\" + pm.globals.get(\"newQrBillPaymentID\"));\r",
															"        pm.globals.unset(\"newQrBillPaymentID\");\r",
															"    }\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
															"    && pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyCreditor).to.eql(requestBodyCreditor) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
															"    && pm.expect(jsonDataResponseCategoryPurposeCode).to.eql(\"SALA\")\r",
															"    && pm.expect(responseBodyUltimateDebtor).to.eql(requestBodyUltimateDebtor)\r",
															"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a07eb3a9-70c8-4381-a88a-0fe461483df7",
														"exec": [
															"eval(globals.randomizeVariables)();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoBalanceAdjustment}},\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n\t\"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"requestedExecutionDate\":  {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"Expenses during company trip\",\r\n    \"ultimateDebtor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t},\r\n\t\"categoryPurposeCode\": \"SALA\"\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/QRbill/",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"QRbill",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "getPaymentQrBillSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "51346101-16fa-46ee-8757-d3809b1a5492",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" QR-bill (standing order) payment is retrieved and assertions are passed\", function () {\r",
															"\r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Category purpose code is correct    \r",
															"    let jsonDataResponseCategoryPurposeCode = pm.response.json().categoryPurposeCode;\r",
															"    //Standing order info is correct\r",
															"    let requestBodyStandingOrder = pm.globals.get(\"newPaymentQrBillStOrInfo\");\r",
															"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
															"    \r",
															"    pm.test(\"Creditor account is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"\t\r",
															"    pm.test(\"Category purpose code is correct\", () => {\r",
															"      pm.expect(jsonDataResponseCategoryPurposeCode).to.eql(\"SALA\");\r",
															"    });\r",
															"\r",
															"    pm.test(\"Standing order info is correct\", () => {\r",
															"      pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"    });\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
															"    && pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
															"    && pm.expect(jsonDataResponseCategoryPurposeCode).to.eql(\"SALA\")\r",
															"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ee2f08c4-d83b-4c76-8587-6580014266de",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json; charset=UTF-8"
													},
													{
														"key": "accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoBalanceAdjustment}},\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n\t\"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"requestedExecutionDate\":  {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"Expenses during company trip\",\r\n    \"ultimateDebtor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\r\n\t\"categoryPurposeCode\": \"SALA\"\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/QRbill/{{newQrBillPaymentID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"QRbill",
														"{{newQrBillPaymentID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "updatePaymentQrBillSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "01f41148-54e8-487f-b76f-2fb3704e42c4",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" QR-bill (standing order) payment is updated and assertions are passed\", function () {\r",
															"\r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //Creditor info is correct\r",
															"    let requestBodyCreditor = JSON.parse(request.data).creditor;\r",
															"    let responseBodyCreditor = JSON.parse(responseBody).creditor;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Category purpose code is correct    \r",
															"    let jsonDataResponseCategoryPurposeCode = pm.response.json().categoryPurposeCode;\r",
															"    //Ultimate debtor info is correct\r",
															"    let requestBodyUltimateDebtor = JSON.parse(request.data).ultimateDebtor;\r",
															"    let responseBodyUltimateDebtor = JSON.parse(responseBody).ultimateDebtor;    \r",
															"    //Standing order info is correct\r",
															"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
															"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
															"    \r",
															"    pm.test(\"Creditor account is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Creditor info is correct\", () => {\r",
															"      pm.expect(responseBodyCreditor).to.eql(requestBodyCreditor);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"\t\r",
															"    pm.test(\"Category purpose code is correct\", () => {\r",
															"      pm.expect(jsonDataResponseCategoryPurposeCode).to.eql(\"SALA\");\r",
															"    });\r",
															"\r",
															"    pm.test(\"Ultimate debtor info is correct\", () => {\r",
															"      pm.expect(responseBodyUltimateDebtor).to.eql(requestBodyUltimateDebtor);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Standing order info is correct\", () => {\r",
															"      pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"    });\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
															"    && pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyCreditor).to.eql(requestBodyCreditor) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
															"    && pm.expect(jsonDataResponseCategoryPurposeCode).to.eql(\"SALA\")\r",
															"    && pm.expect(responseBodyUltimateDebtor).to.eql(requestBodyUltimateDebtor)\r",
															"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b77e68b2-b83b-421c-bb29-8bc41474f1fd",
														"exec": [
															"eval(globals.randomizeVariables)();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoBalanceAdjustment}},\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.02\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n\t\"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"requestedExecutionDate\":  {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"Expenses business lunch\",\r\n    \"ultimateDebtor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t},    \r\n\t\"categoryPurposeCode\": \"SALA\"\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/QRbill/{{newQrBillPaymentID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"QRbill",
														"{{newQrBillPaymentID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "deletePaymentQrBillSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ed6141bc-69fe-4781-8ed5-8d1e1d7bef30",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" QR-bill (standing order) payment is deleted and not exists anymore\", function () {\r",
															"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
															"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
															"    pm.response.to.have.status(200) \r",
															"    && pm.expect(responseBodyStatus).to.eql(true)\r",
															"    && pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
															"});\r",
															"\r",
															"// Log important stuff\r",
															"if (pm.response.to.have.status(200)){\r",
															"    console.log(\"Deleted QR-bill (standing order) payment ID:\" + pm.globals.get(\"newQrBillPaymentID\"));\r",
															"    pm.globals.set(\"deletedQrBillPaymentID\",pm.globals.get(\"newQrBillPaymentID\"));\r",
															"    pm.globals.unset(\"newQrBillPaymentID\");\r",
															"    pm.globals.unset(\"newPaymentQrBillStOrInfo\");\r",
															"}\r",
															"else {\r",
															"    console.log(\"Failed to delete QR-bill (standing order) payment with ID:\" + pm.globals.get(\"newQrBillPaymentID\"));\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9d13711b-3f60-44b2-8888-73ad2b57116f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token}}",
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"disabled": true
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/QRbill/{{newQrBillPaymentID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"QRbill",
														"{{newQrBillPaymentID}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "createPaymentQrBill",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e287c947-06a6-404d-9551-46b5ba95d05c",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"//pm.test(pm.globals.get(\"testRailTestCases\") + \" Payment is created and assertions are passed\", function () {\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" QR-bill payment is created and assertions are passed\", function () {\r",
													"\r",
													"    //Creditor account is correct\r",
													"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
													"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo;   \r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    //Creditor info is correct\r",
													"    let requestBodyCreditor = JSON.parse(request.data).creditor;\r",
													"    let responseBodyCreditor = JSON.parse(responseBody).creditor;\r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"    //Execution date is correct\r",
													"    let requestBodyExecutionDate = JSON.parse(request.data).requestedExecutionDate;\r",
													"    let responseBodyExecutionDate = JSON.parse(responseBody).requestedExecutionDate;    \r",
													"    //Category purpose code is correct    \r",
													"    let jsonDataResponseCategoryPurposeCode = pm.response.json().categoryPurposeCode;\r",
													"    //Ultimate debtor info is correct\r",
													"    let requestBodyUltimateDebtor = JSON.parse(request.data).ultimateDebtor;\r",
													"    let responseBodyUltimateDebtor = JSON.parse(responseBody).ultimateDebtor;    \r",
													"\r",
													"    pm.test(\"Creditor account is correct\", () => {\r",
													"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Instructed amount is correct\", () => {\r",
													"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Creditor info is correct\", () => {\r",
													"      pm.expect(responseBodyCreditor).to.eql(requestBodyCreditor);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Debtor account is correct\", () => {\r",
													"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    });\r",
													"\t\r",
													"    pm.test(\"Execution date is correct\", () => {\r",
													"      pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Category purpose code is correct\", () => {\r",
													"      pm.expect(jsonDataResponseCategoryPurposeCode).to.eql(\"SALA\");\r",
													"    });\r",
													"\r",
													"    pm.test(\"Ultimate debtor info is correct\", () => {\r",
													"      pm.expect(responseBodyUltimateDebtor).to.eql(requestBodyUltimateDebtor);\r",
													"    });\r",
													"\r",
													"    // check if payment is created\r",
													"    if (pm.response.to.have.status(201)){\r",
													"        var responseData = JSON.parse(responseBody);\r",
													"        pm.globals.set(\"newQrBillPaymentID\", responseData.paymentId);\r",
													"        console.log(\"New QR-bill payment ID: \" + pm.globals.get(\"newQrBillPaymentID\"));\r",
													"    }\r",
													"    else {\r",
													"        console.log(\"Failed to create QR-bill payment with ID:\" + pm.globals.get(\"newQrBillPaymentID\"));\r",
													"        pm.globals.unset(\"newQrBillPaymentID\");\r",
													"    }\r",
													"    \r",
													"    //Determine if assertion passed at whole\r",
													"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
													"    && pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"    && pm.expect(responseBodyCreditor).to.eql(requestBodyCreditor) \r",
													"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
													"    && pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate) \r",
													"    && pm.expect(jsonDataResponseCategoryPurposeCode).to.eql(\"SALA\")\r",
													"    && pm.expect(responseBodyUltimateDebtor).to.eql(requestBodyUltimateDebtor);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3bc107b7-20ed-499b-a48f-259d67679ac7",
												"exec": [
													"eval(globals.randomizeVariables)();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoBalanceAdjustment}},\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n\t\"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"requestedExecutionDate\":  {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"Expenses during company trip\",\r\n    \"ultimateDebtor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n            \"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\r\n\t\"categoryPurposeCode\": \"SALA\"\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/QRbill/",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"swissPayment",
												"{{tenant}}",
												"v1",
												"credittransfer",
												"QRbill",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "getPaymentQrBill",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f3d2653-75f4-4dd0-8bd1-a232e8bdbbd8",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" QR-bill payment is retrieved and assertions are passed\", function () {\r",
													"\r",
													"    //Creditor account is correct\r",
													"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
													"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"    //Category purpose code is correct    \r",
													"    let jsonDataResponseCategoryPurposeCode = pm.response.json().categoryPurposeCode;\r",
													"\r",
													"    pm.test(\"Creditor account is correct\", () => {\r",
													"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Instructed amount is correct\", () => {\r",
													"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Debtor account is correct\", () => {\r",
													"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    });\r",
													"\t\r",
													"    pm.test(\"Category purpose code is correct\", () => {\r",
													"      pm.expect(jsonDataResponseCategoryPurposeCode).to.eql(\"SALA\");\r",
													"    });\r",
													"    \r",
													"    //Determine if assertion passed at whole\r",
													"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
													"    && pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
													"    && pm.expect(jsonDataResponseCategoryPurposeCode).to.eql(\"SALA\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2227a318-4bbb-4b2b-a11f-cc53f4d41e23",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json; charset=UTF-8"
											},
											{
												"key": "accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoBalanceAdjustment}},\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n\t\"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"requestedExecutionDate\":  {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"Expenses during company trip\",\r\n    \"ultimateDebtor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n\t\"categoryPurposeCode\": \"SALA\"\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/QRbill/{{newQrBillPaymentID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"swissPayment",
												"{{tenant}}",
												"v1",
												"credittransfer",
												"QRbill",
												"{{newQrBillPaymentID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "updatePaymentQrBill",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9aff2ee6-50d9-44f7-abf1-e34f28f6bfb7",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" QR-bill payment is updated and assertions are passed\", function () {\r",
													"\r",
													"    //Creditor account is correct\r",
													"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
													"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    //Creditor info is correct\r",
													"    let requestBodyCreditor = JSON.parse(request.data).creditor;\r",
													"    let responseBodyCreditor = JSON.parse(responseBody).creditor;\r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"    //Category purpose code is correct    \r",
													"    let jsonDataResponseCategoryPurposeCode = pm.response.json().categoryPurposeCode;\r",
													"    //Ultimate debtor info is correct\r",
													"    let requestBodyUltimateDebtor = JSON.parse(request.data).ultimateDebtor;\r",
													"    let responseBodyUltimateDebtor = JSON.parse(responseBody).ultimateDebtor;    \r",
													"\r",
													"    pm.test(\"Creditor account is correct\", () => {\r",
													"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Instructed amount is correct\", () => {\r",
													"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Creditor info is correct\", () => {\r",
													"      pm.expect(responseBodyCreditor).to.eql(requestBodyCreditor);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Debtor account is correct\", () => {\r",
													"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    });\r",
													"\t\r",
													"    pm.test(\"Category purpose code is correct\", () => {\r",
													"      pm.expect(jsonDataResponseCategoryPurposeCode).to.eql(\"SALA\");\r",
													"    });\r",
													"\r",
													"    pm.test(\"Ultimate debtor info is correct\", () => {\r",
													"      pm.expect(responseBodyUltimateDebtor).to.eql(requestBodyUltimateDebtor);\r",
													"    });\r",
													"\r",
													"    //Determine if assertion passed at whole\r",
													"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
													"    && pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"    && pm.expect(responseBodyCreditor).to.eql(requestBodyCreditor) \r",
													"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
													"    && pm.expect(jsonDataResponseCategoryPurposeCode).to.eql(\"SALA\")\r",
													"    && pm.expect(responseBodyUltimateDebtor).to.eql(requestBodyUltimateDebtor);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "da1da022-d7f8-4ee1-ba50-c724e5515a59",
												"exec": [
													"eval(globals.randomizeVariables)();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoBalanceAdjustment}},\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.02\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n\t\"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"requestedExecutionDate\":  {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"Expenses business lunch\",\r\n    \"ultimateDebtor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\r\n\t\"categoryPurposeCode\": \"SALA\"\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/QRbill/{{newQrBillPaymentID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"swissPayment",
												"{{tenant}}",
												"v1",
												"credittransfer",
												"QRbill",
												"{{newQrBillPaymentID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "deletePaymentQrBill",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0831273b-8674-4859-952b-839af0effd71",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" QR-bill payment is deleted and not exists anymore\", function () {\r",
													"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
													"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
													"    pm.response.to.have.status(200) \r",
													"    && pm.expect(responseBodyStatus).to.eql(true)\r",
													"    && pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
													"});\r",
													"\r",
													"// Log important stuff\r",
													"if (pm.response.to.have.status(200)){\r",
													"    console.log(\"Deleted QR-bill payment ID:\" + pm.globals.get(\"newQrBillPaymentID\"));\r",
													"    pm.globals.set(\"deletedQrBillPaymentID\",pm.globals.get(\"newQrBillPaymentID\"));\r",
													"    pm.globals.unset(\"newQrBillPaymentID\");\r",
													"}\r",
													"else {\r",
													"    console.log(\"Failed to delete QR-bill payment with ID:\" + pm.globals.get(\"newQrBillPaymentID\"));\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5216b8e8-53b8-4d73-b1ad-93a539d94df8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"disabled": true
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/QRbill/{{newQrBillPaymentID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"swissPayment",
												"{{tenant}}",
												"v1",
												"credittransfer",
												"QRbill",
												"{{newQrBillPaymentID}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Account transfer",
							"item": [
								{
									"name": "Standing order",
									"item": [
										{
											"name": "createPaymentAccountTransferSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6cfb0bd9-a1f2-413b-ad6b-526e79aebea2",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Account transfer (standing order) payment is created and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    \r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"\r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo2 = JSON.parse(request.data).creditorAccountNo2;\r",
															"    let responseBodyCreditorAccountNo2 = JSON.parse(responseBody).creditorAccountNo2;  \r",
															"    \r",
															"    //Standing order info is correct\r",
															"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
															"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder;\r",
															"\r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Creditor account is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Standing order info is correct\", () => {\r",
															"    pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"     });\r",
															"\r",
															"    // check if payment is created\r",
															"    if (pm.response.to.have.status(201)){\r",
															"        var responseData = JSON.parse(responseBody);\r",
															"        pm.globals.set(\"newPaymentAccountTransferID\", responseData.paymentId);\r",
															"        pm.globals.set(\"newPaymentRedStOrInfo\", responseData.standingOrder);\r",
															"        console.log(\"New account transfer (standing order) payment ID: \" + pm.globals.get(\"newPaymentAccountTransferID\"));\r",
															"    }\r",
															"    else {\r",
															"        console.log(\"Failed to create account transfer (standing order) payment\");\r",
															"    }\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
															"    && pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2)\r",
															"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "79daa21a-6eab-4e99-9427-1f0c74200376",
														"exec": [
															"const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\r",
															"const s = Array.from({length:20}, _ => c[Math.floor(Math.random()*c.length)]).join('')\r",
															"pm.globals.set(\"paymentAccountTransferRemittanceInformationUnstructured\",s);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"creditorAccountNo\": {{creditorAccountNo2}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.34\r\n    },\r\n\t\"remittanceInformation\": {\r\n    \t\"unstructured\": \"{{paymentAccountTransferRemittanceInformationUnstructured}}\"\r\n\t},\r\n\t\"debitNote\": \"New reference\",\r\n\t\"debitForm\": \"SIA\",\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/accounttransfer",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"accounttransfer",
														"{{tenant}}",
														"v2",
														"credittransfer",
														"accounttransfer"
													]
												}
											},
											"response": []
										},
										{
											"name": "getPaymentAccountTransferSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6c51714f-3259-424c-8c82-3d3866d1b71c",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Account transfer (standing order) payment is retrieved and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    \r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"\r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo2 = JSON.parse(request.data).creditorAccountNo2;\r",
															"    let responseBodyCreditorAccountNo2 = JSON.parse(responseBody).creditorAccountNo2;  \r",
															"\r",
															"    //Standing order info is correct\r",
															"   let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
															"   let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder;\r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Creditor account is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Standing order info is correct\", () => {\r",
															"    pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"    });\r",
															"\r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
															"    && pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2)\r",
															"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "cb5c2f9f-2f63-41fb-a821-dfcbcacfd71e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"creditorAccountNo\": {{creditorAccountNo2}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.34\r\n    },\r\n\t\"remittanceInformation\": {\r\n    \t\"unstructured\": \"{{paymentAccountTransferRemittanceInformationUnstructured}}\"\r\n\t},\r\n\t\"debitNote\": \"New reference\",\r\n\t\"debitForm\": \"SIA\",\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/accounttransfer/{{newPaymentAccountTransferID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"accounttransfer",
														"{{tenant}}",
														"v2",
														"credittransfer",
														"accounttransfer",
														"{{newPaymentAccountTransferID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "updatePaymentAccountTransferSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2598ba08-8d6c-4972-b4d3-25c5a4763aab",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Account transfer (standing order) payment is created and assertions are passed\", function () {\r",
															"    \r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    \r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"\r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo2 = JSON.parse(request.data).creditorAccountNo2;\r",
															"    let responseBodyCreditorAccountNo2 = JSON.parse(responseBody).creditorAccountNo2;  \r",
															"    \r",
															"    //Standing order info is correct\r",
															"   let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
															"   let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder;\r",
															"\r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Creditor account is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Standing order info is correct\", () => {\r",
															"    pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"    });\r",
															"\r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
															"    && pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2)\r",
															"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "09d4fdee-4912-4e00-b6a0-21b672be4605",
														"exec": [
															"const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\r",
															"const s = Array.from({length:20}, _ => c[Math.floor(Math.random()*c.length)]).join('')\r",
															"pm.globals.set(\"paymentAccountTransferRemittanceInformationUnstructured\",s);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"creditorAccountNo\": {{creditorAccountNo2}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.43\r\n    },\r\n\t\"remittanceInformation\": {\r\n    \t\"unstructured\": \"{{paymentAccountTransferRemittanceInformationUnstructured}}\"\r\n\t},\r\n\t\"debitNote\": \"New reference\",\r\n\t\"debitForm\": \"SIA\",\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/accounttransfer/{{newPaymentAccountTransferID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"accounttransfer",
														"{{tenant}}",
														"v2",
														"credittransfer",
														"accounttransfer",
														"{{newPaymentAccountTransferID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "deletePaymentAccountTransferSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5ffd1e4d-a8e5-4e61-9840-fd775f4e01ef",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Account transfer (standing order) is deleted and not exists anymore\", function () {\r",
															"    //let responseBodyStatus = JSON.parse(responseBody)._status; \r",
															"    //let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
															"    pm.response.to.have.status(204) \r",
															"    //&& pm.expect(responseBodyStatus).to.eql(true)\r",
															"    //&& pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
															"});\r",
															"\r",
															"// Log important stuff\r",
															"if (pm.response.to.have.status(204)){\r",
															"    console.log(\"Deleted account transfer (standing order) payment ID:\" + pm.globals.get(\"newPaymentAccountTransferID\"));\r",
															"    pm.globals.set(\"deletedPaymentAccountTransferID\",pm.globals.get(\"newPaymentAccountTransferID\"));\r",
															"    pm.globals.unset(\"newPaymentAccountTransferID\");\r",
															"    pm.globals.unset(\"paymentAccountTransferRemittanceInformationUnstructured\");\r",
															"    pm.globals.unset(\"newPaymentAccountTransferStOrInfo\");\r",
															"}\r",
															"else {\r",
															"    console.log(\"Failed to delete account transfer (standing order) payment with ID:\" + pm.globals.get(\"newPaymentAccountTransferID\"));\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "561d1860-7cdc-4a7b-be11-082aa20e2e09",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token}}",
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"disabled": true
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/accounttransfer/{{newPaymentAccountTransferID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"accounttransfer",
														"{{tenant}}",
														"v2",
														"credittransfer",
														"accounttransfer",
														"{{newPaymentAccountTransferID}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "createPaymentAccountTransfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "afa9d1b7-6a31-4a1f-8b86-c68abe3a3ea4",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Account transfer payment is created and assertions are passed\", function () {\r",
													"\r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    \r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"\r",
													"    //Creditor account is correct\r",
													"    let requestBodyCreditorAccountNo2 = JSON.parse(request.data).creditorAccountNo2;\r",
													"    let responseBodyCreditorAccountNo2 = JSON.parse(responseBody).creditorAccountNo2;  \r",
													"    \r",
													"    //Requested execution date is correct\r",
													"    let requestBodyRequestedExecutionDate = JSON.parse(request.data).requestedExecutionDate;\r",
													"    let responseBodyRequestedExecutionDate = JSON.parse(responseBody).requestedExecutionDate;  \r",
													"    \r",
													"    pm.test(\"Instructed amount is correct\", () => {\r",
													"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Debtor account is correct\", () => {\r",
													"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Creditor account is correct\", () => {\r",
													"      pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Execution date is correct\", () => {\r",
													"      pm.expect(responseBodyRequestedExecutionDate).to.eql(requestBodyRequestedExecutionDate);\r",
													"    });\r",
													"\r",
													"    // check if payment is created\r",
													"    if (pm.response.to.have.status(201)){\r",
													"        var responseData = JSON.parse(responseBody);\r",
													"        pm.globals.set(\"newPaymentAccountTransferID\", responseData.paymentId);\r",
													"        console.log(\"New account transfer payment ID: \" + pm.globals.get(\"newPaymentAccountTransferID\"));\r",
													"    }\r",
													"    else {\r",
													"        console.log(\"Failed to create account transfer payment\");\r",
													"    }\r",
													"    \r",
													"    //Determine if assertion passed at whole\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
													"    && pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2)\r",
													"    && pm.expect(responseBodyRequestedExecutionDate).to.eql(requestBodyRequestedExecutionDate);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d751b425-60e8-4c82-a4ea-3245bcc1c780",
												"exec": [
													"const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\r",
													"const s = Array.from({length:20}, _ => c[Math.floor(Math.random()*c.length)]).join('')\r",
													"pm.globals.set(\"paymentAccountTransferRemittanceInformationUnstructured\",s);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"creditorAccountNo\": {{creditorAccountNo2}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.34\r\n    },\r\n\t\"remittanceInformation\": {\r\n    \t\"unstructured\": \"{{paymentAccountTransferRemittanceInformationUnstructured}}\"\r\n\t},\r\n\t\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"New reference\",\r\n\t\"debitForm\": \"SIA\"\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/accounttransfer",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"accounttransfer",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"accounttransfer"
											]
										}
									},
									"response": []
								},
								{
									"name": "getPaymentAccountTransfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4335864a-e4a8-4b5f-b300-a84d547e3aa4",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Account transfer payment is retrieved and assertions are passed\", function () {\r",
													"\r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    \r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"\r",
													"    //Creditor account is correct\r",
													"    let requestBodyCreditorAccountNo2 = JSON.parse(request.data).creditorAccountNo2;\r",
													"    let responseBodyCreditorAccountNo2 = JSON.parse(responseBody).creditorAccountNo2;  \r",
													"\r",
													"    pm.test(\"Account transfer payment is retrieved\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Instructed amount is correct\", () => {\r",
													"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Debtor account is correct\", () => {\r",
													"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Creditor account is correct\", () => {\r",
													"      pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2);\r",
													"    });\r",
													"    \r",
													"    //Determine if assertion passed at whole\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
													"    && pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0933776d-4149-40a4-ac72-68a3cf740b68",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"creditorAccountNo\": {{creditorAccountNo2}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.34\r\n    },\r\n\t\"remittanceInformation\": {\r\n    \t\"unstructured\": \"{{paymentAccountTransferRemittanceInformationUnstructured}}\"\r\n\t},\r\n\t\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"New reference\",\r\n\t\"debitForm\": \"SIA\"\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/accounttransfer/{{newPaymentAccountTransferID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"accounttransfer",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"accounttransfer",
												"{{newPaymentAccountTransferID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "updatePaymentAccountTransfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6167ec5e-f1b4-49bc-8248-b794e2668134",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Account transfer payment is updated and assertions are passed\", function () {\r",
													"    \r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    \r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"\r",
													"    //Creditor account is correct\r",
													"    let requestBodyCreditorAccountNo2 = JSON.parse(request.data).creditorAccountNo2;\r",
													"    let responseBodyCreditorAccountNo2 = JSON.parse(responseBody).creditorAccountNo2;  \r",
													"    \r",
													"    pm.test(\"Account transfer payment is updated\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Instructed amount is correct\", () => {\r",
													"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Debtor account is correct\", () => {\r",
													"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Creditor account is correct\", () => {\r",
													"      pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2);\r",
													"    });\r",
													"    \r",
													"    //Determine if assertion passed at whole\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
													"    && pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d92abb28-8ed8-4f82-ac2a-ac6b1a51e9dd",
												"exec": [
													"const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\r",
													"const s = Array.from({length:20}, _ => c[Math.floor(Math.random()*c.length)]).join('')\r",
													"pm.globals.set(\"paymentAccountTransferRemittanceInformationUnstructured\",s);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"creditorAccountNo\": {{creditorAccountNo2}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.43\r\n    },\r\n\t\"remittanceInformation\": {\r\n    \t\"unstructured\": \"{{paymentAccountTransferRemittanceInformationUnstructured}}\"\r\n\t},\r\n\t\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"New reference\",\r\n\t\"debitForm\": \"SIA\"\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/accounttransfer/{{newPaymentAccountTransferID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"accounttransfer",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"accounttransfer",
												"{{newPaymentAccountTransferID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "deletePaymentAccountTransfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "faba468b-3bf1-46cc-885a-8eb0e2a5b5be",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Account transfer is deleted and not exists anymore\", function () {\r",
													"    //let responseBodyStatus = JSON.parse(responseBody)._status; \r",
													"    //let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
													"    pm.response.to.have.status(204) \r",
													"    //&& pm.expect(responseBodyStatus).to.eql(true)\r",
													"    //&& pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
													"});\r",
													"\r",
													"// Log important stuff\r",
													"if (pm.response.to.have.status(204)){\r",
													"    console.log(\"Deleted account transfer payment ID:\" + pm.globals.get(\"newPaymentAccountTransferID\"));\r",
													"    pm.globals.set(\"deletedPaymentAccountTransferID\",pm.globals.get(\"newPaymentAccountTransferID\"));\r",
													"    pm.globals.unset(\"newPaymentAccountTransferID\");\r",
													"    pm.globals.unset(\"paymentAccountTransferRemittanceInformationUnstructured\");\r",
													"}\r",
													"else {\r",
													"    console.log(\"Failed to delete account transfer payment with ID:\" + pm.globals.get(\"newPaymentAccountTransferID\"));\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "eeaa2a69-34a3-4e73-a403-051a22ae1abe",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"disabled": true
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/accounttransfer/{{newPaymentAccountTransferID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"accounttransfer",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"accounttransfer",
												"{{newPaymentAccountTransferID}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Payments: Search",
					"item": [
						{
							"name": "getPaymentsPaymentSearch?Swiftp0s20",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4e3c24a-a010-439f-9883-e2a9cdf91905",
										"exec": [
											"// if response is spread on multiple pages, remember lates payment ID\r",
											"let skipTests = true;\r",
											"if (pm.response.to.have.status(200)){\r",
											"    var responseData = JSON.parse(responseBody);\r",
											"    if (responseData.pageResponse.totalPages>1){\r",
											"        pm.globals.set(\"latestPaymentID\", responseData.payments[parseInt(responseData.pageResponse.size,10)-1].specificPaymentId);\r",
											"        console.log(\"Latest payment ID in the list: \" + pm.globals.get(\"latestPaymentID\"));\r",
											"        skipTests = false;\r",
											"    } else {\r",
											"        console.log(\"Not enough test data!!!\");\r",
											"        pm.globals.unset(\"latestPaymentID\");\r",
											"    }\r",
											"}\r",
											"else {\r",
											"    console.log(\"Failed to retrieve payments!!!\");\r",
											"    pm.globals.unset(\"latestPaymentID\");\r",
											"}\r",
											"\r",
											"(skipTests ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" Payments are retrieved and assertions are passed\", function () {\r",
											"\r",
											"    pm.test(\"Payments are retrieved\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "71ac4a7e-d357-4a19-aa60-37943e672261",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"pageRequest\": {\r\n  \"page\": 0,\r\n  \"size\": 5\r\n  },\r\n   \"paymentFilter\": {\r\n   \"paymentType\":\"SWIFT_INTERNATIONAL\"\r\n   },\r\n   \"orderBy\": {\r\n     \"field\": \"CREATION_DATE\",\r\n     \"sortOrder\": \"DESC\"\r\n  }\r\n \r\n}"
								},
								"url": {
									"raw": "{{environment}}/banking-api/payment/payments/{{tenant}}/v2/payment/search?page=0&size=20",
									"host": [
										"{{environment}}"
									],
									"path": [
										"banking-api",
										"payment",
										"payments",
										"{{tenant}}",
										"v2",
										"payment",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getPaymentsPaymentSearch?Swiftp1s20",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "175719ac-18dd-4394-adb0-029d108c61fb",
										"exec": [
											"let skipTests = true;\r",
											"let latestPaymentID = pm.globals.get(\"latestPaymentID\");\r",
											"if (pm.response.to.have.status(200)){\r",
											"    if (latestPaymentID){\r",
											"        skipTests = false;\r",
											"    } else {\r",
											"        console.log(\"Not enough test data!!!\");\r",
											"    }\r",
											"}\r",
											"else {\r",
											"    console.log(\"Failed to retrieve payments!!!\");\r",
											"    pm.globals.unset(\"latestPaymentID\");\r",
											"}\r",
											"\r",
											"(skipTests ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" Payments are retrieved and assertions are passed\", function () {\r",
											"    pm.test(\"Payments are retrieved\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    let responseData = JSON.parse(responseBody);\r",
											"    pm.test(\"Latest payment from previous page is not in the list\", function () {\r",
											"        pm.expect(pm.response.text()).not.to.include(latestPaymentID);\r",
											"    });\r",
											"    \r",
											"    pm.response.to.have.status(200) &&\r",
											"    pm.expect(pm.response.text()).not.to.include(latestPaymentID);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "747e0638-9544-4373-b17b-ea7468f965ac",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"pageRequest\": {\r\n  \"page\": 1,\r\n  \"size\": 5\r\n  },\r\n   \"paymentFilter\": {\r\n   \"paymentType\":\"SWIFT_INTERNATIONAL\"\r\n   },\r\n   \"orderBy\": {\r\n     \"field\": \"CREATION_DATE\",\r\n     \"sortOrder\": \"DESC\"\r\n  }\r\n \r\n}"
								},
								"url": {
									"raw": "{{environment}}/banking-api/payment/payments/{{tenant}}/v2/payment/search?page=1&size=20",
									"host": [
										"{{environment}}"
									],
									"path": [
										"banking-api",
										"payment",
										"payments",
										"{{tenant}}",
										"v2",
										"payment",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getPaymentsPaymentSearch?s1000",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a41234f8-be87-40d5-9404-f3b305c4b2fe",
										"exec": [
											"let skipTests = true;\r",
											"let responseData = JSON.parse(responseBody);\r",
											"if (pm.response.to.have.status(200)){\r",
											"    if (responseData.pageResponse.totalElements>0){\r",
											"        skipTests = false;\r",
											"    } else {\r",
											"        console.log(\"Not enough test data!!!\");\r",
											"    }\r",
											"}\r",
											"else {\r",
											"    console.log(\"Failed to retrieve payments!!!\");\r",
											"}\r",
											"\r",
											"(skipTests ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" Value of 'totalElements' property matches to number of payments retrieved and assertions are passed\", function () {\r",
											"    pm.test(\"Command is executed without problems\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    let valueToCompare = parseInt(responseData.pageResponse.size,10);\r",
											"    if(parseInt(responseData.pageResponse.size,10)>parseInt(responseData.pageResponse.totalElements,10)){\r",
											"        valueToCompare = parseInt(responseData.pageResponse.totalElements,10)\r",
											"    }\r",
											"    \r",
											"    pm.test(\"Value of 'totalElements' property matches to number of payments retrieved\", function () {\r",
											"        pm.expect(valueToCompare).to.eql(responseData.payments.length);\r",
											"    });\r",
											"    \r",
											"    let deletedPaymentID = pm.globals.get(\"deletedPaymentID\");\r",
											"    if (deletedPaymentID){\r",
											"        pm.test(\"Deleted payments aren't shown in response\", function () {\r",
											"            pm.expect(pm.response.text()).not.to.include(deletedPaymentID);\r",
											"        });\r",
											"        pm.expect(pm.response.text()).not.to.include(deletedPaymentID) &&\r",
											"        pm.response.to.have.status(200) &&\r",
											"        pm.expect(valueToCompare).to.eql(responseData.payments.length);\r",
											"        pm.globals.unset(\"deletedPaymentID\");\r",
											"    } else {\r",
											"        pm.response.to.have.status(200) &&\r",
											"        pm.expect(valueToCompare).to.eql(responseData.payments.length);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3b42a91e-4a9c-4c0b-8dae-32d1d0a1d871",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"pageRequest\": {\n  \"page\": 0,\n  \"size\": 100\n  },\n  \"paymentFilter\": {\n\t\"paymentType\":\"SWIFT_INTERNATIONAL\"\n  },\n  \"orderBy\": {\n    \"field\": \"CREATION_DATE\",\n    \"sortOrder\": \"DESC\"\n  }\n}"
								},
								"url": {
									"raw": "{{environment}}/banking-api/payment/payments/{{tenant}}/v2/payment/search?size=1000",
									"host": [
										"{{environment}}"
									],
									"path": [
										"banking-api",
										"payment",
										"payments",
										"{{tenant}}",
										"v2",
										"payment",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getPaymentsPaymentSearchAssertFilterPaymentStatuses?s100",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d43ce236-ffa4-43f2-a358-f4c6a766e89f",
										"exec": [
											"let skipTests = true;\r",
											"let responseData = JSON.parse(responseBody);\r",
											"if (pm.response.to.have.status(200)){\r",
											"    if (responseData.pageResponse.totalElements>0){\r",
											"        skipTests = false;\r",
											"    } else {\r",
											"        console.log(\"Not enough test data!!!\");\r",
											"    }\r",
											"}\r",
											"else {\r",
											"    console.log(\"Failed to retrieve payments!!!\");\r",
											"}\r",
											"\r",
											"(skipTests ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" Returned payments are filtered by 'paymentStatuses' property and all assertions are passed\", function () {\r",
											"    pm.test(\"Command is executed without errors\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    let isTrue = true;\r",
											"    pm.test(\"Returned payments are filtered by 'paymentStatuses' property\", function () {\r",
											"        // determine filter\r",
											"        let filter = pm.globals.get(\"body\");\r",
											"        let n = filter.lastIndexOf(\"[\");\r",
											"        filter = filter.substr(n, filter.length - n - 2);\r",
											"        // check if all returned payments have 'paymentStatuses' property matching to defined filter\r",
											"        for(let i = 0; i < responseData.payments.length; ++i){\r",
											"            isTrue = isTrue && filter.includes(responseData.payments[i].payment.paymentState);\r",
											"        }\r",
											"        pm.expect(isTrue).to.be.eql(true);\r",
											"    });\r",
											"    \r",
											"    pm.response.to.have.status(200) &&\r",
											"    pm.expect(isTrue).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c0d4d863-8155-47d6-a106-e598f087fde3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{body}}"
								},
								"url": {
									"raw": "{{environment}}/banking-api/payment/payments/{{tenant}}/v2/payment/search?size=1000",
									"host": [
										"{{environment}}"
									],
									"path": [
										"banking-api",
										"payment",
										"payments",
										"{{tenant}}",
										"v2",
										"payment",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getPaymentsPaymentSearchNoDeletedInResponse?s1000",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71f1076a-10ae-4357-9cc6-9e73c152b956",
										"exec": [
											"let skipTests = true;\r",
											"let responseData = JSON.parse(responseBody);\r",
											"if (pm.response.to.have.status(200)){\r",
											"    if (responseData.pageResponse.totalElements>0){\r",
											"        skipTests = false;\r",
											"    } else {\r",
											"        console.log(\"Not enough test data!!!\");\r",
											"    }\r",
											"}\r",
											"else {\r",
											"    console.log(\"Failed to retrieve payments!!!\");\r",
											"}\r",
											"\r",
											"(skipTests ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" Value of totalElements property matches to number of payments retrieved and assertions are passed\", function () {\r",
											"    pm.test(\"Command is executed without problems\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Value of totalElements property matches to number of payments retrieved\", function () {\r",
											"        pm.expect(parseInt(responseData.pageResponse.totalElements,10)).to.eql(responseData.payments.length);\r",
											"    });\r",
											"    \r",
											"    pm.response.to.have.status(200) &&\r",
											"    pm.expect(parseInt(responseData.pageResponse.totalElements,10)).to.eql(responseData.payments.length);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e8f45edc-2933-470a-afbd-30a9d0938a57",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{body}}"
								},
								"url": {
									"raw": "{{environment}}/banking-api/payment/payments/{{tenant}}/v2/payment/search?size=1000",
									"host": [
										"{{environment}}"
									],
									"path": [
										"banking-api",
										"payment",
										"payments",
										"{{tenant}}",
										"v2",
										"payment",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Payments: Routing",
					"item": [
						{
							"name": "getRoutingByFilterAlias",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bba85912-4cae-4936-b803-c6d7c3568b44",
										"exec": [
											"//pm.environment.set(\"accountAlias\",\"1501 CHF\")",
											"//pm.environment.set(\"accountAlias\",\"Test1320369\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9027d66e-c246-4510-b0cb-40aea8cd9af6",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"var notExists = typeof undefined;\r",
											"let paymentType = JSON.parse(pm.environment.get(\"paymentType\"));\r",
											"if (typeof paymentType == notExists) {\r",
											"    paymentType = \"ACCOUNT_TRANSFER\"; \r",
											"}\r",
											"let beneficiaryAccount = pm.environment.get(\"beneficiaryAccountRouting\");\r",
											"if (typeof beneficiaryAccount == notExists) {\r",
											"    beneficiaryAccount = \"CH6312312001248081501\"; \r",
											"}\r",
											"\r",
											"const isMasterTestK8S = pm.environment.get(\"envName\") == 'MDB-MASTER-TESTK8S';\r",
											"(isMasterTestK8S ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" Routing is retrieved and assertions are passed\", function () {\r",
											"\r",
											"    //Payment type\r",
											"    let jsonDataPaymentType = pm.response.json().paymentType;\r",
											"    //Beneficiary account\r",
											"    let jsonDataBeneficiaryAccount = JSON.stringify(pm.response.json().beneficiaryAccount);\r",
											"\r",
											"    pm.test(\"Routing is retrieved\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Routing type is correct\", () => {\r",
											"      pm.expect(jsonDataPaymentType).to.eql(paymentType);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Beneficiary account is correct\", () => {\r",
											"      pm.expect(jsonDataBeneficiaryAccount).to.eql(beneficiaryAccount);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Beneficiary account ID is in response\", function () {\r",
											"      pm.expect(pm.response.text()).to.include(\"beneficiaryAccountId\");\r",
											"    });\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(jsonDataPaymentType).to.eql(paymentType)\r",
											"    && pm.expect(jsonDataBeneficiaryAccount).to.eql(beneficiaryAccount)\r",
											"    && pm.expect(pm.response.text()).to.include(\"beneficiaryAccountId\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/banking-api/payment/payments/{{tenant}}/v1/routing/analyze?routingRequest={{accountAlias}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"banking-api",
										"payment",
										"payments",
										"{{tenant}}",
										"v1",
										"routing",
										"analyze"
									],
									"query": [
										{
											"key": "routingRequest",
											"value": "{{accountAlias}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "InitParams",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e2f7633f-c571-4df7-b724-cc76570cf7b8",
										"exec": [
											"//pm.environment.set(\"accountAlias\",\"1501 CHF\")",
											"//pm.environment.set(\"accountAlias\",\"Test1320369\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2ed06e02-2385-4617-80f5-8919a2c6a729",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"var notExists = typeof undefined;\r",
											"let paymentType = JSON.parse(pm.environment.get(\"paymentType\"));\r",
											"if (typeof paymentType == notExists) {\r",
											"  paymentType = \"ACCOUNT_TRANSFER\";\r",
											"}\r",
											"let beneficiaryAccount = pm.environment.get(\"beneficiaryAccount\");\r",
											"if (typeof beneficiaryAccount == notExists) {\r",
											"  beneficiaryAccount = \"CH6312312001248081501\";\r",
											"}\r",
											"\r",
											"(pm.test.skip)(pm.globals.get(\"_tr_\" + request.name) + \" Routing is retrieved and assertions are passed\", function () {\r",
											"\r",
											"  //Payment type\r",
											"  let jsonDataPaymentType = pm.response.json().paymentType;\r",
											"  //Beneficiary account\r",
											"  let jsonDataBeneficiaryAccount = JSON.stringify(pm.response.json().beneficiaryAccount);\r",
											"\r",
											"  pm.test(\"Routing is retrieved\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"  });\r",
											"\r",
											"  pm.test(\"Routing type is correct\", () => {\r",
											"    pm.expect(jsonDataPaymentType).to.eql(paymentType);\r",
											"  });\r",
											"\r",
											"  pm.test(\"Beneficiary account is correct\", () => {\r",
											"    pm.expect(jsonDataBeneficiaryAccount).to.eql(beneficiaryAccount);\r",
											"  });\r",
											"\r",
											"  pm.test(\"Beneficiary account ID is in response\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"beneficiaryAccountId\");\r",
											"  });\r",
											"\r",
											"  pm.response.to.have.status(200)\r",
											"    && pm.expect(jsonDataPaymentType).to.eql(paymentType)\r",
											"    && pm.expect(jsonDataBeneficiaryAccount).to.eql(beneficiaryAccount)\r",
											"    && pm.expect(pm.response.text()).to.include(\"beneficiaryAccountId\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/banking-api/payment/payments/{{tenant}}/v1/routing/analyze?routingRequest={{accountAlias}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"banking-api",
										"payment",
										"payments",
										"{{tenant}}",
										"v1",
										"routing",
										"analyze"
									],
									"query": [
										{
											"key": "routingRequest",
											"value": "{{accountAlias}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Payments: Template",
					"item": [
						{
							"name": "createPaymentTemplate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "141415a6-eb5c-442d-b828-1c85078be386",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment template is created and assertions are passed\", function () {\r",
											"\r",
											"    //Amount is correct\r",
											"    let requestBodyAmount = JSON.parse(request.data).amount.value;\r",
											"    let responseBodyAmount = JSON.stringify(JSON.parse(responseBody).amount.value);\r",
											"    //Execution date is correct\r",
											"    let requestBodyExecutionDate = JSON.parse(request.data).requestedExecutionDate;\r",
											"    let responseBodyExecutionDate = JSON.parse(responseBody).requestedExecutionDate;    \r",
											"    //Creditor is correct\r",
											"    let requestBodyCreditor = JSON.parse(request.data).creditor;\r",
											"    let responseBodyCreditor = JSON.parse(responseBody).creditor;\r",
											"    //Creditor account is correct\r",
											"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
											"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo;   \r",
											"    //Template name is correct\r",
											"    let requestBodyTemplateName = JSON.parse(request.data).templateName;\r",
											"    let responseBodyTemplateName = JSON.parse(responseBody).templateName;\r",
											"    //Template group name is correct\r",
											"    let requestBodyTemplateGroupName = JSON.parse(request.data).templateGroupName;\r",
											"    let responseBodyTemplateGroupName = JSON.parse(responseBody).templateGroupName;\r",
											"    //Payment type is correct    \r",
											"    //let requestBodyPaymentType = JSON.parse(request.data).paymentType;\r",
											"    //let responseBodyPaymentType = JSON.parse(responseBody).paymentType;\r",
											"    \r",
											"    pm.test(\"Amount is correct\", () => {\r",
											"      pm.expect(responseBodyAmount).to.eql(requestBodyAmount);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Execution date is correct\", () => {\r",
											"      pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Creditor is correct\", () => {\r",
											"      pm.expect(responseBodyCreditor).to.eql(requestBodyCreditor);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Creditor account is correct\", () => {\r",
											"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Template name and template group name are correct\", () => {\r",
											"      pm.expect(responseBodyTemplateName).to.eql(requestBodyTemplateName)\r",
											"      && pm.expect(responseBodyTemplateGroupName).to.eql(requestBodyTemplateGroupName);\r",
											"    });\r",
											"    \r",
											"    //pm.test(\"Payment type is correct\", () => {\r",
											"    //  pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType);\r",
											"    //});\r",
											"    \r",
											"    // check if payment is created\r",
											"    if (pm.response.to.have.status(201)){\r",
											"        var responseData = JSON.parse(responseBody);\r",
											"        pm.globals.set(\"newPaymentTemplateID\", responseData.id);\r",
											"        pm.globals.set(\"newPaymentTemplateName\", responseData.templateName);\r",
											"        pm.globals.set(\"newPaymentTemplateGroupName\", responseData.templateGroupName);  \r",
											"        pm.globals.set(\"newPaymentTemplatePaymentType\", responseData.paymentType);  \r",
											"        console.log(\"New payment template ID: \" + pm.globals.get(\"newPaymentTemplateID\"));        \r",
											"    }\r",
											"    else {\r",
											"        console.log(\"Failed to create payment template!\");\r",
											"    }\r",
											"    \r",
											"    //Determine if assertion passed at whole\r",
											"    pm.expect(responseBodyAmount).to.eql(requestBodyAmount) \r",
											"    && pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate) \r",
											"    && pm.expect(responseBodyCreditor).to.eql(requestBodyCreditor)\r",
											"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
											"    && pm.expect(responseBodyTemplateName).to.eql(requestBodyTemplateName)\r",
											"    && pm.expect(responseBodyTemplateGroupName).to.eql(requestBodyTemplateGroupName);\r",
											"    //&& pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "172605eb-d3ce-4aee-9396-fdab078c1585",
										"exec": [
											"eval(globals.randomizeVariables)();",
											"",
											"//random string 6 characters long using defined characters only",
											"const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';",
											"const s = Array.from({length:12}, _ => c[Math.floor(Math.random()*c.length)]).join('');",
											"pm.environment.set(\"templateName\", JSON.stringify(s));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"amount\": {\r\n        \"currency\": {\r\n            \"code\": \"EUR\"\r\n        },\r\n        \"value\": \"1.01\"\r\n    },\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}}\r\n    \t}\r\n    },\r\n    \"creditorAccountNo\": {{creditorAccountNo}},\r\n    \"agent\": {\r\n        \"bic\": {{creditorAgentBicSWIFT}}\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"templateName\": {{templateName}},\r\n    \"templateGroupName\": \"Meine Zahlungsliste\",\r\n    \"paymentType\": \"SWIFT_INTERNATIONAL\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/banking-api/payment/payments/{{tenant}}/v2/payment/template",
									"host": [
										"{{environment}}"
									],
									"path": [
										"banking-api",
										"payment",
										"payments",
										"{{tenant}}",
										"v2",
										"payment",
										"template"
									]
								}
							},
							"response": []
						},
						{
							"name": "getPaymentTemplate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3ee23cc2-a324-47ee-ae84-9767440efdd5",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment template is retrieved and assertions are passed\", function () {\r",
											"\r",
											"    //Amount is correct\r",
											"    let requestBodyAmount = JSON.parse(request.data).amount.value;\r",
											"    let responseBodyAmount = JSON.stringify(JSON.parse(responseBody).amount.value);\r",
											"    //Creditor account is correct\r",
											"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
											"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo;   \r",
											"    ////Template ID is correct\r",
											"    //let requestBodyTemplateId = pm.globals.get(\"newPaymentTemplateID\");\r",
											"    //let responseBodyTemplateId = JSON.parse(responseBody).id;    \r",
											"    //Template name is correct\r",
											"    let requestBodyTemplateName = pm.globals.get(\"newPaymentTemplateName\");\r",
											"    let responseBodyTemplateName = JSON.parse(responseBody).templateName;\r",
											"    //Template group name is correct\r",
											"    let requestBodyTemplateGroupName = pm.globals.get(\"newPaymentTemplateGroupName\");\r",
											"    let responseBodyTemplateGroupName = JSON.parse(responseBody).templateGroupName;\r",
											"    //Payment type is correct    \r",
											"    //let requestBodyPaymentType = pm.globals.get(\"newPaymentTemplatePaymentType\");\r",
											"    //let responseBodyPaymentType = JSON.parse(responseBody).paymentType;\r",
											"\r",
											"    //pm.test(\"Template ID is correct\", () => {\r",
											"    //  pm.expect(responseBodyTemplateId).to.eql(requestBodyTemplateId);\r",
											"    //});\r",
											"    \r",
											"    pm.test(\"Amount is correct\", () => {\r",
											"      pm.expect(responseBodyAmount).to.eql(requestBodyAmount);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Creditor account is correct\", () => {\r",
											"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Template name and template group name are correct\", () => {\r",
											"      pm.expect(responseBodyTemplateName).to.eql(requestBodyTemplateName)\r",
											"      && pm.expect(responseBodyTemplateGroupName).to.eql(requestBodyTemplateGroupName);\r",
											"    });\r",
											"    \r",
											"    //pm.test(\"Payment type is correct\", () => {\r",
											"    //  pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType);\r",
											"    //});\r",
											"    \r",
											"    //Determine if assertion passed at whole\r",
											"    //pm.expect(responseBodyTemplateId).to.eql(requestBodyTemplateId) &&\r",
											"    pm.expect(responseBodyAmount).to.eql(requestBodyAmount) \r",
											"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
											"    && pm.expect(responseBodyTemplateName).to.eql(requestBodyTemplateName)\r",
											"    && pm.expect(responseBodyTemplateGroupName).to.eql(requestBodyTemplateGroupName);\r",
											"    //&& pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9a05ad3f-bbb8-467a-957c-666e165a348a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"amount\": {\r\n        \"currency\": {\r\n            \"code\": \"EUR\"\r\n        },\r\n        \"value\": \"1.01\"\r\n    },\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}}\r\n    \t}\r\n    },\r\n    \"creditorAccountNo\": {{creditorAccountNo}},\r\n    \"agent\": {\r\n        \"bic\": {{creditorAgentBicSWIFT}}\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"templateName\": {{templateName}},\r\n    \"templateGroupName\": \"Meine Zahlungsliste\",\r\n    \"paymentType\": \"SWIFT_INTERNATIONAL\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/banking-api/payment/payments/12312/v2/payment/template/{{newPaymentTemplateID}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"banking-api",
										"payment",
										"payments",
										"12312",
										"v2",
										"payment",
										"template",
										"{{newPaymentTemplateID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "deletePaymentTemplate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8413266-bb92-4a2b-b8e6-5fca2ad417ec",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment template is deleted and not exists anymore\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Log important stuff\r",
											"if (pm.response.to.have.status(200)){\r",
											"    console.log(\"Deleted payment template ID:\" + pm.globals.get(\"newPaymentTemplateID\"));\r",
											"    pm.globals.set(\"deletedPaymentTemplateID\",pm.globals.get(\"newPaymentTemplateID\"));\r",
											"    pm.globals.unset(\"newPaymentTemplateID\");\r",
											"}\r",
											"else {\r",
											"    console.log(\"Failed to delete payment template with ID: \" + pm.globals.get(\"newPaymentTemplateID\"));\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6abd3111-5a70-4d2a-a156-fed88243eab6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/banking-api/payment/payments/{{tenant}}/v2/payment/template/{{newPaymentTemplateID}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"banking-api",
										"payment",
										"payments",
										"{{tenant}}",
										"v2",
										"payment",
										"template",
										"{{newPaymentTemplateID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Payments: Bulk operations",
					"item": [
						{
							"name": "createPaymentBulk",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8d2461e-4524-45ad-b9d8-98412eecf154",
										"exec": [
											"var notExists = typeof undefined;\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment is created in bulk and assertions are passed\", function () {\r",
											"    \r",
											"    //reportId property is in response\r",
											"    let responseBodyReportId = JSON.parse(responseBody).reportId;\r",
											"    //State is correct\r",
											"    let responseBodyState = JSON.parse(responseBody).state;\r",
											"    //href property is in response\r",
											"    let responseBodyHref = JSON.parse(responseBody)._links.statusReport.href;   \r",
											"\r",
											"    pm.test(\"State is correct\", () => {\r",
											"      pm.expect(responseBodyState).to.eql(\"IN_PROCESS\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"'reportId' property is in response\", () => {\r",
											"      pm.expect(typeof responseBodyReportId !== notExists).to.eql(true);\r",
											"    });\r",
											"\r",
											"    pm.test(\"'href' property is in response\", () => {\r",
											"      pm.expect(typeof responseBodyHref !== notExists).to.eql(true);\r",
											"    });\r",
											"    \r",
											"    // check if payment is created\r",
											"    if (pm.response.to.have.status(201)){\r",
											"        var responseData = JSON.parse(responseBody);\r",
											"        pm.globals.set(\"newPaymentBulkID\", responseData.reportId);\r",
											"        console.log(\"New ID for payment created in bulk: \" + pm.globals.get(\"newPaymentBulkID\"));\r",
											"    }\r",
											"    else {\r",
											"        console.log(\"Failed to create payment in bulk\");\r",
											"    }\r",
											"    \r",
											"    //Determine if assertion passed at whole\r",
											"    pm.response.to.have.status(201) \r",
											"    && pm.expect(typeof responseBodyReportId !== notExists).to.eql(true) \r",
											"    && pm.expect(responseBodyState).to.eql(\"IN_PROCESS\") \r",
											"    && pm.expect(typeof responseBodyHref !== notExists).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3dc55427-139a-4187-b89a-84101a6c2873",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"xmlData\": \"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPCEtLSAgQ1JFQUxPR0lYIEFHLCBtZnJpICYgbXBpbCBnZW5lcmljIHRlc3QgZmlsZSB0ZW1wbGF0ZSBmb3IgSVNPMjAwMjIgcGFpbi4wMDEgLS0+CjxEb2N1bWVudCB4bWxucz0iaHR0cDovL3d3dy5zaXgtaW50ZXJiYW5rLWNsZWFyaW5nLmNvbS9kZS9wYWluLjAwMS4wMDEuMDMuY2guMDIueHNkIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly93d3cuc2l4LWludGVyYmFuay1jbGVhcmluZy5jb20vZGUvcGFpbi4wMDEuMDAxLjAzLmNoLjAyLnhzZCAgcGFpbi4wMDEuMDAxLjAzLmNoLjAyLnhzZCI+Cgk8Q3N0bXJDZHRUcmZJbml0bj4KPCEtLSAKCQlBIGxldmVsCi0tPgkJCgkJPEdycEhkcj4KCQkJPE1zZ0lkPjIwMTkxMTIxMTA1MTQ4OTg0PC9Nc2dJZD4KCQkJPENyZUR0VG0+MjAxOS0xMS0yMVQwMDowMDowMTwvQ3JlRHRUbT4KCQkJPE5iT2ZUeHM+MTwvTmJPZlR4cz4KCQkJPEN0cmxTdW0+MzcuNTg8L0N0cmxTdW0+CgkJCTxJbml0Z1B0eT4KCQkJCTxObT5GcmVkZHkgSGluejwvTm0+CgkJCTwvSW5pdGdQdHk+CgkJPC9HcnBIZHI+CjwhLS0gCQoJCUIgbGV2ZWwJCQotLT4KCQk8UG10SW5mPgoJCQk8UG10SW5mSWQ+QzE2MTA2Mjc8L1BtdEluZklkPgoJCQk8UG10TXRkPlRSRjwvUG10TXRkPgoJCQk8QnRjaEJvb2tnPnRydWU8L0J0Y2hCb29rZz4KCQkJPFJlcWRFeGN0bkR0PjIwMTktMTEtMjI8L1JlcWRFeGN0bkR0PgoJCQk8RGJ0cj4KCQkJCTxObT5GcmVkZHkgSGluejwvTm0+CgkJCTwvRGJ0cj4KCQkJPERidHJBY2N0PgoJCQkJPElkPgoJCQkJCTxJQkFOPkNIMjExMjMxMjAwMTI2MTUzMTUwMTwvSUJBTj4KCQkJCTwvSWQ+CgkJCTwvRGJ0ckFjY3Q+CgkJCTxEYnRyQWd0PgoJCQkJPEZpbkluc3RuSWQ+CgkJCQkJPENsclN5c01tYklkPgoJCQkJCQk8Q2xyU3lzSWQ+CgkJCQkJCQk8Q2Q+Q0hCQ0M8L0NkPgoJCQkJCQk8L0NsclN5c0lkPgoJCQkJCQk8TW1iSWQ+MTIzMTI8L01tYklkPgoJCQkJCTwvQ2xyU3lzTW1iSWQ+CgkJCQk8L0Zpbkluc3RuSWQ+CgkJCTwvRGJ0ckFndD4KPCEtLQoJCUMgbGV2ZWwJCQkKLS0+CQkKCQkJPENkdFRyZlR4SW5mPgoJCQkJPFBtdElkPgoJCQkJCTxJbnN0cklkPkMxNjEwNjI3LUMtRE9NRVNUSUM8L0luc3RySWQ+CgkJCQkJPEVuZFRvRW5kSWQ+MjAxOTExMjExMDUxNDg5ODQwMDAwMDA8L0VuZFRvRW5kSWQ+CgkJCQk8L1BtdElkPgoJCQkJPEFtdD4KCQkJCQk8SW5zdGRBbXQgQ2N5PSJDSEYiPjM3LjU4PC9JbnN0ZEFtdD4KCQkJCTwvQW10PgoJCQkJPENkdHJBZ3Q+CgkJCQkJPEZpbkluc3RuSWQ+CgkJCQkJCTxDbHJTeXNNbWJJZD4KCQkJCQkJCTxDbHJTeXNJZD4KCQkJCQkJCQk8Q2Q+Q0hCQ0M8L0NkPgoJCQkJCQkJPC9DbHJTeXNJZD4KCQkJCQkJCTxNbWJJZD43NzQ8L01tYklkPgoJCQkJCQk8L0NsclN5c01tYklkPgoJCQkJCTwvRmluSW5zdG5JZD4KCQkJCTwvQ2R0ckFndD4KCQkJCTxDZHRyPgoJCQkJCTxObT5IT0NIQUxQSU5FUyBJTlNUSVRVVCBGVEFOPC9ObT4KCQkJCQk8UHN0bEFkcj4KCQkJCQkJPFN0cnRObT5XQUxEV0VHPC9TdHJ0Tm0+CgkJCQkJCTxCbGRnTmI+MTwvQmxkZ05iPgoJCQkJCQk8UHN0Q2Q+NzU1MTwvUHN0Q2Q+CgkJCQkJCTxUd25ObT5GVEFOPC9Ud25ObT4KCQkJCQkJPEN0cnk+Q0g8L0N0cnk+CgkJCQkJPC9Qc3RsQWRyPgoJCQkJPC9DZHRyPgoJCQkJPENkdHJBY2N0PgoJCQkJCTxJZD4KCQkJCQkJPElCQU4+Q0gxNjAwNzc0MDEyMzEyMzQ1Njc4PC9JQkFOPgoJCQkJCTwvSWQ+CgkJCQk8L0NkdHJBY2N0PgoJCQkJPFJtdEluZj4KCQkJCQk8VXN0cmQ+S2F1ZiBTa2lhdXNyw7xzdHVuZzwvVXN0cmQ+CgkJCQk8L1JtdEluZj4KCQkJPC9DZHRUcmZUeEluZj4KCQk8L1BtdEluZj4KCTwvQ3N0bXJDZHRUcmZJbml0bj4KPC9Eb2N1bWVudD4K\"\n}"
								},
								"url": {
									"raw": "{{env_payments}}/banking-api/payments/pain/v1/credittransfer",
									"host": [
										"{{env_payments}}"
									],
									"path": [
										"banking-api",
										"payments",
										"pain",
										"v1",
										"credittransfer"
									]
								}
							},
							"response": []
						},
						{
							"name": "getPaymentBulk",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55453143-b8d7-4138-8bcc-ea89ad208ea8",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment is retrieved and assertions are passed\", function () {\r",
											"\r",
											"    pm.test(\"Response code is correct\", () => {\r",
											"      pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response header 'Content-Type' exists and has correct value\", () => {\r",
											"        pm.response.to.have.header('Content-Type', 'application/zip');\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response header 'Content-Disposition' exists and has correct value\", () => {\r",
											"        pm.response.to.have.header('Content-Disposition', 'attachment; filename=pain001.zip');\r",
											"    });\r",
											"\r",
											"    //Determine if assertion passed at whole\r",
											"    pm.response.to.have.status(200) \r",
											"    && pm.response.to.have.header('Content-Type', 'application/zip') \r",
											"    && pm.response.to.have.header('Content-Disposition', 'attachment; filename=pain001.zip');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a3eb16ca-ad5d-4815-8cc6-7227e2b104fe",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/zip"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/banking-api/payments/pain/v1/credittransfer/{{newPaymentBulkID}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"banking-api",
										"payments",
										"pain",
										"v1",
										"credittransfer",
										"{{newPaymentBulkID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "createPaymentAuthorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "463481a1-2c56-4a59-8467-4bf6dfce8d70",
								"exec": [
									"    // check if authorization is created\r",
									"    if (pm.response.to.have.status(201)){\r",
									"        let responseData = JSON.parse(responseBody);\r",
									"        let href = responseData._links.scaRequired.href;\r",
									"        let n = href.lastIndexOf(\"PIS\");\r",
									"        let pis = href.substr(n, href.length - n);        \r",
									"        pm.globals.set(\"newPaymentAuthorizationPis\", pis);\r",
									"        console.log(\"New authorization PIS: \" + pm.globals.get(\"newPaymentAuthorizationPis\"));\r",
									"    }\r",
									"    else {\r",
									"        console.log(\"Failed to create authorization for payment with ID:\" + pm.globals.get(\"newPaymentID\"));\r",
									"        pm.globals.unset(\"newPaymentAuthorizationPis\");\r",
									"    }"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json; charset=UTF-8"
							},
							{
								"key": "Accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{environment}}/banking-api/payment/payments/{{tenant}}/v1/payment/{{newPaymentID}}/authorisations/",
							"host": [
								"{{environment}}"
							],
							"path": [
								"banking-api",
								"payment",
								"payments",
								"{{tenant}}",
								"v1",
								"payment",
								"{{newPaymentID}}",
								"authorisations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "authorizePayment",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "content-type",
								"value": "application/json; charset=UTF-8"
							},
							{
								"key": "Accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{environment}}/banking-api/payment/payments/12312/v1/payment/{{newPaymentID}}/authorisation/{{paymentAuthorizationPis}}",
							"host": [
								"{{environment}}"
							],
							"path": [
								"banking-api",
								"payment",
								"payments",
								"12312",
								"v1",
								"payment",
								"{{newPaymentID}}",
								"authorisation",
								"{{paymentAuthorizationPis}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d26fda8c-bd8a-44f7-a07d-b730e0fb6931",
						"type": "text/javascript",
						"exec": [
							"//call global function to generate access token",
							"eval(globals.generateAccessToken)();"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b35e7d61-4ff1-47e7-bfd2-3fc79b71979b",
						"type": "text/javascript",
						"exec": [
							"eval(globals.sessionNavigate)();",
							"pm.globals.unset(\"_tr_\" + request.name);"
						]
					}
				}
			]
		},
		{
			"name": "Tools",
			"item": [
				{
					"name": "GetAuthorizationCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2529c886-64ec-43bf-8d0c-eb465a5b30df",
								"exec": [
									"//console.log(\">>> \" + getQueryParams(postman.getResponseHeader(\"Location\")).code);",
									"//console.log(\"<<< \" + eval(globals.getQueryParams)(postman.getResponseHeader(\"Location\")).code);",
									"",
									"",
									"let locationHeader = postman.getResponseHeader(\"Location\");",
									"//let code = getQueryParams(locationHeader).code;",
									"let code = eval(globals.getQueryParams)(locationHeader).code;",
									"",
									"console.log(\">>>> Old authorization code: \" + pm.environment.get(\"authorization_code\"));",
									"pm.environment.set(\"authorization_code\", code);",
									"console.log(\">>>> Generated authorization code: \" + pm.environment.get(\"authorization_code\"));",
									"",
									"pm.environment.set(\"testAdam\", \"test\");",
									"console.log(pm.environment.get(\"testAdam\"));",
									"",
									"/*",
									"function getQueryParams(uri) {",
									"  var vars = [];",
									"",
									"  // Get the start index of the query string",
									"  var qsi = uri.indexOf('?');",
									"  if (qsi == -1)",
									"    return vars;",
									"",
									"  // Get the query string",
									"  var qs = uri.slice(qsi + 1);",
									"",
									"  // Check if there is a subsection reference",
									"  sri = qs.indexOf('#');",
									"  if (sri >= 0)",
									"    qs = qs.slice(0, sri);",
									"",
									"  // Build the associative array",
									"  var hashes = qs.split('&');",
									"  for (var i = 0; i < hashes.length; i++) {",
									"    var sep = hashes[i].indexOf('=');",
									"    if (sep <= 0)",
									"      continue;",
									"    var key = decodeURIComponent(hashes[i].slice(0, sep));",
									"    var val = decodeURIComponent(hashes[i].slice(sep + 1));",
									"    vars[key] = val;",
									"  }",
									"  const jar = pm.cookies.jar();",
									"",
									"  jar.clear(pm.request.url, function (error) {",
									"  // error - <Error>",
									"  });",
									"",
									"  return vars;",
									"  ",
									"}",
									"*/",
									"",
									"//setTimeout(function(){}, 2000); ",
									"// Session navigate from PrS using eval()"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d062defc-07f6-43a2-b2a5-61ad429adc4e",
								"exec": [
									"const contractNum = pm.environment.get(\"contract\"); //'1248081501';\r",
									"//const contractNum = '1000041509';\r",
									"//const contractNum = '1259731501';\r",
									"//const contractNum = '1000041501';\r",
									"//const contractNum = '1248221501';\r",
									"//const contractNum = '1268411501'; // MDB-MASTER-TEST\r",
									"//const contractNum = '1273221501'; // SOBA-R191-TEST\r",
									"console.log('Generating token for contract :' + contractNum);\r",
									"\r",
									"var stringInit = ':12312'; // MDB R191 TEST\r",
									"//var stringInit = ':8334'; // SOBA R191 TEST\r",
									"\r",
									"// Define the string\r",
									"//var stringPrefix = 'test.user@crealogix.com:12312:Wh2V3uPfJvtedUnZ5OoY0VnhaBVVlL5aB4AyXyzl1000167712:en:';\r",
									"//'1248081501:12312:Wh2V3uPfJvtedUnZ5OoY0VnhaBVVlL5aB4AyXyzl1000167712:en:';\r",
									"//var stringPrefix = contractNum +':12312:Wh2V3uPfJvtedUnZ5OoY0VnhaBVVlL5aB4AyXyzl1000167712:en:';\r",
									"\r",
									"var stringPrefix = contractNum + stringInit + ':Wh2V3uPfJvtedUnZ5OoY0VnhaBVVlL5aB4AyXyzl1000167712:en:';\r",
									"var stringSuffix = ':1234';\r",
									"\r",
									"// Encode the String\r",
									"var encodedString = btoa(stringPrefix + contractNum + stringSuffix);\r",
									"console.log(\"Generated X-CLX-Auth: \" + encodedString);\r",
									"pm.globals.set(\"X-CLX-AuthV2\",encodedString);\r",
									"console.log(\"Original X-CLX-Auth: \" + pm.globals.get(\"X-CLX-Auth\"));\r",
									"\r",
									"/*\r",
									"// Decode the String\r",
									"var decodedString = atob(encodedString);\r",
									"console.log(decodedString); // Outputs: \"Hello World!\"\r",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "CLX_LEGACY",
								"value": "true",
								"type": "text"
							},
							{
								"key": "X-CLX-Auth",
								"value": "{{X-CLX-AuthV2}}",
								"type": "text"
							},
							{
								"key": "X-CLX-Auth",
								"value": "{{X-CLX-Auth}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ASO}}/{{tenantId}}/oauth/authorize?response_type=code&client_id=postman&redirect_uri=https://www.getpostman.com/oauth2/callback&state=&scope=https://api.crealogix.com/payments/payment.read https://api.crealogix.com/payments/payment.write",
							"host": [
								"{{ASO}}"
							],
							"path": [
								"{{tenantId}}",
								"oauth",
								"authorize"
							],
							"query": [
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "client_id",
									"value": "postman"
								},
								{
									"key": "redirect_uri",
									"value": "https://www.getpostman.com/oauth2/callback"
								},
								{
									"key": "state",
									"value": ""
								},
								{
									"key": "scope",
									"value": "https://api.crealogix.com/payments/payment.read https://api.crealogix.com/payments/payment.write",
									"description": "If scope is empty resource collects all available client scopes"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAccessToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "79c5ee27-2506-43e8-a7f4-9b8cb0cbc093",
								"exec": [
									"if (responseBody) {\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									"    if (jsonData) {\r",
									"        postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token);\r",
									"    }\r",
									"}\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);\r",
									"//postman.setEnvironmentVariable(\"token\", jsonData.access_token);\r",
									"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token);\r",
									"\r",
									"\r",
									"const jar = pm.cookies.jar();\r",
									"\r",
									"jar.clear(pm.request.url, function (error) {\r",
									"  // error - <Error>\r",
									"});\r",
									"\r",
									"pm.environment.unset(\"authorization_code\");\r",
									"// Session navigate from PrS using eval()\r",
									"//eval(globals.sessionNavigate)();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "797aac30-6332-48d7-a4a9-3bc0db4a8ee2",
								"exec": [
									"//let code = pm.iterationData.get(\"authorization_code\");",
									"//console.log(\">>>> Retrieving authorization code: \" + code);",
									"//pm.environment.set(\"authorization_code\", pm.iterationData.get(\"authorization_code\"));",
									"//let code = JSON.parse(pm.environment.get(\"authorization_code\"));",
									"//pm.environment.set(\"authorization_code\",code);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "CLX_LEGACY",
								"type": "text",
								"value": "true"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic cG9zdG1hbjpzZWNyZXQ="
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ASO}}/{{tenantId}}/oauth/token?grant_type=authorization_code&redirect_uri=https://www.getpostman.com/oauth2/callback&code={{authorization_code}}",
							"host": [
								"{{ASO}}"
							],
							"path": [
								"{{tenantId}}",
								"oauth",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "authorization_code"
								},
								{
									"key": "redirect_uri",
									"value": "https://www.getpostman.com/oauth2/callback"
								},
								{
									"key": "code",
									"value": "{{authorization_code}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getAuthTestToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5daea11-f798-431e-bfaf-3cb4a54f9691",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
									"    pm.response.to.not.be.error;",
									"    //pm.response.to.be.withBody;",
									"    pm.environment.set(\"access_token\", pm.response.text());",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e18a989e-87a5-4b2a-8a06-21df12baf492",
								"exec": [
									"console.log(\"Test Token url is: \" + pm.environment.get(\"env_security_testToken\"));",
									"console.log(\"Contract is: \" + pm.environment.get(\"userId_payments\"));",
									"",
									"// Set up pre-conditions with Chai Assertion library. https://www.chaijs.com/api/bdd/",
									"//pm.expect(pm.environment.get(\"env_securemail\")).to.be.a('string', \"The env_securemail is not defined\");",
									"//pm.expect(pm.environment.get(\"env_security_testToken\")).to.be.a('string', \"The testTokenUrl is not defined\");",
									"//pm.expect(pm.environment.get(\"tenantId_security\")).to.be.a('string', \"The tenantId is not defined\");",
									"//pm.expect(pm.environment.get(\"tenantName_security\")).to.be.a('string', \"The tenantName is not defined\");",
									"//pm.expect(pm.environment.get(\"userName_security\")).to.be.a('string', \"The userName is not defined\");",
									"//pm.expect(pm.environment.get(\"contractNo_security\")).to.be.a('string', \"The contractNo is not defined\");",
									"//pm.expect(pm.environment.get(\"bcNo_security\")).to.be.a('string', \"The bcNo is not defined\");",
									"//pm.expect(pm.environment.get(\"userId_security\")).to.be.a('string', \"The userId is not defined\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"tenant_id\": {{tenantId_security}},\r\n  \"acsKey\": \"i6PiNObtdp2rCNW7mlV51BDSY4zAliSvBCyVsuML1000203567\",\r\n  \"tenant_name\": \"{{tenantName_security}}\",\r\n  \"user_name\": \"{{userId_payments}}\",\r\n  \"contractNo\": \"{{contractNo_security}}\",\r\n  \"loginName\": \"{{userId_payments}}\",\r\n  \"sub\": \"{{bcNo}}:{{userId_payments}}\",\r\n  \"languageCode\": \"{{language}}\",\r\n  \"bcNo\": \"{{bcNo_security}}\",\r\n  \"authorities\": [\"DBAN_ADMIN\",\"DBAN_USER\"],\r\n  \"client_id\": \"postman\",\r\n  \"user_id\": \"{{userId_payments}}\",\r\n  \"nonce\": \"{{nonce)}\",\r\n  \"scope\": [\r\n    \"https://api.crealogix.com/dban\",\r\n    \"read\",\r\n    \"https://api.crealogix.com/contracts/contract.advisor.readonly\",\r\n    \"https://api.crealogix.com/assets/account.balance.readonly\",\r\n    \"https://api.crealogix.com/contracts/contract.metadata.readonly\",\r\n    \"https://api.crealogix.com/contracts/contract.person.readonly\",\r\n    \"https://api.crealogix.com/payments/payment.initiate\",\r\n    \"https://api.crealogix.com/assets/account.transaction.readonly\",\r\n    \"https://api.crealogix.com/assets/account.permission.readonly\",\r\n    \"write\",\r\n    \"https://api.crealogix.com/assets/account.metadata.readonly\",\r\n    \"https://api.crealogix.com/messages/securemail.write\",\r\n    \"https://api.crealogix.com/messages/securemail.read\",\r\n    \"https://api.crealogix.com/messages/document.category.read\",\r\n    \"https://api.crealogix.com/messages/document.category.write\",\r\n    \"https://api.crealogix.com/messages/document.write\",\r\n    \"https://api.crealogix.com/messages/document.read\",    \r\n    \"https://api.crealogix.com/payments/payment.read\",\r\n    \"https://api.crealogix.com/payments/payment.write\",\r\n    \"https://api.crealogix.com/brokerage/security.readonly\",\r\n    \"https://api.crealogix.com/brokerage/tradingplace.readonly\",\r\n    \"https://api.crealogix.com/brokerage/depository.readonly\",\r\n    \"https://api.crealogix.com/brokerage/order.readonly\",\r\n\t\"https://api.crealogix.com/brokerage/order.write\"\r\n  ],\r\n  \"exp\": 32479694642,\r\n  \"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\r\n  \"iat\": 1553855569\r\n}"
						},
						"url": {
							"raw": "{{env_security_testToken}}",
							"host": [
								"{{env_security_testToken}}"
							]
						},
						"description": "Retrieve the test token"
					},
					"response": []
				},
				{
					"name": "Clean TestRail Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b02fd984-f061-49b8-8481-ee1526e12075",
								"exec": [
									"// Prepare list of TestRail tests for 'Clean TestRail Run' request",
									"//var execTests = pm.environment.get(\"testRailTestsInRun\");",
									"var execTests = data.executedTests;",
									"console.log(\"TestRail, tests executed in last run: \" + execTests);",
									"execTests = execTests.replace(/C/g, \"\");",
									"//console.log(\"TestRail, first cleanup: \" + execTests);",
									"execTests = execTests.replace(/ /g, \", \");",
									"//console.log(\"TestRail, second cleanup: \" + execTests);",
									"execTests = execTests.replace(/,,/g, \",\");",
									"pm.environment.set(\"testRailTestsInRun\", execTests); ",
									"",
									"var array = JSON.parse(\"[\" + execTests + \"]\"); //convert string to array",
									"for(let i = 0; i < 10; i++){",
									"    let runId = JSON.parse(responseBody)[i].id;",
									"    let runName = JSON.parse(responseBody)[i].name;",
									"    let runSuiteId = JSON.parse(responseBody)[i].suite_id;",
									"    if (runName === \"Postman API Tests\") { //determine proper run",
									"        //console.log(runId);   ",
									"        console.log(\"TestRail run '\" + runId + \"' updating for tests: \" + execTests);",
									"        pm.sendRequest({",
									"            url: \"https://testrail.ebs.crealogix.net/index.php?/api/v2/update_run/\" + runId,",
									"            method: \"POST\",",
									"            header: {",
									"                \"Authorization\": \"Basic bWlsYW4ua2FyYWRlZ2xpY0BjcmVhbG9naXguY29tOlNTQ25hcG9saTEyMzQ1Njc4OQ==\",",
									"                \"Content-Type\": \"application/json\"",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ include_all: false, case_ids: array })",
									"        \t}",
									"        });",
									"        break;",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0d3771ce-dd3a-477a-aebe-cea9c208c52c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "SSCnapoli123456789",
									"type": "string"
								},
								{
									"key": "username",
									"value": "milan.karadeglic@crealogix.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json; charset=UTF-8"
							},
							{
								"key": "accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://testrail.ebs.crealogix.net/index.php?/api/v2/get_runs/8=",
							"protocol": "https",
							"host": [
								"testrail",
								"ebs",
								"crealogix",
								"net"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "/api/v2/get_runs/8",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SWIFT hardcoded",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b1e6653-4090-425a-951e-1ed00ffd709b",
								"exec": [
									"//eval(globals.commonTests)();\r",
									"\r",
									"//pm.test(pm.globals.get(\"testRailTestCases\") + \" Payment is created and assertions are passed\", function () {\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment is created and assertions are passed\", function () {\r",
									"\r",
									"    //Instructed amount is correct\r",
									"    let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
									"    let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
									"    //Execution date is correct\r",
									"    let requestBodyExecutionDate = JSON.parse(request.data).paymentInformation.requestedExecutionDate;\r",
									"    let responseBodyExecutionDate = JSON.parse(responseBody).paymentInformation.requestedExecutionDate;    \r",
									"    //State is correct\r",
									"    let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
									"    //Creditor agent is correct\r",
									"    let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent;\r",
									"    let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent;\r",
									"    //Debtor address is correct\r",
									"    let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
									"    let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
									"    //Debtor account is correct\r",
									"    let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
									"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo;   \r",
									"    //Creditor account is correct\r",
									"    let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
									"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;   \r",
									"    //Charge bearer is correct    \r",
									"    let jsonDataResponseChargeBearer = pm.response.json().chargeBearer;\r",
									"    \r",
									"    pm.test(\"Instructed amount is correct\", () => {\r",
									"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Execution date is correct\", () => {\r",
									"      pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"State is correct\", () => {\r",
									"      pm.expect(jsonDataResponsePaymentState).to.eql(\"ENTERED\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Creditor agent is correct\", () => {\r",
									"      pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Debtor address is correct\", () => {\r",
									"      pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName);\r",
									"      pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
									"      pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Debtor account is correct\", () => {\r",
									"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Creditor account is correct\", () => {\r",
									"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Charge bearer is correct\", () => {\r",
									"      pm.expect(jsonDataResponseChargeBearer).to.eql(\"SHAR\");\r",
									"    });\r",
									"    \r",
									"    // check if payment is created\r",
									"    if (pm.response.to.have.status(201)){\r",
									"        var responseData = JSON.parse(responseBody);\r",
									"        pm.globals.set(\"newPaymentSwiftID\", responseData.paymentId);\r",
									"        console.log(\"New payment ID: \" + pm.globals.get(\"newPaymentSwiftID\"));\r",
									"    }\r",
									"    else {\r",
									"        console.log(\"Failed to create payment with ID:\" + pm.globals.get(\"newPaymentSwiftID\"));\r",
									"        pm.globals.unset(\"newPaymentSwiftID\");\r",
									"    }\r",
									"    \r",
									"    //Determine if assertion passed at whole\r",
									"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
									"    && pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate) \r",
									"    && pm.expect(jsonDataResponsePaymentState).to.eql(\"ENTERED\") \r",
									"    && pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent) \r",
									"    && pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName) \r",
									"    && pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode) \r",
									"    && pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName) \r",
									"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
									"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
									"    && pm.expect(jsonDataResponseChargeBearer).to.eql(\"SHAR\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2f6ce817-7d7c-4d74-96ef-042e099a80d0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"paymentInformation\": {\r\n    \"endToEndId\": \"consequuntur-maiores-assumenda\",\r\n    \"instructedAmount\": {\r\n      \"currency\": {\r\n        \"code\": \"EUR\"\r\n      },\r\n      \"value\": 10.01\r\n    },\r\n\t\"requestedExecutionDate\":  {{PrS:nextWorkingDay}},\r\n    \"instructionPriority\": \"NORMAL\",\r\n    \"debtor\": {\r\n      \"name\": \"Freddy Hinz\",\r\n      \"address\": {\r\n        \"streetName\": \"Schachenallee 31\",\r\n        \"postalCode\": \"5004\",\r\n        \"townName\": \"Aarau\"\r\n      }\r\n    },\r\n\t\"debtorAccountNo\": \"CH6312312001248081501\",\r\n\t\"creditorAccountNo\": 12345678,\t\r\n\t\"creditor\": {\r\n      \"name\": \"Talon Ondricka\",\r\n      \"address\": {\r\n        \"buildingNm\": \"566\",\r\n        \"postalCode\": \"638\",\r\n        \"townName\": \"North Norvalside\",\r\n        \"country\": \"AI\"\r\n      }\r\n    },\r\n    \"creditorAgent\": {\r\n      \"name1\": \"Esmeralda\",\r\n      \"name2\": \"Grady\",\r\n      \"street\": \"60308 Adalberto Passage\",\r\n      \"city\": \"Port Shayleeburgh\",\r\n      \"country\": \"CH\"\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{environment}}/banking-api/payment/swift/{{tenant}}/v2/credittransfer",
							"host": [
								"{{environment}}"
							],
							"path": [
								"banking-api",
								"payment",
								"swift",
								"{{tenant}}",
								"v2",
								"credittransfer"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "785971c4-c673-47dd-85f1-77e9ab93ac8e",
						"type": "text/javascript",
						"exec": [
							"//get session for access token",
							"eval(globals.sessionGet)();"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8c1a80aa-ed3a-4dec-82df-09f57330b746",
						"type": "text/javascript",
						"exec": [
							"eval(globals.sessionNavigate)();",
							"pm.globals.unset(\"_tr_\" + request.name);"
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "763cf97f-fe9e-4845-866b-b0716871c287",
				"type": "text/javascript",
				"exec": [
					"//************************************************************************************************",
					"// variable initialization************************************************************************",
					"//************************************************************************************************",
					"var test = pm.environment.get(\"testRailTestsInRun\");",
					"if (!test) {",
					"    pm.environment.set(\"testRailTestsInRun\", \"\");",
					"}",
					"",
					"",
					"// Define test data, setup configuration per environment",
					"let pmEnv = pm.environment.get(\"envName\");",
					"//let pmEnv = pm.environment.name;",
					"let dataEnv = data.envName;",
					"if (dataEnv) {",
					"    if (pmEnv !== dataEnv) {",
					"        throw new Error(\"Wrong environment selected, testing is terminated!\");",
					"    }",
					"}",
					"//************************************************************************************************",
					"// DEPRECATED !!!",
					"// set access token ******************************************************************************",
					"//************************************************************************************************",
					"//pm.environment.set(\"token\",data.accessToken);",
					"",
					"//******************************************************",
					"// set parameters ********************************************************************************",
					"//************************************************************************************************",
					"/*",
					"var contractNumber = data.contractNumber;",
					"if (contractNumber){ ",
					"    pm.environment.set(\"contract\",JSON.parse(data.contractNumber));",
					"    console.log(\"dataFile/contractNumber: \" + contractNumber);",
					"}",
					"",
					"var paymentType = data.paymentType;",
					"if (paymentType){ ",
					"    pm.environment.set(\"paymentType\",data.paymentType);",
					"    console.log(\"dataFile/paymentType: \" + paymentType);",
					"}",
					"var beneficiaryAccount = data.beneficiaryAccount;",
					"if (beneficiaryAccount){ ",
					"    pm.environment.set(\"beneficiaryAccount\",data.beneficiaryAccount);",
					"    console.log(\"dataFile/beneficiaryAccount: \" + beneficiaryAccount);",
					"}",
					"var debtorAccountNo = data.debtorAccountNo;",
					"if (debtorAccountNo){ ",
					"    pm.environment.set(\"debtorAccountNo\",data.debtorAccountNo);",
					"    console.log(\"dataFile/debtorAccountNo: \" + debtorAccountNo);",
					"}",
					"var debtorAccountName = data.debtorAccountName;",
					"if (debtorAccountName){ ",
					"    pm.environment.set(\"debtorAccountName\",data.debtorAccountName);",
					"    console.log(\"dataFile/debtorAccountName: \" + debtorAccountName);",
					"}",
					"var debtorStreetName = data.debtorStreetName;",
					"if (debtorStreetName){ ",
					"    pm.environment.set(\"debtorStreetName\",data.debtorStreetName);",
					"    console.log(\"dataFile/debtorStreetName: \" + debtorStreetName);",
					"}",
					"var debtorPostalCode = data.debtorPostalCode;",
					"if (debtorPostalCode){ ",
					"    pm.environment.set(\"debtorPostalCode\",data.debtorPostalCode);",
					"    console.log(\"dataFile/debtorPostalCode: \" + debtorPostalCode);",
					"}",
					"var debtorTownName = data.debtorTownName;",
					"if (debtorTownName){ ",
					"    pm.environment.set(\"debtorTownName\",data.debtorTownName);",
					"    console.log(\"dataFile/debtorTownName: \" + debtorTownName);",
					"}",
					"var creditorAccountNo = data.creditorAccountNo;",
					"if (creditorAccountNo){ ",
					"    pm.environment.set(\"creditorAccountNo\",data.creditorAccountNo);",
					"    console.log(\"dataFile/creditorAccountNo: \" + creditorAccountNo);",
					"}",
					"var creditorAgentCountry = data.creditorAgentCountry;",
					"if (creditorAgentCountry){ ",
					"    pm.environment.set(\"creditorAgentCountry\",data.creditorAgentCountry);",
					"    console.log(\"dataFile/creditorAgentCountry: \" + creditorAgentCountry);",
					"}",
					"var currencyCode = data.currencyCode;",
					"if (currencyCode){ ",
					"    pm.environment.set(\"currencyCode\",data.currencyCode);",
					"    console.log(\"dataFile/currencyCode: \" + currencyCode);",
					"}",
					"var endToEndId = data.endToEndId;",
					"if (endToEndId){ ",
					"    pm.environment.set(\"endToEndId\",data.endToEndId);",
					"    console.log(\"dataFile/endToEndId: \" + endToEndId);",
					"}",
					"var postalAccountNo = data.postalAccountNo;",
					"if (postalAccountNo){ ",
					"    pm.environment.set(\"postalAccountNo\",data.postalAccountNo);",
					"    console.log(\"dataFile/postalAccountNo: \" + postalAccountNo);",
					"}*/",
					"",
					"//************************************************************************************************",
					"// connect to TestRail ***************************************************************************",
					"//************************************************************************************************",
					"pm.globals.set(\"TESTRAIL_DOMAIN\", \"testrail.ebs.crealogix.net\");",
					"pm.globals.set(\"TESTRAIL_USERNAME\", \"milan.karadeglic@crealogix.com\");",
					"pm.globals.set(\"TESTRAIL_APIKEY\", \"Q4MlDw1e70Kxh1g1YPq9-Dg0abDWer.pSWcVWcxO4\");",
					"pm.globals.set(\"TESTRAIL_PROJECTID\", 8);",
					"pm.globals.set(\"TESTRAIL_TITLE\", \"Postman API Tests\");",
					"",
					"//************************************************************************************************",
					"//global function to determine next day/next working day *****************************************",
					"//************************************************************************************************",
					"var moment = require('moment');",
					"let nextDay = moment().add(\"days\", 1).format(\"YYYY-MM-DD\"); //next day in specified format",
					"let futureDay = moment().add(\"days\", 30).format(\"YYYY-MM-DD\"); //next day in specified format",
					"switch (moment().add(\"days\", 1).format(\"dddd\")) {",
					"    case \"Sunday\":",
					"        var nextWorkingDay = moment().add(\"days\", 2).format(\"YYYY-MM-DD\");",
					"        break;",
					"    case \"Saturday\":",
					"        var nextWorkingDay = moment().add(\"days\", 3).format(\"YYYY-MM-DD\");",
					"        break;",
					"    default:",
					"        var nextWorkingDay = moment().add(\"days\", 1).format(\"YYYY-MM-DD\");",
					"}",
					"switch (moment().add(\"days\", 30).format(\"dddd\")) {",
					"    case \"Sunday\":",
					"        var futureWorkingDay = moment().add(\"days\", 31).format(\"YYYY-MM-DD\");",
					"        var futurePlusWorkingDay = moment().add(\"days\", 38).format(\"YYYY-MM-DD\");",
					"        break;",
					"    case \"Saturday\":",
					"        var futureWorkingDay = moment().add(\"days\", 32).format(\"YYYY-MM-DD\");",
					"        var futurePlusWorkingDay = moment().add(\"days\", 39).format(\"YYYY-MM-DD\");",
					"        break;",
					"    default:",
					"        var futureWorkingDay = moment().add(\"days\", 30).format(\"YYYY-MM-DD\");",
					"        var futurePlusWorkingDay = moment().add(\"days\", 37).format(\"YYYY-MM-DD\");",
					"}",
					"",
					"pm.globals.set('PrS:nextDay', JSON.stringify(nextDay));",
					"pm.globals.set('PrS:nextWorkingDay', JSON.stringify(nextWorkingDay));",
					"pm.globals.set('PrS:futureWorkingDay', JSON.stringify(futureWorkingDay));",
					"pm.globals.set('PrS:futurePlusWorkingDay', JSON.stringify(futurePlusWorkingDay));",
					"",
					"/*",
					"// Define test data, setup configuration per environment",
					"var env = pm.environment.get(\"envName\");",
					"if (env === \"MDB-R191-TEST\") {",
					"//    var contractNumber = \"{{contractNumber}}\";",
					"//    var debtorAccountNo = \"{{debtorAccountNo}}\";",
					"//    var debtorAccountName = \"{{debtorAccountName}}\";",
					"//    var creditorAccountNo = \"{{creditorAccountNo}}\";",
					"    } else if (env === \"MDB-R191-LAT\") {",
					"} else {",
					"    throw new Error(\"Wrong environment selected, requests are skipped!\")",
					"}",
					"//pm.globals.set('PrS:contractNumber', JSON.stringify(contractNumber));",
					"//pm.globals.set('PrS:debtorAccountNo', JSON.stringify(debtorAccountNo));",
					"//pm.globals.set('PrS:debtorAccountName', JSON.stringify(debtorAccountName));",
					"//pm.globals.set('PrS:creditorAccountNo', JSON.stringify(creditorAccountNo));",
					"*/",
					"",
					"// Save the object as a variable.",
					"// JSON.stringify will serialize the object so that Postman can save it",
					"",
					"//pm.globals.set('PrS:tags', JSON.stringify(tags));",
					"//pm.environment.set(\"testGroup\",\"Patient Zero\") //set environment variable if/when needed",
					"",
					"//pm.response.to.be.ok;         - Status code must be 200",
					"//pm.response.to.be.error       - Checks 4XX or 5XX",
					"//pm.response.to.be.serverError - Checks 5XX",
					"//pm.response.to.be.clientError - Checks 4XX status code",
					"",
					"// Save common tests in a global variable",
					"postman.setGlobalVariable(\"commonTests\", () => {",
					"    pm.test(\"Response must be valid with/with out a body and with proper status code\", function () {",
					"        let newmanRun = pm.globals.get(\"newmanRun\");",
					"        if (newmanRun != 1) {",
					"            if ([\"GET\", \"POST\", \"PUT\"].indexOf(request.method) > -1) {",
					"                pm.response.to.not.be.error;",
					"                pm.response.to.be.withBody;",
					"                pm.response.to.be.json;",
					"                pm.response.to.have.jsonBody();",
					"                pm.response.to.not.have.jsonBody('error');",
					"                pm.response.to.have.header('Content-Type', 'application/json;charset=UTF-8');",
					"            } else {",
					"                pm.response.to.not.be.withBody;",
					"            }",
					"            switch (request.method) {",
					"                case \"POST\":",
					"                    pm.response.to.have.status(201);",
					"                    break;",
					"                case \"PUT\":",
					"                    pm.response.to.have.status(200);",
					"                    break;",
					"                case \"GET\":",
					"                    pm.response.to.have.status(200);",
					"                    break;",
					"                case \"DELETE\":",
					"                    pm.response.to.have.status(200);",
					"                    break;",
					"            }",
					"        }",
					"    });",
					"    //pm.test(\"Response time is below 1000ms\", function () {",
					"    //    pm.expect(pm.response.responseTime).to.be.below(1000);",
					"    //});",
					"});",
					"",
					"postman.setGlobalVariable(\"assertValidCreditorAgent\", () => {",
					"    pm.expect(address).to.be.an('object').with.keys('name1', 'name2', 'street', 'city', 'country', 'bic');",
					"    pm.expect(address.name1).to.be.a('string').and.not.empty;",
					"    pm.expect(address.name2).to.be.a('string').and.not.empty;",
					"    pm.expect(address.street).to.be.a('string').and.not.empty;",
					"    pm.expect(address.city).to.be.a('string').and.not.empty;",
					"    pm.expect(address.country).to.be.a('string').with.lengthOf(2).and.match(/[A-Z]+/);",
					"    pm.expect(address.bic).to.be.a('string').and.not.empty;",
					"});",
					"",
					"postman.setGlobalVariable(\"sessionInit\", (testSession, sessionName) => {",
					"    //session init section",
					"    console.log(request.name + \", initialization: \" + testSession + \", global var: \" + sessionName);",
					"    console.log(request.name + \", executing: \" + testSession[0]);",
					"",
					"    // Select first test from session to be executed",
					"    postman.setNextRequest(testSession[0]);",
					"    testSession.shift();",
					"    if (testSession.length === 0) {",
					"        console.log(request.name + \", test session is empty, unset \" + sessionName);",
					"        pm.globals.unset(sessionName);",
					"        console.log(request.name + \", terminate tests execution list\");",
					"    } else {",
					"        pm.globals.set(sessionName, testSession);",
					"        console.log(request.name + \" for \" + sessionName + \", updated list of tests to be executed: \" + testSession);",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"sessionNavigate\", () => {",
					"    console.log(request.name + \", entering ...\");",
					"    if (pm.globals.get(\"requestsToRun\") === undefined) {",
					"        console.log(request.name + \", requestsToRun is undefined\");",
					"        pm.globals.set(\"testRailTestCases\", \"\");",
					"        console.log(request.name + \", reset global var: testRailTestCases\");",
					"        if (pm.globals.get(\"testSession\") === undefined) {",
					"            console.log(request.name + \", testSession is undefined\");",
					"            //here >> export list of tests executed",
					"            var tests = pm.environment.get(\"testRailTestsInRun\");",
					"            tests = tests.replace(/C/g, \"\");",
					"            tests = tests.replace(/ /g, \", \");",
					"            tests = tests.replace(/,,/g, \",\");",
					"            console.log(\"TestRail tests executed executed in this run: \" + tests);",
					"            console.log(\"The end\");",
					"            postman.setNextRequest(null);",
					"        } else {",
					"            var testSession = pm.globals.get(\"testSession\");",
					"            console.log(request.name + \", checking what to run: \" + testSession[0]);",
					"            postman.setNextRequest(testSession[0]);",
					"            testSession.shift();",
					"            if (testSession.length === 0) {",
					"                pm.globals.unset(\"testSession\");",
					"                console.log(request.name + \", terminate execution list\");",
					"            } else {",
					"                pm.globals.set(\"testSession\", testSession);",
					"                console.log(request.name + \", updated list of tests to be executed: \" + testSession);",
					"            }",
					"        }",
					"    } else {",
					"        var requestsToRun = pm.globals.get(\"requestsToRun\");",
					"        console.log(request.name + \", checking what to run: \" + requestsToRun[0]);",
					"        postman.setNextRequest(requestsToRun[0]);",
					"        requestsToRun.shift();",
					"        if (requestsToRun.length === 0) {",
					"            pm.globals.unset(\"requestsToRun\");",
					"            console.log(request.name + \", terminate requests execution list\");",
					"        } else {",
					"            pm.globals.set(\"requestsToRun\", requestsToRun);",
					"            console.log(request.name + \", updated list of requests to be executed: \" + requestsToRun);",
					"        }",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"cleanup\", () => {",
					"    const clean = [\"requestsToRun\", \"testSession\"];",
					"    for (let i = 0; i < clean.length; ++i) {",
					"        pm.globals.unset(clean[i]);",
					"    }",
					"    //create single secure mail by default ",
					"    pm.environment.set(\"mailsToCreate\", 1);",
					"});",
					"",
					"postman.setGlobalVariable(\"testsExecuted\", (listOfExecutedTests) => {",
					"    let tests = pm.environment.get(\"testRailTestsInRun\");",
					"    //console.log(\"TestRail tests stored in 'testRailTestsInRun': \" + tests);",
					"    if (tests.length > 0) {",
					"        tests = tests + \" \"",
					"    }",
					"    tests = tests + listOfExecutedTests;",
					"    //console.log(\"TestRail tests to be stored to 'testRailTestsInRun': \" + tests);",
					"    pm.environment.set(\"testRailTestsInRun\", tests);",
					"    //console.log(\"TestRail tests executed so far: \" + tests);",
					"});",
					"",
					"postman.setGlobalVariable(\"extractTestCaseIDFromRequestName\", () => {",
					"    let n = request.name.lastIndexOf(\"(\");",
					"    return request.name.substr(n + 1, request.name.length - n - 2);",
					"});",
					"",
					"postman.setGlobalVariable(\"schemaValidator\", (schema, jsonData) => {",
					"    //old, deprecated schema validationimplementation",
					"    //pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;",
					"",
					"    //new schema validation implementation",
					"",
					"    var schemaValidationPassed = true;",
					"    var serviceSchema = pm.environment.get(schema);",
					"    //var jsonData = JSON.parse(pm.responseBody);",
					"",
					"    var validationResult = tv4.validateMultiple(jsonData, serviceSchema, true, true);",
					"    for (var i = 0; i < validationResult.errors.length; i++) {",
					"        console.log(\"path :\" + validationResult.errors[i].dataPath + \" message :\" + validationResult.errors[i].message);",
					"        //Skipping all \"Invalid type\" errors as they are expected with current service implementations",
					"        schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);",
					"        //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);",
					"    }",
					"    return schemaValidationPassed;",
					"});",
					"",
					"postman.setGlobalVariable(\"isTest\", () => {",
					"    let reqPurpose = pm.globals.get(\"_tr_\" + request.name);",
					"    //console.log(request.name + \" has purpose: \" + reqPurpose);",
					"    if ([\"[cleanUp]\", \"[preCondition]\", \"[postCondition]\"].indexOf(reqPurpose) > -1) {",
					"        //console.log(\"Conclusion: NOT a test\");",
					"        return false;",
					"    } else {",
					"        //console.log(\"Conclusion: IS a test\");",
					"        return true;",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"getQueryParams\", (uri) => {",
					"    var vars = [];",
					"",
					"    // Get the start index of the query string",
					"    var qsi = uri.indexOf('?');",
					"    if (qsi == -1)",
					"        return vars;",
					"",
					"    // Get the query string",
					"    var qs = uri.slice(qsi + 1);",
					"",
					"    // Check if there is a subsection reference",
					"    sri = qs.indexOf('#');",
					"    if (sri >= 0)",
					"        qs = qs.slice(0, sri);",
					"",
					"    // Build the associative array",
					"    var hashes = qs.split('&');",
					"    for (var i = 0; i < hashes.length; i++) {",
					"        var sep = hashes[i].indexOf('=');",
					"        if (sep <= 0)",
					"            continue;",
					"        var key = decodeURIComponent(hashes[i].slice(0, sep));",
					"        var val = decodeURIComponent(hashes[i].slice(sep + 1));",
					"        vars[key] = val;",
					"    }",
					"    const jar = pm.cookies.jar();",
					"",
					"    jar.clear(pm.request.url, function (error) {",
					"        // error - <Error>",
					"    });",
					"",
					"    return vars;",
					"",
					"});",
					"",
					"postman.setGlobalVariable(\"randomizeVariables\", () => {",
					"    let newmanRun = pm.globals.get(\"newmanRun\");",
					"    if (newmanRun != 1) {",
					"        console.log(\"Randomizing variables ...\");",
					"        pm.environment.set(\"endToEndId\", JSON.stringify(pm.variables.replaceIn(\"{{$randomLoremSlug}}\")));",
					"        pm.environment.set(\"unstructured\", JSON.stringify(pm.variables.replaceIn(\"{{$guid}}\")));",
					"        pm.environment.set(\"instructionIdentification\", JSON.stringify(pm.variables.replaceIn(\"{{$randomBitcoin}}\")));",
					"        pm.environment.set(\"name\", JSON.stringify(pm.variables.replaceIn(\"{{$randomFullName}}\")));",
					"        pm.environment.set(\"adrLine1\", JSON.stringify(pm.variables.replaceIn(\"{{$randomStreetName}}\")));",
					"        pm.environment.set(\"adrLine2\", JSON.stringify(pm.variables.replaceIn(\"{{$randomStreetAddress}}\")));",
					"        pm.environment.set(\"streetName\", JSON.stringify(pm.variables.replaceIn(\"{{$randomStreetName}}\")));",
					"        pm.environment.set(\"townName\", JSON.stringify(pm.variables.replaceIn(\"{{$randomCity}}\")));",
					"        pm.environment.set(\"country\", JSON.stringify(pm.variables.replaceIn(\"{{$randomCountryCode}}\")));",
					"        pm.environment.set(\"buildingNm\", pm.variables.replaceIn('{{$randomInt}}'));",
					"        pm.environment.set(\"postalCode\", pm.variables.replaceIn('{{$randomInt}}'));",
					"        pm.environment.set(\"buildingNmStr\", JSON.stringify(pm.variables.replaceIn('{{$randomInt}}')));",
					"        pm.environment.set(\"postalCodeStr\", JSON.stringify(pm.variables.replaceIn('{{$randomInt}}')));",
					"        console.log(\"... randomize is finished\");",
					"    }",
					"});",
					"",
					"/* function for session retrieve*/",
					"postman.setGlobalVariable(\"sessionGet\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"test_session_url\")}?userId=${pm.environment.get(\"userId_payments\")}&tenantId=${pm.environment.get(\"tenantId_security\")}`,",
					"        method: \"GET\",",
					"        header: {",
					"          'Content-Type': 'application/json',",
					"        },",
					"        body: {",
					"          mode: 'raw',",
					"          raw: JSON.stringify({})",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err);",
					"        } else {",
					"            pm.environment.set(\"nonce\",  res.text());",
					"            console.log(\"New session: \" + pm.environment.get(\"nonce\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"postman.setGlobalVariable(\"generateAccessToken\", () => {",
					"    const getAccessTokenRequest = {",
					"        url: pm.environment.get(\"env_security_testToken\"),",
					"        method: \"POST\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json'",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({",
					"                tenant_id: pm.environment.get(\"tenantId_security\"),",
					"                tenant_name: pm.environment.get(\"tenantName_security\"),",
					"                user_name: pm.environment.get(\"userId_payments\"),",
					"                contractNo: pm.environment.get(\"contractNo_security\"),",
					"                language: pm.environment.get(\"language\"),",
					"                bcNo: pm.environment.get(\"bcNo_security\"),",
					"                authorities: [\"DBAN_ADMIN\", \"DBAN_USER\"],",
					"                client_id: \"postman\",",
					"                user_id: pm.environment.get(\"userId_payments\"),",
					"                loginName: pm.environment.get(\"userId_payments\"),",
					"                sub: `${pm.environment.get(\"bcNo\")}:${pm.environment.get(\"userId_payments\")}`,",
					"                exp: 32479694642,",
					"                jti: \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",",
					"                iat: 1553855569,",
					"                nonce: `${pm.environment.get(\"nonce\")}`,",
					"                scope: [",
					"                    \"https://api.crealogix.com/dban\",",
					"                    \"read\",",
					"                    \"write\",",
					"                    \"https://api.crealogix.com/contracts/contract.advisor.readonly\",",
					"                    \"https://api.crealogix.com/contracts/contract.metadata.readonly\",",
					"                    \"https://api.crealogix.com/contracts/contract.person.readonly\",",
					"                    \"https://api.crealogix.com/payments/payment.initiate\",",
					"                    \"https://api.crealogix.com/payments/payment.read\",",
					"                    \"https://api.crealogix.com/payments/payment.write\",",
					"                    \"https://api.crealogix.com/assets/account/read\",",
					"                    \"https://api.crealogix.com/assets/account.transaction/read\",",
					"                    \"https://api.crealogix.com/assets/account.name\",",
					"                    \"https://api.crealogix.com/assets/account.image\",",
					"                    \"https://api.crealogix.com/assets/cuac/read\",",
					"                    \"https://api.crealogix.com/assets/portfolio/read\",",
					"                    \"https://api.crealogix.com/messages/securemail.write\",",
					"                    \"https://api.crealogix.com/messages/securemail.read\",",
					"                    \"https://api.crealogix.com/messages/document.category.read\",",
					"                    \"https://api.crealogix.com/messages/document.category.write\",",
					"                    \"https://api.crealogix.com/messages/document.write\",",
					"                    \"https://api.crealogix.com/messages/document.read\",",
					"                    \"https://api.crealogix.com/brokerage/security/read\",",
					"                    \"https://api.crealogix.com/brokerage/tradingplace/read\",",
					"                    \"https://api.crealogix.com/brokerage/depository/read\",",
					"                    \"https://api.crealogix.com/brokerage/order/read\",",
					"                    \"https://api.crealogix.com/brokerage/order\",",
					"                    \"https://api.crealogix.com/deeplink/domains\",",
					"                    \"https://api.crealogix.com/deeplink/links\"",
					"                ]",
					"            })",
					"        }",
					"    };",
					"    pm.environment.set(\"request\", JSON.stringify(getAccessTokenRequest));",
					"",
					"    pm.sendRequest(getAccessTokenRequest, function (err, res) {",
					"        if (err) {",
					"            console.log(err);",
					"",
					"        } else {",
					"            pm.environment.set(\"access_token\", res.text());",
					"        }",
					"    });",
					"});",
					"",
					"/* function for creating Swift payment*/",
					"postman.setGlobalVariable(\"paymentSwiftCreate\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_payments\")}/banking-api/payment/swift/${pm.environment.get(\"tenant\")}/v2/credittransfer`,",
					"        method: \"POST\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"                storeOnly: false, ",
					"                locked: false,",
					"                paymentInformation: {",
					"                    endToEndId: JSON.parse(pm.environment.get(\"endToEndId\")),",
					"                    instructedAmount: {",
					"                        currency: {",
					"                            code: \"GBP\"",
					"                        },",
					"                        value: 1",
					"                    },",
					"                    remittanceInformation: {",
					"                        \"unstructured\": JSON.parse(pm.environment.get(\"unstructured\")),",
					"                        \"structured\": JSON.parse(pm.environment.get(\"structuredRemittanceRF\"))",
					"                    },",
					"                    instructionIdentification: JSON.parse(pm.environment.get(\"instructionIdentification\")),",
					"                    requestedExecutionDate: JSON.parse(pm.globals.get(\"PrS:nextWorkingDay\")),",
					"                    instructionPriority: \"NORMAL\",",
					"                    creditor: {",
					"                        \"name\": JSON.parse(pm.environment.get(\"name\")),",
					"                        \"address\": {",
					"                            \"adrLine1\": JSON.parse(pm.environment.get(\"adrLine1\")),",
					"                            \"adrLine2\": JSON.parse(pm.environment.get(\"adrLine2\")),",
					"                            \"streetName\": JSON.parse(pm.environment.get(\"streetName\")),",
					"                            \"buildingNm\": pm.environment.get(\"buildingNm\"),",
					"                            \"postalCode\": pm.environment.get(\"postalCode\"),",
					"                            \"townName\": JSON.parse(pm.environment.get(\"townName\")),",
					"                            \"country\": JSON.parse(pm.environment.get(\"country\"))",
					"                        }",
					"                    },",
					"                    creditorAccountNo: JSON.parse(pm.environment.get(\"creditorAccountNoSWIFT\")),",
					"                    creditorAgent: {",
					"                        bic: JSON.parse(pm.environment.get(\"creditorAgentBicSWIFT\"))",
					"                    },",
					"                    debtor: {",
					"                        name: JSON.parse(pm.environment.get(\"debtorAccountName\")),",
					"                        address: {",
					"                            streetName: JSON.parse(pm.environment.get(\"debtorStreetName\")),",
					"                            postalCode: JSON.parse(pm.environment.get(\"debtorPostalCode\")),",
					"                            townName: JSON.parse(pm.environment.get(\"debtorTownName\"))",
					"                        }",
					"                    },",
					"                    debtorAccountNo: JSON.parse( pm.environment.get(\"debtorAccountNo\"))",
					"                }         ",
					"            })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            //console.log(\"First:\");",
					"            console.log(err);",
					"            //console.log(\"Second:\");",
					"            //console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"newPaymentSwiftID\", res.json().paymentId);",
					"            console.log(\"New payment ID: \" + pm.environment.get(\"newPaymentSwiftID\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for deleting Swift payment*/",
					"postman.setGlobalVariable(\"paymentSwiftDelete\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_payments\")}/banking-api/payment/swift/${pm.environment.get(\"tenant\")}/v2/credittransfer/${pm.environment.get(\"newPaymentSwiftID\")}`,",
					"        method: \"DELETE\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            //console.log(\"First:\");",
					"            console.log(err);",
					"            //console.log(\"Second:\");",
					"            //console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"deletedPaymentSwiftID\",pm.environment.get(\"newPaymentSwiftID\"));",
					"            pm.environment.unset(\"newPaymentSwiftID\");",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for creating Sepa payment*/",
					"postman.setGlobalVariable(\"paymentSepaCreate\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_payments\")}/banking-api/payment/sepa/${pm.environment.get(\"tenant\")}/v2/credittransfer`,",
					"        method: \"POST\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"                storeOnly: false, ",
					"                locked: false,",
					"                paymentInformation: {",
					"                    endToEndId: JSON.parse(pm.environment.get(\"endToEndId\")),",
					"                    instructedAmount: {",
					"                        currency: {",
					"                            code: \"EUR\"",
					"                        },",
					"                        value: 312.00",
					"                    },",
					"                    remittanceInformation: {",
					"                        \"unstructured\": JSON.parse(pm.environment.get(\"unstructured\")),",
					"                        \"structured\": JSON.parse(pm.environment.get(\"structuredRemittanceRF\"))",
					"                    },",
					"                    instructionIdentification: JSON.parse(pm.environment.get(\"instructionIdentification\")),",
					"                    requestedExecutionDate: JSON.parse(pm.globals.get(\"PrS:nextWorkingDay\")),",
					"                    instructionPriority: \"NORMAL\",",
					"                    creditor: {",
					"                        \"name\": JSON.parse(pm.environment.get(\"name\")),",
					"                        \"address\": {",
					"                            \"adrLine1\": JSON.parse(pm.environment.get(\"adrLine1\")),",
					"                            \"adrLine2\": JSON.parse(pm.environment.get(\"adrLine2\")),",
					"                            \"streetName\": JSON.parse(pm.environment.get(\"streetName\")),",
					"                            \"buildingNm\": pm.environment.get(\"buildingNm\"),",
					"                            \"postalCode\": pm.environment.get(\"postalCode\"),",
					"                            \"townName\": JSON.parse(pm.environment.get(\"townName\")),",
					"                            \"country\": JSON.parse(pm.environment.get(\"country\"))",
					"                        }",
					"                    },",
					"                    creditorAccountNo: JSON.parse(pm.environment.get(\"creditorAccountNoSEPA\")),",
					"                    creditorAgent: {",
					"                        bic: JSON.parse(pm.environment.get(\"creditorAgentBicSEPA\"))",
					"                    },",
					"                    debtor: {",
					"                        name: JSON.parse(pm.environment.get(\"debtorAccountName\")),",
					"                        address: {",
					"                            streetName: JSON.parse(pm.environment.get(\"debtorStreetName\")),",
					"                            postalCode: JSON.parse(pm.environment.get(\"debtorPostalCode\")),",
					"                            townName: JSON.parse(pm.environment.get(\"debtorTownName\"))",
					"                        }",
					"                    },",
					"                    debtorAccountNo: JSON.parse( pm.environment.get(\"debtorAccountNo\"))",
					"                }         ",
					"            })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            //console.log(\"First:\");",
					"            console.log(err);",
					"            //console.log(\"Second:\");",
					"            //console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"newPaymentSepaID\", res.json().paymentId);",
					"            console.log(\"New payment ID: \" + pm.environment.get(\"newPaymentSepaID\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for creating Sepa (standing order) payment*/",
					"postman.setGlobalVariable(\"paymentSepaSoCreate\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_payments\")}/banking-api/payment/sepa/${pm.environment.get(\"tenant\")}/v2/credittransfer`,",
					"        method: \"POST\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"                storeOnly: false, ",
					"                locked: false,",
					"                paymentInformation: {",
					"                    instructedAmount: {",
					"                        currency: {",
					"                            code: \"EUR\"",
					"                        },",
					"                        value: 9.99",
					"                    },",
					"                    remittanceInformation: {",
					"                        \"unstructured\": JSON.parse(pm.environment.get(\"unstructured\")),",
					"                        \"structured\": JSON.parse(pm.environment.get(\"structuredRemittanceRF\"))",
					"                    },",
					"                    instructionIdentification: JSON.parse(pm.environment.get(\"instructionIdentification\")),",
					"                    requestedExecutionDate: JSON.parse(pm.globals.get(\"PrS:nextWorkingDay\")),",
					"                    instructionPriority: \"NORMAL\",",
					"                    creditor: {",
					"                        \"name\": JSON.parse(pm.environment.get(\"name\")),",
					"                        \"address\": {",
					"                            \"adrLine1\": JSON.parse(pm.environment.get(\"adrLine1\")),",
					"                            \"adrLine2\": JSON.parse(pm.environment.get(\"adrLine2\")),",
					"                            \"streetName\": JSON.parse(pm.environment.get(\"streetName\")),",
					"                            \"buildingNm\": pm.environment.get(\"buildingNm\"),",
					"                            \"postalCode\": pm.environment.get(\"postalCode\"),",
					"                            \"townName\": JSON.parse(pm.environment.get(\"townName\")),",
					"                            \"country\": JSON.parse(pm.environment.get(\"country\"))",
					"                        }",
					"                    },",
					"                    creditorAccountNo: JSON.parse(pm.environment.get(\"creditorAccountNoSEPA\")),",
					"                    creditorAgent: {",
					"                        bic: JSON.parse(pm.environment.get(\"creditorAgentBicSEPA\"))",
					"                    },",
					"                    debtor: {",
					"                        name: JSON.parse(pm.environment.get(\"debtorAccountName\")),",
					"                        address: {",
					"                            streetName: JSON.parse(pm.environment.get(\"debtorStreetName\")),",
					"                            postalCode: JSON.parse(pm.environment.get(\"debtorPostalCode\")),",
					"                            townName: JSON.parse(pm.environment.get(\"debtorTownName\"))",
					"                        }",
					"                    },",
					"                    debtorAccountNo: JSON.parse(pm.environment.get(\"debtorAccountNo\")),",
					"                    standingOrder: {",
					"                      \"firstOn\": JSON.parse(pm.globals.get(\"PrS:futureWorkingDay\")),",
					"                      \"lastOn\": JSON.parse(pm.globals.get(\"PrS:futurePlusWorkingDay\")),",
					"                      \"beforeHoliday\": true,",
					"                      \"interval\": \"WEEKLY\",",
					"                      \"active\": true,",
					"                      \"ultimo\": false\t",
					"                    }",
					"                }         ",
					"            })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            //console.log(\"First:\");",
					"            console.log(err);",
					"            //console.log(\"Second:\");",
					"            //console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"newPaymentSepaID\", res.json().paymentId);",
					"            console.log(\"New payment ID: \" + pm.environment.get(\"newPaymentSepaID\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for deleting Sepa payment*/",
					"postman.setGlobalVariable(\"paymentSepaDelete\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_payments\")}/banking-api/payment/sepa/${pm.environment.get(\"tenant\")}/v2/credittransfer/${pm.environment.get(\"newPaymentSepaID\")}`,",
					"        method: \"DELETE\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            //console.log(\"First:\");",
					"            console.log(err);",
					"            //console.log(\"Second:\");",
					"            //console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.unset(\"newPaymentSepaID\");",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for creating Orange payment*/",
					"postman.setGlobalVariable(\"paymentOrangeCreate\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_payments\")}/banking-api/payment/swissPayment/${pm.environment.get(\"tenant\")}/v1/credittransfer/orange/`,",
					"        method: \"POST\",",
					"        header: {",
					"          'Content-Type': 'application/json',",
					"          'Accept': 'application/json',",
					"          'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"          mode: 'raw',",
					"          raw: JSON.stringify({ ",
					"            creditorAccountNo: JSON.parse(pm.environment.get(\"orangeAccountNo\")),",
					"            instructedAmount: {",
					"              currency: {",
					"                code: \"CHF\"",
					"              },",
					"              value: 2.01",
					"            },",
					"            structuredRemittanceInformation: JSON.parse(pm.environment.get(\"structuredRemittanceOrange\")),",
					"            creditor: {",
					"              \"name\": JSON.parse(pm.environment.get(\"name\")),",
					"              \"address\": {",
					"                  \"adrLine1\": JSON.parse(pm.environment.get(\"adrLine1\")),",
					"                  \"adrLine2\": JSON.parse(pm.environment.get(\"adrLine2\")),",
					"                  \"streetName\": JSON.parse(pm.environment.get(\"streetName\")),",
					"                  \"buildingNm\": pm.environment.get(\"buildingNm\"),",
					"                  \"postalCode\": pm.environment.get(\"postalCode\"),",
					"                  \"townName\": JSON.parse(pm.environment.get(\"townName\")),",
					"                  \"country\": JSON.parse(pm.environment.get(\"country\"))",
					"              }",
					"            },",
					"            debtorAccountNo: JSON.parse( pm.environment.get(\"debtorAccountNo\")),",
					"            requestedExecutionDate: JSON.parse(pm.globals.get(\"PrS:nextWorkingDay\")),",
					"            debitNote: \"Expenses during company trip\"",
					"          })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            //console.log(\"First:\");",
					"            console.log(err);",
					"            //console.log(\"Second:\");",
					"            //console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"newPaymentOrangeID\", res.json().paymentId);",
					"            console.log(\"New Orange payment ID: \" + pm.environment.get(\"newPaymentOrangeID\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for creating Orange (standing order) payment*/",
					"postman.setGlobalVariable(\"paymentOrangeSoCreate\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_payments\")}/banking-api/payment/swissPayment/${pm.environment.get(\"tenant\")}/v1/credittransfer/orange/`,",
					"        method: \"POST\",",
					"        header: {",
					"          'Content-Type': 'application/json',",
					"          'Accept': 'application/json',",
					"          'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"          mode: 'raw',",
					"          raw: JSON.stringify({ ",
					"            creditorAccountNo: JSON.parse(pm.environment.get(\"orangeAccountNo\")),",
					"            instructedAmount: {",
					"              currency: {",
					"                code: \"CHF\"",
					"              },",
					"              value: 2.01",
					"            },",
					"            structuredRemittanceInformation: JSON.parse(pm.environment.get(\"structuredRemittanceOrange\")),",
					"            creditor: {",
					"              \"name\": JSON.parse(pm.environment.get(\"name\")),",
					"              \"address\": {",
					"                \"adrLine1\": JSON.parse(pm.environment.get(\"adrLine1\")),",
					"                \"adrLine2\": JSON.parse(pm.environment.get(\"adrLine2\")),",
					"                \"streetName\": JSON.parse(pm.environment.get(\"streetName\")),",
					"                \"buildingNm\": pm.environment.get(\"buildingNm\"),",
					"                \"postalCode\": pm.environment.get(\"postalCode\"),",
					"                \"townName\": JSON.parse(pm.environment.get(\"townName\")),",
					"                \"country\": JSON.parse(pm.environment.get(\"country\"))",
					"              }",
					"            },",
					"            debtorAccountNo: JSON.parse( pm.environment.get(\"debtorAccountNo\")),",
					"            requestedExecutionDate: JSON.parse(pm.globals.get(\"PrS:nextWorkingDay\")),",
					"            debitNote: \"Expenses during company trip\",",
					"            standingOrder: {",
					"              \"firstOn\": JSON.parse(pm.globals.get(\"PrS:futureWorkingDay\")),",
					"              \"lastOn\": JSON.parse(pm.globals.get(\"PrS:futurePlusWorkingDay\")),",
					"              \"beforeHoliday\": true,",
					"              \"interval\": \"WEEKLY\",",
					"              \"active\": true,",
					"              \"ultimo\": false\t\t",
					"            }            ",
					"          })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            //console.log(\"First:\");",
					"            console.log(err);",
					"            //console.log(\"Second:\");",
					"            //console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"newPaymentOrangeID\", res.json().paymentId);",
					"            console.log(\"New Orange payment ID: \" + pm.environment.get(\"newPaymentOrangeID\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for deleting Orange payment*/",
					"postman.setGlobalVariable(\"paymentOrangeDelete\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_payments\")}/banking-api/payment/swissPayment/${pm.environment.get(\"tenant\")}/v1/credittransfer/orange/${pm.environment.get(\"newPaymentOrangeID\")}`,",
					"        method: \"DELETE\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            //console.log(\"First:\");",
					"            console.log(err);",
					"            //console.log(\"Second:\");",
					"            //console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.unset(\"newPaymentOrangeID\");",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for creating Red payment*/",
					"postman.setGlobalVariable(\"paymentRedCreate\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_payments\")}/banking-api/payment/swissPayment/${pm.environment.get(\"tenant\")}/v1/credittransfer/red`,",
					"        method: \"POST\",",
					"        header: {",
					"          'Content-Type': 'application/json',",
					"          'Accept': 'application/json',",
					"          'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"          mode: 'raw',",
					"          raw: JSON.stringify({ ",
					"            postalAccountNo: JSON.parse(pm.environment.get(\"postalAccountNo\")),",
					"            creditor: {",
					"              \"name\": JSON.parse(pm.environment.get(\"name\")),",
					"              \"address\": {",
					"                \"adrLine1\": JSON.parse(pm.environment.get(\"adrLine1\")),",
					"                \"adrLine2\": JSON.parse(pm.environment.get(\"adrLine2\")),",
					"                \"streetName\": JSON.parse(pm.environment.get(\"streetName\")),",
					"                \"buildingNm\": pm.environment.get(\"buildingNm\"),",
					"                \"postalCode\": pm.environment.get(\"postalCode\"),",
					"                \"townName\": JSON.parse(pm.environment.get(\"townName\")),",
					"                \"country\": JSON.parse(pm.environment.get(\"country\"))",
					"              }",
					"            },",
					"            debtorAccountNo: JSON.parse( pm.environment.get(\"debtorAccountNo\")),",
					"            remittanceInformation: {",
					"              \"unstructured\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\",",
					"            },",
					"            debitNote: \"Debit reference\",",
					"            requestedExecutionDate: JSON.parse(pm.globals.get(\"PrS:nextWorkingDay\")),",
					"            instructedAmount: {",
					"              currency: {",
					"                code: \"CHF\"",
					"              },",
					"              value: 0.01",
					"            }          ",
					"          })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            //console.log(\"First:\");",
					"            console.log(err);",
					"            //console.log(\"Second:\");",
					"            //console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"newPaymentRedID\", res.json().paymentId);",
					"            console.log(\"New Red payment ID: \" + pm.environment.get(\"newPaymentRedID\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for creating Red (standing order) payment*/",
					"postman.setGlobalVariable(\"paymentRedSoCreate\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_payments\")}/banking-api/payment/swissPayment/${pm.environment.get(\"tenant\")}/v1/credittransfer/red`,",
					"        method: \"POST\",",
					"        header: {",
					"          'Content-Type': 'application/json',",
					"          'Accept': 'application/json',",
					"          'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"          mode: 'raw',",
					"          raw: JSON.stringify({ ",
					"            postalAccountNo: JSON.parse(pm.environment.get(\"postalAccountNo\")),",
					"            creditor: {",
					"              \"name\": JSON.parse(pm.environment.get(\"name\")),",
					"              \"address\": {",
					"                \"adrLine1\": JSON.parse(pm.environment.get(\"adrLine1\")),",
					"                \"adrLine2\": JSON.parse(pm.environment.get(\"adrLine2\")),",
					"                \"streetName\": JSON.parse(pm.environment.get(\"streetName\")),",
					"                \"buildingNm\": pm.environment.get(\"buildingNm\"),",
					"                \"postalCode\": pm.environment.get(\"postalCode\"),",
					"                \"townName\": JSON.parse(pm.environment.get(\"townName\")),",
					"                \"country\": JSON.parse(pm.environment.get(\"country\"))",
					"              }",
					"            },",
					"            debtorAccountNo: JSON.parse( pm.environment.get(\"debtorAccountNo\")),",
					"            remittanceInformation: {",
					"              \"unstructured\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\",",
					"            },",
					"            debitNote: \"Debit reference\",",
					"            requestedExecutionDate: JSON.parse(pm.globals.get(\"PrS:nextWorkingDay\")),",
					"            instructedAmount: {",
					"              currency: {",
					"                code: \"CHF\"",
					"              },",
					"              value: 0.01",
					"            },",
					"            standingOrder: {",
					"              \"firstOn\": JSON.parse(pm.globals.get(\"PrS:futureWorkingDay\")),",
					"              \"lastOn\": JSON.parse(pm.globals.get(\"PrS:futurePlusWorkingDay\")),",
					"              \"beforeHoliday\": true,",
					"              \"interval\": \"WEEKLY\",",
					"              \"active\": true,",
					"              \"ultimo\": false\t\t",
					"\t        }         ",
					"          })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            //console.log(\"First:\");",
					"            console.log(err);",
					"            //console.log(\"Second:\");",
					"            //console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"newPaymentRedID\", res.json().paymentId);",
					"            console.log(\"New Red payment ID: \" + pm.environment.get(\"newPaymentRedID\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for deleting Red payment*/",
					"postman.setGlobalVariable(\"paymentRedDelete\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_payments\")}/banking-api/payment/swissPayment/${pm.environment.get(\"tenant\")}/v1/credittransfer/red/${pm.environment.get(\"newPaymentRedID\")}`,",
					"        method: \"DELETE\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            //console.log(\"First:\");",
					"            console.log(err);",
					"            //console.log(\"Second:\");",
					"            //console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.unset(\"newPaymentRedID\");",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for creating Swiss Domestic payment*/",
					"postman.setGlobalVariable(\"paymentDomesticCreate\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_payments\")}/banking-api/payment/swissPayment/${pm.environment.get(\"tenant\")}/v1/credittransfer/swiss/`,",
					"        method: \"POST\",",
					"        header: {",
					"          'Content-Type': 'application/json',",
					"          'Accept': 'application/json',",
					"          'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"          mode: 'raw',",
					"          raw: JSON.stringify({ ",
					"            creditorAccountNo: JSON.parse(pm.environment.get(\"creditorAccountNoSwisDomestic\")),",
					"            instructedAmount: {",
					"              currency: {",
					"                code: \"CHF\"",
					"              },",
					"              value: 0.01",
					"            },          ",
					"            creditor: {",
					"              \"name\": JSON.parse(pm.environment.get(\"name\")),",
					"              \"address\": {",
					"                \"adrLine1\": JSON.parse(pm.environment.get(\"adrLine1\")),",
					"                \"adrLine2\": JSON.parse(pm.environment.get(\"adrLine2\")),",
					"                \"streetName\": JSON.parse(pm.environment.get(\"streetName\")),",
					"                \"buildingNm\": pm.environment.get(\"buildingNm\"),",
					"                \"postalCode\": pm.environment.get(\"postalCode\"),",
					"                \"townName\": JSON.parse(pm.environment.get(\"townName\")),",
					"                \"country\": JSON.parse(pm.environment.get(\"country\"))",
					"              }",
					"            },",
					"            debtorAccountNo: JSON.parse( pm.environment.get(\"debtorAccountNo\")),",
					"            remittanceInformation: {",
					"              \"unstructured\": \"unstructured\",",
					"            },",
					"            debitNote: \"No new information needed\",",
					"            requestedExecutionDate: JSON.parse(pm.globals.get(\"PrS:nextWorkingDay\")),",
					"            chargesBearer: \"DEBT\"",
					"          })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err);",
					"        } else {",
					"            pm.environment.set(\"newPaymentDomesticID\", res.json().paymentId);",
					"            console.log(\"New Swiss Domestic payment ID: \" + pm.environment.get(\"newPaymentDomesticID\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for creating Swiss Domestic (standing order) payment*/",
					"postman.setGlobalVariable(\"paymentDomesticSoCreate\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_payments\")}/banking-api/payment/swissPayment/${pm.environment.get(\"tenant\")}/v1/credittransfer/swiss/`,",
					"        method: \"POST\",",
					"        header: {",
					"          'Content-Type': 'application/json',",
					"          'Accept': 'application/json',",
					"          'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"          mode: 'raw',",
					"          raw: JSON.stringify({ ",
					"            creditorAccountNo: JSON.parse(pm.environment.get(\"creditorAccountNoSwisDomestic\")),",
					"            instructedAmount: {",
					"              currency: {",
					"                code: \"CHF\"",
					"              },",
					"              value: 0.01",
					"            },          ",
					"            creditor: {",
					"              \"name\": JSON.parse(pm.environment.get(\"name\")),",
					"              \"address\": {",
					"                \"adrLine1\": JSON.parse(pm.environment.get(\"adrLine1\")),",
					"                \"adrLine2\": JSON.parse(pm.environment.get(\"adrLine2\")),",
					"                \"streetName\": JSON.parse(pm.environment.get(\"streetName\")),",
					"                \"buildingNm\": pm.environment.get(\"buildingNm\"),",
					"                \"postalCode\": pm.environment.get(\"postalCode\"),",
					"                \"townName\": JSON.parse(pm.environment.get(\"townName\")),",
					"                \"country\": JSON.parse(pm.environment.get(\"country\"))",
					"              }",
					"            },",
					"            debtorAccountNo: JSON.parse( pm.environment.get(\"debtorAccountNo\")),",
					"            remittanceInformation: {",
					"              \"unstructured\": \"unstructured\",",
					"            },",
					"            debitNote: \"No new information needed\",",
					"            requestedExecutionDate: JSON.parse(pm.globals.get(\"PrS:nextWorkingDay\")),",
					"            chargesBearer: \"DEBT\",",
					"            standingOrder: {",
					"              \"firstOn\": JSON.parse(pm.globals.get(\"PrS:futureWorkingDay\")),",
					"              \"lastOn\": JSON.parse(pm.globals.get(\"PrS:futurePlusWorkingDay\")),",
					"              \"beforeHoliday\": true,",
					"              \"interval\": \"WEEKLY\",",
					"              \"active\": true,",
					"              \"ultimo\": false\t\t",
					"\t        }         ",
					"          })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err);",
					"        } else {",
					"            pm.environment.set(\"newPaymentDomesticID\", res.json().paymentId);",
					"            pm.environment.set(\"newPaymentDomesticStOrInfo\", res.json().standingOrder);",
					"            console.log(\"New Swiss Domestic (standing order) payment ID: \" + pm.environment.get(\"newPaymentDomesticID\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for deleting Swiss Domestic payment*/",
					"postman.setGlobalVariable(\"paymentDomesticDelete\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_payments\")}/banking-api/payment/swissPayment/${pm.environment.get(\"tenant\")}/v1/credittransfer/swiss/${pm.environment.get(\"newPaymentDomesticID\")}`,",
					"        method: \"DELETE\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err);",
					"        } else {",
					"            pm.environment.unset(\"newPaymentDomesticID\");",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for creating UK payment*/",
					"postman.setGlobalVariable(\"paymentUkCreate\", () => {",
					"    let paymentTypeUK = parseInt(Math.random() * 2) ?  `UK_FASTER` : `UK_CHAPS`;",
					"    pm.environment.set(\"paymentTypeUK\", JSON.stringify(paymentTypeUK));    ",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_payments\")}/banking-api/payment/UKPayment/${pm.environment.get(\"tenant\")}/v1/credittransfer`,",
					"        method: \"POST\",",
					"        header: {",
					"          'Content-Type': 'application/json',",
					"          'Accept': 'application/json',",
					"          'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"          mode: 'raw',",
					"          raw: JSON.stringify({ ",
					"            paymentType: JSON.parse(pm.environment.get(\"paymentTypeUK\")),",
					"            instructedAmount: {",
					"              currency: {",
					"                code: \"GBP\"",
					"              },",
					"              value: 2.01",
					"            },",
					"            debtorAccountNo: JSON.parse( pm.environment.get(\"debtorAccountNo\")),",
					"            remittanceInfo: {",
					"              \"unstructured\": \"Beneficiary reference\",",
					"            },",
					"            creditorAccountNo: JSON.parse( pm.environment.get(\"creditorAccountNoUK\")),",
					"            creditorAgentSortCode: \"601437\",",
					"            creditor: {",
					"              \"name\": JSON.parse(pm.environment.get(\"name\")),",
					"            },",
					"            template: true,",
					"            debitNote: \"Expenses during company trip\"",
					"          })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err);",
					"        } else {",
					"            pm.environment.set(\"newPaymentUkID\", res.json().paymentId);",
					"            console.log(\"New UK payment ID: \" + pm.environment.get(\"newPaymentUkID\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for creating UK (standing order) payment*/",
					"postman.setGlobalVariable(\"paymentUkSoCreate\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_payments\")}/banking-api/payment/UKPayment/${pm.environment.get(\"tenant\")}/v1/credittransfer`,",
					"        method: \"POST\",",
					"        header: {",
					"          'Content-Type': 'application/json',",
					"          'Accept': 'application/json',",
					"          'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"          mode: 'raw',",
					"          raw: JSON.stringify({ ",
					"            paymentType: JSON.parse(pm.environment.get(\"paymentTypeUK\")),",
					"            instructedAmount: {",
					"              currency: {",
					"                code: \"GBP\"",
					"              },",
					"              value: 2.01",
					"            },",
					"            debtorAccountNo: JSON.parse( pm.environment.get(\"debtorAccountNo\")),",
					"            remittanceInfo: {",
					"              \"unstructured\": \"Beneficiary reference\",",
					"            },",
					"            creditorAccountNo: JSON.parse( pm.environment.get(\"creditorAccountNoUK\")),",
					"            creditorAgentSortCode: \"601437\",",
					"            creditor: {",
					"              \"name\": JSON.parse(pm.environment.get(\"name\")),",
					"            },",
					"            template: true,",
					"            debitNote: \"Expenses during company trip\",",
					"            standingOrder: {",
					"              \"firstOn\": JSON.parse(pm.globals.get(\"PrS:futureWorkingDay\")),",
					"              \"lastOn\": JSON.parse(pm.globals.get(\"PrS:futurePlusWorkingDay\")),",
					"              \"beforeHoliday\": true,",
					"              \"interval\": \"WEEKLY\",",
					"              \"active\": true,",
					"              \"ultimo\": false\t\t",
					"\t        }         ",
					"          })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err);",
					"        } else {",
					"            pm.environment.set(\"newPaymentUkID\", res.json().paymentId);",
					"            console.log(\"New UK (standing order) payment ID: \" + pm.environment.get(\"newPaymentUkID\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for deleting UK payment*/",
					"postman.setGlobalVariable(\"paymentUkDelete\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_payments\")}/banking-api/payment/UKPayment/${pm.environment.get(\"tenant\")}/v1/credittransfer/${pm.environment.get(\"newPaymentUkID\")}`,",
					"        method: \"DELETE\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err);",
					"        } else {",
					"            pm.environment.unset(\"newPaymentUkID\");",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for creating Balance adjustment payment*/",
					"postman.setGlobalVariable(\"paymentBaCreate\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_payments\")}/banking-api/payment/accounttransfer/${pm.environment.get(\"tenant\")}/v2/credittransfer/balanceadjustment`,",
					"        method: \"POST\",",
					"        header: {",
					"          'Content-Type': 'application/json',",
					"          'Accept': 'application/json',",
					"          'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"          mode: 'raw',",
					"          raw: JSON.stringify({ ",
					"            typeOfTransfer: \"TRANSFER_SPARE_CASH_TO_CREDIT_ACCOUNT\",",
					"            cashBalanceThreshold: 2303.56,",
					"            typeOfAmount: \"FIXED_AMOUNT\",",
					"            instructedAmount: {",
					"              currency: {",
					"                code: \"CHF\"",
					"              },",
					"              value: 2.34",
					"            },",
					"            remittanceInformation: {",
					"              \"unstructured\": \"unstructured remittance\",",
					"            },",
					"            debtorAccountNo: JSON.parse( pm.environment.get(\"debtorAccountNo\")),",
					"            creditorAccountNo: JSON.parse( pm.environment.get(\"creditorAccountNoBalanceAdjustment\")),",
					"            debitNote: \"Expenses during company trip\",",
					"            requestedExecutionDate: JSON.parse(pm.globals.get(\"PrS:nextWorkingDay\")),",
					"            debitForm: \"SIA\"",
					"          })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err);",
					"        } else {",
					"            pm.environment.set(\"newPaymentBaID\", res.json().paymentId);",
					"            console.log(\"New Balance adjustment payment ID: \" + pm.environment.get(\"newPaymentBaID\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for deleting Balance adjustment payment*/",
					"postman.setGlobalVariable(\"paymentBaDelete\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_payments\")}/banking-api/payment/accounttransfer/${pm.environment.get(\"tenant\")}/v2/credittransfer/balanceadjustment/${pm.environment.get(\"newPaymentBaID\")}`,",
					"        method: \"DELETE\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err);",
					"        } else {",
					"            pm.environment.unset(\"newPaymentBaID\");",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for creating QR-bill payment*/",
					"postman.setGlobalVariable(\"paymentQrBillCreate\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_payments\")}/banking-api/payment/swissPayment/${pm.environment.get(\"tenant\")}/v1/credittransfer/QRbill/`,",
					"        method: \"POST\",",
					"        header: {",
					"          'Content-Type': 'application/json',",
					"          'Accept': 'application/json',",
					"          'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"          mode: 'raw',",
					"          raw: JSON.stringify({ ",
					"            creditorAccountNo: JSON.parse( pm.environment.get(\"creditorAccountNoBalanceAdjustment\")),",
					"            instructedAmount: {",
					"              currency: {",
					"                code: \"CHF\"",
					"              },",
					"              value: 0.01",
					"            },",
					"            creditor: {",
					"              \"name\": JSON.parse(pm.environment.get(\"name\")),",
					"              \"address\": {",
					"                \"streetName\": JSON.parse(pm.environment.get(\"streetName\")),",
					"                \"buildingNm\": pm.environment.get(\"buildingNmStr\"),",
					"                \"postalCode\": pm.environment.get(\"postalCodeStr\"),",
					"                \"townName\": JSON.parse(pm.environment.get(\"townName\")),",
					"                \"country\": JSON.parse(pm.environment.get(\"country\"))",
					"              }",
					"            },",
					"            debtorAccountNo: JSON.parse( pm.environment.get(\"debtorAccountNo\")),",
					"            requestedExecutionDate: JSON.parse(pm.globals.get(\"PrS:nextWorkingDay\")),",
					"            debitNote: \"Expenses during company trip\",",
					"            ultimateDebtor: {",
					"              \"name\": JSON.parse(pm.environment.get(\"name\")),",
					"              \"address\": {",
					"                \"streetName\": JSON.parse(pm.environment.get(\"streetName\")),",
					"                \"buildingNm\": JSON.parse(pm.environment.get(\"buildingNmStr\")),",
					"                \"postalCode\": JSON.parse(pm.environment.get(\"postalCodeStr\")),",
					"                \"townName\": JSON.parse(pm.environment.get(\"townName\")),",
					"                \"country\": JSON.parse(pm.environment.get(\"country\"))",
					"              }",
					"            }",
					"          })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err);",
					"        } else {",
					"            pm.environment.set(\"newPaymentQrBillID\", res.json().paymentId);",
					"            console.log(\"New QR-bill payment ID: \" + pm.environment.get(\"newPaymentQrBillID\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for creating QR-bill (standing order) payment*/",
					"postman.setGlobalVariable(\"paymentQrBillSoCreate\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_payments\")}/banking-api/payment/swissPayment/${pm.environment.get(\"tenant\")}/v1/credittransfer/QRbill/`,",
					"        method: \"POST\",",
					"        header: {",
					"          'Content-Type': 'application/json',",
					"          'Accept': 'application/json',",
					"          'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"          mode: 'raw',",
					"          raw: JSON.stringify({ ",
					"            creditorAccountNo: JSON.parse( pm.environment.get(\"creditorAccountNoBalanceAdjustment\")),",
					"            instructedAmount: {",
					"              currency: {",
					"                code: \"CHF\"",
					"              },",
					"              value: 0.01",
					"            },",
					"            creditor: {",
					"              \"name\": JSON.parse(pm.environment.get(\"name\")),",
					"              \"address\": {",
					"                \"streetName\": JSON.parse(pm.environment.get(\"streetName\")),",
					"                \"buildingNm\": pm.environment.get(\"buildingNmStr\"),",
					"                \"postalCode\": pm.environment.get(\"postalCodeStr\"),",
					"                \"townName\": JSON.parse(pm.environment.get(\"townName\")),",
					"                \"country\": JSON.parse(pm.environment.get(\"country\"))",
					"              }",
					"            },",
					"            debtorAccountNo: JSON.parse( pm.environment.get(\"debtorAccountNo\")),",
					"            requestedExecutionDate: JSON.parse(pm.globals.get(\"PrS:nextWorkingDay\")),",
					"            debitNote: \"Expenses during company trip\",",
					"            ultimateDebtor: {",
					"              \"name\": JSON.parse(pm.environment.get(\"name\")),",
					"              \"address\": {",
					"                \"streetName\": JSON.parse(pm.environment.get(\"streetName\")),",
					"                \"buildingNm\": JSON.parse(pm.environment.get(\"buildingNmStr\")),",
					"                \"postalCode\": JSON.parse(pm.environment.get(\"postalCodeStr\")),",
					"                \"townName\": JSON.parse(pm.environment.get(\"townName\")),",
					"                \"country\": JSON.parse(pm.environment.get(\"country\"))",
					"              }",
					"            },",
					"            standingOrder: {",
					"              \"firstOn\": JSON.parse(pm.globals.get(\"PrS:futureWorkingDay\")),",
					"              \"lastOn\": JSON.parse(pm.globals.get(\"PrS:futurePlusWorkingDay\")),",
					"              \"beforeHoliday\": true,",
					"              \"interval\": \"WEEKLY\",",
					"              \"active\": true,",
					"              \"ultimo\": false\t",
					"            }            ",
					"          })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err);",
					"        } else {",
					"            pm.environment.set(\"newPaymentQrBillID\", res.json().paymentId);",
					"            pm.environment.set(\"newPaymentQrBillStOrInfo\", res.json().standingOrder);",
					"            console.log(\"New QR-bill payment ID: \" + pm.environment.get(\"newPaymentQrBillID\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for deleting QR-bill payment*/",
					"postman.setGlobalVariable(\"paymentQrBillDelete\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_payments\")}/banking-api/payment/swissPayment/${pm.environment.get(\"tenant\")}/v1/credittransfer/QRbill/${pm.environment.get(\"newPaymentQrBillID\")}`,",
					"        method: \"DELETE\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err);",
					"        } else {",
					"            pm.environment.unset(\"newPaymentQrBillID\");",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for creating Account transfer payment*/",
					"postman.setGlobalVariable(\"paymentAtCreate\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_payments\")}/banking-api/payment/accounttransfer/${pm.environment.get(\"tenant\")}/v2/credittransfer/accounttransfer`,",
					"        method: \"POST\",",
					"        header: {",
					"          'Content-Type': 'application/json',",
					"          'Accept': 'application/json',",
					"          'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"          mode: 'raw',",
					"          raw: JSON.stringify({ ",
					"            debtorAccountNo: JSON.parse(pm.environment.get(\"debtorAccountNo\")),",
					"            creditorAccountNo: JSON.parse(pm.environment.get(\"creditorAccountNo2\")),",
					"            instructedAmount: {",
					"              currency: {",
					"                code: \"CHF\"",
					"              },",
					"              value: 2.34",
					"            },",
					"            /*",
					"            remittanceInformation: {",
					"              \"unstructured\": JSON.parse(pm.environment.get(\"paymentAccountTransferRemittanceInformationUnstructured\"))",
					"            },",
					"            */",
					"            requestedExecutionDate: JSON.parse(pm.globals.get(\"PrS:nextWorkingDay\")),",
					"            debitNote: \"New reference\",",
					"            debitForm: \"SIA\"",
					"          })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err);",
					"        } else {",
					"            pm.environment.set(\"newPaymentAtID\", res.json().paymentId);",
					"            console.log(\"New Account transfer payment ID: \" + pm.environment.get(\"newPaymentAtID\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for creating Account transfer (standing order) payment*/",
					"postman.setGlobalVariable(\"paymentAtSoCreate\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_payments\")}/banking-api/payment/accounttransfer/${pm.environment.get(\"tenant\")}/v2/credittransfer/accounttransfer`,",
					"        method: \"POST\",",
					"        header: {",
					"          'Content-Type': 'application/json',",
					"          'Accept': 'application/json',",
					"          'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"          mode: 'raw',",
					"          raw: JSON.stringify({ ",
					"            debtorAccountNo: JSON.parse(pm.environment.get(\"debtorAccountNo\")),",
					"            creditorAccountNo: JSON.parse(pm.environment.get(\"creditorAccountNo2\")),",
					"            instructedAmount: {",
					"              currency: {",
					"                code: \"CHF\"",
					"              },",
					"              value: 2.34",
					"            },",
					"            /*",
					"            remittanceInformation: {",
					"              \"unstructured\": JSON.parse(pm.environment.get(\"paymentAccountTransferRemittanceInformationUnstructured\"))",
					"            },",
					"            */",
					"            requestedExecutionDate: JSON.parse(pm.globals.get(\"PrS:nextWorkingDay\")),",
					"            debitNote: \"New reference\",",
					"            debitForm: \"SIA\",",
					"            standingOrder: {",
					"              \"firstOn\": JSON.parse(pm.globals.get(\"PrS:futureWorkingDay\")),",
					"              \"lastOn\": JSON.parse(pm.globals.get(\"PrS:futurePlusWorkingDay\")),",
					"              \"beforeHoliday\": true,",
					"              \"interval\": \"WEEKLY\",",
					"              \"active\": true,",
					"              \"ultimo\": false\t",
					"            }",
					"          })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err);",
					"        } else {",
					"            pm.environment.set(\"newPaymentAtID\", res.json().paymentId);",
					"            console.log(\"New Account transfer (standing order) payment ID: \" + pm.environment.get(\"newPaymentAtID\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for deleting Account transfer payment*/",
					"postman.setGlobalVariable(\"paymentAtDelete\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_payments\")}/banking-api/payment/accounttransfer/${pm.environment.get(\"tenant\")}/v2/credittransfer/accounttransfer/${pm.environment.get(\"newPaymentAtID\")}`,",
					"        method: \"DELETE\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err);",
					"        } else {",
					"            pm.environment.set(\"deletedPaymentAtID\",pm.environment.get(\"newPaymentAtID\"));",
					"            pm.environment.unset(\"newPaymentAtID\");",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function to retrive payments*/",
					"postman.setGlobalVariable(\"paymentSearch\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_payments\")}/banking-api/payment/payments/${pm.environment.get(\"tenant\")}/v2/payment/search?page=0&size=20`,",
					"        method: \"POST\",",
					"        header: {",
					"          'Content-Type': 'application/json',",
					"          'Accept': 'application/json',",
					"          'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"          mode: 'raw',",
					"          raw: JSON.stringify({ ",
					"            pageRequest: {",
					"              page: 0,",
					"              size: 5",
					"            },",
					"            paymentFilter: {",
					"              paymentType: \"SWIFT_INTERNATIONAL\"",
					"            },",
					"            orderBy: {",
					"              field: \"CREATION_DATE\",",
					"              sortOrder: \"DESC\"",
					"            }",
					"          })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err);",
					"        } else {",
					"            if (res.json().pageResponse.totalPages>1){",
					"                pm.environment.set(\"latestPaymentID\", res.json().payments[parseInt(res.json().pageResponse.size,10)-1].specificPaymentId);",
					"                console.log(\"Latest payment ID in the list: \" + pm.environment.get(\"latestPaymentID\"));",
					"                skipTests = false;",
					"            } else {",
					"                console.log(\"Not enough test data!!!\");",
					"                pm.environment.unset(\"latestPaymentID\");",
					"            }            ",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for creating payments in bulk*/",
					"postman.setGlobalVariable(\"paymentsBulkCreate\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_payments\")}/banking-api/payments/pain/v1/credittransfer`,",
					"        method: \"POST\",",
					"        header: {",
					"          'Content-Type': 'application/json',",
					"          'Accept': 'application/json',",
					"          'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"          mode: 'raw',",
					"          raw: JSON.stringify({ ",
					"            xmlData: \"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPCEtLSAgQ1JFQUxPR0lYIEFHLCBtZnJpICYgbXBpbCBnZW5lcmljIHRlc3QgZmlsZSB0ZW1wbGF0ZSBmb3IgSVNPMjAwMjIgcGFpbi4wMDEgLS0+CjxEb2N1bWVudCB4bWxucz0iaHR0cDovL3d3dy5zaXgtaW50ZXJiYW5rLWNsZWFyaW5nLmNvbS9kZS9wYWluLjAwMS4wMDEuMDMuY2guMDIueHNkIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly93d3cuc2l4LWludGVyYmFuay1jbGVhcmluZy5jb20vZGUvcGFpbi4wMDEuMDAxLjAzLmNoLjAyLnhzZCAgcGFpbi4wMDEuMDAxLjAzLmNoLjAyLnhzZCI+Cgk8Q3N0bXJDZHRUcmZJbml0bj4KPCEtLSAKCQlBIGxldmVsCi0tPgkJCgkJPEdycEhkcj4KCQkJPE1zZ0lkPjIwMTkxMTIxMTA1MTQ4OTg0PC9Nc2dJZD4KCQkJPENyZUR0VG0+MjAxOS0xMS0yMVQwMDowMDowMTwvQ3JlRHRUbT4KCQkJPE5iT2ZUeHM+MTwvTmJPZlR4cz4KCQkJPEN0cmxTdW0+MzcuNTg8L0N0cmxTdW0+CgkJCTxJbml0Z1B0eT4KCQkJCTxObT5GcmVkZHkgSGluejwvTm0+CgkJCTwvSW5pdGdQdHk+CgkJPC9HcnBIZHI+CjwhLS0gCQoJCUIgbGV2ZWwJCQotLT4KCQk8UG10SW5mPgoJCQk8UG10SW5mSWQ+QzE2MTA2Mjc8L1BtdEluZklkPgoJCQk8UG10TXRkPlRSRjwvUG10TXRkPgoJCQk8QnRjaEJvb2tnPnRydWU8L0J0Y2hCb29rZz4KCQkJPFJlcWRFeGN0bkR0PjIwMTktMTEtMjI8L1JlcWRFeGN0bkR0PgoJCQk8RGJ0cj4KCQkJCTxObT5GcmVkZHkgSGluejwvTm0+CgkJCTwvRGJ0cj4KCQkJPERidHJBY2N0PgoJCQkJPElkPgoJCQkJCTxJQkFOPkNIMjExMjMxMjAwMTI2MTUzMTUwMTwvSUJBTj4KCQkJCTwvSWQ+CgkJCTwvRGJ0ckFjY3Q+CgkJCTxEYnRyQWd0PgoJCQkJPEZpbkluc3RuSWQ+CgkJCQkJPENsclN5c01tYklkPgoJCQkJCQk8Q2xyU3lzSWQ+CgkJCQkJCQk8Q2Q+Q0hCQ0M8L0NkPgoJCQkJCQk8L0NsclN5c0lkPgoJCQkJCQk8TW1iSWQ+MTIzMTI8L01tYklkPgoJCQkJCTwvQ2xyU3lzTW1iSWQ+CgkJCQk8L0Zpbkluc3RuSWQ+CgkJCTwvRGJ0ckFndD4KPCEtLQoJCUMgbGV2ZWwJCQkKLS0+CQkKCQkJPENkdFRyZlR4SW5mPgoJCQkJPFBtdElkPgoJCQkJCTxJbnN0cklkPkMxNjEwNjI3LUMtRE9NRVNUSUM8L0luc3RySWQ+CgkJCQkJPEVuZFRvRW5kSWQ+MjAxOTExMjExMDUxNDg5ODQwMDAwMDA8L0VuZFRvRW5kSWQ+CgkJCQk8L1BtdElkPgoJCQkJPEFtdD4KCQkJCQk8SW5zdGRBbXQgQ2N5PSJDSEYiPjM3LjU4PC9JbnN0ZEFtdD4KCQkJCTwvQW10PgoJCQkJPENkdHJBZ3Q+CgkJCQkJPEZpbkluc3RuSWQ+CgkJCQkJCTxDbHJTeXNNbWJJZD4KCQkJCQkJCTxDbHJTeXNJZD4KCQkJCQkJCQk8Q2Q+Q0hCQ0M8L0NkPgoJCQkJCQkJPC9DbHJTeXNJZD4KCQkJCQkJCTxNbWJJZD43NzQ8L01tYklkPgoJCQkJCQk8L0NsclN5c01tYklkPgoJCQkJCTwvRmluSW5zdG5JZD4KCQkJCTwvQ2R0ckFndD4KCQkJCTxDZHRyPgoJCQkJCTxObT5IT0NIQUxQSU5FUyBJTlNUSVRVVCBGVEFOPC9ObT4KCQkJCQk8UHN0bEFkcj4KCQkJCQkJPFN0cnRObT5XQUxEV0VHPC9TdHJ0Tm0+CgkJCQkJCTxCbGRnTmI+MTwvQmxkZ05iPgoJCQkJCQk8UHN0Q2Q+NzU1MTwvUHN0Q2Q+CgkJCQkJCTxUd25ObT5GVEFOPC9Ud25ObT4KCQkJCQkJPEN0cnk+Q0g8L0N0cnk+CgkJCQkJPC9Qc3RsQWRyPgoJCQkJPC9DZHRyPgoJCQkJPENkdHJBY2N0PgoJCQkJCTxJZD4KCQkJCQkJPElCQU4+Q0gxNjAwNzc0MDEyMzEyMzQ1Njc4PC9JQkFOPgoJCQkJCTwvSWQ+CgkJCQk8L0NkdHJBY2N0PgoJCQkJPFJtdEluZj4KCQkJCQk8VXN0cmQ+S2F1ZiBTa2lhdXNyw7xzdHVuZzwvVXN0cmQ+CgkJCQk8L1JtdEluZj4KCQkJPC9DZHRUcmZUeEluZj4KCQk8L1BtdEluZj4KCTwvQ3N0bXJDZHRUcmZJbml0bj4KPC9Eb2N1bWVudD4K\"",
					"          })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err);",
					"        } else {",
					"            pm.environment.set(\"newPaymentBulkID\", res.json().paymentId);",
					"            console.log(\"New (created in bulk) payment ID: \" + pm.environment.get(\"newPaymentBulkID\"));",
					"        }              ",
					"    });",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "97dc23cc-1276-44b3-95f3-bac118a13676",
				"type": "text/javascript",
				"exec": [
					"// check if test is executed",
					"//pm.test(\"'\" + request.name + \"' is initiated\", function () {",
					"    //pm.response.to.have.status(200);",
					"    //pm.response.to.be.success ",
					"//});"
				]
			}
		}
	]
}