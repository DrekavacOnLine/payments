{
	"info": {
		"_postman_id": "b3af6f76-f762-45da-9bb2-eb366ca7d27b",
		"name": "MODULE: Documents (wip)",
		"description": "NOTE:\n- if you need document with attachment as pre-request, use: Create New Document With Added Attachment (NO CLEAN)\nIt sets {{createdDocWithAttachmentId}}, {{createdAttachmentId}}, {{createdAttachmentName}}, {{createdAttachmentMimeType}}\n\nGlobal functions:\n- sessionGet // retrive session for access token (called in Tests folder Pre-request Script)\n- generateAccessToken //generate regular access token\n- generateAccessTokenScopeEmpty // generate access token with empty scope\n- documentCreate // create new document, sets {{createdDocumentId}}, {{newDocBody}}, {{newDocTitle}}, {{titleWord}}\n- documentDelete // delete specified document, sets {{deletedDocumentId}}, unsets {{createdDocumentId}}\n- documentsGet // list all documents, sets {{totalElementCount}}, {{totalPages}}, {{pageSize}}, {{incorrectCategoryId}}, {{newPageSize}}\n- categoriesGet // list all categories, sets {{categoryId}}, {{categoryCode}}, {{sortCode}}, {{categoryType}}, {{categoryName}}, {{description}}, {{totalDocumentsNumber}}, {{newDocBody}}, {{newDocTitle}}\n- categoryCreate // create category, sets {{createdCategoryName}}, {{createdCategoryDesc}}, {{createdCatCode}}, {{createdSortCode}}, {{createdCategoryRelevance}}, {{createdCatId}}\n- categoryDelete // delete category, sets {{deletedCatId}}, unsets {{createdCatId}}\n\n//ToDo:\n- Create New Document (C52650420) ->> restore category validation\n- Create New Document (C52650420) ->> fix schema validation\n- Get document by Document ID (C34380147) ->> fix schema validation\n- Get documents by Document Title (C34306654) ->> fix schema validation\n- Get documents by Document Body (C57043720) ->> fix schema validation\n- Create Test Rail test cases for:\n- > Get all documents on page=1 [C34306652]\n- > Get all documents on page=3 [C34306652]\n- > Get documents with startDate [C34306653]\n- > Get documents with endDate [C34306653]\n- Verify once PRODUCT-14769 is fixed\n- > Create New Document With Added Attachment (C61985066)\n- > Create New Document With Added Attachment (NO CLEAN)\n- > Create document with multiple attachments (C64409840)\n- > Add attachment to document (C52650407)\n- > Get documents attachments by Document ID (C35034346)\n- > Get document attachments by attachmentId (C52650405)\n- > Delete attachment by attachmentId (C52650409)\n- > Delete attachments by documentId (C52650408)\n- > Update attachment (C52650406)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Config",
			"item": [
				{
					"name": "_Test session",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a9afdc41-5c89-4dfb-89aa-712cd45ef49a",
								"exec": [
									"//reset global variables for controling execution flow\r",
									"eval(globals.cleanup)();\r",
									"//clear list of executed TestRail tests\r",
									"pm.environment.set(\"testRailTestsInRun\", \"\");\r",
									"\r",
									"var userId_documents = data.userId;\r",
									"if (userId_documents) {\r",
									"    pm.environment.set(\"userId_documents\", data.userId);\r",
									"    console.log(\"dataFile/userId_documents: \" + userId_documents);\r",
									"} else {\r",
									"    pm.environment.set(\"userId_documents\", \"1268431501\");\r",
									"    console.log(\"default/userId_documents: \" + \"1268431501\");\r",
									"}\r",
									"\r",
									"var contractNo_documents = data.contractNo;\r",
									"if (contractNo_documents) {\r",
									"    pm.environment.set(\"contractNo_documents\", data.contractNo);\r",
									"    console.log(\"dataFile/contractNo_documents: \" + contractNo_documents);\r",
									"} else {\r",
									"    pm.environment.set(\"contractNo_documents\", \"1268431501\");\r",
									"    console.log(\"default/contractNo_documents: \" + \"1268431501\");\r",
									"}\r",
									"\r",
									"var userName_documents = data.userName;\r",
									"if (userName_documents) {\r",
									"    pm.environment.set(\"userName_documents\", data.userName);\r",
									"    console.log(\"dataFile/userName_documents: \" + userName_documents);\r",
									"} else {\r",
									"    pm.environment.set(\"userName_documents\", \"1268431501\");\r",
									"    console.log(\"default/userName_documents: \" + \"1268431501\");\r",
									"}\r",
									"\r",
									"var tenantId = data.tenantId;\r",
									"if (tenantId) {\r",
									"    pm.environment.set(\"tenantId\", data.tenantId);\r",
									"    console.log(\"dataFile/tenantId: \" + tenantId);\r",
									"} else {\r",
									"    pm.environment.set(\"tenantId\", \"19901\");\r",
									"    console.log(\"default/tenantId: \" + \"19901\");\r",
									"}\r",
									"\r",
									"//specify list of tests to be executed in exact order\r",
									"//const testsScope = \"Full\"; [Full|Core|Full+TestRail]\r",
									"let testsScope = data.testsScope;\r",
									"//console.log(testsScope); \r",
									"\r",
									"switch (testsScope) {\r",
									"    case \"WorkingTests\":\r",
									"        var testSession = [\r",
									"            \"_Generate access token [C63838879]\",\r",
									"            //Category tests\r",
									"            \"Get all documents categories [C33423939]\",\r",
									"            \"Get category by categoryId [C52650410]\",\r",
									"            \"Get document by categoryCode [C57043723]\",\r",
									"            \"Get document by categoryType [C57043724]\",\r",
									"            \"Create New Category [C52650412]\",            \r",
									"            //Attachment tests\r",
									"            \"Create New Document With Added Attachment [C61985066]\",\r",
									"            \"Create document with multiple attachments [C64409840]\",\r",
									"            \"Add attachment to document [C52650407]\",\r",
									"            \"Get documents attachments by Document ID [C35034346]\",\r",
									"            \"Get document attachments by attachmentId [C52650405]\",\r",
									"            \"Update attachment [C52650406]\",\r",
									"            \"Delete attachment by attachmentId [C52650409]\",\r",
									"            \"Delete attachments by documentId [C52650408]\",\r",
									"            //Document tests\r",
									"            \"Get all documents [C33423919]\",\r",
									"            \"Create New Document [C52650420]\",\r",
									"            \"Get documents by Document ID [C34380147]\",\r",
									"            \"Get documents by Document Title [C34306654]\",\r",
									"            \"Get documents by Document Body [C57043720]\",\r",
									"            \"Get all documents on page=0 [C34306652]\",\r",
									"            \"Get all documents on page=1 [C34306652]\",\r",
									"            //\"Get all documents on page=3 [C34306652]\",\r",
									"            \"Get documents with page size [C35054829]\",\r",
									"            \"Get documents with startDate and endDate [C34306653]\",\r",
									"            \"Get documents with startDate [C34306653]\",\r",
									"            \"Get documents with endDate [C34306653]\",\r",
									"            \"Get documents sorted by publishingDate [C57043721]\",\r",
									"            \"Get documents sorted by Title [C57043722]\",\r",
									"            \"Update document by documentID [C52650417]\",\r",
									"            \"Delete document by Document ID [C52684040]\",\r",
									"            \"Get deleted document by Id [C64217414]\",\r",
									"            //Scope validation tests\r",
									"            \"Generate access token with no scope [C55474713]\",\r",
									"            \"Get all documents with no scope [C55474714]\",\r",
									"            \"Get categories with no scope [C55474715]\",\r",
									"            //\"Get document attachments with no scope [C55474716]\",\r",
									"            \"Create document with no scope [C55474742]\",\r",
									"            \"Create category with no scope [C55474745]\",\r",
									"            \"Add attachment with no scope [C55474748]\",\r",
									"            \"Update document with no scope [C55474743]\",\r",
									"            //\"Update category with no scope [C55474746]\",\r",
									"            \"Update attachment with no scope [C55474749]\",\r",
									"            \"Delete document with no scope [C55474744]\",\r",
									"            //\"Delete category with no scope [C55474747]\",\r",
									"            \"Delete attachment with no scope [C55474750]\",\r",
									"            //Wrong READ scope\r",
									"            \"Generate access token with WRITE scope [C55474767]\",\r",
									"            \"Get all documents with wrong READ scope [C55474768]\",\r",
									"            \"Get document categories with wrong READ scope [C55474769]\",\r",
									"            //\"Get attachments with wrong READ scope [C55474770]\",\r",
									"            \"Generate access token with READ scope [C55474771]\",\r",
									"            //Wrong WRITE scope\r",
									"            \"Create document with wrong WRITE scope [C55474772]\",\r",
									"            \"Create category with wrong WRITE scope [C55474773]\",\r",
									"            \"Add attachment with wrong WRITE scope [C55474774]\",\r",
									"            \"Update document with wrong WRITE scope [C55474775]\",\r",
									"            //\"Update category with wrong WRITE scope [C55474776]\",\r",
									"            \"Update attachment with wrong WRITE scope [C55474777]\",\r",
									"            \"Delete document with wrong WRITE scope [C55474778]\",\r",
									"            //\"Delete category with wrong WRITE scope [C55474779]\",\r",
									"            \"Delete attachment with wrong WRITE scope [C55474780]\",\r",
									"            //Validation checks\r",
									"            \"Get document with incorrect documentId [C64345119]\",\r",
									"            \"Get category with incorrect categoryId [C64345120]\",\r",
									"            \"Create document with blacklisted attachment validation [C56083936]\",\r",
									"            \"Create document with attachment exceeding file size validation [C56083935]\",\r",
									"            \"Create attachment exceeding file size validation [C64409837]\",\r",
									"            \"Document empty body validation [C56083929]\",\r",
									"            \"Document empty title validation [C56083930]\",\r",
									"            \"Document title length validation [C56083931]\",\r",
									"            \"Update document empty title validation [C56083932]\",\r",
									"            \"Update document empty body validation [C64409839]\",\r",
									"            \"Attachment empty file name validation [C56083950]\"\r",
									"        ];\r",
									"    case \"Core\":\r",
									"        var testSession = [\r",
									"            //Documents\r",
									"            // > CRUD\r",
									"            \"Get all documents (C33423919)\",\r",
									"            \"Create New Document (C52650420)\",\r",
									"            \"Delete document by Document ID (C52684040)\",\r",
									"            \"Get document by Document ID (C34380147)\",   \r",
									"            \"Get document by categoryCode (C57043723)\",\r",
									"            \"Get document by categoryType (C57043724)\",\r",
									"            \"Get documents by Document Title (C34306654)\",\r",
									"            \"Get documents by Document Body (C57043720)\",\r",
									"            \"Get all documents on page=0 (C34306652)\",\r",
									"            \"Get documents by Document Title Word (C34306661)\",\r",
									"            \"Get documents with page size (C35054829)\",\r",
									"            \"Get documents with startDate and endDate (C34306653)\",\r",
									"            \"Get documents sorted by publishingDate (C57043721)\",\r",
									"            \"Get documents sorted by Title (C57043722)\",\r",
									"            \"Update document by documentID (C52650417)\",\r",
									"            // > Attachments\r",
									"            \"Create New Document With Added Attachment (C61985066)\", // ---- > Not tested, PRODUCT-14769\r",
									"            \"Create document with multiple attachments (C64409840)\", // ---- > Not tested, PRODUCT-14769, also issue with adding multiple attachments in Postman 6.x\r",
									"            \"Create New Document With Added Attachment (NO CLEAN)\",  // ---- > Not tested, PRODUCT-14769\r",
									"            \"Add attachment to document (C52650407)\",                // ---- > Not tested, PRODUCT-14769\r",
									"            \"Create New Document With Added Attachment (NO CLEAN)\",  // ---- > Not tested, PRODUCT-14769\r",
									"            \"Get documents attachments by Document ID (C35034346)\",  // ---- > Not tested, PRODUCT-14769\r",
									"            \"Create New Document With Added Attachment (NO CLEAN)\",  // ---- > Not tested, PRODUCT-14769\r",
									"            \"Get document attachments by attachmentId (C52650405)\",  // ---- > Not tested, PRODUCT-14769\r",
									"            \"Create New Document With Added Attachment (NO CLEAN)\",  // ---- > Not tested, PRODUCT-14769\r",
									"            \"Update attachment (C52650406)\",                         // ---- > Not tested, PRODUCT-14769\r",
									"            \"Create New Document With Added Attachment (NO CLEAN)\",  // ---- > Not tested, PRODUCT-14769\r",
									"            \"Delete attachment by attachmentId (C52650409)\",         // ---- > Not tested, PRODUCT-14769\r",
									"            \"Create New Document With Added Attachment (NO CLEAN)\",  // ---- > Not tested, PRODUCT-14769\r",
									"            \"Delete attachments by documentId (C52650408)\",          // ---- > Not tested, PRODUCT-14769\r",
									"            // > Validations\r",
									"            \"Get deleted document by Id (C64217414)\",\r",
									"            \"Get document with incorrect documentId (C64345119)\",\r",
									"            //Categories\r",
									"            // > CRUD\r",
									"            \"Get all documents categories (C33423939)\",\r",
									"            \"Create New Category (C52650412)\",\r",
									"            \"Get category by categoryId (C52650410)\",\r",
									"            \"Update Category (C52650411)\",\r",
									"            \"Delete Category by categoryId (C52650413)\",\r",
									"            // > Validations\r",
									"            \"Get category with incorrect categoryId (C64345120)\",\r",
									"            //Scope validation\r",
									"            \"Get all documents with no scope (C55474714)\",\r",
									"            \"Get categories with no scope (C55474715)\",\r",
									"            \"Create New Document With Added Attachment (NO CLEAN)\", // ---- > Not tested, PRODUCT-14769\r",
									"            \"Get document attachments with no scope (C55474716)\",   // ---- > Not tested, PRODUCT-14769\r",
									"            \"Create document with no scope (C55474742)\",\r",
									"            \"Create category with no scope (C55474745)\",\r",
									"            \"Add attachment with no scope (C55474748)\",\r",
									"            \"Update document with no scope (C55474743)\",\r",
									"            \"Update category with no scope (C55474746)\",\r",
									"            \"Create New Document With Added Attachment (NO CLEAN)\", // ---- > Not tested, PRODUCT-14769\r",
									"            \"Update attachment with no scope (C55474749)\",          // ---- > Not tested, PRODUCT-14769\r",
									"            \"Delete document with no scope (C55474744)\",\r",
									"            \"Delete category with no scope (C55474747)\",\r",
									"            //////////////////////////////////////////////////\r",
									"\r",
									"            \r",
									"            \"Get all documents on page=1 [C34306652]\",\r",
									"            \r",
									"            //Attachment tests\r",
									"\r",
									"            //\"Get all documents on page=3 [C34306652]\",\r",
									"            \"Get documents with startDate [C34306653]\",\r",
									"            \"Get documents with endDate [C34306653]\",\r",
									"\r",
									"            //Scope validation tests\r",
									"            \"Generate access token with no scope [C55474713]\",\r",
									"            \"Delete attachment with no scope [C55474750]\",\r",
									"            //Wrong READ scope\r",
									"            \"Generate access token with WRITE scope [C55474767]\",\r",
									"            \"Get all documents with wrong READ scope [C55474768]\",\r",
									"            \"Get document categories with wrong READ scope [C55474769]\",\r",
									"            //\"Get attachments with wrong READ scope [C55474770]\",\r",
									"            \"Generate access token with READ scope [C55474771]\",\r",
									"            //Wrong WRITE scope\r",
									"            \"Create document with wrong WRITE scope [C55474772]\",\r",
									"            \"Create category with wrong WRITE scope [C55474773]\",\r",
									"            \"Add attachment with wrong WRITE scope [C55474774]\",\r",
									"            \"Update document with wrong WRITE scope [C55474775]\",\r",
									"            //\"Update category with wrong WRITE scope [C55474776]\",\r",
									"            \"Update attachment with wrong WRITE scope [C55474777]\",\r",
									"            \"Delete document with wrong WRITE scope [C55474778]\",\r",
									"            //\"Delete category with wrong WRITE scope [C55474779]\",\r",
									"            \"Delete attachment with wrong WRITE scope [C55474780]\",\r",
									"            //Validation checks\r",
									"            \"Create document with blacklisted attachment validation [C56083936]\",\r",
									"            \"Create document with attachment exceeding file size validation [C56083935]\",\r",
									"            \"Create attachment exceeding file size validation [C64409837]\",\r",
									"            \"Document empty body validation [C56083929]\",\r",
									"            \"Document empty title validation [C56083930]\",\r",
									"            \"Document title length validation [C56083931]\",\r",
									"            \"Update document empty title validation [C56083932]\",\r",
									"            \"Update document empty body validation [C64409839]\",\r",
									"            \"Attachment empty file name validation [C56083950]\"\r",
									"        ];\r",
									"        break;\r",
									"    case \"TestRailClean\":\r",
									"        var testSession = [\r",
									"            \"_Test session close\"\r",
									"        ];\r",
									"        break;\r",
									"    default:\r",
									"        throw new Error(\"No tests selected for execution!\");\r",
									"}\r",
									"\r",
									"// Session initiate from PrS using eval()\r",
									"eval(globals.sessionInit)(testSession, \"testSession\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a7e9e514-b44f-444c-af40-af4f0a7c7770",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tests.v2",
			"item": [
				{
					"name": "Documents",
					"item": [
						{
							"name": "CRUD",
							"item": [
								{
									"name": "Get all documents (C33423919)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76e34fef-d546-4ea2-9bff-315f6d368699",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"const jsonResponse = pm.response.json();\r",
													"const documents = jsonResponse.embedded;\r",
													"const tenantId = documents[0].tenantId;\r",
													"const userId = documents[0].customerId;\r",
													"const incorrectCategoryId = documents[0].id;\r",
													"const page = jsonResponse.page;\r",
													"const totalElementCount = page.totalElements;\r",
													"const totalPages = page.totalPages;\r",
													"const pageSize = page.size;\r",
													"\r",
													"\r",
													"pm.environment.set(\"totalElementCount\", totalElementCount);\r",
													"pm.environment.set(\"totalPages\", totalPages);\r",
													"pm.environment.set(\"pageSize\", pageSize);\r",
													"pm.environment.set(\"incorrectCategoryId\", incorrectCategoryId);\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of documents is retrieved and response schema is validated\", function () {\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(tenantId).to.equal(pm.environment.get(\"bcNo_security\"));\r",
													"    var schemaValidationPassed = true;\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    \r",
													"    //Response schema is correct\r",
													"    schemaValidationPassed = eval(globals.schemaValidator)(\"documentsAllSchema\",jsonData);\r",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ad601667-c84b-434e-b503-dedf59921857",
												"exec": [
													"eval(globals.generateAccessToken)();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/hal+json,application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create New Document (C52650420)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f7e65f5-e60c-4c02-bbc1-ce2d03d72a0f",
												"exec": [
													"const jsonResponse = pm.response.json();",
													"const createdDocumentId = jsonResponse.id;",
													"//const createdDocCategory = jsonResponse.category.code;",
													"const customerId = jsonResponse.customerId;",
													"const newDocTitle = jsonResponse.title;",
													"const newDocBody = jsonResponse.body;",
													"const refObjType = jsonResponse.referencedObjectType;",
													"",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" New document is created and response schema is validated\", function () {",
													"",
													"    var schemaValidationPassed = true;",
													"    var jsonData = JSON.parse(responseBody);",
													"    ",
													"    //Response schema is correct",
													"    schemaValidationPassed = eval(globals.schemaValidator)(\"newDocumentSchema\",jsonData);",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);",
													"",
													"    pm.response.to.have.status(201);",
													"    pm.expect(newDocTitle).to.eql(pm.environment.get(\"newDocTitle\"));",
													"    pm.expect(newDocBody).to.eql(pm.environment.get(\"newDocBody\"));",
													"    //pm.expect(createdDocCategory).to.eql(pm.environment.get(\"categoryCode\"));",
													"    pm.expect(refObjType).to.eql(\"CUSTODY_ACCOUNT\");",
													"});",
													"",
													"// Log important stuff",
													"if (pm.response.code == 201){",
													"    let totalDocumentsNumber = pm.environment.get(\"totalElementCount\");",
													"    totalDocumentsNumber += 1;",
													"    pm.environment.set(\"totalElementCount\", totalDocumentsNumber);",
													"    pm.environment.set(\"createdDocumentId\", createdDocumentId);",
													"    //clean up",
													"    eval(globals.documentDelete)();",
													"    } ",
													"else {",
													"    console.log(\"Failed to create document!\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ad63d287-3032-44a0-8b7c-5950f19b3ac0",
												"exec": [
													"const newDocTitle = \"Newly_Created_Document_Title\";",
													"const newDocBody = \"This is the newly created document body\";",
													"pm.environment.set(\"newDocBody\", newDocBody);",
													"pm.environment.set(\"newDocTitle\", newDocTitle);",
													"",
													"eval(globals.generateAccessToken)();",
													"setTimeout(function(){eval(globals.categoriesGet)();}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/hal+json,application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": " multipart/form-data"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "{{newDocTitle}}",
													"type": "text"
												},
												{
													"key": "body",
													"value": "{{newDocBody}}",
													"type": "text"
												},
												{
													"key": "categoryCode",
													"value": "{{categoryCode}}",
													"type": "text"
												},
												{
													"key": "sourceType",
													"value": "CUSTODY_ACCOUNT",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get document by Document ID (C34380147)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c381c532-d480-4e91-8013-a1f5e5f3acab",
												"exec": [
													"const jsonResponse = pm.response.json();\r",
													"const documentId = jsonResponse.id;\r",
													"const documentTitle = jsonResponse.title;\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Document by ID is retrieved and response schema is validated\", function () {\r",
													"\r",
													"    var schemaValidationPassed = true;\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"        \r",
													"    //Response schema is correct\r",
													"    schemaValidationPassed = eval(globals.schemaValidator)(\"getDocumentByIdSchema\",jsonData);\r",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
													"\t\t\r",
													"\t//Document id is correct\r",
													"\tpm.expect(jsonResponse).to.be.an('object');\r",
													"\tpm.expect(jsonResponse).to.not.be.empty;\r",
													"\tpm.expect(documentId).to.equal(pm.environment.get(\"createdDocumentId\"));\r",
													"\tpm.expect(documentTitle).to.equal(pm.environment.get(\"newDocTitle\"));\r",
													"\r",
													"});\r",
													"\r",
													"//clean up\r",
													"eval(globals.documentDelete)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "87306c29-2b3c-4c25-9ead-40e2a3e77c49",
												"exec": [
													"eval(globals.generateAccessToken)();",
													"//Pre-condition: call global function to create document",
													"setTimeout(function(){eval(globals.documentCreate)();}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/hal+json,application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents/{{createdDocumentId}}",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"documents",
												"{{createdDocumentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get documents by Document Title (C34306654)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "90b850e2-d4cf-4e3b-be5d-18bcdbae3178",
												"exec": [
													"const jsonResponse = pm.response.json();\r",
													"const response = jsonResponse.embedded;\r",
													"let titleCount = []; \r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Document by title is retrieved and response schema is validated\", function () {\r",
													"\r",
													"    var schemaValidationPassed = true;\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    \r",
													"    //Response schema is correct\r",
													"    schemaValidationPassed = eval(globals.schemaValidator)(\"getDocumentByTitleSchema\",jsonData);\r",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
													"\t\t\r",
													"\t//count all document with titles\r",
													"\tlet documentsCount = response.filter(response => response.title).length;\r",
													"\tif (documentsCount > 0) {\r",
													"\tfor(var i = 0;i<response.length;i++) {\r",
													"\t\t\ttitleCount.push(response[i].title);\r",
													"\t\t}\r",
													"\t}\r",
													"\tpm.expect(titleCount).to.include.members([pm.environment.get(\"newDocTitle\")]);\r",
													"\tpm.expect(response).to.be.an('array');\r",
													"\tpm.expect(response).to.not.be.empty;\r",
													"\tpm.expect(response).to.have.lengthOf.at.least(1);\r",
													"\r",
													"\tpm.expect(jsonResponse).to.be.an('object');\r",
													"\t\r",
													"});\r",
													"\r",
													"//clean up\r",
													"eval(globals.documentDelete)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b3619b7d-6af6-45ab-b2b5-42bcf8f496fb",
												"exec": [
													"eval(globals.generateAccessToken)();",
													"//Pre-condition: call global function to create document",
													"setTimeout(function(){eval(globals.documentCreate)();}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/hal+json,application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents?title={{newDocTitle}}",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"documents"
											],
											"query": [
												{
													"key": "title",
													"value": "{{newDocTitle}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get documents by Document Body (C57043720)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2c692ae-518b-4b2f-a799-21e0f30a0665",
												"exec": [
													"const jsonResponse = pm.response.json();",
													"const response = jsonResponse.embedded;",
													"const documentMetaData = response[0];",
													"const documentId = documentMetaData.id;",
													"const body = documentMetaData.body;",
													"",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Document by body is retrieved and response schema is validated\", function () {",
													"",
													"    var schemaValidationPassed = true;",
													"    var jsonData = JSON.parse(responseBody);",
													"        ",
													"    //Response schema is correct",
													"    schemaValidationPassed = eval(globals.schemaValidator)(\"getDocumentByTitleSchema\",jsonData);",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);",
													"",
													"    //Document title is correct",
													"    pm.expect(response).to.be.an('array');",
													"    pm.expect(response).to.not.be.empty;",
													"    pm.expect(response).to.have.lengthOf.at.least(1);",
													"    pm.expect(documentId).to.equal(pm.environment.get(\"createdDocumentId\"));",
													"    pm.expect(body).to.equal(pm.environment.get(\"newDocBody\"));",
													"",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//clean up",
													"eval(globals.documentDelete)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "df107c2d-19d9-412c-8a6a-a1cf0f83ba4b",
												"exec": [
													"eval(globals.generateAccessToken)();",
													"//Pre-condition: call global function to create document",
													"setTimeout(function(){eval(globals.documentCreate)();}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/hal+json,application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents?body={{newDocBody}}",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"documents"
											],
											"query": [
												{
													"key": "body",
													"value": "{{newDocBody}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all documents on page=0 (C34306652)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "567a65ab-3c77-4e1f-87e1-1127cb2fc561",
												"exec": [
													"const jsonResponse = pm.response.json();\r",
													"const page = jsonResponse.page;\r",
													"const pageSize = page.size;\r",
													"const totalElements = page.totalElements;\r",
													"const totalPages = page.totalPages;\r",
													"const pageNumber = page.number;\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of documents is retrieved and response schema is validated\", function () {\r",
													"\r",
													"    var schemaValidationPassed = true;\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"        \r",
													"    //Response schema is correct\r",
													"    schemaValidationPassed = eval(globals.schemaValidator)(\"documentsAllSchema\",jsonData);\r",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
													"\r",
													"\t//Pageination is correct\r",
													"\tpm.expect(page).to.be.an('object');\r",
													"\tpm.expect(page).to.not.be.empty;\r",
													"\tpm.expect(pageSize).to.equal(pm.environment.get(\"pageSize\"));\r",
													"\tpm.expect(totalElements).to.equal(pm.environment.get(\"totalElementCount\"));\r",
													"\tpm.expect(totalPages).to.equal(pm.environment.get(\"totalPages\"));\r",
													"\tpm.expect(pageNumber).to.equal(0);\r",
													"\t\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"});\r",
													"\r",
													"//clean up\r",
													"eval(globals.documentDelete)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "db497727-bd12-44fa-a868-f1263e4973d0",
												"exec": [
													"eval(globals.generateAccessToken)();",
													"//Pre-condition: call global function to create document",
													"setTimeout(function(){eval(globals.documentCreate)();}, 1000);",
													"// list all documents",
													"setTimeout(function(){eval(globals.documentsGet)();}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/hal+json,application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents?page=0",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"documents"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get documents by Document Title Word (C34306661)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f256961b-01f8-4f75-995a-6c395d0bee63",
												"exec": [
													"const jsonResponse = pm.response.json();\r",
													"const response = jsonResponse.embedded;\r",
													"const documentMetaData = response[0];\r",
													"const title = (documentMetaData.title).slice(0, 5);\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Document with the searched title is retrieved and response schema is validated\", function () {\r",
													"\r",
													"    var schemaValidationPassed = true;\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"        \r",
													"    //Response schema is correct\r",
													"    schemaValidationPassed = eval(globals.schemaValidator)(\"getDocumentByTitleSchema\",jsonData);\r",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
													"\r",
													"\t//Searched title is found\r",
													"\tpm.expect(response).to.be.an('array');\r",
													"\tpm.expect(response).to.not.be.empty;\r",
													"\tpm.expect(response).to.have.lengthOf.at.least(1);\r",
													"\tpm.expect(title).to.equal(pm.environment.get(\"titleWord\"));\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"});\r",
													"\r",
													"//clean up\r",
													"eval(globals.documentDelete)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "32d5dc52-661f-4659-8847-51910caf1005",
												"exec": [
													"/*",
													"var titleWord = pm.environment.get(\"newDocTitle\").slice(0,5);",
													"pm.environment.set(\"titleWord\", titleWord);",
													"*/",
													"",
													"eval(globals.generateAccessToken)();",
													"//Pre-condition: call global function to create document",
													"setTimeout(function(){eval(globals.documentCreate)();}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/hal+json,application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents?title={{titleWord}}",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"documents"
											],
											"query": [
												{
													"key": "title",
													"value": "{{titleWord}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get documents with page size (C35054829)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25d4c003-96d7-4fdc-9352-37dae9315bbb",
												"exec": [
													"const jsonResponse = pm.response.json();\r",
													"const page = jsonResponse.page;\r",
													"const pageSize = page.size;\r",
													"const totalElements = page.totalElements;\r",
													"const pageNumber = page.number;\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of documents is retrieved and response schema is validated\", function () {\r",
													"\r",
													"\tvar schemaValidationPassed = true;\r",
													"\tvar jsonData = JSON.parse(responseBody);\r",
													"\r",
													"    //Response schema is correct\r",
													"\tschemaValidationPassed = eval(globals.schemaValidator)(\"documentsAllSchema\", jsonData);\r",
													"\tpm.expect(schemaValidationPassed).to.be.eql(true);\r",
													"\r",
													"    //Pageination is correct\r",
													"\tpm.expect(page).to.be.an('object');\r",
													"\tpm.expect(page).to.not.be.empty;\r",
													"\tpm.expect(pageSize).to.equal(parseInt(pm.environment.get(\"newPageSize\")));\r",
													"\tpm.expect(totalElements).to.have.at.least(23);\r",
													"\tpm.expect(pageNumber).to.equal(0);\r",
													"\r",
													"\tpm.response.to.have.status(200);\r",
													"\r",
													"});\r",
													"\r",
													"//clean up\r",
													"eval(globals.documentDelete)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "193d572a-64d2-4329-8e34-3dfe065e8704",
												"exec": [
													"/*",
													"var newPageSize = pm.environment.get(\"pageSize\");",
													"newPageSize += 20;",
													"",
													"pm.environment.set(\"newPageSize\", newPageSize); ",
													"*/",
													"",
													"eval(globals.generateAccessToken)();",
													"//Pre-condition: call global function to create document",
													"setTimeout(function(){eval(globals.documentCreate)();}, 1000);",
													"//list documents",
													"setTimeout(function(){eval(globals.documentsGet)();}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/hal+json,application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents?size={{newPageSize}}",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"documents"
											],
											"query": [
												{
													"key": "size",
													"value": "{{newPageSize}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get documents with startDate and endDate (C34306653)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1ede0a46-03d5-4329-9b17-8a3375066379",
												"exec": [
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Documents with searched published and read date are shown and response schema is validated\", function () {",
													"",
													"    var schemaValidationPassed = true;",
													"    var jsonData = JSON.parse(responseBody);",
													"    ",
													"    //Response schema is correct",
													"    schemaValidationPassed = eval(globals.schemaValidator)(\"documentsAllSchema\",jsonData);",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);",
													"",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//clean up",
													"eval(globals.documentDelete)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "97dd8d11-db3d-4493-89bd-9acc7808f8a7",
												"exec": [
													"eval(globals.generateAccessToken)();",
													"//Pre-condition: call global function to create document",
													"setTimeout(function(){eval(globals.documentCreate)();}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/hal+json,application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents?startDate=2020-01-12T00:00:00&endDate=2020-12-13T00:00:00",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"documents"
											],
											"query": [
												{
													"key": "startDate",
													"value": "2020-01-12T00:00:00"
												},
												{
													"key": "endDate",
													"value": "2020-12-13T00:00:00"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get documents sorted by publishingDate (C57043721)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7531c531-09bb-4688-9b3d-18bc4b6f5233",
												"exec": [
													"const jsonResponse = pm.response.json();",
													"const response = jsonResponse.embedded;",
													"let publishedDates = [];",
													"let sortedPublishedDates = [];",
													"let unsortedPublishedDates = [];",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Document are sorted by publishing date and response schema is validated\", function () {",
													"",
													"\tvar schemaValidationPassed = true;",
													"\tvar jsonData = JSON.parse(responseBody);",
													"",
													"\tpm.response.to.have.status(200);",
													"\t",
													"    //Response schema is correct",
													"    schemaValidationPassed = eval(globals.schemaValidator)(\"documentsAllSchema\",jsonData);",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);",
													"",
													"\t//Sorting by publishing is correct",
													"\tlet documentsCount = response.filter(response => response.publishingDate).length;",
													"\tif (documentsCount > 0) {",
													"\t\tfor (var i = 0; i < response.length; i++) {",
													"\t\t\tpublishedDates.push(response[i].publishingDate);",
													"\t\t}",
													"\t}",
													"\t//make a copy of unsorted array",
													"\tunsortedPublishedDates = [...publishedDates];",
													"\tsortePublishedDates = publishedDates.sort();",
													"\tpm.expect(unsortedPublishedDates).to.eql(sortePublishedDates);",
													"\tpm.expect(response).to.be.an('array');",
													"\tpm.expect(response).to.not.be.empty;",
													"\tpm.expect(response).to.have.lengthOf.at.least(1);",
													"",
													"\tpm.expect(jsonResponse).to.be.an('object');",
													"\tpm.expect(publishedDates).to.equal(publishedDates.sort());",
													"",
													"});",
													"",
													"//clean up",
													"eval(globals.documentDelete)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "26f04132-bc15-437e-9dd1-d3809e693973",
												"exec": [
													"eval(globals.generateAccessToken)();",
													"//Pre-condition: call global function to create document",
													"setTimeout(function(){eval(globals.documentCreate)();}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/hal+json,application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents?sortBy=publishingDate:asc",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"documents"
											],
											"query": [
												{
													"key": "sortBy",
													"value": "publishingDate:asc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get documents sorted by Title (C57043722)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6782f96c-9736-49cc-b7f6-2c753fad8c6d",
												"exec": [
													"const jsonResponse = pm.response.json();\r",
													"const response = jsonResponse.embedded;\r",
													"let titleCount = []; \r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Document are sorted by publishing date and response schema is validated\", function () {\r",
													"\r",
													"    var schemaValidationPassed = true;\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    \r",
													"    pm.response.to.have.status(200);\r",
													"    //Response schema is correct\r",
													"    schemaValidationPassed = eval(globals.schemaValidator)(\"documentsAllSchema\",jsonData);\r",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
													"\t\t\r",
													"\t//Sorting by publishing is correct\r",
													"\tlet documentsCount = response.filter(response => response.title).length;\r",
													"\tif (documentsCount > 0) {\r",
													"\tfor(var i = 0;i<response.length;i++) {\r",
													"\t\t\ttitleCount.push(response[i].title);\r",
													"\t\t}\r",
													"\t}\r",
													"\tpm.expect(titleCount).to.equal(titleCount.sort());\r",
													"\tpm.expect(response).to.be.an('array');\r",
													"\tpm.expect(response).to.not.be.empty;\r",
													"\tpm.expect(response).to.have.lengthOf.at.least(1);\r",
													"\tpm.expect(jsonResponse).to.be.an('object');\r",
													"\r",
													"});\r",
													"\r",
													"//clean up\r",
													"eval(globals.documentDelete)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7cd259a4-658a-4f4a-a509-6e5d5390ba52",
												"exec": [
													"eval(globals.generateAccessToken)();",
													"//Pre-condition: call global function to create document",
													"setTimeout(function(){eval(globals.documentCreate)();}, 1000);",
													"// list all documents",
													"setTimeout(function(){eval(globals.documentsGet)();}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/hal+json,application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents?sortBy=title:asc",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"documents"
											],
											"query": [
												{
													"key": "size",
													"value": "5",
													"disabled": true
												},
												{
													"key": "size",
													"value": "20",
													"disabled": true
												},
												{
													"key": "sortBy",
													"value": "title:asc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get document by categoryCode (C57043723)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75ae08d9-8096-400f-94d3-2b7585ad1e5f",
												"exec": [
													"//eval(globals.categoryDelete)();\r",
													"\r",
													"const jsonResponse = pm.response.json();\r",
													"const documents = jsonResponse.embedded;\r",
													"const category = documents[0].category;\r",
													"const catName = category.name;\r",
													"const catId = category.id;\r",
													"const page = jsonResponse.page;\r",
													"const totalDocuments = page.totalElements;\r",
													"let allCategoryCode = [];\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \"Document category code is correct\", function () {\r",
													"\r",
													"    var schemaValidationPassed = true;\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"        \r",
													"    //Response schema is correct\r",
													"    schemaValidationPassed = eval(globals.schemaValidator)(\"getCategoriesSchema\",jsonData);\r",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
													"\r",
													"    pm.response.to.have.status(200)\r",
													"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
													"\t\t\r",
													"\t//Category code is correct\r",
													"\tlet categoriesCodeCount = documents.filter(documents => documents.category).length; \r",
													"\tif (categoriesCodeCount > 0) {\r",
													"\tfor(var i = 0;i<documents.length;i++) {\r",
													"\t\t\tallCategoryCode.push(documents[i].category.code);\r",
													"\t\t}\r",
													"\t}\r",
													"\tpm.expect(allCategoryCode).to.include.members([pm.environment.get(\"categoryCode\")]);\r",
													"\tpm.expect(documents).to.be.an('array');\r",
													"\tpm.expect(documents).to.not.be.empty;\r",
													"\tpm.expect(totalDocuments).to.equal(pm.environment.get(\"totalDocumentsNumber\"));\r",
													"\tpm.expect(catName).to.equal(pm.environment.get(\"categoryName\"));\r",
													"\t\t\r",
													"\tpm.expect(jsonResponse).to.be.an('object');\r",
													"\r",
													"});\r",
													"\r",
													"//clean up\r",
													"eval(globals.categoryDelete)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dcb47c96-0dd8-4f6b-b75a-f8eafd0966b4",
												"exec": [
													"eval(globals.generateAccessToken)();",
													"setTimeout(function(){eval(globals.categoryCreate)();}, 1000);",
													"setTimeout(function(){eval(globals.categoriesGet)();}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/hal+json,application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents?categoryCode={{categoryCode}}",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"documents"
											],
											"query": [
												{
													"key": "categoryCode",
													"value": "{{categoryCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get document by categoryType (C57043724)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f474fb17-ef4f-4907-b645-813e57fae003",
												"exec": [
													"const jsonResponse = pm.response.json();\r",
													"const documents = jsonResponse.embedded;\r",
													"const category = documents[0].category;\r",
													"const catName = category.name;\r",
													"const catId = category.id;\r",
													"const page = jsonResponse.page;\r",
													"const totalDocuments = page.totalElements;\r",
													"let allCategoryCode = [];\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \"Document category type is correct\", function () {\r",
													"\r",
													"\tvar schemaValidationPassed = true;\r",
													"\tvar jsonData = JSON.parse(responseBody);\r",
													"\r",
													"\t//Response schema is correct\r",
													"\tschemaValidationPassed = eval(globals.schemaValidator)(\"getCategoriesSchema\", jsonData);\r",
													"\tpm.expect(schemaValidationPassed).to.be.eql(true);\r",
													"\r",
													"\tpm.response.to.have.status(200);\r",
													"\tpm.expect(schemaValidationPassed).to.be.eql(true);\r",
													"\r",
													"\t//Category type is correct\r",
													"\tlet categoriesCodeCount = documents.filter(documents => documents.category).length;\r",
													"\tif (categoriesCodeCount > 0) {\r",
													"\t\tfor (var i = 0; i < documents.length; i++) {\r",
													"\t\t\tallCategoryCode.push(documents[i].category.type);\r",
													"\t\t}\r",
													"\t}\r",
													"\tpm.expect(allCategoryCode).to.include.members([pm.environment.get(\"categoryType\")]);\r",
													"\tpm.expect(documents).to.be.an('array');\r",
													"\tpm.expect(documents).to.not.be.empty;\r",
													"\r",
													"\t//console.log(allCategoryCode);\r",
													"\tpm.expect(jsonResponse).to.be.an('object');\r",
													"\t\r",
													"});\r",
													"\r",
													"//clean up\r",
													"eval(globals.categoryDelete)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "087e622e-c051-4019-b0ac-42eb16ad4b31",
												"exec": [
													"eval(globals.generateAccessToken)();",
													"setTimeout(function(){eval(globals.categoryCreate)();}, 1000);",
													"setTimeout(function(){eval(globals.categoriesGet)();}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/hal+json,application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents?categoryType={{categoryType}}",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"documents"
											],
											"query": [
												{
													"key": "categoryType",
													"value": "{{categoryType}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update document by documentID (C52650417)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef818d01-72a4-4eee-9f18-208ca5b52bd2",
												"exec": [
													"const jsonResponse = pm.response.json();",
													"const updatedDocumentId = jsonResponse.id;",
													"const updatedDocumentCatCode = jsonResponse.category.code;",
													"const updatedDocumentTitle = jsonResponse.title;",
													"const updatedDocumentBody = jsonResponse.body;",
													"",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Document is updated and response schema is validated\", function () {",
													"",
													"    var schemaValidationPassed = true;",
													"    var jsonData = JSON.parse(responseBody);",
													"    ",
													"    //Response schema is correct",
													"    schemaValidationPassed = eval(globals.schemaValidator)(\"newDocumentSchema\",jsonData);",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);",
													"",
													"    pm.response.to.have.status(200);",
													"    pm.expect(updatedDocumentId).to.eql(pm.environment.get(\"createdDocumentId\"));",
													"    pm.expect(updatedDocumentCatCode).to.eql(pm.environment.get(\"updatedCatCode\"));",
													"    pm.expect(updatedDocumentTitle).to.eql(pm.environment.get(\"updatedDocName\"));",
													"    pm.expect(updatedDocumentBody).to.eql(pm.environment.get(\"updatedBody\"));",
													"});",
													"",
													"//clean up",
													"eval(globals.documentDelete)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c86b2c31-6dfd-4183-abad-4955d850fcc7",
												"exec": [
													"/*",
													"const createdDocumentId = pm.environment.get(\"createdDocumentId\");",
													"",
													"pm.expect(createdDocumentId).to.be.a('string', \"The documentId is required to update the document\");",
													"*/",
													"",
													"const updatedDocName = \"Updated_document \" + Date.now();",
													"const updatedBody = \"This is the newly updated document body\";",
													"const updatedCatCode = \"TCsteuerbe\";",
													"",
													"pm.environment.set(\"updatedBody\", updatedBody);",
													"pm.environment.set(\"updatedDocName\", updatedDocName);",
													"pm.environment.set(\"updatedCatCode\", updatedCatCode);",
													"",
													"console.log(`Updating document to ${updatedDocName}`);",
													"",
													"eval(globals.generateAccessToken)();",
													"//Pre-condition: call global function to create document",
													"setTimeout(function(){eval(globals.documentCreate)();}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/hal+json,application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"{{createdDocumentId}}\",\r\n  \"title\": \"{{updatedDocName}}\",\r\n  \"body\": \"{{updatedBody}}\",\r\n  \"categoryCode\": \"{{updatedCatCode}}\",\r\n  \"type\": \"BANK_DOCUMENT\"\r\n}"
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents/{{createdDocumentId}}",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"documents",
												"{{createdDocumentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete document by Document ID (C52684040)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a6cf8fb-8358-4a71-a6e9-be3e92515737",
												"exec": [
													"const jsonResponse = pm.response.json();",
													"const response = jsonResponse.messages[0];",
													"const category = response.category;",
													"const code = response.code;",
													"const text = response.text;",
													"const path = response.path;",
													"const deletedDocumentId = path.slice(44, 128);",
													"",
													"pm.environment.set(\"deletedDocumentId\", deletedDocumentId);",
													"",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Document is deleted and response schema is validated\", function () {",
													"",
													"    var schemaValidationPassed = true;",
													"    var jsonData = JSON.parse(responseBody);",
													"    ",
													"    //Response schema is correct",
													"    schemaValidationPassed = eval(globals.schemaValidator)(\"deleteDocument\",jsonData);",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);",
													"",
													"    //Document is deleted\"",
													"    pm.expect(category).to.equal('INFO');",
													"    pm.expect(code).to.equal(\"200\");",
													"    pm.expect(text).to.equal(\"The resource was deleted successfully.\");",
													"",
													"    pm.response.to.have.status(200);",
													"    pm.expect(deletedDocumentId).to.equal(pm.environment.get(\"createdDocumentId\"));",
													"    ",
													"});",
													"",
													"// Log important stuff",
													"if (pm.response.code == 200){",
													"    console.log(\"Deleted document ID:\" + pm.environment.get(\"createdDocumentId\"));",
													"    pm.environment.unset(\"createdDocumentId\");",
													"}",
													"else {",
													"    console.log(\"Failed to delete document with ID:\" + pm.environment.get(\"createdDocumentId\"));",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9ce121ff-1a81-4f97-be03-8c777c6571cc",
												"exec": [
													"eval(globals.generateAccessToken)();",
													"//Pre-condition: call global function to create document",
													"setTimeout(function(){eval(globals.documentCreate)();}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents/{{createdDocumentId}}",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"documents",
												"{{createdDocumentId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Attachments",
							"item": [
								{
									"name": "Create New Document With Added Attachment (NO CLEAN)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bd7412b-5ceb-46fb-9af5-93fd8aad5d07",
												"exec": [
													"const jsonResponse = pm.response.json();",
													"const createdDocWithAttachmentId = jsonResponse.id;",
													"const createdAttachmentId = jsonResponse.attachments[0].id;",
													"const createdAttachmentName = jsonResponse.attachments[0].name;",
													"const createdAttachmentMimeType = jsonResponse.attachments[0].mimetype;",
													"const docCategory = jsonResponse.category.code;",
													"const customerId = jsonResponse.customerId;",
													"const newDocTitle = jsonResponse.title;",
													"const newDocBody = jsonResponse.body;",
													"",
													"pm.environment.set(\"createdDocWithAttachmentId\", createdDocWithAttachmentId);",
													"pm.environment.set(\"createdDocumentId\", createdDocWithAttachmentId);",
													"pm.environment.set(\"createdAttachmentId\", createdAttachmentId);",
													"pm.environment.set(\"attachmentName\", createdAttachmentName);",
													"pm.environment.set(\"attachmentMimeType\", createdAttachmentMimeType);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fa419d40-f519-4e09-beea-866b3630a48a",
												"exec": [
													"const newDocWithAttachmentTitle = \"Created_Document_With_Attachment\";",
													"const newDocWithAttachmentBody = \"This is the newly created document body with an added attachment\";",
													"pm.environment.set(\"newDocWithAttachmentBody\", newDocWithAttachmentBody);",
													"pm.environment.set(\"newDocWithAttachmentTitle\", newDocWithAttachmentTitle);",
													"",
													"eval(globals.generateAccessToken)();",
													"setTimeout(function(){eval(globals.categoriesGet)();}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/hal+json,application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": " multipart/form-data"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "{{newDocWithAttachmentTitle}}",
													"type": "text"
												},
												{
													"key": "body",
													"value": "{{newDocWithAttachmentBody}}",
													"type": "text"
												},
												{
													"key": "categoryCode",
													"value": "{{categoryCode}}",
													"type": "text"
												},
												{
													"key": "attachments",
													"type": "file",
													"src": ""
												}
											]
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create New Document With Added Attachment (C61985066)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bd7412b-5ceb-46fb-9af5-93fd8aad5d07",
												"exec": [
													"const jsonResponse = pm.response.json();",
													"const createdDocWithAttachmentId = jsonResponse.id;",
													"const createdAttachmentId = jsonResponse.attachments[0].id;",
													"const createdAttachmentName = jsonResponse.attachments[0].name;",
													"const createdAttachmentMimeType = jsonResponse.attachments[0].mimetype;",
													"const docCategory = jsonResponse.category.code;",
													"const customerId = jsonResponse.customerId;",
													"const newDocTitle = jsonResponse.title;",
													"const newDocBody = jsonResponse.body;",
													"",
													"pm.environment.set(\"createdDocWithAttachmentId\", createdDocWithAttachmentId);",
													"pm.environment.set(\"createdDocumentId\", createdDocWithAttachmentId);",
													"pm.environment.set(\"createdAttachmentId\", createdAttachmentId);",
													"pm.environment.set(\"attachmentName\", createdAttachmentName);",
													"pm.environment.set(\"attachmentMimeType\", createdAttachmentMimeType);",
													"",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" New document is created and response schema is validated\", function () {",
													"",
													"    var schemaValidationPassed = true;",
													"    var jsonData = JSON.parse(responseBody);",
													"        ",
													"    //Response schema is correct",
													"    schemaValidationPassed = eval(globals.schemaValidator)(\"newDocumentSchema\",jsonData);",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);",
													"",
													"    pm.response.to.have.status(201);",
													"    pm.expect(newDocTitle).to.eql(pm.environment.get(\"newDocWithAttachmentTitle\"));",
													"    pm.expect(newDocBody).to.eql(pm.environment.get(\"newDocWithAttachmentBody\"));",
													"    pm.expect(docCategory).to.eql(pm.environment.get(\"categoryCode\"));",
													"    ",
													"});",
													"",
													"//clean up",
													"eval(globals.documentDelete)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fa419d40-f519-4e09-beea-866b3630a48a",
												"exec": [
													"const newDocWithAttachmentTitle = \"Created_Document_With_Attachment\";",
													"const newDocWithAttachmentBody = \"This is the newly created document body with an added attachment\";",
													"pm.environment.set(\"newDocWithAttachmentBody\", newDocWithAttachmentBody);",
													"pm.environment.set(\"newDocWithAttachmentTitle\", newDocWithAttachmentTitle);",
													"",
													"eval(globals.generateAccessToken)();",
													"setTimeout(function(){eval(globals.categoriesGet)();}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/hal+json,application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": " multipart/form-data"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "{{newDocWithAttachmentTitle}}",
													"type": "text"
												},
												{
													"key": "body",
													"value": "{{newDocWithAttachmentBody}}",
													"type": "text"
												},
												{
													"key": "categoryCode",
													"value": "{{categoryCode}}",
													"type": "text"
												},
												{
													"key": "attachments",
													"type": "file",
													"src": ""
												}
											]
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create document with multiple attachments (C64409840)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "840946d4-b958-4fdb-8e10-b0ea0307920d",
												"exec": [
													"const jsonResponse = pm.response.json();",
													"const createdDocWithAttachmentId = jsonResponse.id;",
													"const createdAttachmentId = jsonResponse.attachments.id;",
													"const docCategory = jsonResponse.category.code;",
													"const customerId = jsonResponse.customerId;",
													"const newDocTitle = jsonResponse.title;",
													"const newDocBody = jsonResponse.body;",
													"const attachments = jsonResponse.attachments;",
													"let attachmentNames = [];",
													"",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" New document with multiple attachment is created and response schema is validated\", function () {",
													"",
													"    var schemaValidationPassed = true;",
													"    var jsonData = JSON.parse(responseBody);",
													"",
													"    //Response schema is correct",
													"    schemaValidationPassed = eval(globals.schemaValidator)(\"newDocumentSchema\", jsonData);",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);",
													"",
													"    //Multiple attachments are added",
													"    let attachmentCount = attachments.filter(attachments => attachments.id).length;",
													"\tif (attachmentCount > 0) {",
													"\t\tfor (var i = 0; i < attachments.length; i++) {",
													"\t\t\tattachmentNames.push(attachments[i].name);",
													"            console.log(\"Attachment names are: \" + attachmentNames[i]);",
													"\t\t}",
													"\t}",
													"    pm.expect(attachmentNames).to.have.lengthOf(9);",
													"",
													"    pm.response.to.have.status(201);",
													"    pm.expect(newDocTitle).to.eql(pm.environment.get(\"newDocWithAttachmentTitle\"));",
													"    pm.expect(newDocBody).to.eql(pm.environment.get(\"newDocWithAttachmentBody\"));",
													"    pm.expect(docCategory).to.eql(pm.environment.get(\"categoryCode\"));",
													"});",
													"",
													"//clean up",
													"eval(globals.documentDelete)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "783b88a4-b9cd-4c52-bcc7-90fc3e564194",
												"exec": [
													"const newDocWithAttachmentTitle = \"Created_Document_With_Multiple_Attachments\";",
													"const newDocWithAttachmentBody = \"This is the newly created document body with added attachments\";",
													"pm.environment.set(\"newDocWithAttachmentBody\", newDocWithAttachmentBody);",
													"pm.environment.set(\"newDocWithAttachmentTitle\", newDocWithAttachmentTitle);",
													"",
													"eval(globals.generateAccessToken)();",
													"setTimeout(function(){eval(globals.categoriesGet)();}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/hal+json,application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": " multipart/form-data"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "{{newDocWithAttachmentTitle}}",
													"type": "text"
												},
												{
													"key": "body",
													"value": "{{newDocWithAttachmentBody}}",
													"type": "text"
												},
												{
													"key": "categoryCode",
													"value": "{{categoryCode}}",
													"type": "text"
												},
												{
													"key": "attachments",
													"type": "file",
													"src": ""
												}
											]
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add attachment to document (C52650407)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3ea0bb4-372d-4f4c-bf7b-d1ffa1788e62",
												"exec": [
													"const jsonResponse = pm.response.json();",
													"const attachments = jsonResponse.attachments;",
													"const addedAttachmentId = jsonResponse.attachments[1].id;",
													"const addedAttachmentName = jsonResponse.attachments[1].name;",
													"",
													"pm.environment.set(\"addedAttachmentId\", addedAttachmentId);",
													"pm.environment.set(\"addedAttachmentName\", addedAttachmentName);",
													"",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Attachment is added and response schema is validated\", function () {",
													"",
													"    var schemaValidationPassed = true;",
													"    var jsonData = JSON.parse(responseBody);",
													"    ",
													"    //Response schema is correct",
													"    schemaValidationPassed = eval(globals.schemaValidator)(\"addAttachmentSchema\",jsonData);",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);",
													"",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"//clean up",
													"eval(globals.documentDelete)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7bb88d0a-c757-4c07-898f-773cb9a6b104",
												"exec": [
													"//Create New Document With Added Attachment (NO CLEAN) must be executed first",
													"eval(globals.generateAccessToken)();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/hal+json,application/json"
											},
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "attachment",
													"type": "file",
													"src": ""
												}
											]
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents/{{createdDocWithAttachmentId}}/attachments",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"documents",
												"{{createdDocWithAttachmentId}}",
												"attachments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get documents attachments by Document ID (C35034346)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5b7bd79a-0b05-492d-9a95-1fb2ad4d6055",
												"exec": [
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Attachment with documentId is retrieved\", function () {",
													"",
													"    //Content-Type is 'application/zip'",
													"    pm.response.to.have.header(\"Content-Type\", \"application/zip\");",
													"",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//clean up",
													"eval(globals.documentDelete)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a2b9c8c3-f0e5-4e49-b4d9-c6c076ead2e2",
												"exec": [
													"//Create New Document With Added Attachment (NO CLEAN) must be executed first",
													"eval(globals.generateAccessToken)();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/zip"
											},
											{
												"key": "Content-Type",
												"value": "application/zip, application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents/{{createdDocWithAttachmentId}}/attachments",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"documents",
												"{{createdDocWithAttachmentId}}",
												"attachments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get document attachments by attachmentId (C52650405)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f90cd25b-05a4-4468-bfb5-ab32c06a5bdd",
												"exec": [
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Attachment with attachmentId is retrieved\", function () {",
													"",
													"    let attachmentContentType = pm.environment.get(\"attachmentMimeType\");",
													"    let attachmentFileName = pm.environment.get(\"attachmentName\");",
													"    ",
													"    //Content-Type matches to attachment type",
													"    pm.response.to.have.header(\"Content-Type\", attachmentContentType);",
													"",
													"    //Content-Disposition matches to attachment file name",
													"    pm.response.to.have.header(\"Content-Disposition\", \"attachment; filename=\\\"\" + attachmentFileName + \"\\\"\");",
													"",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//clean up",
													"eval(globals.documentDelete)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7f0c8360-ac40-4d25-94e0-acbb8d39abcd",
												"exec": [
													"//Create New Document With Added Attachment (NO CLEAN) must be executed first",
													"eval(globals.generateAccessToken)();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/pdf,application/json,application/octet-stream"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents/{{createdDocWithAttachmentId}}/attachments/{{createdAttachmentId}}",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"documents",
												"{{createdDocWithAttachmentId}}",
												"attachments",
												"{{createdAttachmentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update attachment (C52650406)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c304e776-de5b-4849-bdfe-31b36b57c7d4",
												"exec": [
													"const jsonResponse = pm.response.json();",
													"",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Attachment is updated and response schema is validated\", function () {",
													"",
													"    var schemaValidationPassed = true;",
													"    var jsonData = JSON.parse(responseBody);",
													"",
													"    //Response schema is correct",
													"    schemaValidationPassed = eval(globals.schemaValidator)(\"updateAttachmentSchema\", jsonData);",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);",
													"",
													"    pm.response.to.have.status(200);",
													"    ",
													"});",
													"",
													"//clean up",
													"eval(globals.documentDelete)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2facf881-0cda-4ac7-ad94-defdda63b9c1",
												"exec": [
													"const newAttachmentName = \"Updated_Attachment_Name.pdf\";",
													"pm.environment.set(\"newAttachmentName\", newAttachmentName); //a few milliseconds later this should be a different attachment name",
													"",
													"console.log(`Renaming attachment to ${newAttachmentName}`);",
													"",
													"//Create New Document With Added Attachment (NO CLEAN) must be executed first",
													"eval(globals.generateAccessToken)();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/hal+json,application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"{{addedAttachmentId}}\",\r\n  \"mimetype\": \"application/pdf\",\r\n  \"filename\": \"{{newAttachmentName}}\"\r\n}"
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents/{{createdDocWithAttachmentId}}/attachments/{{addedAttachmentId}}",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"documents",
												"{{createdDocWithAttachmentId}}",
												"attachments",
												"{{addedAttachmentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete attachment by attachmentId (C52650409)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8cd0b75d-22d4-4ffe-8de8-385efbff8b53",
												"exec": [
													"const jsonResponse = pm.response.json();",
													"",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Attachment by attachmentId is deleted and response schema is validated\", function () {",
													"",
													"    var schemaValidationPassed = true;",
													"    var jsonData = JSON.parse(responseBody);",
													"        ",
													"    //Response schema is correct",
													"    schemaValidationPassed = eval(globals.schemaValidator)(\"deleteAttachmentSchema\",jsonData);",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);",
													"",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//clean up",
													"eval(globals.documentDelete)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "29e8cabd-4f46-47e9-9a9a-018393fa2010",
												"exec": [
													"//Create New Document With Added Attachment (NO CLEAN) must be executed first",
													"eval(globals.generateAccessToken)();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/hal+json,application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents/{{createdDocWithAttachmentId}}/attachments/{{createdAttachmentId}}",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"documents",
												"{{createdDocWithAttachmentId}}",
												"attachments",
												"{{createdAttachmentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete attachments by documentId (C52650408)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "490900cc-02b2-4633-8128-0aa289901a13",
												"exec": [
													"const jsonResponse = pm.response.json();",
													"",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Attachment by documentId is deleted and response schema is validated\", function () {",
													"",
													"    var schemaValidationPassed = true;",
													"    var jsonData = JSON.parse(responseBody);",
													"        ",
													"    //Response schema is correct",
													"    schemaValidationPassed = eval(globals.schemaValidator)(\"deleteAttachmentSchema\",jsonData);",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);",
													"",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//clean up",
													"eval(globals.documentDelete)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "11802ec2-f439-4b6e-8ca4-1a44e012993d",
												"exec": [
													"//Create New Document With Added Attachment (NO CLEAN) must be executed first",
													"eval(globals.generateAccessToken)();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/hal+json,application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents/{{createdDocWithAttachmentId}}/attachments",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"documents",
												"{{createdDocWithAttachmentId}}",
												"attachments"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Validations",
							"item": [
								{
									"name": "Get deleted document by Id (C64217414)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5422d6be-1f90-4e3d-a74e-9a3b0686fab8",
												"exec": [
													"const jsonResponse = pm.response.json();\r",
													"const documentId = jsonResponse.id;\r",
													"const documentTitle = jsonResponse.title;\r",
													"const isDeleted = jsonResponse.deleted;\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Deleted document by ID is retrieved and response schema is validated\", function () {\r",
													"\r",
													"    var schemaValidationPassed = true;\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    \r",
													"    //Response schema is correct\r",
													"    schemaValidationPassed = eval(globals.schemaValidator)(\"getDocumentByIdSchema\",jsonData);\r",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
													"\t\t\r",
													"\t//Document id is correct\r",
													"\tpm.expect(jsonResponse).to.be.an('object');\r",
													"\tpm.expect(jsonResponse).to.not.be.empty;\r",
													"\tpm.expect(documentId).to.equal(pm.environment.get(\"deletedDocumentId\"));\r",
													"\tpm.expect(documentTitle).to.equal(pm.environment.get(\"newDocTitle\"));\r",
													"\tpm.expect(isDeleted).to.equal(true);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "54408c90-ca2c-4ffe-b4d9-69223630e4ea",
												"exec": [
													"eval(globals.generateAccessToken)();",
													"//Pre-condition: call global function to create document",
													"setTimeout(function(){eval(globals.documentCreate)();}, 1000);",
													"//delete created document",
													"setTimeout(function(){eval(globals.documentDelete)();}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/hal+json,application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents/{{deletedDocumentId}}",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"documents",
												"{{deletedDocumentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get document with incorrect documentId (C64345119)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "33e97ec0-a690-4ad4-a790-5275d0d8823a",
												"exec": [
													"const jsonResponse = pm.response.json();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Requested document is not found and response schema is validated\", function () {\r",
													"\r",
													"    var schemaValidationPassed = true;\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"        \r",
													"    //Response schema is correct\r",
													"    schemaValidationPassed = eval(globals.schemaValidator)(\"notFoundSchema\",jsonData);\r",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
													"\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
													"\t\t\r",
													"\t//Resourse is not found and error message is correct\r",
													"\tconst jsonResponse = pm.response.json();\r",
													"\tconst category = jsonResponse.messages[0].category;\r",
													"\tconst code = jsonResponse.messages[0].code;\r",
													"\tconst text = jsonResponse.messages[0].text;\r",
													"\r",
													"\tpm.expect(category).to.equal(\"ERROR\");\r",
													"\tpm.expect(code).to.equal(\"ERROR_BAD_REQUEST\");\r",
													"\tpm.expect(text).to.include(\"Parse attempt failed for value [__ID__62342d353237642d63626364313538338c42f4137622e07a8f404fd63e6e4f80b5e5d45144efc9]\");\r",
													"\t\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "02f4907a-82e5-4604-a7a6-c3e97217fb54",
												"exec": [
													"eval(globals.generateAccessToken)();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/hal+json,application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents/__ID__62342d353237642d63626364313538338c42f4137622e07a8f404fd63e6e4f80b5e5d45144efc9",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"documents",
												"__ID__62342d353237642d63626364313538338c42f4137622e07a8f404fd63e6e4f80b5e5d45144efc9"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Categories",
					"item": [
						{
							"name": "CRUD",
							"item": [
								{
									"name": "Get all documents categories (C33423939)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0ec64a8-c849-4838-82b9-f3cdb826bedb",
												"exec": [
													"const jsonResponse = pm.response.json();\r",
													"const response = jsonResponse[0];\r",
													"const categoryId = response.id;\r",
													"const tenantId = response.tenantId;\r",
													"const categoryCode = response.code;\r",
													"const sortCode = response.sortCode;\r",
													"const categoryType = response.type;\r",
													"const categoryName = response.name;\r",
													"const description = response.description;\r",
													"const totalDocumentsNumber = response.totalDocuments;\r",
													"let allCategoryType = [];\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Document categories are shown and response schema is validated\", function () {\r",
													"\r",
													"    var schemaValidationPassed = true;\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    \r",
													"    //Response schema is correct\r",
													"    schemaValidationPassed = eval(globals.schemaValidator)(\"getCategoriesSchema\",jsonData);\r",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
													"\r",
													"\t//Category response is correct\r",
													"\tpm.environment.set(\"categoryId\", categoryId);\r",
													"\tpm.environment.set(\"categoryCode\", categoryCode);\r",
													"\tpm.environment.set(\"sortCode\", sortCode);\r",
													"\tpm.environment.set(\"categoryType\", categoryType);\r",
													"\tpm.environment.set(\"categoryName\", categoryName);\r",
													"\tpm.environment.set(\"description\", description);\r",
													"\tpm.environment.set(\"totalDocumentsNumber\", totalDocumentsNumber);\r",
													"\r",
													"\t //count all category codes\r",
													"\tlet categoriesCount = jsonResponse.filter(jsonResponse => jsonResponse.code).length;\r",
													"\tlet allCategoryCode = []; \r",
													"\tif (categoriesCount > 0) {\r",
													"\tfor(var i = 0;i<jsonResponse.length;i++) {\r",
													"\t\t\tallCategoryCode.push(jsonResponse[i].code);\r",
													"\t\t}\r",
													"\t}\r",
													"\tpm.expect(allCategoryCode).to.include.members([\"TCFather\", \"TCGrfather\", \"TCSon\", \"TCabankbel\", \"TCbeilagen\", \"TCmitteilu\", \"TCsteuerbe\"]);\r",
													"\t\t\t\r",
													"\t//count all category types\r",
													"\tlet categoryTypeCount = jsonResponse.filter(jsonResponse => jsonResponse.type).length;\r",
													"\tif (categoryTypeCount > 0) {\r",
													"\t\tfor(var j = 0; j < jsonResponse.length; j++) {\r",
													"\t\t\tallCategoryType.push(jsonResponse[j].type);\r",
													"\t\t}\r",
													"\t}\r",
													"\tpm.expect(allCategoryType).to.include.members([\"BANK_DOCUMENT\"]);\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\t//pm.expect(sortCode).to.equal(\"20\");\r",
													"\tpm.expect(jsonResponse).to.be.an('array');\r",
													"\tpm.expect(jsonResponse).to.not.be.empty;\r",
													"\tpm.expect(jsonResponse).to.have.lengthOf.at.least(7);\r",
													"\tpm.expect(response).to.have.property(\"id\");\r",
													"\tpm.expect(response).to.have.property(\"description\");\r",
													"\tpm.expect(response).to.have.property('sortCode');\r",
													"\tpm.expect(allCategoryType).to.include.members([\"BANK_DOCUMENT\"]);\r",
													"\t\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6ec15051-44ee-4f69-b757-7bb26b67b759",
												"exec": [
													"eval(globals.generateAccessToken)();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/hal+json,application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/categories",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create New Category (C52650412)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7fd51e6-8793-4673-bd06-67cf178f1c84",
												"exec": [
													"const jsonResponse = pm.response.json();",
													"const createdCatId = jsonResponse.id;",
													"const createdCatCode = jsonResponse.code;",
													"const createdCatSortCode = jsonResponse.sortCode;",
													"const createdCatType = jsonResponse.type;",
													"const catRelevance = jsonResponse.relevance;",
													"const createdCatName = jsonResponse.name;",
													"const createdCatDesc = jsonResponse.description;",
													"",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Category is created and response schema is validated\", function () {",
													"",
													"    var schemaValidationPassed = true;",
													"    var jsonData = JSON.parse(responseBody);",
													"        ",
													"    //Response schema is correct",
													"    schemaValidationPassed = eval(globals.schemaValidator)(\"createCategorySchema\",jsonData);",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);",
													"",
													"    pm.response.to.have.status(201);",
													"    pm.expect(createdCatCode).to.eql(pm.environment.get(\"createdCatCode\"));",
													"    pm.expect(createdCatSortCode).to.eql(pm.environment.get(\"createdSortCode\"));",
													"    pm.expect(createdCatType).to.eql(pm.environment.get(\"categoryType\"));",
													"    pm.expect(catRelevance).to.eql(pm.environment.get(\"createdCategoryRelevance\"));",
													"    pm.expect(createdCatName).to.eql(pm.environment.get(\"createdCategoryName\"));",
													"    pm.expect(createdCatDesc).to.eql(pm.environment.get(\"createdCategoryDesc\"));",
													"});",
													"",
													"// Log important stuff",
													"if (pm.response.code == 201){",
													"    //clean up",
													"    pm.environment.set(\"createdCatId\", createdCatId);",
													"    eval(globals.categoryDelete)();",
													"    } ",
													"else {",
													"    console.log(\"Failed to create category!\");",
													"    pm.environment.unset(\"createdCatId\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "173c26f9-8fd7-4878-9143-0f7ebc5fe215",
												"exec": [
													"const createdCategoryName = \"Created_Kredit_Category\";",
													"const createdCategoryDesc = \"Description for a user created category\";",
													"const createdCatCode = \"kredit_Test_\" + Math.random().toString(36).substr(2, 4);",
													"const createdSortCode = \"10\";",
													"const createdCategoryRelevance = 1;",
													"",
													"pm.environment.set(\"createdCategoryName\", createdCategoryName);",
													"pm.environment.set(\"createdCategoryDesc\", createdCategoryDesc);",
													"pm.environment.set(\"createdCatCode\", createdCatCode);",
													"pm.environment.set(\"createdSortCode\", createdSortCode);",
													"pm.environment.set(\"createdCategoryRelevance\", createdCategoryRelevance);",
													"",
													"eval(globals.generateAccessToken)();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/hal+json,application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{createdCatCode}}\",\r\n  \"sortCode\": \"{{createdSortCode}}\",\r\n  \"type\": \"BANK_DOCUMENT\",\r\n  \"visible\": true,\r\n  \"relevance\": 1,\r\n  \"name\": \"{{createdCategoryName}}\",\r\n  \"description\": \"{{createdCategoryDesc}}\"\r\n}"
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/categories",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get category by categoryId (C52650410)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "de618758-2c9d-4528-9fa3-fb55cec64519",
												"exec": [
													"const jsonResponse = pm.response.json();\r",
													"const categoryId = jsonResponse.id;\r",
													"const name = jsonResponse.name;\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Category by id is retrieved and response schema is validated\", function () {\r",
													"\r",
													"    var schemaValidationPassed = true;\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"        \r",
													"    //Response schema is correct\r",
													"    schemaValidationPassed = eval(globals.schemaValidator)(\"getCategoryByIdSchema\",jsonData);\r",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
													"\r",
													"\t//CategoryId is correct\r",
													"\tpm.expect(categoryId).to.equal(pm.environment.get(\"createdCatId\"));\r",
													"    pm.expect(name).to.equal(pm.environment.get(\"createdCategoryName\"));\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"});\r",
													"\r",
													"//clean up\r",
													"eval(globals.categoryDelete)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c29df613-8765-4f3a-a93a-230a7ed00e5d",
												"exec": [
													"eval(globals.generateAccessToken)();",
													"setTimeout(function(){eval(globals.categoryCreate)();}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/hal+json,application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/categories/{{createdCatId}}",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"categories",
												"{{createdCatId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Category (C52650411)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dab728bf-2e73-4221-8b36-3128f8b544a6",
												"exec": [
													"const jsonResponse = pm.response.json();",
													"const updatedCatId = jsonResponse.id;",
													"const updatedCatCode = jsonResponse.code;",
													"const updatedCatSortCode = jsonResponse.sortCode;",
													"const updatedCatType = jsonResponse.type;",
													"const updatedCatRelevance = jsonResponse.relevance;",
													"const updatedCatName = jsonResponse.name;",
													"const updatedCatDesc = jsonResponse.description;",
													"",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Category is updated and response schema is validated\", function () {",
													"",
													"    var schemaValidationPassed = true;",
													"    var jsonData = JSON.parse(responseBody);",
													"        ",
													"    //Response schema is correct",
													"    schemaValidationPassed = eval(globals.schemaValidator)(\"createCategorySchema\",jsonData);",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);",
													"",
													"    pm.response.to.have.status(200);",
													"    pm.expect(updatedCatId).to.eql(pm.environment.get(\"createdCatId\"));",
													"    pm.expect(updatedCatCode).to.eql(pm.environment.get(\"createdCatCode\"));",
													"    pm.expect(updatedCatSortCode).to.eql(pm.environment.get(\"sortCode\"));",
													"    pm.expect(updatedCatType).to.eql(pm.environment.get(\"categoryType\"));",
													"    pm.expect(updatedCatRelevance).to.eql(pm.environment.get(\"updatedCatRelevance\"));",
													"    pm.expect(updatedCatName).to.eql(pm.environment.get(\"updatedCatName\"));",
													"    pm.expect(updatedCatDesc).to.eql(pm.environment.get(\"updatedCatDesc\"));",
													"});",
													"    ",
													"//clean up",
													"eval(globals.categoryDelete)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7949a800-9bfa-43b3-940c-c924095edd2c",
												"exec": [
													"/*",
													"const existingCategoryId = pm.environment.get(\"createdCatId\");",
													"",
													"pm.expect(existingCategoryId).to.be.a('string', \"The categoryId is required to update the category\");",
													"*/",
													"const updatedCatName = \"Updated_category_Name\";",
													"const updatedCatDesc = \"This is the updated category description\";",
													"const updatedCatRelevance = 0;",
													"",
													"pm.environment.set(\"updatedCatName\", updatedCatName);",
													"pm.environment.set(\"updatedCatDesc\", updatedCatDesc);",
													"pm.environment.set(\"updatedCatRelevance\", updatedCatRelevance);",
													"",
													"console.log(`Renaming category to ${updatedCatName}`);",
													"",
													"eval(globals.generateAccessToken)();",
													"setTimeout(function(){eval(globals.categoryCreate)();}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/hal+json,application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"{{createdCatId}}\",\r\n  \"sortCode\": \"{{sortCode}}\",\r\n  \"type\": \"BANK_DOCUMENT\",\r\n  \"visible\": true,\r\n  \"relevance\": \"{{updatedCatRelevance}}\",\r\n  \"name\": \"{{updatedCatName}}\",\r\n  \"description\": \"{{updatedCatDesc}}\"\r\n}"
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/categories/{{createdCatId}}",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"categories",
												"{{createdCatId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Category by categoryId (C52650413)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "97b3f4a6-ccee-4f53-ac41-275a4f746bc0",
												"exec": [
													"const jsonResponse = pm.response.json();",
													"const documentCategories = [];",
													"",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Document is deleted and response schema is validated\", function () {",
													"",
													"    var schemaValidationPassed = true;",
													"    var jsonData = JSON.parse(responseBody);",
													"        ",
													"    //Response schema is correct",
													"    schemaValidationPassed = eval(globals.schemaValidator)(\"getCategoriesSchema\",jsonData);",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);",
													"",
													"    //Document is deleted",
													"    let categories = jsonResponse.filter(jsonResponse => jsonResponse.id);",
													"    for (var i=0; i<jsonResponse; i++) {",
													"        documentCategories.push(jsonResponse[i].id);",
													"    }",
													"    pm.expect(documentCategories).to.not.include([\"{{createdCatId}}\"]);",
													"    console.log(\"category ids: \" + categories);",
													"",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "757e3d46-2dee-4141-a324-e7e249a082bf",
												"exec": [
													"/*",
													"const existingCategoryId = pm.environment.get(\"createdCatId\");",
													"",
													"pm.expect(existingCategoryId).to.be.a('string', \"The categoryId is required to update the category\");",
													"*/",
													"",
													"eval(globals.generateAccessToken)();",
													"setTimeout(function(){eval(globals.categoryCreate)();}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/hal+json,application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/categories/{{createdCatId}}",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"categories",
												"{{createdCatId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Validations",
							"item": [
								{
									"name": "Get category with incorrect categoryId (C64345120)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e365e149-ffc2-43a8-8dbe-40249c9bef82",
												"exec": [
													"const jsonResponse = pm.response.json();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Requested resource is not found and response schema is validated\", function () {\r",
													"\r",
													"    var schemaValidationPassed = true;\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"        \r",
													"    //Response schema is correct\r",
													"    schemaValidationPassed = eval(globals.schemaValidator)(\"notFoundSchema\",jsonData);\r",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
													"\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
													"\t\t\r",
													"\t//Resourse is not found and error message is correct\r",
													"\tconst jsonResponse = pm.response.json();\r",
													"\tconst category = jsonResponse.messages[0].category;\r",
													"\tconst code = jsonResponse.messages[0].code;\r",
													"\tconst text = jsonResponse.messages[0].text;\r",
													"\r",
													"\tpm.expect(category).to.equal(\"ERROR\");\r",
													"\tpm.expect(code).to.equal(\"ERROR_BAD_REQUEST\");\r",
													"\tpm.expect(text).to.include(\"Parse attempt failed for value [__ID__4775684c7247385146716a454336764af6d917c1612d589c89c152c72086f5c374]\");\r",
													"\t\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c6d46ebd-783d-45e3-81e8-f5ff7ce82a49",
												"exec": [
													"eval(globals.generateAccessToken)();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/hal+json,application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/categories/__ID__4775684c7247385146716a454336764af6d917c1612d589c89c152c72086f5c374",
											"host": [
												"{{env_Documents}}"
											],
											"path": [
												"messaging",
												"api",
												"documents",
												"v1",
												"{{bcNo_security}}",
												"categories",
												"__ID__4775684c7247385146716a454336764af6d917c1612d589c89c152c72086f5c374"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Scope validation",
					"item": [
						{
							"name": "Get all documents with no scope (C55474714)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2897a983-2740-44d3-a7c2-0d24f57002a5",
										"exec": [
											"const response = pm.response.json();\r",
											"const category = response.messages[0].category;\r",
											"const code = response.messages[0].code;\r",
											"const text = response.messages[0].text;\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Get all documents with no scope finishes with 'Access is denied' error\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    //Response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Request is forbbiden and error message is correct\r",
											"    pm.expect(category).to.eql(\"ERROR\");\r",
											"    pm.expect(code).to.eql(\"ERROR_ACCESS_DENIED\");\r",
											"    pm.expect(text).to.eql(\"Access is denied\");\r",
											"    pm.response.to.have.status(403);\r",
											"\r",
											"});\r",
											"\r",
											"pm.environment.set(\"accessDeniedCode\", code);\r",
											"pm.environment.set(\"accessDeniedText\", text);\r",
											"pm.environment.set(\"errorCategory\", category);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a361d049-c704-42e5-ae04-c7877b1e1e13",
										"exec": [
											"eval(globals.generateAccessTokenScopeEmpty)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"v1",
										"{{bcNo_security}}",
										"documents"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get categories with no scope (C55474715)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a225fac7-2213-4693-ad09-1eeca900eda4",
										"exec": [
											"const response = pm.response.json();",
											"const category = response.messages[0].category;",
											"const code = response.messages[0].code;",
											"const text = response.messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Access is denied and response schema is validated\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    //Response schema is correct",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);",
											"",
											"    //Request is forbbiden and error message is correct",
											"    pm.expect(category).to.eql(errorCategory);",
											"    pm.expect(code).to.eql(accessDeniedCode);",
											"    pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "04b4ad95-f8bd-4a07-8ca1-7310a3627bc8",
										"exec": [
											"eval(globals.generateAccessTokenScopeEmpty)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/hal+json,application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/categories",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"v1",
										"{{bcNo_security}}",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get document attachments with no scope (C55474716)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "abce76e8-6b05-4f32-894e-e515d18d30c1",
										"exec": [
											"const response = pm.response.json();",
											"const category = response.messages[0].category;",
											"const code = response.messages[0].code;",
											"const text = response.messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Access is denied and response schema is validated\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    //Response schema is correct",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);",
											"",
											"    //Request is forbbiden and error message is correct",
											"    pm.expect(category).to.eql(errorCategory);",
											"    pm.expect(code).to.eql(accessDeniedCode);",
											"    pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    pm.response.to.have.status(403);",
											"",
											"});",
											"",
											"//clean up",
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.documentDelete)();}, 1500);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3c4a0d5c-e5ba-486b-b4d4-a4ab7c06cdc0",
										"exec": [
											"//Create New Document With Added Attachment (NO CLEAN) must be executed first",
											"eval(globals.generateAccessTokenScopeEmpty)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/pdf,application/json,application/octet-stream"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents/{{createdDocWithAttachmentId}}/attachments/{{createdAttachmentId}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"v1",
										"{{bcNo_security}}",
										"documents",
										"{{createdDocWithAttachmentId}}",
										"attachments",
										"{{createdAttachmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create document with no scope (C55474742)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8119a41d-71f0-4ad5-be3d-7ec7d0d1606f",
										"exec": [
											"const response = pm.response.json();",
											"const category = response.messages[0].category;",
											"const code = response.messages[0].code;",
											"const text = response.messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Create document with no scope fails with 'Access is denied' error'\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    //Response schema is correct",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    ",
											"    //Request is forbbiden and error message is correct",
											"    pm.expect(category).to.eql(errorCategory);",
											"    pm.expect(code).to.eql(accessDeniedCode);",
											"    pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    pm.response.to.have.status(403);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "32371073-e1e0-4487-9294-92e01ce3dcbd",
										"exec": [
											"const newDocTitle = \"New Document_\" + Date.now();",
											"const newDocBody = \"This is the newly created document body\";",
											"pm.environment.set(\"newDocBody\", newDocBody);",
											"pm.environment.set(\"newDocTitle\", newDocTitle);",
											"",
											"eval(globals.generateAccessTokenScopeEmpty)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": " multipart/form-data"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "{{newDocTitle}}",
											"type": "text"
										},
										{
											"key": "body",
											"value": "{{newDocBody}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"v1",
										"{{bcNo_security}}",
										"documents"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create category with no scope (C55474745)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19177087-a39a-4a1d-9131-3259de91a8ab",
										"exec": [
											"const response = pm.response.json();",
											"const category = response.messages[0].category;",
											"const code = response.messages[0].code;",
											"const text = response.messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Create category with no scope fails with 'Access is denied' error'\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    //Response schema is correct",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);",
											"",
											"    //Request is forbbiden and error message is correct",
											"    pm.expect(category).to.eql(errorCategory);",
											"    pm.expect(code).to.eql(accessDeniedCode);",
											"    pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    pm.response.to.have.status(403);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "effda24d-5f96-4429-90be-c3e8a0375e27",
										"exec": [
											"pm.environment.set(\"createdCategory\", \"User_Created_Cat\" + Date.now());",
											"",
											"eval(globals.generateAccessTokenScopeEmpty)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"NewCategory\",\r\n  \"sortCode\": \"30\",\r\n  \"type\": \"BANK_DOCUMENT\",\r\n  \"visible\": true,\r\n  \"relevance\": 1,\r\n  \"name\": \"{{createdCategory}}\",\r\n  \"description\": \"this is a description for a user created category\"\r\n}"
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/categories",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"v1",
										"{{bcNo_security}}",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add attachment with no scope (C55474748)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ca59bdb-9422-45e5-853d-ee814ce3cd50",
										"exec": [
											"const response = pm.response.json();",
											"const category = response.messages[0].category;",
											"const code = response.messages[0].code;",
											"const text = response.messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Add attachment with no scope fails with 'Access is denied' error\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    //Response schema is correct",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);",
											"",
											"    //Request is forbbiden and error message is correct",
											"    pm.expect(category).to.eql(errorCategory);",
											"    pm.expect(code).to.eql(accessDeniedCode);",
											"    pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    pm.response.to.have.status(403);",
											"    ",
											"});",
											"",
											"//clean up",
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.documentDelete)();}, 1500);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cd60405c-86b6-4dfb-9b41-af35f0ca8e01",
										"exec": [
											"/*",
											"const existingDocumentId = pm.environment.get(\"createdDocumentId\");",
											"",
											"pm.expect(existingDocumentId).to.be.a('string', \"The documentId is required to update the document\");",
											"*/",
											"",
											"eval(globals.generateAccessToken)();",
											"//Pre-condition: call global function to create document",
											"setTimeout(function(){eval(globals.documentCreate)();}, 1000);",
											"setTimeout(function(){eval(globals.generateAccessTokenScopeEmpty)();}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"type": "file",
											"src": ""
										}
									]
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents/{{createdDocumentId}}/attachments",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"v1",
										"{{bcNo_security}}",
										"documents",
										"{{createdDocumentId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update document with no scope (C55474743)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3b18571-1bc8-47bc-aa3b-6bc4d901b0d7",
										"exec": [
											"const response = pm.response.json();",
											"const category = response.messages[0].category;",
											"const code = response.messages[0].code;",
											"const text = response.messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Update document with no scope fails with 'Access is denied' error'\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    //\"Response schema is correct",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    ",
											"    //Request is forbbiden and error message is correct",
											"    pm.expect(category).to.eql(errorCategory);",
											"    pm.expect(code).to.eql(accessDeniedCode);",
											"    pm.expect(text).to.eql(accessDeniedText);",
											"",
											"",
											"    pm.response.to.have.status(403);",
											"    ",
											"});",
											"",
											"//clean up",
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.documentDelete)();}, 1500);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "74db855e-a276-4209-83bc-3a3ba05d7653",
										"exec": [
											"/*",
											"const existingDocumentId = pm.environment.get(\"createdDocumentId\");",
											"",
											"pm.expect(existingDocumentId).to.be.a('string', \"The documentId is required to update the document\");",
											"*/",
											"const newDocName = \"Updated_document\" + Date.now();",
											"const updatedBody = \"This is the newly updated document body\";",
											"pm.environment.set(\"updatedBody\", updatedBody);",
											"pm.environment.set(\"newDocName\", newDocName);",
											"",
											"eval(globals.generateAccessToken)();",
											"//Pre-condition: call global function to create document",
											"setTimeout(function(){eval(globals.documentCreate)();}, 1000);",
											"setTimeout(function(){eval(globals.generateAccessTokenScopeEmpty)();}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{createdDocumentId}}\",\r\n  \"title\": \"{{newDocName}}\",\r\n  \"body\": \"{{updatedBody}}\",\r\n  \"categoryCode\": \"{{categoryCode}}\",\r\n  \"type\": \"BANK_DOCUMENT\"\r\n}"
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents/{{createdDocumentId}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"v1",
										"{{bcNo_security}}",
										"documents",
										"{{createdDocumentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update category with no scope (C55474746)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a1ea102-c7f3-4845-b4b6-07148d094943",
										"exec": [
											"const response = pm.response.json();",
											"const category = response.messages[0].category;",
											"const code = response.messages[0].code;",
											"const text = response.messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Update category with no scope fails with 'Access is denied' error'\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    //Response schema is correct",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);",
											"",
											"    //Request is forbbiden and error message is correct",
											"    pm.expect(category).to.eql(errorCategory);",
											"    pm.expect(code).to.eql(accessDeniedCode);",
											"    pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    pm.response.to.have.status(403);",
											"    ",
											"});",
											"",
											"//clean up",
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.categoryDelete)();}, 1500);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "922637aa-a20d-4ca4-b291-62ad053ec48d",
										"exec": [
											"/*",
											"const existingCategoryId = pm.environment.get(\"categoryId\");",
											"",
											"pm.expect(existingCategoryId).to.be.a('string', \"The categoryId is required to update the category\");",
											"*/",
											"const newCategoryName = \"Updated_category\" + Date.now();",
											"pm.environment.set(\"newCategoryName\", newCategoryName);",
											"",
											"eval(globals.generateAccessToken)();",
											"//Pre-condition: call global function to create category",
											"setTimeout(function(){eval(globals.categoryCreate)();}, 1000);",
											"setTimeout(function(){eval(globals.generateAccessTokenScopeEmpty)();}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{categoryId}}\",\r\n  \"sortCode\": \"{{sortCode}}\",\r\n  \"type\": \"BANK_DOCUMENT\",\r\n  \"visible\": true,\r\n  \"relevance\": 0,\r\n  \"name\": \"{{newCategoryName}}\",\r\n  \"description\": \"This is a description for an updated category\"\r\n}"
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/categories/{{categoryId}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"v1",
										"{{bcNo_security}}",
										"categories",
										"{{categoryId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update attachment with no scope (C55474749)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb37e697-c3a7-4cf0-9e96-29d3cd3066a8",
										"exec": [
											"const response = pm.response.json();",
											"const category = response.messages[0].category;",
											"const code = response.messages[0].code;",
											"const text = response.messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Update attachment with no scope fails with 'Access is denied' error'\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    //Response schema is correct",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);",
											"",
											"    //Request is forbbiden and error message is correct",
											"    pm.expect(category).to.eql(errorCategory);",
											"    pm.expect(code).to.eql(accessDeniedCode);",
											"    pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    pm.response.to.have.status(403);",
											"    ",
											"});",
											"",
											"//clean up",
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.documentDelete)();}, 1500);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "343ff3a3-eede-44a6-a6bf-1b554d5aa0b0",
										"exec": [
											"/*",
											"const existingAttachmentId = pm.environment.get(\"createdAttachmentId\");",
											"const existingDocumentId = pm.environment.get(\"createdDocWithAttachmentId\");",
											"",
											"pm.expect(existingAttachmentId).to.be.a('string', \"The attachmentId is required to update the attachment\");",
											"pm.expect(existingDocumentId).to.be.a('string', \"The documentId is required to update the attachment\");",
											"*/",
											"",
											"const newAttachmentName = \"Updated_Attachment_Name\" + Date.now();",
											"pm.environment.set(\"newAttachmentName\", newAttachmentName);",
											"",
											"//Create New Document With Added Attachment (NO CLEAN) must be executed first",
											"eval(globals.generateAccessTokenScopeEmpty)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{createdAttachmentId}}\",\r\n  \"mimetype\": \"application/pdf\",\r\n  \"name\": \"{{newAttachmentName}}\",\r\n  \"encoding\": \"base64\"\r\n}"
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents/{{createdDocWithAttachmentId}}/attachments/{{createdAttachmentId}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents",
										"{{createdDocWithAttachmentId}}",
										"attachments",
										"{{createdAttachmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete document with no scope (C55474744)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "324d45a7-b7c7-433a-ac76-82b5a2107a1e",
										"exec": [
											"const response = pm.response.json();",
											"const category = response.messages[0].category;",
											"const code = response.messages[0].code;",
											"const text = response.messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Delete document with no scope fails with 'Access is denied' error'\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    //Response schema is correct",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);",
											"",
											"    //Request is forbbiden and error message is correct",
											"    pm.expect(category).to.eql(errorCategory);",
											"    pm.expect(code).to.eql(accessDeniedCode);",
											"    pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    pm.response.to.have.status(403);",
											"",
											"});",
											"",
											"//clean up",
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.documentDelete)();}, 1500);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3dace932-d41b-4a9b-8986-bf8abc5ecf9e",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"//Pre-condition: call global function to create document",
											"setTimeout(function(){eval(globals.documentCreate)();}, 1000);",
											"setTimeout(function(){eval(globals.generateAccessTokenScopeEmpty)();}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents/{{createdDocumentId}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"v1",
										"{{bcNo_security}}",
										"documents",
										"{{createdDocumentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete category with no scope (C55474747)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2fa9e4eb-15ed-49af-9f16-8f2c08c576a0",
										"exec": [
											"const response = pm.response.json();",
											"const category = response.messages[0].category;",
											"const code = response.messages[0].code;",
											"const text = response.messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Delete category with no scope fails with 'Access is denied' error'\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    //Response schema is correct",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    ",
											"    //Request is forbbiden and error message is correct",
											"    pm.expect(category).to.eql(errorCategory);",
											"    pm.expect(code).to.eql(accessDeniedCode);",
											"    pm.expect(text).to.eql(accessDeniedText);",
											"    ",
											"    pm.response.to.have.status(403);",
											"    ",
											"});",
											"",
											"//clean up",
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.categoryDelete)();}, 1500);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8ece6de8-03ab-4a16-b697-18aee9639b4a",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"//Pre-condition: call global function to create category",
											"setTimeout(function(){eval(globals.categoryCreate)();}, 1000);",
											"setTimeout(function(){eval(globals.generateAccessTokenScopeEmpty)();}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/categories/{{categoryId}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"v1",
										"{{bcNo_security}}",
										"categories",
										"{{categoryId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "06ed3ed4-25a7-487e-9368-075c1a6a5d96",
						"type": "text/javascript",
						"exec": [
							"/*determine test case ID from request name*/",
							"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
							"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
							"",
							"/*add current test case ID to list of already executed tests*/",
							"eval(globals.testsExecuted)(testRailTestCases);",
							"pm.globals.set(\"testRailTestCases\", testRailTestCases);",
							"",
							"//store test case ID of current request for linking with Test Rail",
							"pm.globals.set(\"_tr_\" + request.name, testRailTestCases);",
							"",
							"//get session for access token",
							"eval(globals.sessionGet)();"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6b0eada0-bab8-434d-818a-0096ac629743",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "ToDo",
					"item": [
						{
							"name": "Get all documents on page=1 [C34306652]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "034a02aa-a0ec-4c95-9704-72e54f9cd06f",
										"exec": [
											"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
											"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
											"eval(globals.testsExecuted)(testRailTestCases);",
											"",
											"var requestsToRun = [",
											"        \"getDocumentsOnPage=1\"",
											"    ]; ",
											"    pm.globals.set(\"_tr_getDocumentsOnPage=1\",testRailTestCases);",
											"",
											"//specify related TestRail tests",
											"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
											"",
											"// Session initiate from PrS using eval()",
											"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3061250e-286c-401a-9616-75c4e146946d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "httpbin.org/uuid",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"uuid"
									]
								},
								"description": "PRODUCT-10393"
							},
							"response": []
						},
						{
							"name": "Get all documents on page=3 [C34306652]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "42b4469e-711b-413e-bc14-a5535f3ff9db",
										"exec": [
											"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
											"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
											"eval(globals.testsExecuted)(testRailTestCases);",
											"",
											"var requestsToRun = [",
											"        \"getDocumentsOnPage=3\"",
											"    ]; ",
											"    pm.globals.set(\"_tr_getDocumentsOnPage=3\",testRailTestCases);",
											"",
											"//specify related TestRail tests",
											"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
											"",
											"// Session initiate from PrS using eval()",
											"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bb6a173a-69a9-4979-8578-7157dba95c08",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "httpbin.org/uuid",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"uuid"
									]
								},
								"description": "PRODUCT-10393"
							},
							"response": []
						},
						{
							"name": "Get documents with startDate [C34306653]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9e109d59-6c5b-40ec-8cf6-d16e8ec719e1",
										"exec": [
											"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
											"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
											"eval(globals.testsExecuted)(testRailTestCases);",
											"",
											"var requestsToRun = [",
											"    \"getDocumentsWithStartDate\"",
											"];",
											"pm.globals.set(\"_tr_getDocumentsWithStartDate\", testRailTestCases);",
											"",
											"//specify related TestRail tests",
											"pm.globals.set(\"testRailTestCases\", testRailTestCases);",
											"",
											"// Session initiate from PrS using eval()",
											"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "eadd898d-a18d-4eb2-bd07-d24bbcbfc00b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "httpbin.org/uuid",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"uuid"
									]
								},
								"description": "PRODUCT-10393"
							},
							"response": []
						},
						{
							"name": "Get documents with endDate [C34306653]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "02e9a7a4-0d8e-43d7-8daa-1424a91962eb",
										"exec": [
											"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
											"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
											"eval(globals.testsExecuted)(testRailTestCases);",
											"",
											"var requestsToRun = [",
											"    \"getDocumentsWithEndDate\"",
											"];",
											"pm.globals.set(\"_tr_getDocumentsWithEndDate\", testRailTestCases);",
											"",
											"//specify related TestRail tests",
											"pm.globals.set(\"testRailTestCases\", testRailTestCases);",
											"",
											"// Session initiate from PrS using eval()",
											"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "93da1ef3-f7e8-46b1-8fed-8399c33bf096",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "httpbin.org/uuid",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"uuid"
									]
								},
								"description": "PRODUCT-10393"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "_Generate access token [C63838879]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b6f3f8e4-9a0b-417f-a788-3ff1b4fd77d5",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestToken\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getAuthTestToken\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "382f383e-2e42-441e-a20c-c333fceee370",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10392"
					},
					"response": []
				},
				{
					"name": "Generate access token with no scope [C55474713]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d6769c15-0982-4cf1-b67a-f4a165f2dbba",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestTokenWithNoScope\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getAuthTestTokenWithNoScope\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ec3774f8-6c74-4929-917d-392710189418",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10392"
					},
					"response": []
				},
				{
					"name": "Delete attachment with no scope [C55474750]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5179167a-8b73-476a-9d1b-758c2188dec3",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestToken\",",
									"        \"createNewDocument\",",
									"        \"addAttachmentToDocument\",",
									"        \"getAuthTestTokenWithNoScope\",",
									"        \"deleteAttachmentsWithNoScope\"",
									"    ];",
									"    pm.globals.set(\"_tr_getAuthTestToken\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_createNewDocument\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_addAttachmentToDocument\", \"[precondition]\");",
									"    pm.globals.set(\"_tr_getAuthTestTokenWithNoScope\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_deleteAttachmentsWithNoScope\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "01d0e4c3-e1f7-4e9b-81a1-d75ce4621b50",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "Generate access token with WRITE scope [C55474767]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "aec0795e-6465-40f8-9b01-d54ec4f64865",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestTokenWithWriteScope\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getAuthTestTokenWithWriteScope\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6bb6eb00-b3d0-4fd8-83ba-4e6766277e8d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10392"
					},
					"response": []
				},
				{
					"name": "Get all documents with wrong READ scope [C55474768]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "36a1fbc0-387b-45a8-8841-ce9100334107",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAllDocumentsWithWrongReadScope\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getAllDocumentsWithWrongReadScope\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d069908f-d69d-4616-a3d1-2fff98725e86",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10392"
					},
					"response": []
				},
				{
					"name": "Get document categories with wrong READ scope [C55474769]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c303f97f-8f72-471e-b613-327033cf55ab",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getDocumentCategoriesWithWrongReadScope\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getDocumentCategoriesWithWrongReadScope\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f1ec84da-0220-4e7c-9ee0-239610176382",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10392"
					},
					"response": []
				},
				{
					"name": "Get attachments with wrong READ scope [C55474770]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "12b6aa4e-015f-433f-8f4a-7cebe36a723a",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getDocumentAttachmentsWithWrongReadScope\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getDocumentAttachmentsWithWrongReadScope\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "55f81f04-ce8a-45c2-8ebb-7b264fa6f1ab",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10392"
					},
					"response": []
				},
				{
					"name": "Generate access token with READ scope [C55474771]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "875e8414-7bd0-431a-8e78-3e93e8d01db5",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestTokenWithReadScope\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getAuthTestTokenWithReadScope\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "577e2393-ef28-4b78-bced-2ffda48c9680",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10392"
					},
					"response": []
				},
				{
					"name": "Create document with wrong WRITE scope [C55474772]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "681f262b-694c-4cad-90f3-a90d3d812f30",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"createNewDocumentWithWrongWriteScope\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_createNewDocumentWithWrongWriteScope\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ade2cb8-8a05-43a4-80c1-058efa7c5e08",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "Create category with wrong WRITE scope [C55474773]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "defd9fb2-c8ae-4966-b532-25173d445945",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"createCategoryWithWrongWriteScope\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_createCategoryWithWrongWriteScope\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cde06c99-fafa-4d99-9869-b93af1eaaa72",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "Add attachment with wrong WRITE scope [C55474774]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "270aa217-be2d-4ac4-8935-523b6321fa5b",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestToken\",",
									"        \"createNewDocument\",",
									"        \"getAuthTestTokenWithReadScope\",",
									"        \"addAttachmentToDocumentWithWrongWriteScope\"",
									"    ];",
									"    pm.globals.set(\"_tr_getAuthTestToken\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_createNewDocument\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getAuthTestTokenWithReadScope\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_addAttachmentToDocumentWithWrongWriteScope\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "087ba057-2d35-4f07-bf55-3c895a69089c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "Update document with wrong WRITE scope [C55474775]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "613eafd2-aec5-4f6b-8c65-32320a55808c",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestToken\",",
									"        \"createNewDocument\",",
									"        \"getAuthTestTokenWithReadScope\",",
									"        \"updateDocumentWithWrongWriteScope\"",
									"    ];",
									"    pm.globals.set(\"_tr_getAuthTestToken\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_createNewDocument\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getAuthTestTokenWithReadScope\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_updateDocumentWithWrongWriteScope\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "eb1621cb-763a-4723-9ab5-f1c239bd3018",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "Update category with wrong WRITE scope [C55474776]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7696a89e-08e6-4edf-a893-1fbcbe354bf8",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"updateCategoryWithWrongWriteScope\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_updateCategoryWithWrongWriteScope\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0a4ab820-47bb-417b-880b-fbe9febed051",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "Update attachment with wrong WRITE scope [C55474777]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ad013615-6f03-4238-b6c5-5ad4b919bb38",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestToken\",",
									"        \"createNewDocumentWithAttachment\",",
									"        \"getAuthTestTokenWithReadScope\",",
									"        \"updateDocumentWithWrongWriteScope\"",
									"    ];",
									"    pm.globals.set(\"_tr_getAuthTestToken\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_createNewDocumentWithAttachment\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getAuthTestTokenWithReadScope\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_updateDocumentWithWrongWriteScope\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9e322289-88c1-409e-8aa3-9bdd3f462e3d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "Delete document with wrong WRITE scope [C55474778]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "be61965d-ff38-4540-bbdd-a6595c05e63f",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestToken\",",
									"        \"createNewDocument\",",
									"        \"getAuthTestTokenWithReadScope\",",
									"        \"deleteDocumentWithWrongWriteScope\"",
									"    ];",
									"    pm.globals.set(\"_tr_getAuthTestToken\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_createNewDocument\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getAuthTestTokenWithReadScope\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_deleteDocumentWithWrongWriteScope\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "19cbb80a-62a4-4f33-81ab-bf9ad142daa9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "Delete category with wrong WRITE scope [C55474779]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "198aa756-ce27-44e9-b689-6c15949a1261",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestToken\",",
									"        \"createCategory\",",
									"        \"getAuthTestTokenWithReadScope\",",
									"        \"deleteCategoryWithWrongWriteScope\"",
									"    ];",
									"    pm.globals.set(\"_tr_getAuthTestToken\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_createCategory\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getAuthTestTokenWithReadScope\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_deleteCategoryWithWrongWriteScope\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ec7c557a-d64f-4a27-8560-252c8c340939",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "Delete attachment with wrong WRITE scope [C55474780]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "072b8cfd-e445-46ce-8458-55a72e95b0b3",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestToken\",",
									"        \"createNewDocument\",",
									"        \"addAttachmentToDocument\",",
									"        \"getAuthTestTokenWithReadScope\",",
									"        \"deleteAttachmentsWithWrongWriteScope\"",
									"    ];",
									"    pm.globals.set(\"_tr_getAuthTestToken\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_createNewDocument\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_addAttachmentToDocument\", \"[precondition]\");",
									"    pm.globals.set(\"_tr_getAuthTestTokenWithReadScope\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_deleteAttachmentsWithWrongWriteScope\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b09eb9f0-6d2a-459a-890d-2d66ac64809b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "Create document with blacklisted attachment validation [C56083936]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bcfae759-cda9-433e-9ae4-d2a83bd5afdb",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    \"createDocumentWithBlacklistedAttachment\"",
									"];",
									"pm.globals.set(\"_tr_createDocumentWithBlacklistedAttachment\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\", testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a121768e-929c-41d2-9dc2-5e6e75d56ace",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "Create document with attachment exceeding file size validation [C56083935]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2a452dcf-ba27-4a03-a246-27789f879050",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    \"createDocumentWithAttachmentExceedingFileSizeLimit\"",
									"];",
									"pm.globals.set(\"_tr_createDocumentWithAttachmentExceedingFileSizeLimit\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\", testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "27328aea-4e25-45ca-b99d-e66eef1c0aaa",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "Create attachment exceeding file size validation [C64409837]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d085a13f-1f23-4808-a6be-bd703416f7fb",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    \"createNewDocument\",",
									"    \"createAttachmentExceedingFileSizeLimit\"",
									"];",
									"pm.globals.set(\"_tr_createNewDocument\", \"[preCondition]\");",
									"pm.globals.set(\"_tr_createAttachmentExceedingFileSizeLimit\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\", testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c0af7878-f2ff-4dad-83bb-194dd6004be9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "Document title length validation [C56083931]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a7c78ede-e901-45f0-8add-5714f53b1271",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    \"documentTitleLengthValidation\"",
									"];",
									"pm.globals.set(\"_tr_documentTitleLengthValidation\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\", testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a201493d-9af1-45da-a9af-85ab3daa2002",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "Document empty title validation [C56083930]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8e8eccfa-50f7-40d3-941b-2693da72cef5",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    \"documentEmptyTitleValidation\"",
									"];",
									"pm.globals.set(\"_tr_documentEmptyTitleValidation\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\", testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b5272245-eae3-441a-9b70-443897ef1336",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "Document empty body validation [C56083929]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6e51d43e-b9a1-4bc1-969a-d2da835bc8bf",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    \"documentEmptyBodyValidation\"",
									"];",
									"pm.globals.set(\"_tr_documentEmptyBodyValidation\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\", testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2cc9c44e-34ca-40f5-b9a0-57773161a49c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "Update document empty title validation [C56083932]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ff7083f6-159c-4947-9780-c3c9377bfce4",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    \"createNewDocument\",",
									"    \"updateDocumentEmptyTitleValidation\"",
									"];",
									"pm.globals.set(\"_tr_createNewDocument\", \"[preCondition]\");",
									"pm.globals.set(\"_tr_updateDocumentEmptyTitleValidation\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\", testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "55b53bf9-b62a-4b8a-bb8a-7f1c05f11d6c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "Update document empty body validation [C64409839]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "595c3f75-75c8-4952-b606-20e8feb00c81",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    \"createNewDocument\",",
									"    \"updateDocumentEmptyBodyValidation\"",
									"];",
									"pm.globals.set(\"_tr_createNewDocument\", \"[preCondition]\");",
									"pm.globals.set(\"_tr_updateDocumentEmptyTitleValidation\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\", testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "32e6b65e-8bff-4f9f-bb8a-0f308945d4f9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "Attachment empty file name validation [C56083950]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e6534569-162c-4efb-a04a-a0fbd109ac63",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    \"createNewDocumentWithAttachment\",",
									"    \"attachmentEmptyFileNameValidation\"",
									"];",
									"pm.globals.set(\"_tr_createNewDocumentWithAttachment\", \"[preCondition]\");",
									"pm.globals.set(\"_tr_attachmentEmptyFileNameValidation\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\", testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ac83db2a-4488-42ac-a438-ba8f9719069d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "_Test session close",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "596e189a-81aa-4085-b569-21b8dfa52d57",
								"exec": [
									"var requestsToRun = ",
									"    [",
									"        \"Clean TestRail Run\"",
									"    ]; ",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "585c87fd-174d-4061-a26b-d7036ec3c9ae",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				}
			]
		},
		{
			"name": "Requests",
			"item": [
				{
					"name": "Documents",
					"item": [
						{
							"name": "getAuthTestToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "611bcbb7-754a-45d8-8a89-ad9056c4506b",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
											"    pm.response.to.not.be.error;",
											"    pm.environment.set(\"tokenValue\", pm.response.text());",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b985df80-0504-4035-b38b-6e8d18abbaab",
										"exec": [
											"// This is only required if there are multiple \"getToken\" requests and some need to be skipped",
											"postman.setNextRequest(\"getAllDocuments\");",
											"",
											"console.log(\"Test Token url is: \" + pm.environment.get(\"env_security_testToken\"));",
											"",
											"// Set up pre-conditions with Chai Assertion library. https://www.chaijs.com/api/bdd/",
											"pm.expect(pm.environment.get(\"env_Documents\")).to.be.a('string', \"The env_Documents is not defined\");",
											"pm.expect(pm.environment.get(\"env_security_testToken\")).to.be.a('string', \"The env_security_testToken is not defined\");",
											"pm.expect(pm.environment.get(\"tenantId_security\")).to.be.a('string', \"The tenantId_security is not defined\");",
											"pm.expect(pm.environment.get(\"tenantName_security\")).to.be.a('string', \"The tenantName_security is not defined\");",
											"pm.expect(pm.environment.get(\"userName_documents\")).to.be.a('string', \"The userName_documents is not defined\");",
											"pm.expect(pm.environment.get(\"contractNo_documents\")).to.be.a('string', \"The contractNo_documents is not defined\");",
											"pm.expect(pm.environment.get(\"bcNo_security\")).to.be.a('string', \"The bcNo_security is not defined\");",
											"pm.expect(pm.environment.get(\"userId_documents\")).to.be.a('string', \"The userId_documents is not defined\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tenant_id\": {{tenantId_security}},\r\n  \"acsKey\": \"i6PiNObtdp2rCNW7mlV51BDSY4zAliSvBCyVsuML1000203567\",\r\n  \"tenant_name\": \"{{tenantName_security}}\",\r\n  \"user_name\": \"{{userId_documents}}\",\r\n  \"contractNo\": \"{{contractNo_documents}}\",\r\n  \"languageCode\": \"en\",\r\n  \"bcNo\": \"{{bcNo_security}}\",\r\n  \"authorities\": [\"DBAN_USER\"],\r\n  \"aud\": \"MESSAGING\",\r\n  \"client_id\": \"postman\",\r\n  \"user_id\": {{userId_documents}},\r\n  \"scope\": [\r\n  \t\"https://api.crealogix.com/dban\",\r\n    \"https://api.crealogix.com/messages/document.category.write\",\r\n    \"https://api.crealogix.com/messages/document.write\",\r\n    \"https://api.crealogix.com/messages/document.category.read\",\r\n    \"https://api.crealogix.com/messages/document.read\"],\r\n  \"loginName\": \"{{userId_documents}}\",\r\n  \"exp\": 32479694642,\r\n  \"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\r\n  \"iat\": 1553855569\r\n}"
								},
								"url": {
									"raw": "{{env_security_testToken}}",
									"host": [
										"{{env_security_testToken}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getAllDocuments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76e34fef-d546-4ea2-9bff-315f6d368699",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"const jsonResponse = pm.response.json();\r",
											"const documents = jsonResponse.embedded;\r",
											"const tenantId = documents[0].tenantId\r",
											"const userId = documents[0].customerId;\r",
											"const page = jsonResponse.page;\r",
											"const totalElementCount = page.totalElements;\r",
											"const totalPages = page.totalPages;\r",
											"const pageSize = page.size;\r",
											"\r",
											"\r",
											"pm.environment.set(\"totalElementCount\", totalElementCount);\r",
											"pm.environment.set(\"totalPages\", totalPages);\r",
											"pm.environment.set(\"pageSize\", pageSize);\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of documents is retrieved and response schema is validated\", function () {\r",
											"\r",
											"        var schemaValidationPassed = true;\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"        \r",
											"        pm.test(\"Response schema is correct\", () => {\r",
											"            schemaValidationPassed = eval(globals.schemaValidator)(\"documentsAllSchema\",jsonData);\r",
											"            pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        });         \r",
											"    \r",
											"        pm.response.to.have.status(200)\r",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"        && pm.expect(tenantId).to.equal(pm.environment.get(\"tenantId\"));\r",
											"});\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents"
									]
								}
							},
							"response": []
						},
						{
							"name": "createNewDocument",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f7e65f5-e60c-4c02-bbc1-ce2d03d72a0f",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.commonTests)();",
											"const jsonResponse = pm.response.json();",
											"const createdDocumentId = jsonResponse.id;",
											"const createdDocCategory = jsonResponse.category.code;",
											"const customerId = jsonResponse.customerId;",
											"const newDocTitle = jsonResponse.title;",
											"const newDocBody = jsonResponse.body;",
											"",
											"pm.environment.set(\"createdDocumentId\", createdDocumentId);",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" New document is created and response schema is validated\", function () {",
											"",
											"        var schemaValidationPassed = true;",
											"        var jsonData = JSON.parse(responseBody);",
											"        ",
											"        pm.test(\"Response schema is correct\", () => {",
											"            schemaValidationPassed = eval(globals.schemaValidator)(\"newDocumentSchema\",jsonData);",
											"            pm.expect(schemaValidationPassed).to.be.eql(true);",
											"        });         ",
											"    ",
											"        pm.response.to.have.status(201)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(newDocTitle).to.eql(pm.environment.get(\"newDocTitle\"))",
											"        && pm.expect(newDocBody).to.eql(pm.environment.get(\"newDocBody\"))",
											"        && pm.expect(createdDocCategory).to.eql(pm.environment.get(\"categoryCode\"));",
											"});",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ad63d287-3032-44a0-8b7c-5950f19b3ac0",
										"exec": [
											"const newDocTitle = \"Newly_Created_Document_Title\";",
											"const newDocBody = \"This is the newly created document body\";",
											"pm.environment.set(\"newDocBody\", newDocBody);",
											"pm.environment.set(\"newDocTitle\", newDocTitle);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": " multipart/form-data",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "{{newDocTitle}}",
											"type": "text"
										},
										{
											"key": "body",
											"value": "{{newDocBody}}",
											"type": "text"
										},
										{
											"key": "categoryCode",
											"value": "{{categoryCode}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"v1",
										"{{bcNo_security}}",
										"documents"
									]
								}
							},
							"response": []
						},
						{
							"name": "getDocumentByDocumentId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c381c532-d480-4e91-8013-a1f5e5f3acab",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"const jsonResponse = pm.response.json();\r",
											"const documentId = jsonResponse.id;\r",
											"const documentTitle = jsonResponse.title;\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Document by ID is retrieved and response schema is validated\", function () {\r",
											"\r",
											"        var schemaValidationPassed = true;\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"        \r",
											"        pm.test(\"Response schema is correct\", () => {\r",
											"            schemaValidationPassed = eval(globals.schemaValidator)(\"getDocumentByIdSchema\",jsonData);\r",
											"            pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        });         \r",
											"    \r",
											"        pm.response.to.have.status(200)\r",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\t\t\r",
											"\t\tpm.test(\"Document id is correct\", () => {\r",
											"\r",
											"\t\t\tpm.expect(jsonResponse).to.be.an('object');\r",
											"\t\t\tpm.expect(jsonResponse).to.not.be.empty;\r",
											"\t\t\tpm.expect(documentId).to.equal(pm.environment.get(\"createdDocumentId\"));\r",
											"\t\t\tpm.expect(documentTitle).to.equal(pm.environment.get(\"newDocTitle\"));\r",
											"\t\t});\r",
											"\t\t\r",
											"\t\tpm.response.to.have.status(200)\r",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"\t\t&& pm.expect(jsonResponse).to.be.an('object')\r",
											"\t\t&& pm.expect(documentId).to.equal(pm.environment.get(\"createdDocumentId\"))\r",
											"\t\t&& pm.expect(documentTitle).to.equal(pm.environment.get(\"newDocTitle\"));\r",
											"});\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents/{{createdDocumentId}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents",
										"{{createdDocumentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getDocumentsByDocumentTitle",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90b850e2-d4cf-4e3b-be5d-18bcdbae3178",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"const jsonResponse = pm.response.json();\r",
											"const response = jsonResponse.embedded;\r",
											"let titleCount = []; \r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Document by title is retrieved and response schema is validated\", function () {\r",
											"\r",
											"        var schemaValidationPassed = true;\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"        \r",
											"        pm.test(\"Response schema is correct\", () => {\r",
											"            schemaValidationPassed = eval(globals.schemaValidator)(\"getDocumentByTitleSchema\",jsonData);\r",
											"            pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        });         \r",
											"    \r",
											"        pm.response.to.have.status(200)\r",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\t\t\r",
											"\t\tpm.test(\"Document title is correct\", () => {\r",
											"\t\t\r",
											"\t\t//count all document with titles\r",
											"\t\tlet documentsCount = response.filter(response => response.title).length;\r",
											"\t\tif (documentsCount > 0) {\r",
											"\t\tfor(var i = 0;i<response.length;i++) {\r",
											"\t\t\t\ttitleCount.push(response[i].title);\r",
											"\t\t\t}\r",
											"\t\t}\r",
											"\t\tpm.expect(titleCount).to.include.members([pm.environment.get(\"newDocTitle\")]);\r",
											"\t\tpm.expect(response).to.be.an('array');\r",
											"\t\tpm.expect(response).to.not.be.empty;\r",
											"\t\tpm.expect(response).to.have.lengthOf.at.least(1);\r",
											"\t\t});\r",
											"\t\t\r",
											"\t\tpm.response.to.have.status(200)\r",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"\t\t&& pm.expect(jsonResponse).to.be.an('object')\r",
											"\t\t&& pm.expect(titleCount).to.include.members([pm.environment.get(\"newDocTitle\")])\r",
											"\t\t&& pm.expect(response).to.be.an('array')\r",
											"\t\t&& pm.expect(response).to.not.be.empty\r",
											"\t\t&& pm.expect(response).to.have.lengthOf.at.least(1);\r",
											"\t\t\r",
											"});\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents?title={{newDocTitle}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents"
									],
									"query": [
										{
											"key": "title",
											"value": "{{newDocTitle}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getDocumentsByTitleWord",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f256961b-01f8-4f75-995a-6c395d0bee63",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"const jsonResponse = pm.response.json();\r",
											"const response = jsonResponse.embedded;\r",
											"const documentMetaData = response[0];\r",
											"const title = (documentMetaData.title).slice(0, 5);\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Document with the searched title is retrieved and response schema is validated\", function () {\r",
											"\r",
											"        var schemaValidationPassed = true;\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"        \r",
											"        pm.test(\"Response schema is correct\", () => {\r",
											"            schemaValidationPassed = eval(globals.schemaValidator)(\"getDocumentByTitleSchema\",jsonData);\r",
											"            pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        }); \r",
											"\t\tpm.test(\"Searched title is found\", () => {\r",
											"\t\t\r",
											"\t\t\tpm.expect(response).to.be.an('array');\r",
											"\t\t\tpm.expect(response).to.not.be.empty;\r",
											"\t\t\tpm.expect(response).to.have.lengthOf.at.least(1);\r",
											"\t\t\tpm.expect(title).to.equal(pm.environment.get(\"titleWord\"));\r",
											"\r",
											"\t\t});       \r",
											"\t\t\t\r",
											"        pm.response.to.have.status(200)\r",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"\t\t&& pm.expect(response).to.be.an('array')\r",
											"\t\t&&pm.expect(response).to.not.be.empty\r",
											"\t\t&& pm.expect(response).to.have.lengthOf.at.least(1)\r",
											"\t\t&& pm.expect(title).to.equal(pm.environment.get(\"titleWord\"));\r",
											"});\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "32d5dc52-661f-4659-8847-51910caf1005",
										"exec": [
											"",
											"var titleWord = pm.environment.get(\"newDocTitle\").slice(0,5);",
											"",
											"",
											"pm.environment.set(\"titleWord\", titleWord);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents?title={{titleWord}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents"
									],
									"query": [
										{
											"key": "title",
											"value": "{{titleWord}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getDocumentsByDocumentBody",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2c692ae-518b-4b2f-a799-21e0f30a0665",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.commonTests)();",
											"const jsonResponse = pm.response.json();",
											"const response = jsonResponse.embedded;",
											"const documentMetaData = response[0];",
											"const documentId = documentMetaData.id;",
											"const body = documentMetaData.body;",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Document by body is retrieved and response schema is validated\", function () {",
											"",
											"        var schemaValidationPassed = true;",
											"        var jsonData = JSON.parse(responseBody);",
											"        ",
											"        pm.test(\"Response schema is correct\", () => {",
											"            schemaValidationPassed = eval(globals.schemaValidator)(\"getDocumentByTitleSchema\",jsonData);",
											"            pm.expect(schemaValidationPassed).to.be.eql(true);",
											"        });",
											"        pm.test(\"Document title is correct\", () => {",
											"",
											"        pm.expect(response).to.be.an('array');",
											"        pm.expect(response).to.not.be.empty;",
											"        pm.expect(response).to.have.lengthOf.at.least(1);",
											"        pm.expect(documentId).to.equal(pm.environment.get(\"createdDocumentId\"));",
											"        pm.expect(body).to.equal(pm.environment.get(\"newDocBody\"));",
											"        });",
											"    ",
											"        pm.response.to.have.status(200)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        &&  pm.expect(response).to.be.an('array')",
											"        && pm.expect(response).to.not.be.empty",
											"        && pm.expect(response).to.have.lengthOf.at.least(1)",
											"        && pm.expect(documentId).to.equal(pm.environment.get(\"createdDocumentId\"))",
											"        && pm.expect(body).to.equal(pm.environment.get(\"newDocBody\"));",
											"});",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents?body={{newDocBody}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents"
									],
									"query": [
										{
											"key": "body",
											"value": "{{newDocBody}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getDocumentsOnPage=0",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "567a65ab-3c77-4e1f-87e1-1127cb2fc561",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"const jsonResponse = pm.response.json();\r",
											"const page = jsonResponse.page;\r",
											"const pageSize = page.size;\r",
											"const totalElements = page.totalElements;\r",
											"const totalPages = page.totalPages;\r",
											"const pageNumber = page.number;\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of documents is retrieved and response schema is validated\", function () {\r",
											"\r",
											"        var schemaValidationPassed = true;\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"        \r",
											"        pm.test(\"Response schema is correct\", () => {\r",
											"            schemaValidationPassed = eval(globals.schemaValidator)(\"documentsAllSchema\",jsonData);\r",
											"            pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        });\r",
											"\r",
											"\t\tpm.test(\"Pageination is correct\", () => {\r",
											"\t\t\r",
											"\t\t\tpm.expect(page).to.be.an('object');\r",
											"\t\t\tpm.expect(page).to.not.be.empty;\r",
											"\t\t\tpm.expect(pageSize).to.equal(pm.environment.get(\"pageSize\"));\r",
											"\t\t\tpm.expect(totalElements).to.equal(pm.environment.get(\"totalElementCount\"));\r",
											"\t\t\tpm.expect(totalPages).to.equal(pm.environment.get(\"totalPages\"));\r",
											"\t\t\tpm.expect(pageNumber).to.equal(0);\r",
											"\r",
											"\t\t});\t\t\r",
											"    \r",
											"        pm.response.to.have.status(200)\r",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"\t\t&& pm.expect(page).to.be.an('object')\r",
											"\t\t&& pm.expect(page).to.not.be.empty\r",
											"\t\t&& pm.expect(pageSize).to.equal(pm.environment.get(\"pageSize\"))\r",
											"\t\t&& pm.expect(totalElements).to.equal(pm.environment.get(\"totalElementCount\"))\r",
											"\t\t&& pm.expect(totalPages).to.equal(pm.environment.get(\"totalPages\"))\r",
											"\t\t&& pm.expect(pageNumber).to.equal(0);\r",
											"});\r",
											"   \r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents?page=0",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getDocumentsOnPage=1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed0e893d-5904-416e-b693-675dd3e9bd5d",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"const jsonResponse = pm.response.json();\r",
											"const page = jsonResponse.page;\r",
											"const pageSize = page.size;\r",
											"const totalElements = page.totalElements;\r",
											"const totalPages = page.totalPages;\r",
											"const pageNumber = page.number;\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of documents is retrieved and response schema is validated\", function () {\r",
											"\r",
											"        var schemaValidationPassed = true;\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"        \r",
											"        pm.test(\"Response schema is correct\", () => {\r",
											"            schemaValidationPassed = eval(globals.schemaValidator)(\"documentsAllSchema\",jsonData);\r",
											"            pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        });\r",
											"\r",
											"\t\tpm.test(\"Pageination is correct\", () => {\r",
											"\t\t\r",
											"\t\t\tpm.expect(page).to.be.an('object');\r",
											"\t\t\tpm.expect(page).to.not.be.empty;\r",
											"\t\t\tpm.expect(pageSize).to.equal(pm.environment.get(\"pageSize\"));\r",
											"\t\t\tpm.expect(totalElements).to.equal(pm.environment.get(\"totalElementCount\"));\r",
											"\t\t\tpm.expect(totalPages).to.equal(pm.environment.get(\"totalPages\"));\r",
											"\t\t\tpm.expect(pageNumber).to.equal(1);\r",
											"\r",
											"\t\t});\t\t\r",
											"    \r",
											"        pm.response.to.have.status(200)\r",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"\t\t&& pm.expect(page).to.be.an('object')\r",
											"\t\t&& pm.expect(page).to.not.be.empty\r",
											"\t\t&& pm.expect(pageSize).to.equal(pm.environment.get(\"pageSize\"))\r",
											"\t\t&& pm.expect(totalElements).to.equal(pm.environment.get(\"totalElementCount\"))\r",
											"\t\t&& pm.expect(totalPages).to.equal(pm.environment.get(\"totalPages\"))\r",
											"\t\t&& pm.expect(pageNumber).to.equal(1);\r",
											"});\r",
											"   \r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents?page=1",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getDocumentsOnPage=3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "957d3d84-bb2b-4142-9b36-c60099596383",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"const jsonResponse = pm.response.json();\r",
											"const message = jsonResponse._messages[0];\r",
											"const category = message.category;\r",
											"const errorText = message.text;\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Document by body is retrieved and response schema is validated\", function () {\r",
											"\r",
											"        var schemaValidationPassed = true;\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"        \r",
											"        pm.test(\"Response schema is correct\", () => {\r",
											"            schemaValidationPassed = eval(globals.schemaValidator)(\"noDocumentOnPageSchema\",jsonData);\r",
											"            pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        });\r",
											"\t\tpm.test(\"Category and error text is correct\", () => {\r",
											"\t\t\t\r",
											"\t\t\tpm.expect(category).to.equal(\"ERROR\");\r",
											"\t\t\tpm.expect(errorText).to.equal(\"No documents found on page: 3\");\r",
											"\t\t});\t\t\r",
											"    \r",
											"        pm.response.to.have.status(404)\r",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"\t\t&& pm.expect(category).to.equal(\"ERROR\")\r",
											"\t\t&& pm.expect(errorText).to.equal(\"No documents found on page: 3\");\r",
											"});\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents?page=3",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents"
									],
									"query": [
										{
											"key": "page",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getDocumentsWithPageSize",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25d4c003-96d7-4fdc-9352-37dae9315bbb",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"const jsonResponse = pm.response.json();\r",
											"const page = jsonResponse.page;\r",
											"const pageSize = page.size;\r",
											"const totalElements = page.totalElements;\r",
											"const pageNumber = page.number;\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of documents is retrieved and response schema is validated\", function () {\r",
											"\r",
											"\tvar schemaValidationPassed = true;\r",
											"\tvar jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\tpm.test(\"Response schema is correct\", () => {\r",
											"\t\tschemaValidationPassed = eval(globals.schemaValidator)(\"documentsAllSchema\", jsonData);\r",
											"\t\tpm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\t});\r",
											"\tpm.test(\"Pageination is correct\", () => {\r",
											"\r",
											"\t\tpm.expect(page).to.be.an('object');\r",
											"\t\tpm.expect(page).to.not.be.empty;\r",
											"\t\tpm.expect(pageSize).to.equal(parseInt(pm.environment.get(\"newPageSize\")));\r",
											"\t\tpm.expect(totalElements).to.have.at.least(23);\r",
											"\t\tpm.expect(pageNumber).to.equal(0);\r",
											"\r",
											"\t});\r",
											"\tpm.response.to.have.status(200)\r",
											"\t\t&& pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"\t\t&& pm.expect(page).to.be.an('object')\r",
											"\t\t&& pm.expect(page).to.not.be.empty\r",
											"\t\t&& pm.expect(pageSize).to.equal(parseInt(pm.environment.get(\"newPageSize\")))\r",
											"\t\t&& pm.expect(totalElements).to.have.at.least(23)\r",
											"\t\t&& pm.expect(pageNumber).to.equal(0);\r",
											"});\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "193d572a-64d2-4329-8e34-3dfe065e8704",
										"exec": [
											"var newPageSize = pm.environment.get(\"pageSize\");",
											"newPageSize += 20;",
											"",
											"pm.environment.set(\"newPageSize\", newPageSize); ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents?size={{newPageSize}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents"
									],
									"query": [
										{
											"key": "size",
											"value": "{{newPageSize}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getDocumentsWithStartAndEndDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ede0a46-03d5-4329-9b17-8a3375066379",
										"exec": [
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Documents with searched published and read date are shown and response schema is validated\", function () {",
											"",
											"        var schemaValidationPassed = true;",
											"        var jsonData = JSON.parse(responseBody);",
											"        ",
											"        pm.test(\"Response schema is correct\", () => {",
											"            schemaValidationPassed = eval(globals.schemaValidator)(\"documentsAllSchema\",jsonData);",
											"            pm.expect(schemaValidationPassed).to.be.eql(true);",
											"        });",
											"        pm.response.to.have.status(200)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true);",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents?startDate=2020-01-01&endDate=2020-12-31",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents"
									],
									"query": [
										{
											"key": "startDate",
											"value": "2020-01-01"
										},
										{
											"key": "endDate",
											"value": "2020-12-31"
										},
										{
											"key": "page",
											"value": "2",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getDocumentsWithStartDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e40186c-2deb-4f38-9cec-eecf7ce1885d",
										"exec": [
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Documents with searched published are shown and response schema is validated\", function () {",
											"",
											"        var schemaValidationPassed = true;",
											"        var jsonData = JSON.parse(responseBody);",
											"        ",
											"        pm.test(\"Response schema is correct\", () => {",
											"            schemaValidationPassed = eval(globals.schemaValidator)(\"documentsAllSchema\",jsonData);",
											"            pm.expect(schemaValidationPassed).to.be.eql(true);",
											"        });",
											"        pm.response.to.have.status(200)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true);",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents?startDate=2020-01-01&sortBy=publishingDate:asc",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents"
									],
									"query": [
										{
											"key": "startDate",
											"value": "2020-01-01"
										},
										{
											"key": "sortBy",
											"value": "publishingDate:asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getDocumentsWithEndDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a7f6b79-fb5e-4bc5-9d9f-7a209f3f25c3",
										"exec": [
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Documents with searched published are shown and response schema is validated\", function () {",
											"",
											"        var schemaValidationPassed = true;",
											"        var jsonData = JSON.parse(responseBody);",
											"        ",
											"        pm.test(\"Response schema is correct\", () => {",
											"            schemaValidationPassed = eval(globals.schemaValidator)(\"documentsAllSchema\",jsonData);",
											"            pm.expect(schemaValidationPassed).to.be.eql(true);",
											"        });",
											"        pm.response.to.have.status(200)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true);",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents?endDate=2020-12-31&sortBy=publishingDate:desc",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents"
									],
									"query": [
										{
											"key": "endDate",
											"value": "2020-12-31"
										},
										{
											"key": "sortBy",
											"value": "publishingDate:desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getDocumentsSortedByPublishingDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7531c531-09bb-4688-9b3d-18bc4b6f5233",
										"exec": [
											"const jsonResponse = pm.response.json();",
											"const response = jsonResponse.embedded;",
											"let publishedDates = [];",
											"let sortedPublishedDates = [];",
											"let unsortedPublishedDates = [];",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Document are sorted by publishing date and response schema is validated\", function () {",
											"",
											"\tvar schemaValidationPassed = true;",
											"\tvar jsonData = JSON.parse(responseBody);",
											"",
											"\tpm.response.to.have.status(200)",
											"\t\t&& pm.expect(schemaValidationPassed).to.be.eql(true);",
											"",
											"\tpm.test(\"Sorting by publishing is correct\", () => {",
											"",
											"\t\t//count all document with titles",
											"\t\tlet documentsCount = response.filter(response => response.publishingDate).length;",
											"\t\tif (documentsCount > 0) {",
											"\t\t\tfor (var i = 0; i < response.length; i++) {",
											"\t\t\t\tpublishedDates.push(response[i].publishingDate);",
											"\t\t\t}",
											"\t\t}",
											"\t\t//make a copy of unsorted array",
											"\t\tunsortedPublishedDates = [...publishedDates];",
											"\t\tsortePublishedDates = publishedDates.sort();",
											"\t\tpm.expect(unsortedPublishedDates).to.eql(sortePublishedDates);",
											"\t\tpm.expect(response).to.be.an('array');",
											"\t\tpm.expect(response).to.not.be.empty;",
											"\t\tpm.expect(response).to.have.lengthOf.at.least(1);",
											"\t});",
											"",
											"\tpm.response.to.have.status(200)",
											"\t\t&& pm.expect(schemaValidationPassed).to.be.eql(true)",
											"\t\t&& pm.expect(jsonResponse).to.be.an('object')",
											"\t\t&& pm.expect(publishedDates).to.equal(publishedDates.sort())",
											"\t\t&& pm.expect(response).to.be.an('array')",
											"\t\t&& pm.expect(response).to.not.be.empty",
											"\t\t&& pm.expect(response).to.have.lengthOf.at.least(1);",
											"",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents?sortBy=publishingDate:asc",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "publishingDate:asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getDocumentsSortedByTitle",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6782f96c-9736-49cc-b7f6-2c753fad8c6d",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"const jsonResponse = pm.response.json();\r",
											"const response = jsonResponse.embedded;\r",
											"let titleCount = []; \r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Document are sorted by publishing date and response schema is validated\", function () {\r",
											"\r",
											"        var schemaValidationPassed = true;\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"        pm.response.to.have.status(200)\r",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\t\t\r",
											"\t\tpm.test(\"Sorting by publishing is correct\", () => {\r",
											"\t\t\r",
											"\t\t//count all document with titles\r",
											"\t\tlet documentsCount = response.filter(response => response.title).length;\r",
											"\t\tif (documentsCount > 0) {\r",
											"\t\tfor(var i = 0;i<response.length;i++) {\r",
											"\t\t\t\ttitleCount.push(response[i].title);\r",
											"\t\t\t}\r",
											"\t\t}\r",
											"\t\tpm.expect(titleCount).to.equal(titleCount.sort());\r",
											"\t\tpm.expect(response).to.be.an('array');\r",
											"\t\tpm.expect(response).to.not.be.empty;\r",
											"\t\tpm.expect(response).to.have.lengthOf.at.least(1);\r",
											"\t\t});\r",
											"\r",
											"\t\tpm.response.to.have.status(200)\r",
											"\t\t&& pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"\t\t&& pm.expect(jsonResponse).to.be.an('object')\r",
											"\t\t&& pm.expect(titleCount).to.equal(titleCount.sort())\r",
											"\t\t&& pm.expect(response).to.be.an('array')\r",
											"\t\t&& pm.expect(response).to.not.be.empty\r",
											"\t\t&& pm.expect(response).to.have.lengthOf.at.least(1);\r",
											"\t\t\r",
											"});\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents?sortBy=title:asc",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents"
									],
									"query": [
										{
											"key": "size",
											"value": "5",
											"disabled": true
										},
										{
											"key": "size",
											"value": "20",
											"disabled": true
										},
										{
											"key": "sortBy",
											"value": "title:asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "updateDocumentByDocumentId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef818d01-72a4-4eee-9f18-208ca5b52bd2",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.commonTests)();",
											"const jsonResponse = pm.response.json();",
											"const updatedDocumentId = jsonResponse.id;",
											"const updatedDocumentCatCode = jsonResponse.category.code;",
											"const updatedDocumentTitle = jsonResponse.title;",
											"const updatedDocumentBody = jsonResponse.body;",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Document is updated and response schema is validated\", function () {",
											"",
											"        var schemaValidationPassed = true;",
											"        var jsonData = JSON.parse(responseBody);",
											"        ",
											"        pm.test(\"Response schema is correct\", () => {",
											"            schemaValidationPassed = eval(globals.schemaValidator)(\"newDocumentSchema\",jsonData);",
											"            pm.expect(schemaValidationPassed).to.be.eql(true);",
											"        });         ",
											"    ",
											"        pm.response.to.have.status(200)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(updatedDocumentId).to.eql(pm.environment.get(\"createdDocumentId\"))",
											"        && pm.expect(updatedDocumentCatCode).to.eql(pm.environment.get(\"updatedCatCode\"))",
											"        && pm.expect(updatedDocumentTitle).to.eql(pm.environment.get(\"updatedDocName\"))",
											"        && pm.expect(updatedDocumentBody).to.eql(pm.environment.get(\"updatedBody\"));",
											"});",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c86b2c31-6dfd-4183-abad-4955d850fcc7",
										"exec": [
											"const createdDocumentId = pm.environment.get(\"createdDocumentId\");",
											"",
											"pm.expect(createdDocumentId).to.be.a('string', \"The documentId is required to update the document\");",
											"",
											"const updatedDocName = \"Updated_document \" + Date.now();",
											"const updatedBody = \"This is the newly updated document body\";",
											"const updatedCatCode = \"TCsteuerbe\";",
											"",
											"pm.environment.set(\"updatedBody\", updatedBody);",
											"pm.environment.set(\"updatedDocName\", updatedDocName);",
											"pm.environment.set(\"updatedCatCode\", updatedCatCode);",
											"",
											"console.log(`Updating document to ${updatedDocName}`);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{createdDocumentId}}\",\r\n  \"title\": \"{{updatedDocName}}\",\r\n  \"body\": \"{{updatedBody}}\",\r\n  \"categoryCode\": \"{{updatedCatCode}}\",\r\n  \"type\": \"BANK_DOCUMENT\"\r\n}"
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents/{{createdDocumentId}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents",
										"{{createdDocumentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteDocumentByDocumentId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5a6cf8fb-8358-4a71-a6e9-be3e92515737",
										"exec": [
											"const jsonResponse = pm.response.json();",
											"const response = jsonResponse.messages[0];",
											"const category = response.category;",
											"const code = response.code;",
											"const text = response.text;",
											"const path = response.path;",
											"const deletedDocumentId = path.slice(44, 128);",
											"",
											"pm.environment.set(\"deletedDocumentId\", deletedDocumentId);",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Document is deleted and response schema is validated\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"    ",
											"    //Response schema is correct",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"deleteDocument\",jsonData);",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);",
											"",
											"    //Document is deleted\"",
											"    pm.expect(category).to.equal('INFO');",
											"    pm.expect(code).to.equal(\"200\");",
											"    pm.expect(text).to.equal(\"The resource was deleted successfully.\");",
											"",
											"    pm.response.to.have.status(200);",
											"    pm.expect(deletedDocumentId).to.equal(pm.environment.get(\"createdDocumentId\"));",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9ce121ff-1a81-4f97-be03-8c777c6571cc",
										"exec": [
											"eval(globals.generateAccessToken)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/v1/{{bcNo_security}}/documents/{{createdDocumentId}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"v1",
										"{{bcNo_security}}",
										"documents",
										"{{createdDocumentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getDeletedDocumentByDocumentId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5422d6be-1f90-4e3d-a74e-9a3b0686fab8",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"const jsonResponse = pm.response.json();\r",
											"const documentId = jsonResponse.id;\r",
											"const documentTitle = jsonResponse.title;\r",
											"const isDeleted = jsonResponse.deleted;\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Deleted document by ID is retrieved and response schema is validated\", function () {\r",
											"\r",
											"        var schemaValidationPassed = true;\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"        \r",
											"        pm.test(\"Response schema is correct\", () => {\r",
											"            schemaValidationPassed = eval(globals.schemaValidator)(\"getDocumentByIdSchema\",jsonData);\r",
											"            pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        });         \r",
											"    \r",
											"        pm.response.to.have.status(200)\r",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\t\t\r",
											"\t\tpm.test(\"Document id is correct\", () => {\r",
											"\r",
											"\t\t\tpm.expect(jsonResponse).to.be.an('object');\r",
											"\t\t\tpm.expect(jsonResponse).to.not.be.empty;\r",
											"\t\t\tpm.expect(documentId).to.equal(pm.environment.get(\"deletedDocumentId\"));\r",
											"\t\t\tpm.expect(documentTitle).to.equal(pm.environment.get(\"newDocTitle\"));\r",
											"\t\t\tpm.expect(isDeleted).to.equal(true);\r",
											"\t\t});\r",
											"\t\t\r",
											"\t\tpm.response.to.have.status(200)\r",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"\t\t&& pm.expect(jsonResponse).to.be.an('object')\r",
											"\t\t&& pm.expect(documentId).to.equal(pm.environment.get(\"deletedDocumentId\"))\r",
											"\t\t&& pm.expect(documentTitle).to.equal(pm.environment.get(\"newDocTitle\"))\r",
											"\t\t&& pm.expect(isDeleted).to.equal(true);\r",
											"});\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents/{{deletedDocumentId}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents",
										"{{deletedDocumentId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Categories",
					"item": [
						{
							"name": "getDocumentCategories",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0ec64a8-c849-4838-82b9-f3cdb826bedb",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"const jsonResponse = pm.response.json();\r",
											"const response = jsonResponse[0];\r",
											"const categoryId = response.id;\r",
											"const tenantId = response.tenantId;\r",
											"const categoryCode = response.code;\r",
											"const sortCode = response.sortCode;\r",
											"const categoryType = response.type;\r",
											"const categoryName = response.name;\r",
											"const description = response.description;\r",
											"const totalDocumentsNumber = response.totalDocuments;\r",
											"let allCategoryType = [];\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Document categories are shown and response schema is validated\", function () {\r",
											"\r",
											"        var schemaValidationPassed = true;\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"        \r",
											"        pm.test(\"Response schema is correct\", () => {\r",
											"            schemaValidationPassed = eval(globals.schemaValidator)(\"getCategoriesSchema\",jsonData);\r",
											"            pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        }); \r",
											"\t\tpm.test(\"Category response is correct\", () => {\r",
											"\t\t\r",
											"\t\t\tpm.environment.set(\"categoryId\", categoryId);\r",
											"\t\t\tpm.environment.set(\"categoryCode\", categoryCode);\r",
											"\t\t\tpm.environment.set(\"sortCode\", sortCode);\r",
											"\t\t\tpm.environment.set(\"categoryType\", categoryType);\r",
											"\t\t\tpm.environment.set(\"categoryName\", categoryName);\r",
											"\t\t\tpm.environment.set(\"description\", description);\r",
											"\t\t\tpm.environment.set(\"totalDocumentsNumber\", totalDocumentsNumber);\r",
											"\r",
											"\t\t\tpm.expect(description).to.equal(\"Test Category Father\");\r",
											"\t\t\tpm.expect(sortCode).to.equal(\"20\");\r",
											"\t\t\tpm.expect(jsonResponse).to.be.an('array');\r",
											"\t\t\tpm.expect(jsonResponse).to.not.be.empty;\r",
											"\t\t\tpm.expect(jsonResponse).to.have.lengthOf.at.least(7);\r",
											"\t\t\tpm.expect(response).to.have.property(\"id\");\r",
											"\t\t\tpm.expect(response).to.have.property(\"description\");\r",
											"\t\t\tpm.expect(response).to.have.property('sortCode');\r",
											"\t\t\t\r",
											"\t\t\t //count all category codes\r",
											"\t\t\tlet categoriesCount = jsonResponse.filter(jsonResponse => jsonResponse.code).length;\r",
											"\t\t\tlet allCategoryCode = []; \r",
											"\t\t\tif (categoriesCount > 0) {\r",
											"\t\t\tfor(var i = 0;i<jsonResponse.length;i++) {\r",
											"\t\t\t\t\tallCategoryCode.push(jsonResponse[i].code);\r",
											"\t\t\t\t}\r",
											"\t\t\t}\r",
											"\t\t\tpm.expect(allCategoryCode).to.include.members([\"TCFather\", \"TCGrfather\", \"TCSon\", \"TCabankbel\", \"TCbeilagen\", \"TCmitteilu\", \"TCsteuerbe\"]);\r",
											"\t\t\t\r",
											"\t\t\t//count all category typea\r",
											"\t\t\tlet categoryTypeCount = jsonResponse.filter(jsonResponse => jsonResponse.type).length;\r",
											"\t\t\tif (categoryTypeCount > 0) {\r",
											"\t\t\t\tfor(var j = 0; j < jsonResponse.length; j++) {\r",
											"\t\t\t\t\tallCategoryType.push(jsonResponse[j].type);\r",
											"\t\t\t\t}\r",
											"\t\t\t}\r",
											"\t\t\tpm.expect(allCategoryType).to.include.members([\"BANK_DOCUMENT\"]);\r",
											"\r",
											"\t\t});       \r",
											"\t\t\t\r",
											"        pm.response.to.have.status(200)\r",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"\t\t&& pm.expect(description).to.equal(\"Test Category Father\")\r",
											"\t\t&& pm.expect(sortCode).to.equal(\"20\")\r",
											"\t\t&& pm.expect(jsonResponse).to.be.an('array')\r",
											"\t\t&& pm.expect(jsonResponse).to.not.be.empty\r",
											"\t\t&& pm.expect(jsonResponse).to.have.lengthOf.at.least(7)\r",
											"\t\t&& pm.expect(response).to.have.property(\"id\")\r",
											"\t\t&& pm.expect(response).to.have.property(\"description\")\r",
											"\t\t&& pm.expect(response).to.have.property('sortCode')\r",
											"\t\t&& pm.expect(allCategoryType).to.include.members([\"BANK_DOCUMENT\"]);\r",
											"});\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									},
									{
										"key": "Accept",
										"value": "application/hal+json,application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/categories",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "getCategoryByCategoryId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de618758-2c9d-4528-9fa3-fb55cec64519",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"const jsonResponse = pm.response.json();\r",
											"const categoryId = jsonResponse.id;\r",
											"const name = jsonResponse.name;\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Category by id is retrieved and response schema is validated\", function () {\r",
											"\r",
											"        var schemaValidationPassed = true;\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"        \r",
											"        pm.test(\"Response schema is correct\", () => {\r",
											"            schemaValidationPassed = eval(globals.schemaValidator)(\"getCategoryByIdSchema\",jsonData);\r",
											"            pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        }); \r",
											"\t\tpm.test(\"CategoryId is correct\", () => {\r",
											"\t\t\t\r",
											"\t\t\tpm.expect(categoryId).to.equal(pm.environment.get(\"categoryId\"));\r",
											"            pm.expect(name).to.equal(pm.environment.get(\"categoryName\"));\r",
											"\t\t});       \r",
											"\t\t\t\r",
											"        pm.response.to.have.status(200)\r",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"\t\t&& pm.expect(categoryId).to.equal(pm.environment.get(\"categoryId\"))\r",
											"\t\t&& pm.expect(name).to.equal(pm.environment.get(\"categoryName\"));\r",
											"});\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/categories/{{categoryId}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"categories",
										"{{categoryId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getCategoryByCategorySortCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49dcd69c-ef93-4704-b918-8efac9bd812a",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"const jsonResponse = pm.response.json();\r",
											"const category = jsonResponse[0];\r",
											"const code = category.code;\r",
											"const catName = category.name;\r",
											"const totalDocuments = category.totalDocuments;\r",
											"const catId = category.id;\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Document category is shown and response schema is validated\", function () {\r",
											"\r",
											"        var schemaValidationPassed = true;\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"        \r",
											"        pm.test(\"Response schema is correct\", () => {\r",
											"            schemaValidationPassed = eval(globals.schemaValidator)(\"getCategoryByIdSchema\",jsonData);\r",
											"            pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        }); \r",
											"\t\tpm.test(\"Category code is correct\", () => {\r",
											"\r",
											"\t\t\tpm.expect(jsonResponse).to.be.an('array');\r",
											"\t\t\tpm.expect(jsonResponse).to.not.be.empty;\r",
											"\t\t\tpm.expect(totalDocuments).to.equal(pm.environment.get(\"totalDocumentsNumber\"));\r",
											"\t\t\tpm.expect(catName).to.equal(pm.environment.get(\"categoryName\"));\r",
											"\t\t\tpm.expect(code).to.equal(pm.environment.get(\"categoryCode\"));\r",
											"\t\t\tpm.expect(catId).to.equal(pm.environment.get(\"categoryId\"));\r",
											"\r",
											"\t\t});\r",
											"        pm.response.to.have.status(200)\r",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"\t\t&& pm.expect(jsonResponse).to.be.an('array')\r",
											"\t\t&& pm.expect(jsonResponse).to.not.be.empty\r",
											"\t\t&& pm.expect(totalDocuments).to.equal(pm.environment.get(\"totalDocumentsNumber\"))\r",
											"\t\t&& pm.expect(catName).to.equal(pm.environment.get(\"categoryName\"))\r",
											"\t\t&& pm.expect(code).to.equal(pm.environment.get(\"categoryCode\"))\r",
											"\t\t&& pm.expect(catId).to.equal(pm.environment.get(\"categoryId\"));\r",
											"});\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/categories?sortCode={{sortCode}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"categories"
									],
									"query": [
										{
											"key": "sortCode",
											"value": "{{sortCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getDocumentByCategoryCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75ae08d9-8096-400f-94d3-2b7585ad1e5f",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"const jsonResponse = pm.response.json();\r",
											"const documents = jsonResponse.embedded;\r",
											"const category = documents[0].category;\r",
											"const catName = category.name;\r",
											"const catId = category.id;\r",
											"const page = jsonResponse.page;\r",
											"const totalDocuments = page.totalElements;\r",
											"let allCategoryCode = [];\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \"Document category code is correct\", function () {\r",
											"\r",
											"        var schemaValidationPassed = true;\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"        \r",
											"        pm.test(\"Response schema is correct\", () => {\r",
											"            schemaValidationPassed = eval(globals.schemaValidator)(\"getDocumentByCategory\",jsonData);\r",
											"            pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        });         \r",
											"    \r",
											"        pm.response.to.have.status(200)\r",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\t\t\r",
											"\t\tpm.test(\"Category code is correct\", () => {\r",
											"\t\t\tlet categoriesCodeCount = documents.filter(documents => documents.category).length; \r",
											"\t\t\tif (categoriesCodeCount > 0) {\r",
											"\t\t\tfor(var i = 0;i<documents.length;i++) {\r",
											"\t\t\t\t\tallCategoryCode.push(documents[i].category.code);\r",
											"\t\t\t\t}\r",
											"\t\t\t}\r",
											"\t\t\tpm.expect(allCategoryCode).to.include.members([pm.environment.get(\"categoryCode\")]);\r",
											"\t\t\tpm.expect(documents).to.be.an('array');\r",
											"\t\t\tpm.expect(documents).to.not.be.empty;\r",
											"\t\t\tpm.expect(totalDocuments).to.equal(pm.environment.get(\"totalDocumentsNumber\"));\r",
											"\t\t\tpm.expect(catName).to.equal(pm.environment.get(\"categoryName\"));\r",
											"\t\t});\r",
											"\t\t\r",
											"\t\tpm.response.to.have.status(200)\r",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"\t\t&& pm.expect(jsonResponse).to.be.an('object')\r",
											"\t\t&& pm.expect(allCategoryCode).to.include.members([pm.environment.get(\"categoryCode\")])\r",
											"\t\t&& pm.expect(documents).to.be.an('array')\r",
											"\t\t&& pm.expect(documents).to.not.be.empty\r",
											"\t\t&& pm.expect(totalDocuments).to.equal(pm.environment.get(\"totalDocumentsNumber\"))\r",
											"\t\t&& pm.expect(catName).to.equal(pm.environment.get(\"categoryName\"));\r",
											"\t\t\r",
											"});\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents?categoryCode={{categoryCode}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents"
									],
									"query": [
										{
											"key": "categoryCode",
											"value": "{{categoryCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getDocumentByCategoryType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99ffea12-bf75-4881-9882-e09017fa5260",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"const jsonResponse = pm.response.json();\r",
											"const documents = jsonResponse.embedded;\r",
											"const category = documents[0].category;\r",
											"const catName = category.name;\r",
											"const catId = category.id;\r",
											"const page = jsonResponse.page;\r",
											"const totalDocuments = page.totalElements;\r",
											"let allCategoryCode = [];\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \"Document category type is correct\", function () {\r",
											"\r",
											"\tvar schemaValidationPassed = true;\r",
											"\tvar jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\tpm.test(\"Response schema is correct\", () => {\r",
											"\t\tschemaValidationPassed = eval(globals.schemaValidator)(\"getDocumentByCategory\", jsonData);\r",
											"\t\tpm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\t});\r",
											"\r",
											"\tpm.response.to.have.status(200)\r",
											"\t\t&& pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"\tpm.test(\"Category type is correct\", () => {\r",
											"\t\tlet categoriesCodeCount = documents.filter(documents => documents.category).length;\r",
											"\t\tif (categoriesCodeCount > 0) {\r",
											"\t\t\tfor (var i = 0; i < documents.length; i++) {\r",
											"\t\t\t\tallCategoryCode.push(documents[i].category.type);\r",
											"\t\t\t}\r",
											"\t\t}\r",
											"\r",
											"\t\tpm.expect(allCategoryCode).to.include.members([pm.environment.get(\"categoryType\")]);\r",
											"\t\tpm.expect(documents).to.be.an('array');\r",
											"\t\tpm.expect(documents).to.not.be.empty;\r",
											"\t});\r",
											"\tconsole.log(allCategoryCode);\r",
											"\tpm.response.to.have.status(200)\r",
											"\t\t&& pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"\t\t&& pm.expect(jsonResponse).to.be.an('object')\r",
											"\t\t&& pm.expect(allCategoryCode).to.include.members([pm.environment.get(\"categoryType\")])\r",
											"\t\t&& pm.expect(documents).to.be.an('array')\r",
											"\t\t&& pm.expect(documents).to.not.be.empty;\r",
											"\r",
											"});\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents?categoryType={{categoryType}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents"
									],
									"query": [
										{
											"key": "categoryType",
											"value": "{{categoryType}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getDocumentCategoriesSortedByCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8dbaab20-e4be-490b-93db-29a7bfa8cabc",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"const jsonResponse = pm.response.json();\r",
											"let allCategoryCode = [];\r",
											"let sortedCategories = [];\r",
											"let unsorted = [];\r",
											"\t\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Sorting by categoryCode is correct and schema is correct\", function () {\r",
											"\r",
											"        var schemaValidationPassed = true;\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"        \r",
											"        pm.test(\"Response schema is correct\", () => {\r",
											"            schemaValidationPassed = eval(globals.schemaValidator)(\"getCategoryByIdSchema\",jsonData);\r",
											"            pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        }); \r",
											"\t\tpm.test(\"Category code is sorting is correct\", () => {\r",
											"\r",
											"\t\tlet categoriesCount = jsonResponse.filter(jsonResponse => jsonResponse.code).length;\r",
											"\t\tif (categoriesCount > 0) {\r",
											"\t\tfor(var i = 0;i<jsonResponse.length;i++) {\r",
											"\t\t\t\tallCategoryCode.push(jsonResponse[i].code);\r",
											"\t\t\t}\r",
											"\t\t}\r",
											"\t\tunsorted = [...allCategoryCode]; \r",
											"\t\tsortedCategories = allCategoryCode.sort();\r",
											"\t\t\r",
											"\t\tpm.expect(unsorted).to.eql(sortedCategories);\r",
											"\r",
											"\t    });\r",
											"        pm.response.to.have.status(200)\r",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"\t\t&& pm.expect(unsorted).to.eql(sortedCategories);\r",
											"});\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									},
									{
										"key": "Accept",
										"value": "application/hal+json,application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/categories?sortBy=code:asc",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"categories"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "code:asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "createCategory",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a7fd51e6-8793-4673-bd06-67cf178f1c84",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.commonTests)();",
											"const jsonResponse = pm.response.json();",
											"const createdCatId = jsonResponse.id;",
											"const createdCatCode = jsonResponse.code;",
											"const createdCatSortCode = jsonResponse.sortCode;",
											"const createdCatType = jsonResponse.type;",
											"const catRelevance = jsonResponse.relevance;",
											"const createdCatName = jsonResponse.name;",
											"const createdCatDesc = jsonResponse.description;",
											"",
											"pm.environment.set(\"createdCatId\", createdCatId);",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Category is created and response schema is validated\", function () {",
											"",
											"        var schemaValidationPassed = true;",
											"        var jsonData = JSON.parse(responseBody);",
											"        ",
											"        pm.test(\"Response schema is correct\", () => {",
											"            schemaValidationPassed = eval(globals.schemaValidator)(\"createCategorySchema\",jsonData);",
											"            pm.expect(schemaValidationPassed).to.be.eql(true);",
											"        });         ",
											"    ",
											"        pm.response.to.have.status(201)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(createdCatCode).to.eql(pm.environment.get(\"createdCatCode\"))",
											"        && pm.expect(createdCatSortCode).to.eql(pm.environment.get(\"createdSortCode\"))",
											"        && pm.expect(createdCatType).to.eql(pm.environment.get(\"categoryType\"))",
											"        && pm.expect(catRelevance).to.eql(pm.environment.get(\"createdCategoryRelevance\"))",
											"        && pm.expect(createdCatName).to.eql(pm.environment.get(\"createdCategoryName\"))",
											"        && pm.expect(createdCatDesc).to.eql(pm.environment.get(\"createdCategoryDesc\"));",
											"});",
											"    ",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "173c26f9-8fd7-4878-9143-0f7ebc5fe215",
										"exec": [
											"const createdCategoryName = \"Created_Kredit_Category\";",
											"const createdCategoryDesc = \"Description for a user created category\";",
											"const createdCatCode = \"kredit_Test\";",
											"const createdSortCode = \"10\";",
											"const createdCategoryRelevance = 1;",
											"",
											"pm.environment.set(\"createdCategoryName\", createdCategoryName);",
											"pm.environment.set(\"createdCategoryDesc\", createdCategoryDesc);",
											"pm.environment.set(\"createdCatCode\", createdCatCode);",
											"pm.environment.set(\"createdSortCode\", createdSortCode);",
											"pm.environment.set(\"createdCategoryRelevance\", createdCategoryRelevance);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"{{createdCatCode}}\",\r\n  \"sortCode\": \"{{createdSortCode}}\",\r\n  \"type\": \"BANK_DOCUMENT\",\r\n  \"visible\": true,\r\n  \"relevance\": 1,\r\n  \"name\": \"{{createdCategoryName}}\",\r\n  \"description\": \"{{createdCategoryDesc}}\"\r\n}"
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/categories",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateCategoryByCategoryId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dab728bf-2e73-4221-8b36-3128f8b544a6",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.commonTests)();",
											"const jsonResponse = pm.response.json();",
											"const updatedCatId = jsonResponse.id;",
											"const updatedCatCode = jsonResponse.code;",
											"const updatedCatSortCode = jsonResponse.sortCode;",
											"const updatedCatType = jsonResponse.type;",
											"const updatedCatRelevance = jsonResponse.relevance;",
											"const updatedCatName = jsonResponse.name;",
											"const updatedCatDesc = jsonResponse.description;",
											"",
											"pm.environment.set(\"createdCatId\", createdCatId);",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Category is created and response schema is validated\", function () {",
											"",
											"        var schemaValidationPassed = true;",
											"        var jsonData = JSON.parse(responseBody);",
											"        ",
											"        pm.test(\"Response schema is correct\", () => {",
											"            schemaValidationPassed = eval(globals.schemaValidator)(\"createCategorySchema\",jsonData);",
											"            pm.expect(schemaValidationPassed).to.be.eql(true);",
											"        });         ",
											"    ",
											"        pm.response.to.have.status(201)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(updatedCatId).to.eql(pm.environment.get(\"createdCatId\"))",
											"        && pm.expect(updatedCatCode).to.eql(pm.environment.get(\"categoryCode\"))",
											"        && pm.expect(updatedCatSortCode).to.eql(pm.environment.get(\"sortCode\"))",
											"        && pm.expect(updatedCatType).to.eql(pm.environment.get(\"categoryType\"))",
											"        && pm.expect(updatedCatRelevance).to.eql(pm.environment.get(\"updatedCatRelevance\"))",
											"        && pm.expect(updatedCatName).to.eql(pm.environment.get(\"updatedCatName\"))",
											"        && pm.expect(updatedCatDesc).to.eql(pm.environment.get(\"updatedCatDesc\"));",
											"});",
											"    ",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7949a800-9bfa-43b3-940c-c924095edd2c",
										"exec": [
											"const existingCategoryId = pm.environment.get(\"createdCatId\");",
											"",
											"pm.expect(existingCategoryId).to.be.a('string', \"The categoryId is required to update the category\");",
											"",
											"const updatedCatName = \"Updated_category_Name\";",
											"const updatedCatDesc = \"This is the updated category description\";",
											"const updatedCatRelevance = 0;",
											"",
											"pm.environment.set(\"updatedCatName\", updatedCatName);",
											"pm.environment.set(\"updatedCatDesc\", updatedCatDesc);",
											"pm.environment.set(\"updatedCatRelevance\", updatedCatRelevance);",
											"",
											"console.log(`Renaming category to ${updatedCatName}`);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{createdCatId}}\",\r\n  \"sortCode\": \"{{sortCode}}\",\r\n  \"type\": \"BANK_DOCUMENT\",\r\n  \"visible\": true,\r\n  \"relevance\": \"{{updatedCatRelevance}}\",\r\n  \"name\": \"{{updatedCatName}}\",\r\n  \"description\": \"{{updatedCatDesc}}\"\r\n}"
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/categories/{{createdCatId}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"categories",
										"{{createdCatId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteCategoryByCategoryId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97b3f4a6-ccee-4f53-ac41-275a4f746bc0",
										"exec": [
											"//eval(globals.commonTests)();",
											"const jsonResponse = pm.response.json();",
											"const response = jsonResponse.messages[0];",
											"const category = response.category;",
											"const code = response.code;",
											"const text = response.text;",
											"const path = response.path;",
											"const deletedCategoryId = path.slice(44, 122);",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Document is deleted and response schema is validated\", function () {",
											"",
											"        var schemaValidationPassed = true;",
											"        var jsonData = JSON.parse(responseBody);",
											"        ",
											"        pm.test(\"Response schema is correct\", () => {",
											"            schemaValidationPassed = eval(globals.schemaValidator)(\"deleteDocument\",jsonData);",
											"            pm.expect(schemaValidationPassed).to.be.eql(true);",
											"        });",
											"        pm.test(\"Document is deleted\", () => {",
											"",
											"            pm.expect(category).to.equal('INFO');",
											"            pm.expect(code).to.equal(\"200\");",
											"            pm.expect(text).to.equal(\"The resource was deleted successfully.\");",
											"});",
											"        pm.response.to.have.status(200)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(category).to.equal('INFO')",
											"        && pm.expect(code).to.equal(\"200\")",
											"        && pm.expect(text).to.equal(\"The resource was deleted successfully.\")",
											"        && pm.expect(deletedCategoryId).to.equal(pm.environment.get(\"createdCatId\"));",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "757e3d46-2dee-4141-a324-e7e249a082bf",
										"exec": [
											"const existingCategoryId = pm.environment.get(\"createdCatId\");",
											"",
											"pm.expect(existingCategoryId).to.be.a('string', \"The categoryId is required to update the category\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/categories/{{categoryId}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"categories",
										"{{categoryId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Attachments",
					"item": [
						{
							"name": "createNewDocumentWithAttachment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bd7412b-5ceb-46fb-9af5-93fd8aad5d07",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.commonTests)();",
											"const jsonResponse = pm.response.json();",
											"const createdDocWithAttachmentId = jsonResponse.id;",
											"const createdAttachmentId = jsonResponse.attachments[0].id;",
											"const createdAttachmentName = jsonResponse.attachments[0].name;",
											"const createdAttachmentMimeType = jsonResponse.attachments[0].mimetype;",
											"const docCategory = jsonResponse.category.code;",
											"const customerId = jsonResponse.customerId;",
											"const newDocTitle = jsonResponse.title;",
											"const newDocBody = jsonResponse.body;",
											"",
											"pm.environment.set(\"createdDocWithAttachmentId\", createdDocWithAttachmentId);",
											"pm.environment.set(\"createdAttachmentId\", createdAttachmentId);",
											"pm.environment.set(\"attachmentName\", createdAttachmentName);",
											"pm.environment.set(\"attachmentMimeType\", createdAttachmentMimeType);",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" New document is created and response schema is validated\", function () {",
											"",
											"        var schemaValidationPassed = true;",
											"        var jsonData = JSON.parse(responseBody);",
											"        ",
											"        pm.test(\"Response schema is correct\", () => {",
											"            schemaValidationPassed = eval(globals.schemaValidator)(\"newDocumentSchema\",jsonData);",
											"            pm.expect(schemaValidationPassed).to.be.eql(true);",
											"        });         ",
											"    ",
											"        pm.response.to.have.status(201)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(newDocTitle).to.eql(pm.environment.get(\"newDocWithAttachmentTitle\"))",
											"        && pm.expect(newDocBody).to.eql(pm.environment.get(\"newDocWithAttachmentBody\"))",
											"        && pm.expect(docCategory).to.eql(pm.environment.get(\"categoryCode\"));",
											"});",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fa419d40-f519-4e09-beea-866b3630a48a",
										"exec": [
											"const newDocWithAttachmentTitle = \"Created_Document_With_Attachment\";",
											"const newDocWithAttachmentBody = \"This is the newly created document body with an added attachment\";",
											"pm.environment.set(\"newDocWithAttachmentBody\", newDocWithAttachmentBody);",
											"pm.environment.set(\"newDocWithAttachmentTitle\", newDocWithAttachmentTitle);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": " multipart/form-data",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "{{newDocWithAttachmentTitle}}",
											"type": "text"
										},
										{
											"key": "body",
											"value": "{{newDocWithAttachmentBody}}",
											"type": "text"
										},
										{
											"key": "categoryCode",
											"value": "{{categoryCode}}",
											"type": "text"
										},
										{
											"key": "attachments",
											"type": "file",
											"src": ""
										}
									]
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents"
									]
								}
							},
							"response": []
						},
						{
							"name": "createDocumentWithMultipleAttachments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "840946d4-b958-4fdb-8e10-b0ea0307920d",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.commonTests)();",
											"const jsonResponse = pm.response.json();",
											"const createdDocWithAttachmentId = jsonResponse.id;",
											"const createdAttachmentId = jsonResponse.attachments.id;",
											"const docCategory = jsonResponse.category.code;",
											"const customerId = jsonResponse.customerId;",
											"const newDocTitle = jsonResponse.title;",
											"const newDocBody = jsonResponse.body;",
											"const attachments = jsonResponse.attachments;",
											"let attachmentNames = [];",
											"",
											"//pm.environment.set(\"createdDocWithAttachmentId\", createdDocWithAttachmentId);",
											"//pm.environment.set(\"createdAttachmentId\", createdAttachmentId);",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" New document with multiple attachment is created and response schema is validated\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"newDocumentSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"",
											"    pm.test(\"Multiple attachments are added\", () => {",
											"",
											"        let attachmentCount = attachments.filter(attachments => attachments.id).length;",
											"\t\tif (attachmentCount > 0) {",
											"\t\t\tfor (var i = 0; i < attachments.length; i++) {",
											"\t\t\t\tattachmentNames.push(attachments[i].name);",
											"                console.log(\"Attachment names are: \" + attachmentNames[i]);",
											"\t\t\t}",
											"\t\t}",
											"        pm.expect(attachmentNames).to.have.lengthOf(9);",
											"    });",
											"",
											"    pm.response.to.have.status(201)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(newDocTitle).to.eql(pm.environment.get(\"newDocWithAttachmentTitle\"))",
											"        && pm.expect(newDocBody).to.eql(pm.environment.get(\"newDocWithAttachmentBody\"))",
											"        && pm.expect(docCategory).to.eql(pm.environment.get(\"categoryCode\"));",
											"});",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "783b88a4-b9cd-4c52-bcc7-90fc3e564194",
										"exec": [
											"const newDocWithAttachmentTitle = \"Created_Document_With_Multiple_Attachments\";",
											"const newDocWithAttachmentBody = \"This is the newly created document body with added attachments\";",
											"pm.environment.set(\"newDocWithAttachmentBody\", newDocWithAttachmentBody);",
											"pm.environment.set(\"newDocWithAttachmentTitle\", newDocWithAttachmentTitle);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": " multipart/form-data"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "{{newDocWithAttachmentTitle}}",
											"type": "text"
										},
										{
											"key": "body",
											"value": "{{newDocWithAttachmentBody}}",
											"type": "text"
										},
										{
											"key": "categoryCode",
											"value": "{{categoryCode}}",
											"type": "text"
										},
										{
											"key": "attachments",
											"type": "file",
											"src": ""
										}
									]
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents"
									]
								}
							},
							"response": []
						},
						{
							"name": "addAttachmentToDocument",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3ea0bb4-372d-4f4c-bf7b-d1ffa1788e62",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.commonTests)();",
											"const jsonResponse = pm.response.json();",
											"const attachments = jsonResponse.attachments;",
											"console.log(attachments);",
											"const addedAttachmentId = jsonResponse.attachments[1].id;",
											"const addedAttachmentName = jsonResponse.attachments[1].name;",
											"",
											"pm.environment.set(\"addedAttachmentId\", addedAttachmentId);",
											"pm.environment.set(\"addedAttachmentName\", addedAttachmentName);",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Attachment is added and response schema is validated\", function () {",
											"",
											"        var schemaValidationPassed = true;",
											"        var jsonData = JSON.parse(responseBody);",
											"        ",
											"        pm.test(\"Response schema is correct\", () => {",
											"            schemaValidationPassed = eval(globals.schemaValidator)(\"addAttachmentSchema\",jsonData);",
											"            pm.expect(schemaValidationPassed).to.be.eql(true);",
											"        });         ",
											"    ",
											"        pm.response.to.have.status(200)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true);",
											"});",
											"    ",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"type": "file",
											"src": ""
										}
									]
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents/{{createdDocWithAttachmentId}}/attachments",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents",
										"{{createdDocWithAttachmentId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "getDocumentAttachmentsByDocumentId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b7bd79a-0b05-492d-9a95-1fb2ad4d6055",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Attachment with documentId is retrieved\", function () {",
											"",
											"    pm.test(\"Content-Type is 'application/zip'\", function () {",
											"        pm.response.to.have.header(\"Content-Type\", \"application/zip\");",
											"    });",
											"    ",
											"    pm.response.to.have.status(200)",
											"    && pm.response.to.have.header(\"Content-Type\", \"application/zip\");",
											"});",
											"",
											"eval(globals.sessionNavigate)();",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/zip"
									},
									{
										"key": "Content-Type",
										"value": "application/zip, application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents/{{createdDocWithAttachmentId}}/attachments",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents",
										"{{createdDocWithAttachmentId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "getDocumentAttachmentByAttachmentId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f90cd25b-05a4-4468-bfb5-ab32c06a5bdd",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Attachment with attachmentId is retrieved\", function () {",
											"",
											"    let attachmentContentType = pm.environment.get(\"attachmentMimeType\");",
											"    let attachmentFileName = pm.environment.get(\"attachmentName\");",
											"    ",
											"    pm.test(\"Content-Type matches to attachment type\", function () {",
											"        pm.response.to.have.header(\"Content-Type\", attachmentContentType);",
											"    });",
											"",
											"    pm.test(\"Content-Disposition matches to attachment file name\", function () {",
											"        pm.response.to.have.header(\"Content-Disposition\", \"attachment; filename=\\\"\" + attachmentFileName + \"\\\"\");",
											"    });",
											"    ",
											"    pm.response.to.have.status(200) &&",
											"    pm.response.to.have.header(\"Content-Type\", attachmentContentType) &&",
											"    pm.response.to.have.header(\"Content-Disposition\", \"attachment; filename=\\\"\" + attachmentFileName + \"\\\"\");",
											"});",
											"",
											"eval(globals.sessionNavigate)();",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/pdf,application/json,application/octet-stream"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents/{{createdDocWithAttachmentId}}/attachments/{{createdAttachmentId}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents",
										"{{createdDocWithAttachmentId}}",
										"attachments",
										"{{createdAttachmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateAttachmentByAttachmentId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c304e776-de5b-4849-bdfe-31b36b57c7d4",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.commonTests)();",
											"const jsonResponse = pm.response.json();",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Attachment is updated and response schema is validated\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"updateAttachmentSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"",
											"    pm.response.to.have.status(200)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true);",
											"});",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2facf881-0cda-4ac7-ad94-defdda63b9c1",
										"exec": [
											"",
											"const newAttachmentName = \"Updated_Attachment_Name.pdf\";",
											"pm.environment.set(\"newAttachmentName\", newAttachmentName); //a few milliseconds later this should be a different attachment name",
											"",
											"console.log(`Renaming attachment to ${newAttachmentName}`);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{addedAttachmentId}}\",\r\n  \"mimetype\": \"application/pdf\",\r\n  \"filename\": \"{{newAttachmentName}}\"\r\n}"
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents/{{createdDocWithAttachmentId}}/attachments/{{addedAttachmentId}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents",
										"{{createdDocWithAttachmentId}}",
										"attachments",
										"{{addedAttachmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteAttachmentByAttachmentId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8cd0b75d-22d4-4ffe-8de8-385efbff8b53",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.commonTests)();",
											"const jsonResponse = pm.response.json();",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Attachment by attachmentId is deleted and response schema is validated\", function () {",
											"",
											"        var schemaValidationPassed = true;",
											"        var jsonData = JSON.parse(responseBody);",
											"        ",
											"        pm.test(\"Response schema is correct\", () => {",
											"            schemaValidationPassed = eval(globals.schemaValidator)(\"deleteAttachmentSchema\",jsonData);",
											"            pm.expect(schemaValidationPassed).to.be.eql(true);",
											"        });         ",
											"    ",
											"        pm.response.to.have.status(200)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true);",
											"});",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "29e8cabd-4f46-47e9-9a9a-018393fa2010",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents/{{createdDocWithAttachmentId}}/attachments/{{createdAttachmentId}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents",
										"{{createdDocWithAttachmentId}}",
										"attachments",
										"{{createdAttachmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteAttachmentsByDocumentId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "490900cc-02b2-4633-8128-0aa289901a13",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.commonTests)();",
											"const jsonResponse = pm.response.json();",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Attachment by documentId is deleted and response schema is validated\", function () {",
											"",
											"        var schemaValidationPassed = true;",
											"        var jsonData = JSON.parse(responseBody);",
											"        ",
											"        pm.test(\"Response schema is correct\", () => {",
											"            schemaValidationPassed = eval(globals.schemaValidator)(\"deleteAttachmentSchema\",jsonData);",
											"            pm.expect(schemaValidationPassed).to.be.eql(true);",
											"        });         ",
											"    ",
											"        pm.response.to.have.status(200)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true);",
											"});",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "11802ec2-f439-4b6e-8ca4-1a44e012993d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents/{{createdDocWithAttachmentId}}/attachments",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents",
										"{{createdDocWithAttachmentId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "getDocumentAfterDeletingAttachments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "247d6cba-ead1-4ef1-a1a7-75c44c566fa2",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"const jsonResponse = pm.response.json();\r",
											"const documentId = jsonResponse.id;\r",
											"const attachments = jsonResponse.attachments;\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Deleted document by ID is retrieved and response schema is validated\", function () {\r",
											"\r",
											"\tvar schemaValidationPassed = true;\r",
											"\tvar jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\tpm.test(\"Response schema is correct\", () => {\r",
											"\t\tschemaValidationPassed = eval(globals.schemaValidator)(\"getDocumentByIdSchema\", jsonData);\r",
											"\t\tpm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\t});\r",
											"\r",
											"\tpm.response.to.have.status(200)\r",
											"\t\t&& pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"\tpm.test(\"Document id is correct\", () => {\r",
											"\r",
											"\t\tpm.expect(jsonResponse).to.be.an('object');\r",
											"\t\tpm.expect(jsonResponse).to.not.be.empty;\r",
											"\t\tpm.expect(documentId).to.equal(pm.environment.get(\"createdDocWithAttachmentId\"));\r",
											"\t\tpm.expect(attachments).to.be.empty;\r",
											"\t});\r",
											"\r",
											"\tpm.response.to.have.status(200)\r",
											"\t\t&& pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"\t\t&& pm.expect(jsonResponse).to.be.an('object')\r",
											"\t\t&& pm.expect(documentId).to.equal(pm.environment.get(\"createdDocWithAttachmentId\"))\r",
											"\t\t&& pm.expect(attachments).to.be.empty;\r",
											"});\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents/{{createdDocWithAttachmentId}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents",
										"{{createdDocWithAttachmentId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Validation Requests",
			"item": [
				{
					"name": "getDocumentWithIncorrectDocumentId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "33e97ec0-a690-4ad4-a790-5275d0d8823a",
								"exec": [
									"// Execute standard tests from PrS using eval()\r",
									"//eval(globals.scopeValidationTests)();\r",
									"const jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Requested resource is not found and response schema is validated\", function () {\r",
									"\r",
									"        var schemaValidationPassed = true;\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        \r",
									"        pm.test(\"Response schema is correct\", () => {\r",
									"            schemaValidationPassed = eval(globals.schemaValidator)(\"notFoundSchema\",jsonData);\r",
									"            pm.expect(schemaValidationPassed).to.be.eql(true);\r",
									"        });         \r",
									"    \r",
									"        pm.response.to.have.status(404)\r",
									"        && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
									"\t\t\r",
									"\t\tpm.test(\"Resourse is not found and error message is correct\", function () {\r",
									"\t\tconst jsonResponse = pm.response.json();\r",
									"\t\tconst category = jsonResponse._messages[0].category;\r",
									"\t\tconst code = jsonResponse._messages[0].code;\r",
									"\t\tconst text = jsonResponse._messages[0].text;\r",
									"\r",
									"    \r",
									"\t\tpm.expect(category).to.equal(\"ERROR\");\r",
									"\t\tpm.expect(code).to.equal(\"ERR_ENTITY_NOT_FOUND\");\r",
									"\t\tpm.expect(text).to.equal(\"Entity not found: the resource you are looking for was not found!\");\r",
									"\t\t\r",
									"\t\tpm.response.to.have.status(404)\r",
									"        && pm.expect(schemaValidationPassed).to.be.eql(true)\r",
									"\t\t&& pm.expect(category).to.eql(\"ERROR\")\r",
									"\t\t&& pm.expect(code).to.eql(\"ERR_ENTITY_NOT_FOUND\")\r",
									"\t\t&& pm.expect(text).to.eql(\"Entity not found: the resource you are looking for was not found!\");\r",
									"\r",
									"});\r",
									"\r",
									"// Session navigate from PrS using eval()\r",
									"eval(globals.sessionNavigate)();\r",
									"\r",
									"// Reset reference to TR test cases\r",
									"pm.globals.unset(\"_tr_\" + request.name);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/hal+json,application/json"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer {{tokenValue}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents/__ID__745a63496161327873376a587179394b62bd37edf640b723234e4fdcf3b247b6ef",
							"host": [
								"{{env_Documents}}"
							],
							"path": [
								"messaging",
								"api",
								"documents",
								"{{tenantId}}",
								"v1",
								"documents",
								"__ID__745a63496161327873376a587179394b62bd37edf640b723234e4fdcf3b247b6ef"
							]
						}
					},
					"response": []
				},
				{
					"name": "getDocumentsByWrongTitle [C34306661]",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "11ceea0e-1a55-4bcd-9c55-13c320eff629",
								"exec": [
									"// Execute standard tests from PrS using eval()\r",
									"//eval(globals.scopeValidationTests)();\r",
									"const jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Requested resource is not found and response schema is validated\", function () {\r",
									"\r",
									"        var schemaValidationPassed = true;\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        \r",
									"        pm.test(\"Response schema is correct\", () => {\r",
									"            schemaValidationPassed = eval(globals.schemaValidator)(\"notFoundSchema\",jsonData);\r",
									"            pm.expect(schemaValidationPassed).to.be.eql(true);\r",
									"        });         \r",
									"    \r",
									"        pm.response.to.have.status(404)\r",
									"        && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
									"\t\t\r",
									"\t\tpm.test(\"Resourse is not found and error message is correct\", function () {\r",
									"\t\tconst jsonResponse = pm.response.json();\r",
									"\t\tconst category = jsonResponse._messages[0].category;\r",
									"\t\tconst code = jsonResponse._messages[0].code;\r",
									"\t\tconst text = jsonResponse._messages[0].text;\r",
									"\r",
									"    \r",
									"\t\tpm.expect(category).to.equal(\"ERROR\");\r",
									"\t\tpm.expect(code).to.equal(\"ERR_ENTITY_NOT_FOUND\");\r",
									"\t\tpm.expect(text).to.equal(\"Entity not found: the resource you are looking for was not found!\");\r",
									"\t\t\r",
									"\t\tpm.response.to.have.status(404)\r",
									"        && pm.expect(schemaValidationPassed).to.be.eql(true)\r",
									"\t\t&& pm.expect(category).to.eql(\"ERROR\")\r",
									"\t\t&& pm.expect(code).to.eql(\"ERR_ENTITY_NOT_FOUND\")\r",
									"\t\t&& pm.expect(text).to.eql(\"Entity not found: the resource you are looking for was not found!\");\r",
									"\r",
									"});\r",
									"\r",
									"// Session navigate from PrS using eval()\r",
									"eval(globals.sessionNavigate)();\r",
									"\r",
									"// Reset reference to TR test cases\r",
									"pm.globals.unset(\"_tr_\" + request.name);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer {{tokenValue}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents?title=Transver",
							"host": [
								"{{env_Documents}}"
							],
							"path": [
								"messaging",
								"api",
								"documents",
								"{{tenantId}}",
								"v1",
								"documents"
							],
							"query": [
								{
									"key": "title",
									"value": "Transver"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getCategoryWithIncorrectId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e365e149-ffc2-43a8-8dbe-40249c9bef82",
								"exec": [
									"// Execute standard tests from PrS using eval()\r",
									"//eval(globals.scopeValidationTests)();\r",
									"const jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Requested resource is not found and response schema is validated\", function () {\r",
									"\r",
									"        var schemaValidationPassed = true;\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        \r",
									"        pm.test(\"Response schema is correct\", () => {\r",
									"            schemaValidationPassed = eval(globals.schemaValidator)(\"notFoundSchema\",jsonData);\r",
									"            pm.expect(schemaValidationPassed).to.be.eql(true);\r",
									"        });         \r",
									"    \r",
									"        pm.response.to.have.status(404)\r",
									"        && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
									"\t\t\r",
									"\t\tpm.test(\"Resourse is not found and error message is correct\", function () {\r",
									"\t\tconst jsonResponse = pm.response.json();\r",
									"\t\tconst category = jsonResponse._messages[0].category;\r",
									"\t\tconst code = jsonResponse._messages[0].code;\r",
									"\t\tconst text = jsonResponse._messages[0].text;\r",
									"\r",
									"    \r",
									"\t\tpm.expect(category).to.equal(\"ERROR\");\r",
									"\t\tpm.expect(code).to.equal(\"ERR_ENTITY_NOT_FOUND\");\r",
									"\t\tpm.expect(text).to.equal(\"Entity not found: the resource you are looking for was not found!\");\r",
									"\t\t\r",
									"\t\tpm.response.to.have.status(404)\r",
									"        && pm.expect(schemaValidationPassed).to.be.eql(true)\r",
									"\t\t&& pm.expect(category).to.eql(\"ERROR\")\r",
									"\t\t&& pm.expect(code).to.eql(\"ERR_ENTITY_NOT_FOUND\")\r",
									"\t\t&& pm.expect(text).to.eql(\"Entity not found: the resource you are looking for was not found!\");\r",
									"\r",
									"});\r",
									"\r",
									"// Session navigate from PrS using eval()\r",
									"eval(globals.sessionNavigate)();\r",
									"\r",
									"// Reset reference to TR test cases\r",
									"pm.globals.unset(\"_tr_\" + request.name);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/hal+json,application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer {{tokenValue}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/categories/__ID__4775684c7247385146716a454336764af6d917c1612d589c89c152c72086f5c374",
							"host": [
								"{{env_Documents}}"
							],
							"path": [
								"messaging",
								"api",
								"documents",
								"{{tenantId}}",
								"v1",
								"categories",
								"__ID__4775684c7247385146716a454336764af6d917c1612d589c89c152c72086f5c374"
							]
						}
					},
					"response": []
				},
				{
					"name": "createDocumentWithBlacklistedAttachment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b19340c0-2220-4606-92f0-1883406dab7a",
								"exec": [
									"// Execute standard tests from PrS using eval()",
									"//eval(globals.commonTests)();",
									"const jsonResponse = pm.response.json();",
									"const messages = jsonResponse._messages[0];",
									"const category = messages.category;",
									"const errorCode = messages.code;",
									"",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Attachment validation is done\", function () {",
									"",
									"    var schemaValidationPassed = true;",
									"    var jsonData = JSON.parse(responseBody);",
									"",
									"    pm.test(\"Response schema is correct\", () => {",
									"        schemaValidationPassed = eval(globals.schemaValidator)(\"validationSchema\", jsonData);",
									"        pm.expect(schemaValidationPassed).to.be.eql(true);",
									"    });",
									"",
									"    pm.response.to.have.status(400)",
									"    && pm.expect(schemaValidationPassed).to.be.eql(true)",
									"    && pm.expect(category).to.eql(\"ERROR\")",
									"    && pm.expect(errorCode).to.eql(\"ExtensionCheck\");",
									"});",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e0aa1421-5f4b-47a9-b42e-a7b6d9f3299d",
								"exec": [
									"const newDocWithAttachmentTitle = \"Document with blacklisted attachment test\";",
									"const newDocWithAttachmentBody = \"This is the newly created document body with an added attachment\";",
									"pm.environment.set(\"newDocWithAttachmentBody\", newDocWithAttachmentBody);",
									"pm.environment.set(\"newDocWithAttachmentTitle\", newDocWithAttachmentTitle);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/hal+json,application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": " multipart/form-data"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{tokenValue}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "{{newDocWithAttachmentTitle}}",
									"type": "text"
								},
								{
									"key": "body",
									"value": "{{newDocWithAttachmentBody}}",
									"type": "text"
								},
								{
									"key": "categoryCode",
									"value": "{{categoryCode}}",
									"type": "text"
								},
								{
									"key": "attachments",
									"type": "file",
									"src": ""
								}
							]
						},
						"url": {
							"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents",
							"host": [
								"{{env_Documents}}"
							],
							"path": [
								"messaging",
								"api",
								"documents",
								"{{tenantId}}",
								"v1",
								"documents"
							]
						}
					},
					"response": []
				},
				{
					"name": "createDocumentWithAttachmentExceedingFileSizeLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "44dab3ab-837d-4560-855c-1111aba7973d",
								"exec": [
									"// Execute standard tests from PrS using eval()",
									"//eval(globals.commonTests)();",
									"const jsonResponse = pm.response.json();",
									"const messages = jsonResponse._messages[0];",
									"const category = messages.category;",
									"const errorCode = messages.code;",
									"const path = messages.path;",
									"",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Attachment validation is done\", function () {",
									"",
									"    var schemaValidationPassed = true;",
									"    var jsonData = JSON.parse(responseBody);",
									"",
									"    pm.test(\"Response schema is correct\", () => {",
									"        schemaValidationPassed = eval(globals.schemaValidator)(\"validationSchema\", jsonData);",
									"        pm.expect(schemaValidationPassed).to.be.eql(true);",
									"    });",
									"",
									"    pm.response.to.have.status(400)",
									"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
									"        && pm.expect(category).to.eql(\"ERROR\")",
									"        && pm.expect(errorCode).to.eql(\"413\")",
									"        && pm.expect(path).to.eql(\"attachmentSizes\");",
									"});",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ca882bea-bacd-42e4-8778-5da4522e1ec3",
								"exec": [
									"const newDocWithAttachmentTitle = \"Document with attachment exceeding file size limit test\";",
									"const newDocWithAttachmentBody = \"This is the newly created document body with an added attachment\";",
									"pm.environment.set(\"newDocWithAttachmentBody\", newDocWithAttachmentBody);",
									"pm.environment.set(\"newDocWithAttachmentTitle\", newDocWithAttachmentTitle);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/hal+json,application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": " multipart/form-data"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{tokenValue}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "{{newDocWithAttachmentTitle}}",
									"type": "text"
								},
								{
									"key": "body",
									"value": "{{newDocWithAttachmentBody}}",
									"type": "text"
								},
								{
									"key": "categoryCode",
									"value": "{{categoryCode}}",
									"type": "text"
								},
								{
									"key": "attachments",
									"type": "file",
									"src": ""
								}
							]
						},
						"url": {
							"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents",
							"host": [
								"{{env_Documents}}"
							],
							"path": [
								"messaging",
								"api",
								"documents",
								"{{tenantId}}",
								"v1",
								"documents"
							]
						}
					},
					"response": []
				},
				{
					"name": "createAttachmentExceedingFileSizeLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8142517f-9ba1-4532-9e7c-79fd8c8d4c94",
								"exec": [
									"// Execute standard tests from PrS using eval()",
									"//eval(globals.commonTests)();",
									"const jsonResponse = pm.response.json();",
									"const messages = jsonResponse._messages[0];",
									"const category = messages.category;",
									"const errorCode = messages.code;",
									"const path = messages.path;",
									"",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Attachment validation is done\", function () {",
									"",
									"    var schemaValidationPassed = true;",
									"    var jsonData = JSON.parse(responseBody);",
									"",
									"    pm.test(\"Response schema is correct\", () => {",
									"        schemaValidationPassed = eval(globals.schemaValidator)(\"validationSchema\", jsonData);",
									"        pm.expect(schemaValidationPassed).to.be.eql(true);",
									"    });",
									"",
									"    pm.response.to.have.status(400)",
									"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
									"        && pm.expect(category).to.eql(\"ERROR\")",
									"        && pm.expect(errorCode).to.eql(\"413\")",
									"        && pm.expect(path).to.eql(\"size\");",
									"});",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9f420825-8b34-4c1a-bdf4-9584cf1f8c4d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/hal+json,application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": " multipart/form-data"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{tokenValue}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "attachment",
									"type": "file",
									"src": ""
								}
							]
						},
						"url": {
							"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents/{{createdDocumentId}}/attachments",
							"host": [
								"{{env_Documents}}"
							],
							"path": [
								"messaging",
								"api",
								"documents",
								"{{tenantId}}",
								"v1",
								"documents",
								"{{createdDocumentId}}",
								"attachments"
							]
						}
					},
					"response": []
				},
				{
					"name": "documentTitleLengthValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7de58911-e433-440d-9e7b-6d813def7751",
								"exec": [
									"// Execute standard tests from PrS using eval()",
									"//eval(globals.commonTests)();",
									"const jsonResponse = pm.response.json();",
									"const messages = jsonResponse._messages[0];",
									"const category = messages.category;",
									"const errorCode = messages.code;",
									"",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Title length validation is done\", function () {",
									"",
									"    var schemaValidationPassed = true;",
									"    var jsonData = JSON.parse(responseBody);",
									"",
									"    pm.test(\"Response schema is correct\", () => {",
									"        schemaValidationPassed = eval(globals.schemaValidator)(\"validationSchema\", jsonData);",
									"        pm.expect(schemaValidationPassed).to.be.eql(true);",
									"    });",
									"",
									"    pm.response.to.have.status(400)",
									"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
									"        && pm.expect(category).to.eql(\"ERROR\")",
									"        && pm.expect(errorCode).to.eql(\"400\");",
									"});",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "afc2f49f-a0b2-451f-89db-c86ec34deb9f",
								"exec": [
									"const newDocTitle = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus vitae leo non mauris interdum viverra pretium id massa.\";",
									"const newDocBody = \"Document title length validation test\";",
									"pm.environment.set(\"newDocTitle\", newDocTitle);",
									"pm.environment.set(\"newDocBody\", newDocBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/hal+json,application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": " multipart/form-data"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{tokenValue}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "{{newDocTitle}}",
									"type": "text"
								},
								{
									"key": "body",
									"value": "{{newDocBody}}",
									"type": "text"
								},
								{
									"key": "categoryCode",
									"value": "{{categoryCode}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents",
							"host": [
								"{{env_Documents}}"
							],
							"path": [
								"messaging",
								"api",
								"documents",
								"{{tenantId}}",
								"v1",
								"documents"
							]
						}
					},
					"response": []
				},
				{
					"name": "documentEmptyTitleValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d2548d4-e474-45f1-8eb3-a85a850c575e",
								"exec": [
									"// Execute standard tests from PrS using eval()",
									"//eval(globals.commonTests)();",
									"const jsonResponse = pm.response.json();",
									"const messages = jsonResponse._messages[0];",
									"const category = messages.category;",
									"const errorCode = messages.code;",
									"const errorText = messages.text;",
									"",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Title length validation is done\", function () {",
									"",
									"    var schemaValidationPassed = true;",
									"    var jsonData = JSON.parse(responseBody);",
									"",
									"    pm.test(\"Response schema is correct\", () => {",
									"        schemaValidationPassed = eval(globals.schemaValidator)(\"validationSchema\", jsonData);",
									"        pm.expect(schemaValidationPassed).to.be.eql(true);",
									"    });",
									"",
									"    pm.response.to.have.status(400)",
									"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
									"        && pm.expect(category).to.eql(\"ERROR\")",
									"        && pm.expect(errorCode).to.eql(\"StringIsNotBlank\")",
									"        && pm.expect(errorText).to.eql(\"String  in property subject must not be blank\");",
									"});",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f011c763-20fc-41fb-ba20-0f55c0e02828",
								"exec": [
									"const newDocTitle = \"\";",
									"const newDocBody = \"Document empty title check\";",
									"pm.environment.set(\"newDocTitle\", newDocTitle);",
									"pm.environment.set(\"newDocBody\", newDocBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/hal+json,application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": " multipart/form-data"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{tokenValue}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "{{newDocTitle}}",
									"type": "text"
								},
								{
									"key": "body",
									"value": "{{newDocBody}}",
									"type": "text"
								},
								{
									"key": "categoryCode",
									"value": "{{categoryCode}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents",
							"host": [
								"{{env_Documents}}"
							],
							"path": [
								"messaging",
								"api",
								"documents",
								"{{tenantId}}",
								"v1",
								"documents"
							]
						}
					},
					"response": []
				},
				{
					"name": "documentEmptyBodyValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd9e81d9-245d-403b-8450-b46bd3d1f61d",
								"exec": [
									"// Execute standard tests from PrS using eval()",
									"//eval(globals.commonTests)();",
									"const jsonResponse = pm.response.json();",
									"const messages = jsonResponse._messages[0];",
									"const category = messages.category;",
									"const errorCode = messages.code;",
									"const errorText = messages.text;",
									"",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Title length validation is done\", function () {",
									"",
									"    var schemaValidationPassed = true;",
									"    var jsonData = JSON.parse(responseBody);",
									"",
									"    pm.test(\"Response schema is correct\", () => {",
									"        schemaValidationPassed = eval(globals.schemaValidator)(\"validationSchema\", jsonData);",
									"        pm.expect(schemaValidationPassed).to.be.eql(true);",
									"    });",
									"",
									"    pm.response.to.have.status(400)",
									"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
									"        && pm.expect(category).to.eql(\"ERROR\")",
									"        && pm.expect(errorCode).to.eql(\"StringIsNotBlank\")",
									"        && pm.expect(errorText).to.eql(\"String  in property body must not be blank\");",
									"});",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ca940240-6aa1-437a-9af5-0dc7b249e994",
								"exec": [
									"const newDocTitle = \"Document empty body validation test\";",
									"const newDocBody = \"\";",
									"pm.environment.set(\"newDocTitle\", newDocTitle);",
									"pm.environment.set(\"newDocBody\", newDocBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/hal+json,application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": " multipart/form-data"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{tokenValue}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "{{newDocTitle}}",
									"type": "text"
								},
								{
									"key": "body",
									"value": "{{newDocBody}}",
									"type": "text"
								},
								{
									"key": "categoryCode",
									"value": "{{categoryCode}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents",
							"host": [
								"{{env_Documents}}"
							],
							"path": [
								"messaging",
								"api",
								"documents",
								"{{tenantId}}",
								"v1",
								"documents"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateDocumentEmptyTitleValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5ca328f3-93e2-4f42-a9a2-9b31e952506e",
								"exec": [
									"// Execute standard tests from PrS using eval()",
									"//eval(globals.commonTests)();",
									"const jsonResponse = pm.response.json();",
									"const messages = jsonResponse._messages[0];",
									"const category = messages.category;",
									"const errorCode = messages.code;",
									"const errorText = messages.text;",
									"",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Title length validation is done\", function () {",
									"",
									"    var schemaValidationPassed = true;",
									"    var jsonData = JSON.parse(responseBody);",
									"",
									"    pm.test(\"Response schema is correct\", () => {",
									"        schemaValidationPassed = eval(globals.schemaValidator)(\"validationSchema\", jsonData);",
									"        pm.expect(schemaValidationPassed).to.be.eql(true);",
									"    });",
									"",
									"    pm.response.to.have.status(400)",
									"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
									"        && pm.expect(category).to.eql(\"ERROR\")",
									"        && pm.expect(errorCode).to.eql(\"StringIsNotBlank\")",
									"        && pm.expect(errorText).to.eql(\"String  in property title must not be blank\");",
									"});",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "64b48959-5acc-476d-9037-66b2a0d13a62",
								"exec": [
									"const createdDocumentId = pm.environment.get(\"createdDocumentId\");",
									"",
									"pm.expect(createdDocumentId).to.be.a('string', \"The documentId is required to update the document\");",
									"",
									"const updatedDocName = \"\";",
									"const updatedBody = \"Update document empty title validation test\";",
									"const updatedCatCode = \"TCsteuerbe\";",
									"",
									"pm.environment.set(\"updatedBody\", updatedBody);",
									"pm.environment.set(\"updatedDocName\", updatedDocName);",
									"pm.environment.set(\"updatedCatCode\", updatedCatCode);",
									"",
									"console.log(`Updating document to ${updatedDocName}`);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/hal+json,application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer {{tokenValue}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{createdDocumentId}}\",\r\n  \"title\": \"{{updatedDocName}}\",\r\n  \"body\": \"{{updatedBody}}\",\r\n  \"categoryCode\": \"{{updatedCatCode}}\",\r\n  \"type\": \"BANK_DOCUMENT\"\r\n}"
						},
						"url": {
							"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents/{{createdDocumentId}}",
							"host": [
								"{{env_Documents}}"
							],
							"path": [
								"messaging",
								"api",
								"documents",
								"{{tenantId}}",
								"v1",
								"documents",
								"{{createdDocumentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateDocumentEmptyBodyValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a3e43e5-8553-4d86-9280-cf03e73988fe",
								"exec": [
									"// Execute standard tests from PrS using eval()",
									"//eval(globals.commonTests)();",
									"const jsonResponse = pm.response.json();",
									"const messages = jsonResponse._messages[0];",
									"const category = messages.category;",
									"const errorCode = messages.code;",
									"const errorText = messages.text;",
									"",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Title length validation is done\", function () {",
									"",
									"    var schemaValidationPassed = true;",
									"    var jsonData = JSON.parse(responseBody);",
									"",
									"    pm.test(\"Response schema is correct\", () => {",
									"        schemaValidationPassed = eval(globals.schemaValidator)(\"validationSchema\", jsonData);",
									"        pm.expect(schemaValidationPassed).to.be.eql(true);",
									"    });",
									"",
									"    pm.response.to.have.status(400)",
									"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
									"        && pm.expect(category).to.eql(\"ERROR\")",
									"        && pm.expect(errorCode).to.eql(\"StringIsNotBlank\")",
									"        && pm.expect(errorText).to.eql(\"String  in property body must not be blank\");",
									"});",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c4d11d7-5bfb-4fcc-ac70-3c932d83f631",
								"exec": [
									"const createdDocumentId = pm.environment.get(\"createdDocumentId\");",
									"",
									"pm.expect(createdDocumentId).to.be.a('string', \"The documentId is required to update the document\");",
									"",
									"const updatedDocName = \"Update document empty body validation test\";",
									"const updatedBody = \"\";",
									"const updatedCatCode = \"TCsteuerbe\";",
									"",
									"pm.environment.set(\"updatedBody\", updatedBody);",
									"pm.environment.set(\"updatedDocName\", updatedDocName);",
									"pm.environment.set(\"updatedCatCode\", updatedCatCode);",
									"",
									"console.log(`Updating document to ${updatedDocName}`);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/hal+json,application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer {{tokenValue}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{createdDocumentId}}\",\r\n  \"title\": \"{{updatedDocName}}\",\r\n  \"body\": \"{{updatedBody}}\",\r\n  \"categoryCode\": \"{{updatedCatCode}}\",\r\n  \"type\": \"BANK_DOCUMENT\"\r\n}"
						},
						"url": {
							"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents/{{createdDocumentId}}",
							"host": [
								"{{env_Documents}}"
							],
							"path": [
								"messaging",
								"api",
								"documents",
								"{{tenantId}}",
								"v1",
								"documents",
								"{{createdDocumentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "attachmentEmptyFileNameValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c4cd3b42-1563-4110-aeb5-b1eecc46b864",
								"exec": [
									"// Execute standard tests from PrS using eval()",
									"//eval(globals.commonTests)();",
									"const jsonResponse = pm.response.json();",
									"const messages = jsonResponse._messages[0];",
									"const category = messages.category;",
									"const errorCode = messages.code;",
									"",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Attachment validation is done\", function () {",
									"",
									"    var schemaValidationPassed = true;",
									"    var jsonData = JSON.parse(responseBody);",
									"",
									"    pm.test(\"Response schema is correct\", () => {",
									"        schemaValidationPassed = eval(globals.schemaValidator)(\"validationSchema\", jsonData);",
									"        pm.expect(schemaValidationPassed).to.be.eql(true);",
									"    });",
									"",
									"    pm.response.to.have.status(400)",
									"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
									"        && pm.expect(category).to.eql(\"ERROR\")",
									"        && pm.expect(errorCode).to.eql(\"ExtensionCheck\");",
									"});",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4f398bde-107e-4650-ba82-64f948264b59",
								"exec": [
									"const newAttachmentName = \"\";",
									"pm.environment.set(\"newAttachmentName\", newAttachmentName);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/hal+json,application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{tokenValue}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{createdAttachmentId}}\",\r\n  \"mimetype\": \"application/pdf\",\r\n  \"filename\": \"{{newAttachmentName}}\"\r\n}"
						},
						"url": {
							"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents/{{createdDocWithAttachmentId}}/attachments/{{createdAttachmentId}}",
							"host": [
								"{{env_Documents}}"
							],
							"path": [
								"messaging",
								"api",
								"documents",
								"{{tenantId}}",
								"v1",
								"documents",
								"{{createdDocWithAttachmentId}}",
								"attachments",
								"{{createdAttachmentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "categoryEmptyFieldValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9fbddba-4017-4a3d-8493-8011c91c0c7d",
								"exec": [
									"// Execute standard tests from PrS using eval()",
									"//eval(globals.commonTests)();",
									"const jsonResponse = pm.response.json();",
									"const messages = jsonResponse._messages[0];",
									"const category = messages.category;",
									"const errorCode = messages.code;",
									"const errorText = messages.text;",
									"",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" category empty field validation is done\", function () {",
									"",
									"    var schemaValidationPassed = true;",
									"    var jsonData = JSON.parse(responseBody);",
									"",
									"    pm.test(\"Response schema is correct\", () => {",
									"        schemaValidationPassed = eval(globals.schemaValidator)(\"validationSchema\", jsonData);",
									"        pm.expect(schemaValidationPassed).to.be.eql(true);",
									"    });",
									"",
									"    pm.response.to.have.status(400)",
									"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
									"        && pm.expect(category).to.eql(\"ERROR\")",
									"        && pm.expect(errorCode).to.eql(\"ERR_NOT_NULL\")",
									"        && pm.expect(errorText).to.eql(\"must not be null\");",
									"});",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fdd9f791-fb56-404b-b071-d2913527bfe5",
								"exec": [
									"const createdCategoryName = \"\";",
									"const createdCategoryDesc = \"\";",
									"const createdCatCode = \"\";",
									"const createdSortCode = \"\";",
									"const createdCategoryRelevance = \"\";",
									"",
									"pm.environment.set(\"createdCategoryName\", createdCategoryName);",
									"pm.environment.set(\"createdCategoryDesc\", createdCategoryDesc);",
									"pm.environment.set(\"createdCatCode\", createdCatCode);",
									"pm.environment.set(\"createdSortCode\", createdSortCode);",
									"pm.environment.set(\"createdCategoryRelevance\", createdCategoryRelevance);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/hal+json,application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{tokenValue}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": \"{{createdCatCode}}\",\r\n  \"sortCode\": \"{{createdSortCode}}\",\r\n  \"type\": \"BANK_DOCUMENT\",\r\n  \"visible\": true,\r\n  \"relevance\": \"{{createdCategoryRelevance}}\",\r\n  \"name\": \"{{createdCategoryName}}\",\r\n  \"description\": \"{{createdCategoryDesc}}\"\r\n}"
						},
						"url": {
							"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/categories",
							"host": [
								"{{env_Documents}}"
							],
							"path": [
								"messaging",
								"api",
								"documents",
								"{{tenantId}}",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "categoryEmptyTypeFieldValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c0b3896-8dd8-4dec-a785-a6f9699ddb91",
								"exec": [
									"// Execute standard tests from PrS using eval()",
									"//eval(globals.commonTests)();",
									"const jsonResponse = pm.response.json();",
									"const messages = jsonResponse._messages[0];",
									"const category = messages.category;",
									"const errorCode = messages.code;",
									"const errorText = messages.text;",
									"",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" category empty field validation is done\", function () {",
									"",
									"    var schemaValidationPassed = true;",
									"    var jsonData = JSON.parse(responseBody);",
									"",
									"    pm.test(\"Response schema is correct\", () => {",
									"        schemaValidationPassed = eval(globals.schemaValidator)(\"validationSchema\", jsonData);",
									"        pm.expect(schemaValidationPassed).to.be.eql(true);",
									"    });",
									"",
									"    pm.response.to.have.status(400)",
									"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
									"        && pm.expect(category).to.eql(\"ERROR\")",
									"        && pm.expect(errorCode).to.eql(\"ERR_NOT_NULL\")",
									"        && pm.expect(errorText).to.eql(\"must not be null\");",
									"});",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "44bfd7d5-6b51-4a0e-9efd-4368cd2f992a",
								"exec": [
									"const createdCategoryName = \"\";",
									"const createdCategoryDesc = \"\";",
									"const createdCatCode = \"\";",
									"const createdSortCode = \"\";",
									"const createdCategoryRelevance = \"\";",
									"",
									"pm.environment.set(\"createdCategoryName\", createdCategoryName);",
									"pm.environment.set(\"createdCategoryDesc\", createdCategoryDesc);",
									"pm.environment.set(\"createdCatCode\", createdCatCode);",
									"pm.environment.set(\"createdSortCode\", createdSortCode);",
									"pm.environment.set(\"createdCategoryRelevance\", createdCategoryRelevance);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/hal+json,application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{tokenValue}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": \"{{createdCatCode}}\",\r\n  \"sortCode\": \"{{createdSortCode}}\",\r\n  \"type\": \"\",\r\n  \"visible\": true,\r\n  \"relevance\": \"{{createdCategoryRelevance}}\",\r\n  \"name\": \"{{createdCategoryName}}\",\r\n  \"description\": \"{{createdCategoryDesc}}\"\r\n}"
						},
						"url": {
							"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/categories",
							"host": [
								"{{env_Documents}}"
							],
							"path": [
								"messaging",
								"api",
								"documents",
								"{{tenantId}}",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Scope Validation Requests",
			"item": [
				{
					"name": "No Scope",
					"item": [
						{
							"name": "getAuthTestTokenWithNoScope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae5aae10-96a7-40cc-852a-288bb1adcbc4",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
											"    pm.response.to.not.be.error;",
											"    pm.environment.set(\"tokenValue\", pm.response.text());",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ca752a8f-46d7-4da1-88d6-3158d15666ca",
										"exec": [
											"// This is only required if there are multiple \"getToken\" requests and some need to be skipped",
											"postman.setNextRequest(\"getAllDocumentsWithNoScope\");",
											"",
											"console.log(\"Test Token url is: \" + pm.environment.get(\"env_security_testToken\"));",
											"",
											"// Set up pre-conditions with Chai Assertion library. https://www.chaijs.com/api/bdd/",
											"pm.expect(pm.environment.get(\"env_Documents\")).to.be.a('string', \"The env_Documents is not defined\");",
											"pm.expect(pm.environment.get(\"env_security_testToken\")).to.be.a('string', \"The env_security_testToken is not defined\");",
											"pm.expect(pm.environment.get(\"tenantId_security\")).to.be.a('string', \"The tenantId_security is not defined\");",
											"pm.expect(pm.environment.get(\"tenantName_security\")).to.be.a('string', \"The tenantName_security is not defined\");",
											"pm.expect(pm.environment.get(\"userName_documents\")).to.be.a('string', \"The userName_documents is not defined\");",
											"pm.expect(pm.environment.get(\"contractNo_documents\")).to.be.a('string', \"The contractNo_documents is not defined\");",
											"pm.expect(pm.environment.get(\"bcNo_security\")).to.be.a('string', \"The bcNo_security is not defined\");",
											"pm.expect(pm.environment.get(\"userId_documents\")).to.be.a('string', \"The userId_documents is not defined\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tenant_id\": {{tenantId_security}},\r\n  \"acsKey\": \"i6PiNObtdp2rCNW7mlV51BDSY4zAliSvBCyVsuML1000203567\",\r\n  \"tenant_name\": \"{{tenantName_security}}\",\r\n  \"user_name\": \"{{userId_documents}}\",\r\n  \"contractNo\": \"{{contractNo_documents}}\",\r\n  \"languageCode\": \"en\",\r\n  \"bcNo\": \"{{bcNo_security}}\",\r\n  \"authorities\": [\"DBAN_USER\"],\r\n  \"aud\": \"MESSAGING\",\r\n  \"client_id\": \"postman\",\r\n  \"user_id\": {{userId_documents}},\r\n  \"scope\": [],\r\n  \"loginName\": \"{{userId_documents}}\",\r\n  \"exp\": 32479694642,\r\n  \"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\r\n  \"iat\": 1553855569\r\n}"
								},
								"url": {
									"raw": "{{env_security_testToken}}",
									"host": [
										"{{env_security_testToken}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getAllDocumentsWithNoScope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2897a983-2740-44d3-a7c2-0d24f57002a5",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.scopeValidationTests)();\r",
											"const response = pm.response.json();\r",
											"const category = response._messages[0].category;\r",
											"const code = response._messages[0].code;\r",
											"const text = response._messages[0].text;\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Access is denied and response schema is validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"    pm.test(\"Request is forbbiden and error message is correct\", function () {\r",
											"\r",
											"        pm.expect(category).to.eql(\"ERROR\");\r",
											"        pm.expect(code).to.eql(\"ERROR_ACCESS_DENIED\");\r",
											"        pm.expect(text).to.eql(\"Access Denied (Scope): Access is denied\");\r",
											"\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(403)\r",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"        && pm.expect(category).to.eql(\"ERROR\")\r",
											"        && pm.expect(code).to.eql(\"ERROR_ACCESS_DENIED\")\r",
											"        && pm.expect(text).to.eql(\"Access Denied (Scope): Access is denied\");\r",
											"});\r",
											"\r",
											"pm.environment.set(\"accessDeniedCode\", code);\r",
											"pm.environment.set(\"accessDeniedText\", text);\r",
											"pm.environment.set(\"errorCategory\", category);\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents"
									]
								}
							},
							"response": []
						},
						{
							"name": "getDocumentCategoriesWithNoScope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a225fac7-2213-4693-ad09-1eeca900eda4",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.scopeValidationTests)();",
											"const response = pm.response.json();",
											"const category = response._messages[0].category;",
											"const code = response._messages[0].code;",
											"const text = response._messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Access is denied and response schema is validated\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"    pm.test(\"Request is forbbiden and error message is correct\", function () {",
											"",
											"        pm.expect(category).to.eql(errorCategory);",
											"        pm.expect(code).to.eql(accessDeniedCode);",
											"        pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    });",
											"    pm.response.to.have.status(403)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(category).to.eql(errorCategory)",
											"        && pm.expect(code).to.eql(accessDeniedCode)",
											"        && pm.expect(text).to.eql(accessDeniedText);",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									},
									{
										"key": "Accept",
										"value": "application/hal+json,application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/categories",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "getDocumentAttachmentsWithNoScope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "abce76e8-6b05-4f32-894e-e515d18d30c1",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.scopeValidationTests)();",
											"const response = pm.response.json();",
											"const category = response._messages[0].category;",
											"const code = response._messages[0].code;",
											"const text = response._messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Access is denied and response schema is validated\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"    pm.test(\"Request is forbbiden and error message is correct\", function () {",
											"",
											"        pm.expect(category).to.eql(errorCategory);",
											"        pm.expect(code).to.eql(accessDeniedCode);",
											"        pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    });",
											"    pm.response.to.have.status(403)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(category).to.eql(errorCategory)",
											"        && pm.expect(code).to.eql(accessDeniedCode)",
											"        && pm.expect(text).to.eql(accessDeniedText);",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/pdf,application/json,application/octet-stream"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents/{{createdDocWithAttachmentId}}/attachments/{{createdAttachmentId}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents",
										"{{createdDocWithAttachmentId}}",
										"attachments",
										"{{createdAttachmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "createNewDocumentWithNoScope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8119a41d-71f0-4ad5-be3d-7ec7d0d1606f",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.scopeValidationTests)();",
											"const response = pm.response.json();",
											"const category = response._messages[0].category;",
											"const code = response._messages[0].code;",
											"const text = response._messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Access is denied and response schema is validated\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"    pm.test(\"Request is forbbiden and error message is correct\", function () {",
											"",
											"        pm.expect(category).to.eql(errorCategory);",
											"        pm.expect(code).to.eql(accessDeniedCode);",
											"        pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    });",
											"    pm.response.to.have.status(403)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(category).to.eql(errorCategory)",
											"        && pm.expect(code).to.eql(accessDeniedCode)",
											"        && pm.expect(text).to.eql(accessDeniedText);",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "32371073-e1e0-4487-9294-92e01ce3dcbd",
										"exec": [
											"const newDocTitle = \"New Document_\" + Date.now();",
											"const newDocBody = \"This is the newly created document body\";",
											"pm.environment.set(\"newDocBody\", newDocBody);",
											"pm.environment.set(\"newDocTitle\", newDocTitle);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": " multipart/form-data"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "{{newDocTitle}}",
											"type": "text"
										},
										{
											"key": "body",
											"value": "{{newDocBody}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents"
									]
								}
							},
							"response": []
						},
						{
							"name": "createCategoryWithNoScope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19177087-a39a-4a1d-9131-3259de91a8ab",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.scopeValidationTests)();",
											"const response = pm.response.json();",
											"const category = response._messages[0].category;",
											"const code = response._messages[0].code;",
											"const text = response._messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Access is denied and response schema is validated\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"    pm.test(\"Request is forbbiden and error message is correct\", function () {",
											"",
											"        pm.expect(category).to.eql(errorCategory);",
											"        pm.expect(code).to.eql(accessDeniedCode);",
											"        pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    });",
											"    pm.response.to.have.status(403)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(category).to.eql(errorCategory)",
											"        && pm.expect(code).to.eql(accessDeniedCode)",
											"        && pm.expect(text).to.eql(accessDeniedText);",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "effda24d-5f96-4429-90be-c3e8a0375e27",
										"exec": [
											"pm.environment.set(\"createdCategory\", \"User_Created_Cat\" + Date.now());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"NewCategory\",\r\n  \"sortCode\": \"30\",\r\n  \"type\": \"BANK_DOCUMENT\",\r\n  \"visible\": true,\r\n  \"relevance\": 1,\r\n  \"name\": \"{{createdCategory}}\",\r\n  \"description\": \"this is a description for a user created category\"\r\n}"
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/categories",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "addAttachmentToDocumentWithNoScope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ca59bdb-9422-45e5-853d-ee814ce3cd50",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.scopeValidationTests)();",
											"const response = pm.response.json();",
											"const category = response._messages[0].category;",
											"const code = response._messages[0].code;",
											"const text = response._messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Access is denied and response schema is validated\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"    pm.test(\"Request is forbbiden and error message is correct\", function () {",
											"",
											"        pm.expect(category).to.eql(errorCategory);",
											"        pm.expect(code).to.eql(accessDeniedCode);",
											"        pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    });",
											"    pm.response.to.have.status(403)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(category).to.eql(errorCategory)",
											"        && pm.expect(code).to.eql(accessDeniedCode)",
											"        && pm.expect(text).to.eql(accessDeniedText);",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cd60405c-86b6-4dfb-9b41-af35f0ca8e01",
										"exec": [
											"const existingDocumentId = pm.environment.get(\"createdDocumentId\");",
											"",
											"pm.expect(existingDocumentId).to.be.a('string', \"The documentId is required to update the document\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"type": "file",
											"src": ""
										}
									]
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents/{{createdDocumentId}}/attachments",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents",
										"{{createdDocumentId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateDocumentWithNoScope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3b18571-1bc8-47bc-aa3b-6bc4d901b0d7",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.scopeValidationTests)();",
											"const response = pm.response.json();",
											"const category = response._messages[0].category;",
											"const code = response._messages[0].code;",
											"const text = response._messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Access is denied and response schema is validated\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"    pm.test(\"Request is forbbiden and error message is correct\", function () {",
											"",
											"        pm.expect(category).to.eql(errorCategory);",
											"        pm.expect(code).to.eql(accessDeniedCode);",
											"        pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    });",
											"    pm.response.to.have.status(403)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(category).to.eql(errorCategory)",
											"        && pm.expect(code).to.eql(accessDeniedCode)",
											"        && pm.expect(text).to.eql(accessDeniedText);",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "74db855e-a276-4209-83bc-3a3ba05d7653",
										"exec": [
											"const existingDocumentId = pm.environment.get(\"createdDocumentId\");",
											"",
											"pm.expect(existingDocumentId).to.be.a('string', \"The documentId is required to update the document\");",
											"",
											"const newDocName = \"Updated_document\" + Date.now();",
											"const updatedBody = \"This is the newly updated document body\";",
											"pm.environment.set(\"updatedBody\", updatedBody);",
											"pm.environment.set(\"newDocName\", newDocName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{createdDocumentId}}\",\r\n  \"title\": \"{{newDocName}}\",\r\n  \"body\": \"{{updatedBody}}\",\r\n  \"categoryCode\": \"{{categoryCode}}\",\r\n  \"type\": \"BANK_DOCUMENT\"\r\n}"
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents/{{createdDocumentId}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents",
										"{{createdDocumentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateCategoryWithNoScope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a1ea102-c7f3-4845-b4b6-07148d094943",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.scopeValidationTests)();",
											"const response = pm.response.json();",
											"const category = response._messages[0].category;",
											"const code = response._messages[0].code;",
											"const text = response._messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Access is denied and response schema is validated\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"    pm.test(\"Request is forbbiden and error message is correct\", function () {",
											"",
											"        pm.expect(category).to.eql(errorCategory);",
											"        pm.expect(code).to.eql(accessDeniedCode);",
											"        pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    });",
											"    pm.response.to.have.status(403)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(category).to.eql(errorCategory)",
											"        && pm.expect(code).to.eql(accessDeniedCode)",
											"        && pm.expect(text).to.eql(accessDeniedText);",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "922637aa-a20d-4ca4-b291-62ad053ec48d",
										"exec": [
											"const existingCategoryId = pm.environment.get(\"categoryId\");",
											"",
											"pm.expect(existingCategoryId).to.be.a('string', \"The categoryId is required to update the category\");",
											"",
											"const newCategoryName = \"Updated_category\" + Date.now();",
											"pm.environment.set(\"newCategoryName\", newCategoryName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{categoryId}}\",\r\n  \"sortCode\": \"{{sortCode}}\",\r\n  \"type\": \"BANK_DOCUMENT\",\r\n  \"visible\": true,\r\n  \"relevance\": 0,\r\n  \"name\": \"{{newCategoryName}}\",\r\n  \"description\": \"This is a description for an updated category\"\r\n}"
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/categories/{{categoryId}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"categories",
										"{{categoryId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateAttachmentWithNoScope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb37e697-c3a7-4cf0-9e96-29d3cd3066a8",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.scopeValidationTests)();",
											"const response = pm.response.json();",
											"const category = response._messages[0].category;",
											"const code = response._messages[0].code;",
											"const text = response._messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Access is denied and response schema is validated\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"    pm.test(\"Request is forbbiden and error message is correct\", function () {",
											"",
											"        pm.expect(category).to.eql(errorCategory);",
											"        pm.expect(code).to.eql(accessDeniedCode);",
											"        pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    });",
											"    pm.response.to.have.status(403)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(category).to.eql(errorCategory)",
											"        && pm.expect(code).to.eql(accessDeniedCode)",
											"        && pm.expect(text).to.eql(accessDeniedText);",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "343ff3a3-eede-44a6-a6bf-1b554d5aa0b0",
										"exec": [
											"const existingAttachmentId = pm.environment.get(\"createdAttachmentId\");",
											"const existingDocumentId = pm.environment.get(\"createdDocWithAttachmentId\");",
											"",
											"pm.expect(existingAttachmentId).to.be.a('string', \"The attachmentId is required to update the attachment\");",
											"pm.expect(existingDocumentId).to.be.a('string', \"The documentId is required to update the attachment\");",
											"",
											"const newAttachmentName = \"Updated_Attachment_Name\" + Date.now();",
											"pm.environment.set(\"newAttachmentName\", newAttachmentName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{createdAttachmentId}}\",\r\n  \"mimetype\": \"application/pdf\",\r\n  \"name\": \"{{newAttachmentName}}\",\r\n  \"encoding\": \"base64\"\r\n}"
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents/{{createdDocWithAttachmentId}}/attachments/{{createdAttachmentId}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents",
										"{{createdDocWithAttachmentId}}",
										"attachments",
										"{{createdAttachmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteDocumentWithNoScope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "324d45a7-b7c7-433a-ac76-82b5a2107a1e",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.scopeValidationTests)();",
											"const response = pm.response.json();",
											"const category = response._messages[0].category;",
											"const code = response._messages[0].code;",
											"const text = response._messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Access is denied and response schema is validated\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"    pm.test(\"Request is forbbiden and error message is correct\", function () {",
											"",
											"        pm.expect(category).to.eql(errorCategory);",
											"        pm.expect(code).to.eql(accessDeniedCode);",
											"        pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    });",
											"    pm.response.to.have.status(403)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(category).to.eql(errorCategory)",
											"        && pm.expect(code).to.eql(accessDeniedCode)",
											"        && pm.expect(text).to.eql(accessDeniedText);",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents/{{createdDocumentId}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents",
										"{{createdDocumentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteCategoryWithNoScope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2fa9e4eb-15ed-49af-9f16-8f2c08c576a0",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.scopeValidationTests)();",
											"const response = pm.response.json();",
											"const category = response._messages[0].category;",
											"const code = response._messages[0].code;",
											"const text = response._messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Access is denied and response schema is validated\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"    pm.test(\"Request is forbbiden and error message is correct\", function () {",
											"",
											"        pm.expect(category).to.eql(errorCategory);",
											"        pm.expect(code).to.eql(accessDeniedCode);",
											"        pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    });",
											"    pm.response.to.have.status(403)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(category).to.eql(errorCategory)",
											"        && pm.expect(code).to.eql(accessDeniedCode)",
											"        && pm.expect(text).to.eql(accessDeniedText);",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/categories/{{categoryId}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"categories",
										"{{categoryId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteAttachmentsWithNoScope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3843372-c54c-4e86-96de-33b19798ad9e",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.scopeValidationTests)();",
											"const response = pm.response.json();",
											"const category = response._messages[0].category;",
											"const code = response._messages[0].code;",
											"const text = response._messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Access is denied and response schema is validated\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"    pm.test(\"Request is forbbiden and error message is correct\", function () {",
											"",
											"        pm.expect(category).to.eql(errorCategory);",
											"        pm.expect(code).to.eql(accessDeniedCode);",
											"        pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    });",
											"    pm.response.to.have.status(403)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(category).to.eql(errorCategory)",
											"        && pm.expect(code).to.eql(accessDeniedCode)",
											"        && pm.expect(text).to.eql(accessDeniedText);",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7a0bf6e4-dd86-4a88-87d0-b9507688da11",
										"exec": [
											"const existingDocumentId = pm.environment.get(\"createdDocumentId\");",
											"",
											"pm.expect(existingDocumentId).to.be.a('string', \"The documentId is required to update the document\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents/{{createdDocumentId}}/attachments",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents",
										"{{createdDocumentId}}",
										"attachments"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Read Requests With Wrong Scope",
					"item": [
						{
							"name": "getAuthTestTokenWithWriteScope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "beef974a-5c7f-44d2-8480-52261ba5f9ed",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
											"    pm.response.to.not.be.error;",
											"    pm.environment.set(\"tokenValue\", pm.response.text());",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "aadf89ad-0b42-4baf-a529-b55c15404f7f",
										"exec": [
											"// This is only required if there are multiple \"getToken\" requests and some need to be skipped",
											"postman.setNextRequest(\"getAllDocumentsWithWrongReadScope\");",
											"",
											"console.log(\"Test Token url is: \" + pm.environment.get(\"env_security_testToken\"));",
											"",
											"// Set up pre-conditions with Chai Assertion library. https://www.chaijs.com/api/bdd/",
											"pm.expect(pm.environment.get(\"env_Documents\")).to.be.a('string', \"The env_Documents is not defined\");",
											"pm.expect(pm.environment.get(\"env_security_testToken\")).to.be.a('string', \"The env_security_testToken is not defined\");",
											"pm.expect(pm.environment.get(\"tenantId_security\")).to.be.a('string', \"The tenantId_security is not defined\");",
											"pm.expect(pm.environment.get(\"tenantName_security\")).to.be.a('string', \"The tenantName_security is not defined\");",
											"pm.expect(pm.environment.get(\"userName_documents\")).to.be.a('string', \"The userName_documents is not defined\");",
											"pm.expect(pm.environment.get(\"contractNo_documents\")).to.be.a('string', \"The contractNo_documents is not defined\");",
											"pm.expect(pm.environment.get(\"bcNo_security\")).to.be.a('string', \"The bcNo_security is not defined\");",
											"pm.expect(pm.environment.get(\"userId_documents\")).to.be.a('string', \"The userId_documents is not defined\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tenant_id\": {{tenantId_security}},\r\n  \"acsKey\": \"i6PiNObtdp2rCNW7mlV51BDSY4zAliSvBCyVsuML1000203567\",\r\n  \"tenant_name\": \"{{tenantName_security}}\",\r\n  \"user_name\": \"{{userId_documents}}\",\r\n  \"contractNo\": \"{{contractNo_documents}}\",\r\n  \"languageCode\": \"en\",\r\n  \"bcNo\": \"{{bcNo_security}}\",\r\n  \"authorities\": [\"DBAN_USER\"],\r\n  \"aud\": \"MESSAGING\",\r\n  \"client_id\": \"postman\",\r\n  \"user_id\": {{userId_documents}},\r\n  \"scope\": [\r\n  \t\"https://api.crealogix.com/dban\",\r\n    \"https://api.crealogix.com/messages/document.category.write\",\r\n    \"https://api.crealogix.com/messages/document.write\"\r\n  \t],\r\n  \"loginName\": \"{{userId_documents}}\",\r\n  \"exp\": 32479694642,\r\n  \"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\r\n  \"iat\": 1553855569\r\n}"
								},
								"url": {
									"raw": "{{env_security_testToken}}",
									"host": [
										"{{env_security_testToken}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getAllDocumentsWithWrongReadScope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d37ff30c-b445-4311-b02f-0eb3679b5e32",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.scopeValidationTests)();",
											"const response = pm.response.json();",
											"const category = response._messages[0].category;",
											"const code = response._messages[0].code;",
											"const text = response._messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Access is denied and response schema is validated\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"    pm.test(\"Request is forbbiden and error message is correct\", function () {",
											"",
											"        pm.expect(category).to.eql(errorCategory);",
											"        pm.expect(code).to.eql(accessDeniedCode);",
											"        pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    });",
											"    pm.response.to.have.status(403)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(category).to.eql(errorCategory)",
											"        && pm.expect(code).to.eql(accessDeniedCode)",
											"        && pm.expect(text).to.eql(accessDeniedText);",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents"
									]
								}
							},
							"response": []
						},
						{
							"name": "getDocumentCategoriesWithWrongReadScope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05e3d305-bf81-4d92-a313-847dd241af58",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.scopeValidationTests)();",
											"const response = pm.response.json();",
											"const category = response._messages[0].category;",
											"const code = response._messages[0].code;",
											"const text = response._messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Access is denied and response schema is validated\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"    pm.test(\"Request is forbbiden and error message is correct\", function () {",
											"",
											"        pm.expect(category).to.eql(errorCategory);",
											"        pm.expect(code).to.eql(accessDeniedCode);",
											"        pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    });",
											"    pm.response.to.have.status(403)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(category).to.eql(errorCategory)",
											"        && pm.expect(code).to.eql(accessDeniedCode)",
											"        && pm.expect(text).to.eql(accessDeniedText);",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									},
									{
										"key": "Accept",
										"value": "application/hal+json,application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/categories",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "getDocumentAttachmentsWithWrongReadScope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "120712d0-f6bb-4a0c-84ba-a1cc711bc80b",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.scopeValidationTests)();",
											"const response = pm.response.json();",
											"const category = response._messages[0].category;",
											"const code = response._messages[0].code;",
											"const text = response._messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Access is denied and response schema is validated\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"    pm.test(\"Request is forbbiden and error message is correct\", function () {",
											"",
											"        pm.expect(category).to.eql(errorCategory);",
											"        pm.expect(code).to.eql(accessDeniedCode);",
											"        pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    });",
											"    pm.response.to.have.status(403)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(category).to.eql(errorCategory)",
											"        && pm.expect(code).to.eql(accessDeniedCode)",
											"        && pm.expect(text).to.eql(accessDeniedText);",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/pdf,application/json,application/octet-stream"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents/{{createdDocWithAttachmentId}}/attachments",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents",
										"{{createdDocWithAttachmentId}}",
										"attachments"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Write Requests With Wrong Scope",
					"item": [
						{
							"name": "getAuthTestTokenWithReadScope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e271c1fb-663c-4873-a790-99e439c1c02c",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
											"    pm.response.to.not.be.error;",
											"    pm.environment.set(\"tokenValue\", pm.response.text());",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7b4cac95-14c0-4410-a0a3-8b58e3c190b1",
										"exec": [
											"// This is only required if there are multiple \"getToken\" requests and some need to be skipped",
											"postman.setNextRequest(\"createNewDocumentWithWrongWriteScope\");",
											"",
											"console.log(\"Test Token url is: \" + pm.environment.get(\"env_security_testToken\"));",
											"",
											"// Set up pre-conditions with Chai Assertion library. https://www.chaijs.com/api/bdd/",
											"pm.expect(pm.environment.get(\"env_Documents\")).to.be.a('string', \"The env_Documents is not defined\");",
											"pm.expect(pm.environment.get(\"env_security_testToken\")).to.be.a('string', \"The env_security_testToken is not defined\");",
											"pm.expect(pm.environment.get(\"tenantId_security\")).to.be.a('string', \"The tenantId_security is not defined\");",
											"pm.expect(pm.environment.get(\"tenantName_security\")).to.be.a('string', \"The tenantName_security is not defined\");",
											"pm.expect(pm.environment.get(\"userName_documents\")).to.be.a('string', \"The userName_documents is not defined\");",
											"pm.expect(pm.environment.get(\"contractNo_documents\")).to.be.a('string', \"The contractNo_documents is not defined\");",
											"pm.expect(pm.environment.get(\"bcNo_security\")).to.be.a('string', \"The bcNo_security is not defined\");",
											"pm.expect(pm.environment.get(\"userId_documents\")).to.be.a('string', \"The userId_documents is not defined\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tenant_id\": {{tenantId_security}},\r\n  \"acsKey\": \"i6PiNObtdp2rCNW7mlV51BDSY4zAliSvBCyVsuML1000203567\",\r\n  \"tenant_name\": \"{{tenantName_security}}\",\r\n  \"user_name\": \"{{userId_documents}}\",\r\n  \"contractNo\": \"{{contractNo_documents}}\",\r\n  \"languageCode\": \"en\",\r\n  \"bcNo\": \"{{bcNo_security}}\",\r\n  \"authorities\": [\"DBAN_USER\"],\r\n  \"aud\": \"MESSAGING\",\r\n  \"client_id\": \"postman\",\r\n  \"user_id\": {{userId_documents}},\r\n  \"scope\": [\r\n  \t\"https://api.crealogix.com/dban\",\r\n    \"https://api.crealogix.com/messages/document.category.read\",\r\n    \"https://api.crealogix.com/messages/document.read\"\r\n  \t],\r\n  \"loginName\": \"{{userId_documents}}\",\r\n  \"exp\": 32479694642,\r\n  \"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\r\n  \"iat\": 1553855569\r\n}"
								},
								"url": {
									"raw": "{{env_security_testToken}}",
									"host": [
										"{{env_security_testToken}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "createNewDocumentWithWrongWriteScope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c28b359-5b5e-4b85-a79a-f372235ec7ff",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.scopeValidationTests)();",
											"const response = pm.response.json();",
											"const category = response._messages[0].category;",
											"const code = response._messages[0].code;",
											"const text = response._messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Access is denied and response schema is validated\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"    pm.test(\"Request is forbbiden and error message is correct\", function () {",
											"",
											"        pm.expect(category).to.eql(errorCategory);",
											"        pm.expect(code).to.eql(accessDeniedCode);",
											"        pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    });",
											"    pm.response.to.have.status(403)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(category).to.eql(errorCategory)",
											"        && pm.expect(code).to.eql(accessDeniedCode)",
											"        && pm.expect(text).to.eql(accessDeniedText);",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b80794b5-71b8-4b50-acc1-b1e680f3c8ba",
										"exec": [
											"const newDocTitle = \"New Document_\" + Date.now();",
											"const newDocBody = \"This is the newly created document body\";",
											"pm.environment.set(\"newDocBody\", newDocBody);",
											"pm.environment.set(\"newDocTitle\", newDocTitle);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": " multipart/form-data"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "{{newDocTitle}}",
											"type": "text"
										},
										{
											"key": "body",
											"value": "{{newDocBody}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents"
									]
								}
							},
							"response": []
						},
						{
							"name": "createCategoryWithWrongWriteScope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66302da2-1726-4ed2-ae0a-e57ae824b798",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.scopeValidationTests)();",
											"const response = pm.response.json();",
											"const category = response._messages[0].category;",
											"const code = response._messages[0].code;",
											"const text = response._messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Access is denied and response schema is validated\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"    pm.test(\"Request is forbbiden and error message is correct\", function () {",
											"",
											"        pm.expect(category).to.eql(errorCategory);",
											"        pm.expect(code).to.eql(accessDeniedCode);",
											"        pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    });",
											"    pm.response.to.have.status(403)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(category).to.eql(errorCategory)",
											"        && pm.expect(code).to.eql(accessDeniedCode)",
											"        && pm.expect(text).to.eql(accessDeniedText);",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3637c3e2-1e02-472c-abf2-8863f36f0532",
										"exec": [
											"pm.environment.set(\"createdCategory\", \"User_Created_Cat\" + Date.now());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"NewCategory\",\r\n  \"sortCode\": \"30\",\r\n  \"type\": \"BANK_DOCUMENT\",\r\n  \"visible\": true,\r\n  \"relevance\": 1,\r\n  \"name\": \"{{createdCategory}}\",\r\n  \"description\": \"this is a description for a user created category\"\r\n}"
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/categories",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "addAttachmentToDocumentWithWrongWriteScope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9642e3b-fa82-45a1-a2cf-382401765433",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.scopeValidationTests)();",
											"const response = pm.response.json();",
											"const category = response._messages[0].category;",
											"const code = response._messages[0].code;",
											"const text = response._messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Access is denied and response schema is validated\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"    pm.test(\"Request is forbbiden and error message is correct\", function () {",
											"",
											"        pm.expect(category).to.eql(errorCategory);",
											"        pm.expect(code).to.eql(accessDeniedCode);",
											"        pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    });",
											"    pm.response.to.have.status(403)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(category).to.eql(errorCategory)",
											"        && pm.expect(code).to.eql(accessDeniedCode)",
											"        && pm.expect(text).to.eql(accessDeniedText);",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"type": "file",
											"src": ""
										}
									]
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents/{{createdDocumentId}}/attachments",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents",
										"{{createdDocumentId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateDocumentWithWrongWriteScope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc086910-bce1-467f-8279-a8f0d89657b3",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.scopeValidationTests)();",
											"const response = pm.response.json();",
											"const category = response._messages[0].category;",
											"const code = response._messages[0].code;",
											"const text = response._messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Access is denied and response schema is validated\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"    pm.test(\"Request is forbbiden and error message is correct\", function () {",
											"",
											"        pm.expect(category).to.eql(errorCategory);",
											"        pm.expect(code).to.eql(accessDeniedCode);",
											"        pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    });",
											"    pm.response.to.have.status(403)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(category).to.eql(errorCategory)",
											"        && pm.expect(code).to.eql(accessDeniedCode)",
											"        && pm.expect(text).to.eql(accessDeniedText);",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d3d2793b-a167-4594-965c-38ca15937413",
										"exec": [
											"const existingDocumentId = pm.environment.get(\"createdDocumentId\");",
											"",
											"pm.expect(existingDocumentId).to.be.a('string', \"The documentId is required to update the document\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{createdDocumentId}}\",\r\n  \"title\": \"{{newDocName}}\",\r\n  \"body\": \"{{updatedBody}}\",\r\n  \"categoryCode\": \"{{categoryCode}}\",\r\n  \"type\": \"BANK_DOCUMENT\"\r\n}"
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents/{{createdDocumentId}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents",
										"{{createdDocumentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateCategoryWithWrongWriteScope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e69fa2b-f32c-4350-b7b4-1caf3c5a458a",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.scopeValidationTests)();",
											"const response = pm.response.json();",
											"const category = response._messages[0].category;",
											"const code = response._messages[0].code;",
											"const text = response._messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Access is denied and response schema is validated\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"    pm.test(\"Request is forbbiden and error message is correct\", function () {",
											"",
											"        pm.expect(category).to.eql(errorCategory);",
											"        pm.expect(code).to.eql(accessDeniedCode);",
											"        pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    });",
											"    pm.response.to.have.status(403)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(category).to.eql(errorCategory)",
											"        && pm.expect(code).to.eql(accessDeniedCode)",
											"        && pm.expect(text).to.eql(accessDeniedText);",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "34887baf-36f6-4b00-a48c-eeb9e3e96e45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{createdCatId}}\",\r\n  \"sortCode\": \"{{sortCode}}\",\r\n  \"type\": \"BANK_DOCUMENT\",\r\n  \"visible\": true,\r\n  \"relevance\": 0,\r\n  \"name\": \"newCategoryName\",\r\n  \"description\": \"This is a description for an updated category\"\r\n}"
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/categories/{{createdCatId}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"categories",
										"{{createdCatId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateAttachmentWithWrongWriteScope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd7ed2b1-13ba-43b8-9efc-91485254d959",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.scopeValidationTests)();",
											"const response = pm.response.json();",
											"const category = response._messages[0].category;",
											"const code = response._messages[0].code;",
											"const text = response._messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Access is denied and response schema is validated\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"    pm.test(\"Request is forbbiden and error message is correct\", function () {",
											"",
											"        pm.expect(category).to.eql(errorCategory);",
											"        pm.expect(code).to.eql(accessDeniedCode);",
											"        pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    });",
											"    pm.response.to.have.status(403)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(category).to.eql(errorCategory)",
											"        && pm.expect(code).to.eql(accessDeniedCode)",
											"        && pm.expect(text).to.eql(accessDeniedText);",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "021c21f3-7bd8-4872-83cc-18a5d1b4f3b1",
										"exec": [
											"",
											"const newAttachmentName = \"Updated_Attachment_Name.pdf\";",
											"pm.environment.set(\"newAttachmentName\", newAttachmentName); //a few milliseconds later this should be a different attachment name",
											"",
											"console.log(`Renaming attachment to ${newAttachmentName}`);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{createdAttachmentId}}\",\r\n  \"mimetype\": \"application/pdf\",\r\n  \"filename\": \"{{newAttachmentName}}\"\r\n}"
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents/{{createdDocWithAttachmentId}}/attachments/{{createdAttachmentId}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents",
										"{{createdDocWithAttachmentId}}",
										"attachments",
										"{{createdAttachmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteDocumentWithWrongWriteScope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0dc61f5-82e5-4a3e-9bf5-97d34830e0a3",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.scopeValidationTests)();",
											"const response = pm.response.json();",
											"const category = response._messages[0].category;",
											"const code = response._messages[0].code;",
											"const text = response._messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Access is denied and response schema is validated\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"    pm.test(\"Request is forbbiden and error message is correct\", function () {",
											"",
											"        pm.expect(category).to.eql(errorCategory);",
											"        pm.expect(code).to.eql(accessDeniedCode);",
											"        pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    });",
											"    pm.response.to.have.status(403)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(category).to.eql(errorCategory)",
											"        && pm.expect(code).to.eql(accessDeniedCode)",
											"        && pm.expect(text).to.eql(accessDeniedText);",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents/{{createdDocumentId}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents",
										"{{createdDocumentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteCategoryWithWrongWriteScope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff81d71c-0bb5-41c8-bdaf-f2da07797f29",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.scopeValidationTests)();",
											"const response = pm.response.json();",
											"const category = response._messages[0].category;",
											"const code = response._messages[0].code;",
											"const text = response._messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Access is denied and response schema is validated\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"    pm.test(\"Request is forbbiden and error message is correct\", function () {",
											"",
											"        pm.expect(category).to.eql(errorCategory);",
											"        pm.expect(code).to.eql(accessDeniedCode);",
											"        pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    });",
											"    pm.response.to.have.status(403)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(category).to.eql(errorCategory)",
											"        && pm.expect(code).to.eql(accessDeniedCode)",
											"        && pm.expect(text).to.eql(accessDeniedText);",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/categories/{{createdCatId}}",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"categories",
										"{{createdCatId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteAttachmentsWithWrongWriteScope",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a80b946-868c-46f1-8623-6b86ce531bdc",
										"exec": [
											"// Execute standard tests from PrS using eval()",
											"//eval(globals.scopeValidationTests)();",
											"const response = pm.response.json();",
											"const category = response._messages[0].category;",
											"const code = response._messages[0].code;",
											"const text = response._messages[0].text;",
											"const accessDeniedText = pm.environment.get(\"accessDeniedText\");",
											"const accessDeniedCode = pm.environment.get(\"accessDeniedCode\");",
											"const errorCategory = pm.environment.get(\"errorCategory\");",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Access is denied and response schema is validated\", function () {",
											"",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accessDeniedSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"    pm.test(\"Request is forbbiden and error message is correct\", function () {",
											"",
											"        pm.expect(category).to.eql(errorCategory);",
											"        pm.expect(code).to.eql(accessDeniedCode);",
											"        pm.expect(text).to.eql(accessDeniedText);",
											"",
											"    });",
											"    pm.response.to.have.status(403)",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true)",
											"        && pm.expect(category).to.eql(errorCategory)",
											"        && pm.expect(code).to.eql(accessDeniedCode)",
											"        && pm.expect(text).to.eql(accessDeniedText);",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json,application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{tokenValue}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_Documents}}/messaging/api/documents/{{tenantId}}/v1/documents/{{createdDocWithAttachmentId}}/attachments",
									"host": [
										"{{env_Documents}}"
									],
									"path": [
										"messaging",
										"api",
										"documents",
										"{{tenantId}}",
										"v1",
										"documents",
										"{{createdDocWithAttachmentId}}",
										"attachments"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Clean TestRail Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e58bd4d5-4566-4a1b-bbb7-f109b74145de",
								"exec": [
									"// Prepare list of TestRail tests for 'Clean TestRail Run' request",
									"//var execTests = pm.globals.get(\"testRailTestsInRun\");",
									"var execTests = data.executedTests;",
									"console.log(\"TestRail, tests executed in last run: \" + execTests);",
									"execTests = execTests.replace(/C/g, \"\");",
									"//console.log(\"TestRail, first cleanup: \" + execTests);",
									"execTests = execTests.replace(/ /g, \", \");",
									"//console.log(\"TestRail, second cleanup: \" + execTests);",
									"execTests = execTests.replace(/,,/g, \",\");",
									"pm.globals.set(\"testRailTestsInRun\", execTests); ",
									"",
									"var array = JSON.parse(\"[\" + execTests + \"]\"); //convert string to array",
									"for(let i = 0; i < 10; i++){",
									"    let runId = JSON.parse(responseBody)[i].id;",
									"    let runName = JSON.parse(responseBody)[i].name;",
									"    let runSuiteId = JSON.parse(responseBody)[i].suite_id;",
									"    if (runName === \"MODULE-Documents\") { //determine proper run",
									"        //console.log(runId);   ",
									"        console.log(\"TestRail run '\" + runId + \"' updating for tests: \" + execTests);",
									"        pm.sendRequest({",
									"            url: \"https://testrail.ebs.crealogix.net/index.php?/api/v2/update_run/\" + runId,",
									"            method: \"POST\",",
									"            header: {",
									"                \"Authorization\": \"Basic bWlsYW4ua2FyYWRlZ2xpY0BjcmVhbG9naXguY29tOlNTQ25hcG9saTEyMzQ1Njc4OQ==\",",
									"                \"Content-Type\": \"application/json\"",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ include_all: false, case_ids: array })",
									"        \t}",
									"        });",
									"        break;",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "721eeb1f-6cb4-49af-86b4-80bbcd48746b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "SSCnapoli123456789",
									"type": "string"
								},
								{
									"key": "username",
									"value": "milan.karadeglic@crealogix.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json; charset=UTF-8"
							},
							{
								"key": "accept",
								"value": "application/json, application/hal+json"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{tokenValue}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://testrail.ebs.crealogix.net/index.php?/api/v2/get_runs/8",
							"protocol": "https",
							"host": [
								"testrail",
								"ebs",
								"crealogix",
								"net"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "/api/v2/get_runs/8",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "19833121-0b84-4190-a47a-d6dfc474cb15",
				"type": "text/javascript",
				"exec": [
					"//************************************************************************************************",
					"// variable initialization************************************************************************",
					"//************************************************************************************************",
					"var test = pm.environment.get(\"testRailTestsInRun\");",
					"if (!test) {",
					"    pm.environment.set(\"testRailTestsInRun\", \"\");",
					"}",
					"",
					"//************************************************************************************************",
					"// connect to TestRail ***************************************************************************",
					"//************************************************************************************************",
					"pm.globals.set(\"TESTRAIL_DOMAIN\", \"testrail.ebs.crealogix.net\");",
					"pm.globals.set(\"TESTRAIL_USERNAME\", \"milan.karadeglic@crealogix.com\");",
					"pm.globals.set(\"TESTRAIL_APIKEY\", \"Q4MlDw1e70Kxh1g1YPq9-Dg0abDWer.pSWcVWcxO4\");",
					"pm.globals.set(\"TESTRAIL_PROJECTID\", 8);",
					"pm.globals.set(\"TESTRAIL_TITLE\", \"Postman API Tests\");",
					"",
					"//************************************************************************************************",
					"// Schema for 'documentsSchema' ******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const documentsAllSchema = {",
					"    \"additionalProperties\": true,",
					"    \"required\": [",
					"        \"embedded\",",
					"        \"page\",",
					"        \"links\"",
					"    ],",
					"    \"properties\": {",
					"        \"embedded\": {",
					"            \"type\": \"array\",",
					"            \"additionalItems\": true,",
					"            \"items\": {",
					"                \"type\": \"object\",",
					"                \"additionalProperties\": true,",
					"                \"required\": [",
					"                    \"id\",",
					"                    \"tenantId\",",
					"                    \"category\",",
					"                    \"customerId\",",
					"                    \"publishingDate\",",
					"                    \"referencedObjectType\",",
					"                    \"senderName\",",
					"                    \"isRead\",",
					"                    \"referencedObjectNo\",",
					"                    \"dateRead\",",
					"                    \"title\",",
					"                    \"body\",",
					"                    \"deleted\",",
					"                    \"attachments\",",
					"                    \"self\"",
					"                ],",
					"                \"properties\": {",
					"                    \"id\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"                    \"tenantId\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"                    \"category\": {",
					"                        \"type\": [\"object\",\"null\"],",
					"                        \"additionalProperties\": true,",
					"                        \"required\": [",
					"                            \"id\",",
					"                            \"tenantId\",",
					"                            \"code\",",
					"                            \"type\",",
					"                            \"name\",",
					"                            \"createdOn\",",
					"                            \"self\"",
					"                        ],",
					"                        \"properties\": {",
					"                            \"id\": {",
					"                                \"type\": \"string\"",
					"                            },",
					"                            \"tenantId\": {",
					"                                \"type\": \"string\"",
					"                            },",
					"                            \"code\": {",
					"                                \"type\": \"string\"",
					"                            },",
					"                            \"type\": {",
					"                                \"type\": \"string\"",
					"                            },",
					"                            \"name\": {",
					"                                \"type\": \"string\"",
					"                            },",
					"                            \"createdOn\": {",
					"                                \"type\": \"string\"",
					"                            },",
					"                            \"self\": {",
					"                                \"type\": \"object\",",
					"                                \"additionalProperties\": true,",
					"                                \"required\": [",
					"                                    \"href\"",
					"                                ],",
					"                                \"properties\": {",
					"                                    \"href\": {",
					"                                        \"type\": \"string\"",
					"                                    }",
					"                                }",
					"                            }",
					"                        }",
					"                    },",
					"                    \"customerId\": {",
					"                        \"type\": \"null\"",
					"                    },",
					"                    \"publishingDate\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"                    \"referencedObjectType\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"                    \"senderName\": {",
					"                        \"type\": \"null\"",
					"                    },",
					"                    \"isRead\": {",
					"                        \"type\": \"null\"",
					"                    },",
					"                    \"referencedObjectNo\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"                    \"dateRead\": {",
					"                        \"type\": \"null\"",
					"                    },",
					"                    \"title\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"                    \"body\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"                    \"deleted\": {",
					"                        \"type\": \"null\"",
					"                    },",
					"                    \"attachments\": {",
					"                        \"type\": \"array\",",
					"                        \"additionalItems\": true,",
					"                        \"items\": {",
					"                            \"type\": \"object\",",
					"                            \"additionalProperties\": true,",
					"                            \"required\": [",
					"                                \"id\",",
					"                                \"mimetype\",",
					"                                \"name\",",
					"                                \"self\",",
					"                                \"publishingDate\",",
					"                                \"size\",",
					"                                \"encoding\"",
					"                            ],",
					"                            \"properties\": {",
					"                                \"id\": {",
					"                                    \"type\": \"string\"",
					"                                },",
					"                                \"mimetype\": {",
					"                                    \"type\": \"string\"",
					"                                },",
					"                                  \"name\": {",
					"                                    \"type\": \"string\"",
					"                                },",
					"                                \"self\": {",
					"                                    \"type\": \"object\",",
					"                                    \"additionalProperties\": true,",
					"                                    \"required\": [",
					"                                        \"href\"",
					"                                    ],",
					"                                    \"properties\": {",
					"                                        \"href\": {",
					"                                            \"type\": \"string\"",
					"                                        }",
					"                                    }",
					"                                },",
					"                                \"publishingDate\": {",
					"                                    \"type\": \"string\"",
					"                                },",
					"                                \"size\": {",
					"                                    \"type\": \"number\"",
					"                                },",
					"                                \"encoding\": {",
					"                                    \"type\": \"null\"",
					"                                }",
					"                            }",
					"                        }",
					"                    },",
					"                    \"self\": {",
					"                        \"type\": \"object\",",
					"                        \"additionalProperties\": true,",
					"                        \"required\": [",
					"                            \"href\"",
					"                        ],",
					"                        \"properties\": {",
					"                            \"href\": {",
					"                                \"type\": \"string\"",
					"                            }",
					"                        }",
					"                    }",
					"                }",
					"            }",
					"        },",
					"        \"page\": {",
					"            \"type\": \"object\",",
					"            \"additionalProperties\": true,",
					"            \"required\": [",
					"                \"number\",",
					"                \"size\",",
					"                \"totalElements\",",
					"                \"totalPages\"",
					"            ],",
					"            \"properties\": {",
					"                \"number\": {",
					"                    \"type\": \"integer\"",
					"                },",
					"                \"size\": {",
					"                    \"type\": \"integer\"",
					"                },",
					"                \"totalElements\": {",
					"                    \"type\": \"integer\"",
					"                },",
					"                \"totalPages\": {",
					"                    \"type\": \"integer\"",
					"                }",
					"            }",
					"        },",
					"        \"links\": {",
					"            \"type\": \"object\",",
					"            \"additionalProperties\": true,",
					"            \"required\": [",
					"                \"first\",",
					"                \"last\",",
					"                \"next\",",
					"                \"prev\",",
					"                \"current\"",
					"            ],",
					"            \"properties\": {",
					"                \"first\": {",
					"                    \"type\": \"object\",",
					"                    \"additionalProperties\": true,",
					"                    \"required\": [",
					"                        \"href\"",
					"                    ],",
					"                    \"properties\": {",
					"                        \"href\": {",
					"                            \"type\": \"string\"",
					"                        }",
					"                    }",
					"                },",
					"                \"last\": {",
					"                    \"type\": \"object\",",
					"                    \"additionalProperties\": true,",
					"                    \"required\": [",
					"                        \"href\"",
					"                    ],",
					"                    \"properties\": {",
					"                        \"href\": {",
					"                            \"type\": \"string\"",
					"                        }",
					"                    }",
					"                },",
					"                \"next\": {",
					"                    \"type\": \"object\",",
					"                    \"additionalProperties\": true,",
					"                    \"required\": [",
					"                        \"href\"",
					"                    ],",
					"                    \"properties\": {",
					"                        \"href\": {",
					"                            \"type\": \"string\"",
					"                        }",
					"                    }",
					"                },",
					"                \"prev\": {",
					"                    \"type\": \"object\",",
					"                    \"additionalProperties\": true,",
					"                    \"required\": [",
					"                        \"href\"",
					"                    ],",
					"                    \"properties\": {",
					"                        \"href\": {",
					"                            \"type\": \"string\"",
					"                        }",
					"                    }",
					"                },",
					"                \"current\": {",
					"                    \"type\": \"object\",",
					"                    \"additionalProperties\": true,",
					"                    \"required\": [",
					"                        \"href\"",
					"                    ],",
					"                    \"properties\": {",
					"                        \"href\": {",
					"                            \"type\": \"string\"",
					"                        }",
					"                    }",
					"                }",
					"            }",
					"        }",
					"    }",
					"};",
					"pm.environment.set(\"documentsAllSchema\", documentsAllSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'newDocumentSchema' ****************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const newDocumentSchema = {",
					"    \"type\": \"object\",",
					"    \"required\": [",
					"        \"id\",",
					"        \"tenantId\",",
					"        \"category\",",
					"        \"customerId\",",
					"        \"publishingDate\",",
					"        \"referencedObjectType\",",
					"        \"senderName\",",
					"        \"isRead\",",
					"        \"referencedObjectNo\",",
					"        \"dateRead\",",
					"        \"title\",",
					"        \"body\",",
					"        \"deleted\",",
					"        \"attachments\",",
					"        \"self\"",
					"    ],",
					"    \"properties\": {",
					"        \"id\": {",
					"            \"type\": \"string\",",
					"            \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"tenantId\": {",
					"            \"type\": \"string\",",
					"            \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"category\": {",
					"            \"type\": \"object\",",
					"            \"required\": [",
					"                \"id\",",
					"                \"tenantId\",",
					"                \"code\",",
					"                \"type\",",
					"                \"name\",",
					"                \"createdOn\",",
					"                \"self\"",
					"            ],",
					"            \"properties\": {",
					"                \"id\": {",
					"                    \"type\": \"string\",",
					"                    \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"tenantId\": {",
					"                    \"type\": \"string\",",
					"                    \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"code\": {",
					"                    \"type\": \"string\",",
					"                    \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"type\": {",
					"                    \"type\": \"string\",",
					"                    \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"name\": {",
					"                    \"type\": \"string\",",
					"                    \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"createdOn\": {",
					"                    \"type\": \"string\",",
					"                    \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"self\": {",
					"                    \"type\": \"object\",",
					"                    \"properties\": {",
					"                        \"href\": {",
					"                            \"type\": \"string\",",
					"                            \"pattern\": \"^(.*)$\"",
					"                        }",
					"                    }",
					"                }",
					"            }",
					"        },",
					"        \"customerId\": {",
					"            \"type\": [\"string\",\"null\"],",
					"            \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"publishingDate\": {",
					"            \"type\": \"string\",",
					"            \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"referencedObjectType\": {",
					"            \"type\": \"string\",",
					"            \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"senderName\": {",
					"            \"type\": \"string\",",
					"            \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"isRead\": {",
					"            \"type\": [\"boolean\",\"null\"]",
					"        },",
					"        \"referencedObjectNo\": {",
					"            \"type\": \"string\",",
					"            \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"dateRead\": {",
					"            \"type\": [\"string\",\"null\"],",
					"            \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"title\": {",
					"            \"type\": \"string\",",
					"            \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"body\": {",
					"            \"type\": \"string\",",
					"            \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"deleted\": {",
					"            \"type\": [\"boolean\",\"null\"]",
					"        },",
					"        \"attachments\": {",
					"            \"type\": \"array\",",
					"            \"items\": {",
					"                \"type\": \"object\",",
					"                \"required\": [",
					"                    \"id\",",
					"                    \"mimetype\",",
					"                    \"name\",",
					"                    \"self\",",
					"                    \"publishingDate\",",
					"                    \"size\",",
					"                    \"encoding\"",
					"                ],",
					"                \"properties\": {",
					"                    \"id\": {",
					"                        \"type\": \"string\",",
					"                        \"pattern\": \"^(.*)$\"",
					"                    },",
					"                    \"mimetype\": {",
					"                        \"type\": \"string\",",
					"                        \"pattern\": \"^(.*)$\"",
					"                    },",
					"                    \"name\": {",
					"                        \"type\": \"string\",",
					"                        \"pattern\": \"^(.*)$\"",
					"                    },",
					"                    \"self\": {",
					"                        \"type\": \"object\",",
					"                        \"required\": [",
					"                            \"href\"",
					"                        ],",
					"                        \"properties\": {",
					"                            \"href\": {",
					"                                \"type\": \"string\",",
					"                                \"pattern\": \"^(.*)$\"",
					"                            }",
					"                        }",
					"                    },",
					"                    \"publishingDate\": {",
					"                        \"type\": \"string\",",
					"                        \"pattern\": \"^(.*)$\"",
					"                    },",
					"                    \"size\": {",
					"                        \"type\": \"integer\"",
					"                    },",
					"                    \"encoding\": {",
					"                        \"type\": \"string\",",
					"                        \"pattern\": \"^(.*)$\"",
					"                    }",
					"                }",
					"            }",
					"        },",
					"        \"self\": {",
					"            \"type\": \"object\",",
					"            \"required\": [",
					"                \"href\"",
					"            ],",
					"            \"properties\": {",
					"                \"href\": {",
					"                    \"type\": \"string\",",
					"                    \"pattern\": \"^(.*)$\"",
					"                }",
					"            }",
					"        }",
					"    }",
					"};",
					"pm.environment.set(\"newDocumentSchema\", newDocumentSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'getDocumentByIdSchema' *********************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const getDocumentByIdSchema = {",
					"    \"type\": \"object\",",
					"    \"additionalProperties\": true,",
					"    \"required\": [",
					"        \"id\",",
					"        \"tenantId\",",
					"        \"category\",",
					"        \"customerId\",",
					"        \"publishingDate\",",
					"        \"referencedObjectType\",",
					"        \"senderName\",",
					"        \"isRead\",",
					"        \"referencedObjectNo\",",
					"        \"dateRead\",",
					"        \"title\",",
					"        \"body\",",
					"        \"deleted\",",
					"        \"attachments\",",
					"        \"self\"",
					"    ],",
					"    \"properties\": {",
					"        \"id\": {",
					"            \"type\": \"string\"",
					"        },",
					"        \"tenantId\": {",
					"            \"type\": \"string\"",
					"        },",
					"        \"category\": {",
					"            \"type\": \"object\",",
					"            \"additionalProperties\": true,",
					"            \"required\": [",
					"                \"id\",",
					"                \"tenantId\",",
					"                \"code\",",
					"                \"type\",",
					"                \"name\",",
					"                \"createdOn\",",
					"                \"self\"",
					"            ],",
					"            \"properties\": {",
					"                \"id\": {",
					"                    \"type\": \"string\"",
					"                },",
					"                \"tenantId\": {",
					"                    \"type\": \"string\"",
					"                },",
					"                \"code\": {",
					"                    \"type\": \"string\"",
					"                },",
					"                \"type\": {",
					"                    \"type\": \"string\"",
					"                },",
					"                \"name\": {",
					"                    \"type\": \"string\"",
					"                },",
					"                \"createdOn\": {",
					"                    \"type\": \"string\"",
					"                },",
					"                \"self\": {",
					"                    \"type\": \"object\",",
					"                    \"additionalProperties\": true,",
					"                    \"required\": [",
					"                        \"href\"",
					"                    ],",
					"                    \"properties\": {",
					"                        \"href\": {",
					"                            \"type\": \"string\"",
					"                        }",
					"                    }",
					"                }",
					"            }",
					"        },",
					"        \"customerId\": {",
					"            \"type\": \"null\"",
					"        },",
					"        \"publishingDate\": {",
					"            \"type\": \"string\"",
					"        },",
					"        \"referencedObjectType\": {",
					"            \"type\": \"null\"",
					"        },",
					"        \"senderName\": {",
					"            \"type\": \"string\"",
					"        },",
					"        \"isRead\": {",
					"            \"type\": \"null\"",
					"        },",
					"        \"referencedObjectNo\": {",
					"            \"type\": \"null\"",
					"        },",
					"        \"dateRead\": {",
					"            \"type\": \"null\"",
					"        },",
					"        \"title\": {",
					"            \"type\": \"string\"",
					"        },",
					"        \"body\": {",
					"            \"type\": \"string\"",
					"        },",
					"        \"deleted\": {",
					"            \"type\": \"null\"",
					"        },",
					"        \"attachments\": {",
					"            \"type\": \"array\",",
					"            \"additionalItems\": true,",
					"            \"items\": {",
					"                \"type\": \"null\"",
					"            }",
					"        },",
					"        \"self\": {",
					"            \"type\": \"object\",",
					"            \"additionalProperties\": true,",
					"            \"required\": [",
					"                \"href\"",
					"            ],",
					"            \"properties\": {",
					"                \"href\": {",
					"                    \"type\": \"string\"",
					"                }",
					"            }",
					"        }",
					"    }",
					"};",
					"pm.environment.set(\"getDocumentByIdSchema\", getDocumentByIdSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'getDocumentByTitleSchema' *********************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const getDocumentByTitleSchema = {",
					"    \"type\": \"object\",",
					"    \"additionalProperties\": true,",
					"    \"required\": [",
					"        \"embedded\",",
					"        \"page\",",
					"        \"links\"",
					"    ],",
					"    \"properties\": {",
					"        \"embedded\": {",
					"            \"type\": \"array\",",
					"            \"additionalItems\": true,",
					"            \"items\": {",
					"                \"type\": \"object\",",
					"                \"additionalProperties\": true,",
					"                \"required\": [",
					"                    \"id\",",
					"                    \"tenantId\",",
					"                    \"category\",",
					"                    \"customerId\",",
					"                    \"publishingDate\",",
					"                    \"referencedObjectType\",",
					"                    \"senderName\",",
					"                    \"isRead\",",
					"                    \"referencedObjectNo\",",
					"                    \"dateRead\",",
					"                    \"title\",",
					"                    \"body\",",
					"                    \"deleted\",",
					"                    \"attachments\",",
					"                    \"self\"",
					"                ],",
					"                \"properties\": {",
					"                    \"id\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"                    \"tenantId\": {",
					"                        \"type\": \"string\"                    },",
					"                    \"category\": {",
					"                        \"type\": \"object\",",
					"                        \"additionalProperties\": true,",
					"                        \"required\": [",
					"                            \"id\",",
					"                            \"tenantId\",",
					"                            \"code\",",
					"                            \"type\",",
					"                            \"name\",",
					"                            \"createdOn\",",
					"                            \"self\"",
					"                        ],",
					"                        \"properties\": {",
					"                            \"id\": {",
					"                                \"type\": \"string\"",
					"                            },",
					"                            \"tenantId\": {",
					"                                \"type\": \"string\"",
					"                            },",
					"                            \"code\": {",
					"                                \"type\": \"string\"",
					"                            },",
					"                            \"type\": {",
					"                                \"type\": \"string\"                            ",
					"                            },",
					"                            \"name\": {",
					"                                \"type\": \"string\"                            ",
					"                            },",
					"                            \"createdOn\": {",
					"                                \"type\": \"string\"",
					"                            },",
					"                            \"self\": {",
					"                                \"type\": \"object\",",
					"                                \"additionalProperties\": true,",
					"                                \"required\": [",
					"                                    \"href\"",
					"                                ],",
					"                                \"properties\": {",
					"                                    \"href\": {",
					"                                        \"type\": \"string\"",
					"                                    }",
					"                                }",
					"                            }",
					"                        }",
					"                    },",
					"                    \"customerId\": {",
					"                        \"type\": \"null\",",
					"                    },",
					"                    \"publishingDate\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"                    \"referencedObjectType\": {",
					"                        \"type\": \"null\"",
					"                    },",
					"                    \"senderName\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"                    \"isRead\": {",
					"                        \"type\": \"null\"",
					"                    },",
					"                    \"referencedObjectNo\": {",
					"                        \"type\": \"null\"",
					"                    },",
					"                    \"dateRead\": {",
					"                        \"type\": \"null\"",
					"                    },",
					"                    \"title\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"                    \"body\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"                    \"deleted\": {",
					"                        \"type\": \"null\"",
					"                    },",
					"                    \"attachments\": {",
					"                        \"type\": \"array\",",
					"                        \"additionalItems\": true,",
					"                        \"items\": {",
					"                            \"type\": \"null\"",
					"                        }",
					"                    },",
					"                    \"self\": {",
					"                        \"type\": \"object\",",
					"                        \"additionalProperties\": true,",
					"                        \"required\": [",
					"                            \"href\"",
					"                        ],",
					"                        \"properties\": {",
					"                            \"href\": {",
					"                                \"type\": \"string\"",
					"                            }",
					"                        }",
					"                    }",
					"                }",
					"            }",
					"        },",
					"        \"page\": {",
					"            \"type\": \"object\",",
					"            \"additionalProperties\": true,",
					"            \"required\": [",
					"                \"number\",",
					"                \"size\",",
					"                \"totalElements\",",
					"                \"totalPages\"",
					"            ],",
					"            \"properties\": {",
					"                \"number\": {",
					"                    \"type\": \"integer\"",
					"                },",
					"                \"size\": {",
					"                    \"type\": \"integer\"",
					"                },",
					"                \"totalElements\": {",
					"                    \"type\": \"integer\"",
					"                },",
					"                \"totalPages\": {",
					"                    \"type\": \"integer\"",
					"                }",
					"            }",
					"        },",
					"        \"links\": {",
					"            \"type\": \"object\",",
					"            \"additionalProperties\": true,",
					"            \"required\": [",
					"                \"first\",",
					"                \"last\",",
					"                \"next\",",
					"                \"prev\",",
					"                \"current\"",
					"            ],",
					"            \"properties\": {",
					"                \"first\": {",
					"                    \"type\": \"object\",",
					"                    \"additionalProperties\": true,",
					"                    \"required\": [",
					"                        \"href\"",
					"                    ],",
					"                    \"properties\": {",
					"                        \"href\": {",
					"                            \"type\": \"string\"",
					"                        }",
					"                    }",
					"                },",
					"                \"last\": {",
					"                    \"type\": \"object\",",
					"                    \"additionalProperties\": true,",
					"                    \"required\": [",
					"                        \"href\"",
					"                    ],",
					"                    \"properties\": {",
					"                        \"href\": {",
					"                            \"type\": \"string\"",
					"                        }",
					"                    }",
					"                },",
					"                \"next\": {",
					"                    \"type\": \"object\",",
					"                    \"additionalProperties\": true,",
					"                    \"required\": [",
					"                        \"href\"",
					"                    ],",
					"                    \"properties\": {",
					"                        \"href\": {",
					"                            \"type\": \"string\"",
					"                        }",
					"                    }",
					"                },",
					"                \"prev\": {",
					"                    \"type\": \"object\",",
					"                    \"additionalProperties\": true,",
					"                    \"required\": [",
					"                        \"href\"",
					"                    ],",
					"                    \"properties\": {",
					"                        \"href\": {",
					"                            \"type\": \"string\",",
					"                        }",
					"                    }",
					"                },",
					"                \"current\": {",
					"                    \"type\": \"object\",",
					"                    \"additionalProperties\": true,",
					"                    \"required\": [",
					"                        \"href\"",
					"                    ],",
					"                    \"properties\": {",
					"                        \"href\": {",
					"                            \"type\": \"string\"",
					"                        }",
					"                    }",
					"                }",
					"            }",
					"        }",
					"    }",
					"};",
					"pm.environment.set(\"getDocumentByTitleSchema\", getDocumentByTitleSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'getDocumentByCategory' ************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const getDocumentByCategory = {",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"    \"$id\": \"http://example.com/example.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The Root Schema\",",
					"    \"description\": \"The root schema comprises the entire JSON document.\",",
					"    \"required\": [",
					"        \"embedded\",",
					"        \"page\",",
					"        \"links\"",
					"    ],",
					"    \"properties\": {",
					"        \"embedded\": {",
					"            \"$id\": \"#/properties/embedded\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The Embedded Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": [],",
					"            \"items\": {",
					"                \"$id\": \"#/properties/embedded/items\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Items Schema\",",
					"                \"description\": \"An explanation about the purpose of this instance.\",",
					"                \"default\": {},",
					"                \"examples\": [",
					"                    {",
					"                        \"isRead\": null,",
					"                        \"id\": \"__ID__78583866544f354766584a6c5132717afd78ff2d1ba80b8bb26d14c3607ce78d7e685a69\",",
					"                        \"senderId\": null,",
					"                        \"deleted\": null,",
					"                        \"body\": \"Destination-Typ 4\",",
					"                        \"category\": {",
					"                            \"tenantId\": \"19901\",",
					"                            \"name\": \"Test Tax records\",",
					"                            \"self\": {",
					"                                \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/categories/__ID__78583866544f354766584a6c5132717af8725be1d17240835a51e8a60ce63737db\"",
					"                            },",
					"                            \"code\": \"TCsteuerbe\",",
					"                            \"type\": \"BANK_DOCUMENT\",",
					"                            \"id\": \"__ID__78583866544f354766584a6c5132717af8725be1d17240835a51e8a60ce63737db\",",
					"                            \"createdOn\": \"2020-03-02T09:12:47\"",
					"                        },",
					"                        \"tenantId\": \"19901\",",
					"                        \"referencedObjectNo\": \"771000041502\",",
					"                        \"attachments\": [",
					"                            {",
					"                                \"name\": \"CLX.PayPen_ES_mit_Kabel.pdf\",",
					"                                \"self\": {",
					"                                    \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/documents/__ID__78583866544f354766584a6c5132717afd78ff2d1ba80b8bb26d14c3607ce78d7e685a69/attachments/__ID__78583866544f354766584a6c5132717af97af78e34807cb736ebc3b3b029c839766867\"",
					"                                },",
					"                                \"publishingDate\": \"2020-03-02T09:13:02\",",
					"                                \"mimetype\": \"application/pdf\",",
					"                                \"encoding\": null,",
					"                                \"size\": 567141.0,",
					"                                \"id\": \"__ID__78583866544f354766584a6c5132717af97af78e34807cb736ebc3b3b029c839766867\"",
					"                            }",
					"                        ],",
					"                        \"dateRead\": null,",
					"                        \"self\": {",
					"                            \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/documents/__ID__78583866544f354766584a6c5132717afd78ff2d1ba80b8bb26d14c3607ce78d7e685a69\"",
					"                        },",
					"                        \"publishingDate\": \"2020-03-02T09:13:02\",",
					"                        \"referencedObjectType\": \"CUSTODY_ACCOUNT\",",
					"                        \"customerId\": null,",
					"                        \"senderName\": null,",
					"                        \"title\": \"771000041502_20191206_Auszug (Dest Custody Account)\"",
					"                    },",
					"                    {",
					"                        \"deleted\": null,",
					"                        \"body\": \"Destination-Typ 4\",",
					"                        \"category\": {",
					"                            \"tenantId\": \"19901\",",
					"                            \"name\": \"Test Tax records\",",
					"                            \"self\": {",
					"                                \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/categories/__ID__78583866544f354766584a6c5132717af8725be1d17240835a51e8a60ce63737db\"",
					"                            },",
					"                            \"code\": \"TCsteuerbe\",",
					"                            \"type\": \"BANK_DOCUMENT\",",
					"                            \"createdOn\": \"2020-03-02T09:12:47\",",
					"                            \"id\": \"__ID__78583866544f354766584a6c5132717af8725be1d17240835a51e8a60ce63737db\"",
					"                        },",
					"                        \"tenantId\": \"19901\",",
					"                        \"referencedObjectNo\": \"771000041502\",",
					"                        \"attachments\": [",
					"                            {",
					"                                \"name\": \"Netzwoche2013_10_Interview_JPulm.pdf\",",
					"                                \"self\": {",
					"                                    \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/documents/__ID__78583866544f354766584a6c5132717afd79ff2abdab02a4a81e2a1c59ce3f9a5c8c5f33/attachments/__ID__78583866544f354766584a6c5132717af97efc3ea0187d1f034482813b958e0744cbb4\"",
					"                                },",
					"                                \"publishingDate\": \"2020-03-02T09:13:02\",",
					"                                \"mimetype\": \"application/pdf\",",
					"                                \"encoding\": null,",
					"                                \"size\": 135162.0,",
					"                                \"id\": \"__ID__78583866544f354766584a6c5132717af97efc3ea0187d1f034482813b958e0744cbb4\"",
					"                            }",
					"                        ],",
					"                        \"self\": {",
					"                            \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/documents/__ID__78583866544f354766584a6c5132717afd79ff2abdab02a4a81e2a1c59ce3f9a5c8c5f33\"",
					"                        },",
					"                        \"dateRead\": null,",
					"                        \"publishingDate\": \"2019-11-09T00:00:00\",",
					"                        \"referencedObjectType\": \"CUSTODY_ACCOUNT\",",
					"                        \"customerId\": null,",
					"                        \"title\": \"771000041502_20191109_Auszug (Dest Custody Account)\",",
					"                        \"senderName\": null,",
					"                        \"isRead\": null,",
					"                        \"id\": \"__ID__78583866544f354766584a6c5132717afd79ff2abdab02a4a81e2a1c59ce3f9a5c8c5f33\",",
					"                        \"senderId\": null",
					"                    },",
					"                    {",
					"                        \"category\": {",
					"                            \"type\": \"BANK_DOCUMENT\",",
					"                            \"id\": \"__ID__78583866544f354766584a6c5132717af8725be1d17240835a51e8a60ce63737db\",",
					"                            \"createdOn\": \"2020-03-02T09:12:47\",",
					"                            \"tenantId\": \"19901\",",
					"                            \"name\": \"Test Tax records\",",
					"                            \"self\": {",
					"                                \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/categories/__ID__78583866544f354766584a6c5132717af8725be1d17240835a51e8a60ce63737db\"",
					"                            },",
					"                            \"code\": \"TCsteuerbe\"",
					"                        },",
					"                        \"body\": \"Destination-Typ 4\",",
					"                        \"referencedObjectNo\": \"771000041502\",",
					"                        \"tenantId\": \"19901\",",
					"                        \"attachments\": [",
					"                            {",
					"                                \"size\": 49474.0,",
					"                                \"encoding\": null,",
					"                                \"id\": \"__ID__78583866544f354766584a6c5132717af970fc44a8ebdd4bd19a85c3174b83c41db633\",",
					"                                \"name\": \"120822_DE_Medien_Gartner_HypeCycle.pdf\",",
					"                                \"self\": {",
					"                                    \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/documents/__ID__78583866544f354766584a6c5132717afd79f92a9fb46ace5357e067ec39988c5b201169/attachments/__ID__78583866544f354766584a6c5132717af970fc44a8ebdd4bd19a85c3174b83c41db633\"",
					"                                },",
					"                                \"publishingDate\": \"2020-03-02T09:13:02\",",
					"                                \"mimetype\": \"application/pdf\"",
					"                            }",
					"                        ],",
					"                        \"self\": {",
					"                            \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/documents/__ID__78583866544f354766584a6c5132717afd79f92a9fb46ace5357e067ec39988c5b201169\"",
					"                        },",
					"                        \"dateRead\": null,",
					"                        \"publishingDate\": \"2019-11-08T00:00:00\",",
					"                        \"referencedObjectType\": \"CUSTODY_ACCOUNT\",",
					"                        \"customerId\": null,",
					"                        \"senderName\": null,",
					"                        \"title\": \"771000041502_20191108_Auszug (Dest Custody Account)\",",
					"                        \"isRead\": null,",
					"                        \"id\": \"__ID__78583866544f354766584a6c5132717afd79f92a9fb46ace5357e067ec39988c5b201169\",",
					"                        \"senderId\": null,",
					"                        \"deleted\": null",
					"                    }",
					"                ],",
					"                \"required\": [",
					"                    \"id\",",
					"                    \"tenantId\",",
					"                    \"category\",",
					"                    \"customerId\",",
					"                    \"publishingDate\",",
					"                    \"referencedObjectType\",",
					"                    \"senderName\",",
					"                    \"senderId\",",
					"                    \"isRead\",",
					"                    \"referencedObjectNo\",",
					"                    \"dateRead\",",
					"                    \"title\",",
					"                    \"body\",",
					"                    \"deleted\",",
					"                    \"attachments\",",
					"                    \"self\"",
					"                ],",
					"                \"properties\": {",
					"                    \"id\": {",
					"                        \"$id\": \"#/properties/embedded/items/properties/id\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Id Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"__ID__78583866544f354766584a6c5132717afd78ff2d1ba80b8bb26d14c3607ce78d7e685a69\"",
					"                        ]",
					"                    },",
					"                    \"tenantId\": {",
					"                        \"$id\": \"#/properties/embedded/items/properties/tenantId\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Tenantid Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"19901\"",
					"                        ]",
					"                    },",
					"                    \"category\": {",
					"                        \"$id\": \"#/properties/embedded/items/properties/category\",",
					"                        \"type\": \"object\",",
					"                        \"title\": \"The Category Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": {},",
					"                        \"examples\": [",
					"                            {",
					"                                \"type\": \"BANK_DOCUMENT\",",
					"                                \"id\": \"__ID__78583866544f354766584a6c5132717af8725be1d17240835a51e8a60ce63737db\",",
					"                                \"createdOn\": \"2020-03-02T09:12:47\",",
					"                                \"tenantId\": \"19901\",",
					"                                \"name\": \"Test Tax records\",",
					"                                \"self\": {",
					"                                    \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/categories/__ID__78583866544f354766584a6c5132717af8725be1d17240835a51e8a60ce63737db\"",
					"                                },",
					"                                \"code\": \"TCsteuerbe\"",
					"                            }",
					"                        ],",
					"                        \"required\": [",
					"                            \"id\",",
					"                            \"tenantId\",",
					"                            \"code\",",
					"                            \"type\",",
					"                            \"name\",",
					"                            \"createdOn\",",
					"                            \"self\"",
					"                        ],",
					"                        \"properties\": {",
					"                            \"id\": {",
					"                                \"$id\": \"#/properties/embedded/items/properties/category/properties/id\",",
					"                                \"type\": \"string\",",
					"                                \"title\": \"The Id Schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": \"\",",
					"                                \"examples\": [",
					"                                    \"__ID__78583866544f354766584a6c5132717af8725be1d17240835a51e8a60ce63737db\"",
					"                                ]",
					"                            },",
					"                            \"tenantId\": {",
					"                                \"$id\": \"#/properties/embedded/items/properties/category/properties/tenantId\",",
					"                                \"type\": \"string\",",
					"                                \"title\": \"The Tenantid Schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": \"\",",
					"                                \"examples\": [",
					"                                    \"19901\"",
					"                                ]",
					"                            },",
					"                            \"code\": {",
					"                                \"$id\": \"#/properties/embedded/items/properties/category/properties/code\",",
					"                                \"type\": \"string\",",
					"                                \"title\": \"The Code Schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": \"\",",
					"                                \"examples\": [",
					"                                    \"TCsteuerbe\"",
					"                                ]",
					"                            },",
					"                            \"type\": {",
					"                                \"$id\": \"#/properties/embedded/items/properties/category/properties/type\",",
					"                                \"type\": \"string\",",
					"                                \"title\": \"The Type Schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": \"\",",
					"                                \"examples\": [",
					"                                    \"BANK_DOCUMENT\"",
					"                                ]",
					"                            },",
					"                            \"name\": {",
					"                                \"$id\": \"#/properties/embedded/items/properties/category/properties/name\",",
					"                                \"type\": \"string\",",
					"                                \"title\": \"The Name Schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": \"\",",
					"                                \"examples\": [",
					"                                    \"Test Tax records\"",
					"                                ]",
					"                            },",
					"                            \"createdOn\": {",
					"                                \"$id\": \"#/properties/embedded/items/properties/category/properties/createdOn\",",
					"                                \"type\": \"string\",",
					"                                \"title\": \"The Createdon Schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": \"\",",
					"                                \"examples\": [",
					"                                    \"2020-03-02T09:12:47\"",
					"                                ]",
					"                            },",
					"                            \"self\": {",
					"                                \"$id\": \"#/properties/embedded/items/properties/category/properties/self\",",
					"                                \"type\": \"object\",",
					"                                \"title\": \"The Self Schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": {},",
					"                                \"examples\": [",
					"                                    {",
					"                                        \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/categories/__ID__78583866544f354766584a6c5132717af8725be1d17240835a51e8a60ce63737db\"",
					"                                    }",
					"                                ],",
					"                                \"required\": [",
					"                                    \"href\"",
					"                                ],",
					"                                \"properties\": {",
					"                                    \"href\": {",
					"                                        \"$id\": \"#/properties/embedded/items/properties/category/properties/self/properties/href\",",
					"                                        \"type\": \"string\",",
					"                                        \"title\": \"The Href Schema\",",
					"                                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                                        \"default\": \"\",",
					"                                        \"examples\": [",
					"                                            \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/categories/__ID__78583866544f354766584a6c5132717af8725be1d17240835a51e8a60ce63737db\"",
					"                                        ]",
					"                                    }",
					"                                }",
					"                            }",
					"                        }",
					"                    },",
					"                    \"customerId\": {",
					"                        \"$id\": \"#/properties/embedded/items/properties/customerId\",",
					"                        \"title\": \"The Customerid Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": null,",
					"                        \"examples\": [",
					"                            null",
					"                        ]",
					"                    },",
					"                    \"publishingDate\": {",
					"                        \"$id\": \"#/properties/embedded/items/properties/publishingDate\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Publishingdate Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"2020-03-02T09:13:02\"",
					"                        ]",
					"                    },",
					"                    \"referencedObjectType\": {",
					"                        \"$id\": \"#/properties/embedded/items/properties/referencedObjectType\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Referencedobjecttype Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"CUSTODY_ACCOUNT\"",
					"                        ]",
					"                    },",
					"                    \"senderName\": {",
					"                        \"$id\": \"#/properties/embedded/items/properties/senderName\",",
					"                        \"title\": \"The Sendername Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": null,",
					"                        \"examples\": [",
					"                            null",
					"                        ]",
					"                    },",
					"                    \"senderId\": {",
					"                        \"$id\": \"#/properties/embedded/items/properties/senderId\",",
					"                        \"title\": \"The Senderid Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": null,",
					"                        \"examples\": [",
					"                            null",
					"                        ]",
					"                    },",
					"                    \"isRead\": {",
					"                        \"$id\": \"#/properties/embedded/items/properties/isRead\",",
					"                        \"title\": \"The Isread Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": null,",
					"                        \"examples\": [",
					"                            null",
					"                        ]",
					"                    },",
					"                    \"referencedObjectNo\": {",
					"                        \"$id\": \"#/properties/embedded/items/properties/referencedObjectNo\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Referencedobjectno Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"771000041502\"",
					"                        ]",
					"                    },",
					"                    \"dateRead\": {",
					"                        \"$id\": \"#/properties/embedded/items/properties/dateRead\",",
					"                        \"title\": \"The Dateread Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": null,",
					"                        \"examples\": [",
					"                            null",
					"                        ]",
					"                    },",
					"                    \"title\": {",
					"                        \"$id\": \"#/properties/embedded/items/properties/title\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Title Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"771000041502_20191206_Auszug (Dest Custody Account)\"",
					"                        ]",
					"                    },",
					"                    \"body\": {",
					"                        \"$id\": \"#/properties/embedded/items/properties/body\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Body Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"Destination-Typ 4\"",
					"                        ]",
					"                    },",
					"                    \"deleted\": {",
					"                        \"$id\": \"#/properties/embedded/items/properties/deleted\",",
					"                        \"title\": \"The Deleted Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": null,",
					"                        \"examples\": [",
					"                            null",
					"                        ]",
					"                    },",
					"                    \"attachments\": {",
					"                        \"$id\": \"#/properties/embedded/items/properties/attachments\",",
					"                        \"type\": \"array\",",
					"                        \"title\": \"The Attachments Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": [],",
					"                        \"items\": {",
					"                            \"$id\": \"#/properties/embedded/items/properties/attachments/items\",",
					"                            \"type\": \"object\",",
					"                            \"title\": \"The Items Schema\",",
					"                            \"description\": \"An explanation about the purpose of this instance.\",",
					"                            \"default\": {},",
					"                            \"examples\": [",
					"                                {",
					"                                    \"mimetype\": \"application/pdf\",",
					"                                    \"size\": 567141.0,",
					"                                    \"encoding\": null,",
					"                                    \"id\": \"__ID__78583866544f354766584a6c5132717af97af78e34807cb736ebc3b3b029c839766867\",",
					"                                    \"name\": \"CLX.PayPen_ES_mit_Kabel.pdf\",",
					"                                    \"self\": {",
					"                                        \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/documents/__ID__78583866544f354766584a6c5132717afd78ff2d1ba80b8bb26d14c3607ce78d7e685a69/attachments/__ID__78583866544f354766584a6c5132717af97af78e34807cb736ebc3b3b029c839766867\"",
					"                                    },",
					"                                    \"publishingDate\": \"2020-03-02T09:13:02\"",
					"                                }",
					"                            ],",
					"                            \"required\": [",
					"                                \"id\",",
					"                                \"mimetype\",",
					"                                \"name\",",
					"                                \"self\",",
					"                                \"publishingDate\",",
					"                                \"size\",",
					"                                \"encoding\"",
					"                            ],",
					"                            \"properties\": {",
					"                                \"id\": {",
					"                                    \"$id\": \"#/properties/embedded/items/properties/attachments/items/properties/id\",",
					"                                    \"type\": \"string\",",
					"                                    \"title\": \"The Id Schema\",",
					"                                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                                    \"default\": \"\",",
					"                                    \"examples\": [",
					"                                        \"__ID__78583866544f354766584a6c5132717af97af78e34807cb736ebc3b3b029c839766867\"",
					"                                    ]",
					"                                },",
					"                                \"mimetype\": {",
					"                                    \"$id\": \"#/properties/embedded/items/properties/attachments/items/properties/mimetype\",",
					"                                    \"type\": \"string\",",
					"                                    \"title\": \"The Mimetype Schema\",",
					"                                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                                    \"default\": \"\",",
					"                                    \"examples\": [",
					"                                        \"application/pdf\"",
					"                                    ]",
					"                                },",
					"                                \"name\": {",
					"                                    \"$id\": \"#/properties/embedded/items/properties/attachments/items/properties/name\",",
					"                                    \"type\": \"string\",",
					"                                    \"title\": \"The Name Schema\",",
					"                                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                                    \"default\": \"\",",
					"                                    \"examples\": [",
					"                                        \"CLX.PayPen_ES_mit_Kabel.pdf\"",
					"                                    ]",
					"                                },",
					"                                \"self\": {",
					"                                    \"$id\": \"#/properties/embedded/items/properties/attachments/items/properties/self\",",
					"                                    \"type\": \"object\",",
					"                                    \"title\": \"The Self Schema\",",
					"                                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                                    \"default\": {},",
					"                                    \"examples\": [",
					"                                        {",
					"                                            \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/documents/__ID__78583866544f354766584a6c5132717afd78ff2d1ba80b8bb26d14c3607ce78d7e685a69/attachments/__ID__78583866544f354766584a6c5132717af97af78e34807cb736ebc3b3b029c839766867\"",
					"                                        }",
					"                                    ],",
					"                                    \"required\": [",
					"                                        \"href\"",
					"                                    ],",
					"                                    \"properties\": {",
					"                                        \"href\": {",
					"                                            \"$id\": \"#/properties/embedded/items/properties/attachments/items/properties/self/properties/href\",",
					"                                            \"type\": \"string\",",
					"                                            \"title\": \"The Href Schema\",",
					"                                            \"description\": \"An explanation about the purpose of this instance.\",",
					"                                            \"default\": \"\",",
					"                                            \"examples\": [",
					"                                                \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/documents/__ID__78583866544f354766584a6c5132717afd78ff2d1ba80b8bb26d14c3607ce78d7e685a69/attachments/__ID__78583866544f354766584a6c5132717af97af78e34807cb736ebc3b3b029c839766867\"",
					"                                            ]",
					"                                        }",
					"                                    }",
					"                                },",
					"                                \"publishingDate\": {",
					"                                    \"$id\": \"#/properties/embedded/items/properties/attachments/items/properties/publishingDate\",",
					"                                    \"type\": \"string\",",
					"                                    \"title\": \"The Publishingdate Schema\",",
					"                                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                                    \"default\": \"\",",
					"                                    \"examples\": [",
					"                                        \"2020-03-02T09:13:02\"",
					"                                    ]",
					"                                },",
					"                                \"size\": {",
					"                                    \"$id\": \"#/properties/embedded/items/properties/attachments/items/properties/size\",",
					"                                    \"type\": \"integer\",",
					"                                    \"title\": \"The Size Schema\",",
					"                                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                                    \"default\": 0,",
					"                                    \"examples\": [",
					"                                        567141",
					"                                    ]",
					"                                },",
					"                                \"encoding\": {",
					"                                    \"$id\": \"#/properties/embedded/items/properties/attachments/items/properties/encoding\",",
					"                                    \"title\": \"The Encoding Schema\",",
					"                                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                                    \"default\": null,",
					"                                    \"examples\": [",
					"                                        null",
					"                                    ]",
					"                                }",
					"                            }",
					"                        }",
					"                    },",
					"                    \"self\": {",
					"                        \"$id\": \"#/properties/embedded/items/properties/self\",",
					"                        \"type\": \"object\",",
					"                        \"title\": \"The Self Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": {},",
					"                        \"examples\": [",
					"                            {",
					"                                \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/documents/__ID__78583866544f354766584a6c5132717afd78ff2d1ba80b8bb26d14c3607ce78d7e685a69\"",
					"                            }",
					"                        ],",
					"                        \"required\": [",
					"                            \"href\"",
					"                        ],",
					"                        \"properties\": {",
					"                            \"href\": {",
					"                                \"$id\": \"#/properties/embedded/items/properties/self/properties/href\",",
					"                                \"type\": \"string\",",
					"                                \"title\": \"The Href Schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": \"\",",
					"                                \"examples\": [",
					"                                    \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/documents/__ID__78583866544f354766584a6c5132717afd78ff2d1ba80b8bb26d14c3607ce78d7e685a69\"",
					"                                ]",
					"                            }",
					"                        }",
					"                    }",
					"                }",
					"            }",
					"        },",
					"        \"page\": {",
					"            \"$id\": \"#/properties/page\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Page Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"                {",
					"                    \"number\": 0.0,",
					"                    \"totalPages\": 1.0,",
					"                    \"totalElements\": 3.0,",
					"                    \"size\": 10.0",
					"                }",
					"            ],",
					"            \"required\": [",
					"                \"number\",",
					"                \"size\",",
					"                \"totalElements\",",
					"                \"totalPages\"",
					"            ],",
					"            \"properties\": {",
					"                \"number\": {",
					"                    \"$id\": \"#/properties/page/properties/number\",",
					"                    \"type\": \"integer\",",
					"                    \"title\": \"The Number Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": 0,",
					"                    \"examples\": [",
					"                        0",
					"                    ]",
					"                },",
					"                \"size\": {",
					"                    \"$id\": \"#/properties/page/properties/size\",",
					"                    \"type\": \"integer\",",
					"                    \"title\": \"The Size Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": 0,",
					"                    \"examples\": [",
					"                        10",
					"                    ]",
					"                },",
					"                \"totalElements\": {",
					"                    \"$id\": \"#/properties/page/properties/totalElements\",",
					"                    \"type\": \"integer\",",
					"                    \"title\": \"The Totalelements Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": 0,",
					"                    \"examples\": [",
					"                        3",
					"                    ]",
					"                },",
					"                \"totalPages\": {",
					"                    \"$id\": \"#/properties/page/properties/totalPages\",",
					"                    \"type\": \"integer\",",
					"                    \"title\": \"The Totalpages Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": 0,",
					"                    \"examples\": [",
					"                        1",
					"                    ]",
					"                }",
					"            }",
					"        },",
					"        \"links\": {",
					"            \"$id\": \"#/properties/links\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Links Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"                {",
					"                    \"next\": {",
					"                        \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/documents?categoryCode=TCsteuerbe&page=0&size=10\"",
					"                    },",
					"                    \"current\": {",
					"                        \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/documents?categoryCode=TCsteuerbe&page=0&size=10\"",
					"                    },",
					"                    \"first\": {",
					"                        \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/documents?categoryCode=TCsteuerbe&page=0&size=10\"",
					"                    },",
					"                    \"last\": {",
					"                        \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/documents?categoryCode=TCsteuerbe&page=0&size=10\"",
					"                    },",
					"                    \"prev\": {",
					"                        \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/documents?categoryCode=TCsteuerbe&page=0&size=10\"",
					"                    }",
					"                }",
					"            ],",
					"            \"required\": [",
					"                \"first\",",
					"                \"last\",",
					"                \"next\",",
					"                \"prev\",",
					"                \"current\"",
					"            ],",
					"            \"properties\": {",
					"                \"first\": {",
					"                    \"$id\": \"#/properties/links/properties/first\",",
					"                    \"type\": \"object\",",
					"                    \"title\": \"The First Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": {},",
					"                    \"examples\": [",
					"                        {",
					"                            \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/documents?categoryCode=TCsteuerbe&page=0&size=10\"",
					"                        }",
					"                    ],",
					"                    \"required\": [",
					"                        \"href\"",
					"                    ],",
					"                    \"properties\": {",
					"                        \"href\": {",
					"                            \"$id\": \"#/properties/links/properties/first/properties/href\",",
					"                            \"type\": \"string\",",
					"                            \"title\": \"The Href Schema\",",
					"                            \"description\": \"An explanation about the purpose of this instance.\",",
					"                            \"default\": \"\",",
					"                            \"examples\": [",
					"                                \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/documents?categoryCode=TCsteuerbe&page=0&size=10\"",
					"                            ]",
					"                        }",
					"                    }",
					"                },",
					"                \"last\": {",
					"                    \"$id\": \"#/properties/links/properties/last\",",
					"                    \"type\": \"object\",",
					"                    \"title\": \"The Last Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": {},",
					"                    \"examples\": [",
					"                        {",
					"                            \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/documents?categoryCode=TCsteuerbe&page=0&size=10\"",
					"                        }",
					"                    ],",
					"                    \"required\": [",
					"                        \"href\"",
					"                    ],",
					"                    \"properties\": {",
					"                        \"href\": {",
					"                            \"$id\": \"#/properties/links/properties/last/properties/href\",",
					"                            \"type\": \"string\",",
					"                            \"title\": \"The Href Schema\",",
					"                            \"description\": \"An explanation about the purpose of this instance.\",",
					"                            \"default\": \"\",",
					"                            \"examples\": [",
					"                                \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/documents?categoryCode=TCsteuerbe&page=0&size=10\"",
					"                            ]",
					"                        }",
					"                    }",
					"                },",
					"                \"next\": {",
					"                    \"$id\": \"#/properties/links/properties/next\",",
					"                    \"type\": \"object\",",
					"                    \"title\": \"The Next Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": {},",
					"                    \"examples\": [",
					"                        {",
					"                            \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/documents?categoryCode=TCsteuerbe&page=0&size=10\"",
					"                        }",
					"                    ],",
					"                    \"required\": [",
					"                        \"href\"",
					"                    ],",
					"                    \"properties\": {",
					"                        \"href\": {",
					"                            \"$id\": \"#/properties/links/properties/next/properties/href\",",
					"                            \"type\": \"string\",",
					"                            \"title\": \"The Href Schema\",",
					"                            \"description\": \"An explanation about the purpose of this instance.\",",
					"                            \"default\": \"\",",
					"                            \"examples\": [",
					"                                \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/documents?categoryCode=TCsteuerbe&page=0&size=10\"",
					"                            ]",
					"                        }",
					"                    }",
					"                },",
					"                \"prev\": {",
					"                    \"$id\": \"#/properties/links/properties/prev\",",
					"                    \"type\": \"object\",",
					"                    \"title\": \"The Prev Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": {},",
					"                    \"examples\": [",
					"                        {",
					"                            \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/documents?categoryCode=TCsteuerbe&page=0&size=10\"",
					"                        }",
					"                    ],",
					"                    \"required\": [",
					"                        \"href\"",
					"                    ],",
					"                    \"properties\": {",
					"                        \"href\": {",
					"                            \"$id\": \"#/properties/links/properties/prev/properties/href\",",
					"                            \"type\": \"string\",",
					"                            \"title\": \"The Href Schema\",",
					"                            \"description\": \"An explanation about the purpose of this instance.\",",
					"                            \"default\": \"\",",
					"                            \"examples\": [",
					"                                \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/documents?categoryCode=TCsteuerbe&page=0&size=10\"",
					"                            ]",
					"                        }",
					"                    }",
					"                },",
					"                \"current\": {",
					"                    \"$id\": \"#/properties/links/properties/current\",",
					"                    \"type\": \"object\",",
					"                    \"title\": \"The Current Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": {},",
					"                    \"examples\": [",
					"                        {",
					"                            \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/documents?categoryCode=TCsteuerbe&page=0&size=10\"",
					"                        }",
					"                    ],",
					"                    \"required\": [",
					"                        \"href\"",
					"                    ],",
					"                    \"properties\": {",
					"                        \"href\": {",
					"                            \"$id\": \"#/properties/links/properties/current/properties/href\",",
					"                            \"type\": \"string\",",
					"                            \"title\": \"The Href Schema\",",
					"                            \"description\": \"An explanation about the purpose of this instance.\",",
					"                            \"default\": \"\",",
					"                            \"examples\": [",
					"                                \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/documents?categoryCode=TCsteuerbe&page=0&size=10\"",
					"                            ]",
					"                        }",
					"                    }",
					"                }",
					"            }",
					"        }",
					"    }",
					"};",
					"pm.environment.set(\"getDocumentByCategory\", getDocumentByCategory);",
					"",
					"//************************************************************************************************",
					"// Schema for 'updateCategorySchema' *************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const updateCategorySchema = {",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"    \"$id\": \"http://example.com/example.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The Root Schema\",",
					"    \"description\": \"The root schema comprises the entire JSON document.\",",
					"    \"required\": [",
					"        \"id\",",
					"        \"tenantId\",",
					"        \"code\",",
					"        \"sortCode\",",
					"        \"type\",",
					"        \"visible\",",
					"        \"relevance\",",
					"        \"name\",",
					"        \"description\",",
					"        \"createdOn\",",
					"        \"totalDocuments\",",
					"        \"totalDocumentsUnread\",",
					"        \"self\"",
					"    ],",
					"    \"properties\": {",
					"        \"id\": {",
					"            \"$id\": \"#/properties/id\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Id Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"__ID__3a0003d2f7ad3775a2b45161e1922a1d980c281ffc6c1061399a7856cbd0eb81ab7662bdaddb98\"",
					"            ]",
					"        },",
					"        \"tenantId\": {",
					"            \"$id\": \"#/properties/tenantId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Tenantid Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"string\"",
					"            ]",
					"        },",
					"        \"code\": {",
					"            \"$id\": \"#/properties/code\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Code Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"string\"",
					"            ]",
					"        },",
					"        \"sortCode\": {",
					"            \"$id\": \"#/properties/sortCode\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Sortcode Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"string\"",
					"            ]",
					"        },",
					"        \"type\": {",
					"            \"$id\": \"#/properties/type\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Type Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"BANK_DOCUMENT\"",
					"            ]",
					"        },",
					"        \"visible\": {",
					"            \"$id\": \"#/properties/visible\",",
					"            \"type\": \"boolean\",",
					"            \"title\": \"The Visible Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": false,",
					"            \"examples\": [",
					"                true",
					"            ]",
					"        },",
					"        \"relevance\": {",
					"            \"$id\": \"#/properties/relevance\",",
					"            \"type\": \"integer\",",
					"            \"title\": \"The Relevance Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": 0,",
					"            \"examples\": [",
					"                0",
					"            ]",
					"        },",
					"        \"name\": {",
					"            \"$id\": \"#/properties/name\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Name Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"string\"",
					"            ]",
					"        },",
					"        \"description\": {",
					"            \"$id\": \"#/properties/description\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Description Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"string\"",
					"            ]",
					"        },",
					"        \"createdOn\": {",
					"            \"$id\": \"#/properties/createdOn\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Createdon Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"2020-03-02T15:21:28.673Z\"",
					"            ]",
					"        },",
					"        \"totalDocuments\": {",
					"            \"$id\": \"#/properties/totalDocuments\",",
					"            \"type\": \"integer\",",
					"            \"title\": \"The Totaldocuments Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": 0,",
					"            \"examples\": [",
					"                0",
					"            ]",
					"        },",
					"        \"totalDocumentsUnread\": {",
					"            \"$id\": \"#/properties/totalDocumentsUnread\",",
					"            \"type\": \"integer\",",
					"            \"title\": \"The Totaldocumentsunread Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": 0,",
					"            \"examples\": [",
					"                0",
					"            ]",
					"        },",
					"        \"self\": {",
					"            \"$id\": \"#/properties/self\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Self Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"                {",
					"                    \"href\": \"/messaging/documents/v1?page=0&size=30\"",
					"                }",
					"            ],",
					"            \"required\": [",
					"                \"href\"",
					"            ],",
					"            \"properties\": {",
					"                \"href\": {",
					"                    \"$id\": \"#/properties/self/properties/href\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Href Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"/messaging/documents/v1?page=0&size=30\"",
					"                    ]",
					"                }",
					"            }",
					"        }",
					"    }",
					"};",
					"pm.environment.set(\"updateCategorySchema\", updateCategorySchema);",
					"//************************************************************************************************",
					"// Schema for 'createCategorySchema' *************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const createCategorySchema = {",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"    \"$id\": \"http://example.com/example.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The Root Schema\",",
					"    \"description\": \"The root schema comprises the entire JSON document.\",",
					"    \"required\": [",
					"        \"id\",",
					"        \"tenantId\",",
					"        \"code\",",
					"        \"sortCode\",",
					"        \"type\",",
					"        \"visible\",",
					"        \"relevance\",",
					"        \"name\",",
					"        \"description\",",
					"        \"createdOn\",",
					"        \"totalDocuments\",",
					"        \"totalDocumentsUnread\",",
					"        \"self\"",
					"    ],",
					"    \"properties\": {",
					"        \"id\": {",
					"            \"$id\": \"#/properties/id\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Id Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"__ID__3a0003d2f7ad3775a2b45161e1922a1d980c281ffc6c1061399a7856cbd0eb81ab7662bdaddb98\"",
					"            ]",
					"        },",
					"        \"tenantId\": {",
					"            \"$id\": \"#/properties/tenantId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Tenantid Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"string\"",
					"            ]",
					"        },",
					"        \"code\": {",
					"            \"$id\": \"#/properties/code\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Code Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"string\"",
					"            ]",
					"        },",
					"        \"sortCode\": {",
					"            \"$id\": \"#/properties/sortCode\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Sortcode Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"string\"",
					"            ]",
					"        },",
					"        \"type\": {",
					"            \"$id\": \"#/properties/type\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Type Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"BANK_DOCUMENT\"",
					"            ]",
					"        },",
					"        \"visible\": {",
					"            \"$id\": \"#/properties/visible\",",
					"            \"type\": \"boolean\",",
					"            \"title\": \"The Visible Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": false,",
					"            \"examples\": [",
					"                true",
					"            ]",
					"        },",
					"        \"relevance\": {",
					"            \"$id\": \"#/properties/relevance\",",
					"            \"type\": \"integer\",",
					"            \"title\": \"The Relevance Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": 0,",
					"            \"examples\": [",
					"                0",
					"            ]",
					"        },",
					"        \"name\": {",
					"            \"$id\": \"#/properties/name\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Name Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"string\"",
					"            ]",
					"        },",
					"        \"description\": {",
					"            \"$id\": \"#/properties/description\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Description Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"string\"",
					"            ]",
					"        },",
					"        \"createdOn\": {",
					"            \"$id\": \"#/properties/createdOn\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Createdon Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"2020-03-02T15:18:38.296Z\"",
					"            ]",
					"        },",
					"        \"totalDocuments\": {",
					"            \"$id\": \"#/properties/totalDocuments\",",
					"            \"type\": \"integer\",",
					"            \"title\": \"The Totaldocuments Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": 0,",
					"            \"examples\": [",
					"                0",
					"            ]",
					"        },",
					"        \"totalDocumentsUnread\": {",
					"            \"$id\": \"#/properties/totalDocumentsUnread\",",
					"            \"type\": \"integer\",",
					"            \"title\": \"The Totaldocumentsunread Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": 0,",
					"            \"examples\": [",
					"                0",
					"            ]",
					"        },",
					"        \"self\": {",
					"            \"$id\": \"#/properties/self\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Self Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"                {",
					"                    \"href\": \"/messaging/documents/v1?page=0&size=30\"",
					"                }",
					"            ],",
					"            \"required\": [",
					"                \"href\"",
					"            ],",
					"            \"properties\": {",
					"                \"href\": {",
					"                    \"$id\": \"#/properties/self/properties/href\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Href Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"/messaging/documents/v1?page=0&size=30\"",
					"                    ]",
					"                }",
					"            }",
					"        }",
					"    }",
					"};",
					"pm.environment.set(\"createCategorySchema\", createCategorySchema);",
					"//************************************************************************************************",
					"// Schema for 'categories' **********************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const getCategoriesSchema =",
					"{",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"    \"$id\": \"http://example.com/example.json\",",
					"    \"type\": \"array\",",
					"    \"title\": \"The Root Schema\",",
					"    \"description\": \"The root schema comprises the entire JSON document.\",",
					"    \"items\": {",
					"        \"$id\": \"#/items\",",
					"        \"type\": \"object\",",
					"        \"title\": \"The Items Schema\",",
					"        \"description\": \"An explanation about the purpose of this instance.\",",
					"        \"default\": {},",
					"        \"examples\": [",
					"            {",
					"                \"createdOn\": \"2020-03-02T09:12:47\",",
					"                \"id\": \"__ID__78583866544f354766584a6c5132717afdbe04673c5d06ec562575a2768f4018d3\",",
					"                \"sortCode\": \"20\",",
					"                \"name\": \"Test Category Father\",",
					"                \"totalDocuments\": 2.0,",
					"                \"visible\": true,",
					"                \"totalDocumentsUnread\": 2.0,",
					"                \"tenantId\": \"19901\",",
					"                \"description\": \"Test Category Father\",",
					"                \"self\": {",
					"                    \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/categories/__ID__78583866544f354766584a6c5132717afdbe04673c5d06ec562575a2768f4018d3\"",
					"                },",
					"                \"code\": \"TCFather\",",
					"                \"type\": \"BANK_DOCUMENT\",",
					"                \"relevance\": null",
					"            },",
					"            {",
					"                \"visible\": true,",
					"                \"totalDocumentsUnread\": 2.0,",
					"                \"tenantId\": \"19901\",",
					"                \"description\": \"Test Category Grandfather\",",
					"                \"self\": {",
					"                    \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/categories/__ID__78583866544f354766584a6c5132717afc3c174c5ffe125a00940ca33b6da4ee84\"",
					"                },",
					"                \"code\": \"TCGrfather\",",
					"                \"type\": \"BANK_DOCUMENT\",",
					"                \"relevance\": null,",
					"                \"createdOn\": \"2020-03-02T09:12:47\",",
					"                \"id\": \"__ID__78583866544f354766584a6c5132717afc3c174c5ffe125a00940ca33b6da4ee84\",",
					"                \"sortCode\": \"20\",",
					"                \"name\": \"Test Category Grandfather\",",
					"                \"totalDocuments\": 2.0",
					"            },",
					"            {",
					"                \"sortCode\": \"20\",",
					"                \"name\": \"Test Category Son\",",
					"                \"totalDocuments\": 2.0,",
					"                \"visible\": true,",
					"                \"totalDocumentsUnread\": 2.0,",
					"                \"tenantId\": \"19901\",",
					"                \"description\": \"Test Category Son\",",
					"                \"self\": {",
					"                    \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/categories/__ID__78583866544f354766584a6c5132717afefa311a98b83b36adf6fea1a0a86d022b\"",
					"                },",
					"                \"code\": \"TCSon\",",
					"                \"type\": \"BANK_DOCUMENT\",",
					"                \"relevance\": null,",
					"                \"createdOn\": \"2020-03-02T09:12:47\",",
					"                \"id\": \"__ID__78583866544f354766584a6c5132717afefa311a98b83b36adf6fea1a0a86d022b\"",
					"            },",
					"            {",
					"                \"name\": \"Test Other Bank Documents\",",
					"                \"totalDocuments\": 4.0,",
					"                \"visible\": true,",
					"                \"totalDocumentsUnread\": 4.0,",
					"                \"tenantId\": \"19901\",",
					"                \"description\": \"Test Other Bank Documents\",",
					"                \"self\": {",
					"                    \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/categories/__ID__78583866544f354766584a6c5132717afb366e9c75977d59a18263a5dac11a2d23\"",
					"                },",
					"                \"code\": \"TCabankbel\",",
					"                \"type\": \"BANK_DOCUMENT\",",
					"                \"relevance\": null,",
					"                \"createdOn\": \"2020-03-02T09:12:47\",",
					"                \"id\": \"__ID__78583866544f354766584a6c5132717afb366e9c75977d59a18263a5dac11a2d23\",",
					"                \"sortCode\": \"20\"",
					"            },",
					"            {",
					"                \"visible\": true,",
					"                \"totalDocumentsUnread\": 2.0,",
					"                \"tenantId\": \"19901\",",
					"                \"description\": \"Test Attachments\",",
					"                \"self\": {",
					"                    \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/categories/__ID__78583866544f354766584a6c5132717afab47db7163469eff7331aa49723fedb74\"",
					"                },",
					"                \"code\": \"TCbeilagen\",",
					"                \"type\": \"BANK_DOCUMENT\",",
					"                \"relevance\": null,",
					"                \"createdOn\": \"2020-03-02T09:12:47\",",
					"                \"id\": \"__ID__78583866544f354766584a6c5132717afab47db7163469eff7331aa49723fedb74\",",
					"                \"sortCode\": \"20\",",
					"                \"name\": \"Test Attachments\",",
					"                \"totalDocuments\": 2.0",
					"            },",
					"            {",
					"                \"code\": \"TCmitteilu\",",
					"                \"type\": \"BANK_DOCUMENT\",",
					"                \"relevance\": null,",
					"                \"createdOn\": \"2020-03-02T09:12:47\",",
					"                \"id\": \"__ID__78583866544f354766584a6c5132717af9f048cab2d154350ce091a74104d3c18c\",",
					"                \"sortCode\": \"20\",",
					"                \"name\": \"Test Messages\",",
					"                \"totalDocuments\": 3.0,",
					"                \"visible\": true,",
					"                \"totalDocumentsUnread\": 2.0,",
					"                \"tenantId\": \"19901\",",
					"                \"description\": \"Test Messages\",",
					"                \"self\": {",
					"                    \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/categories/__ID__78583866544f354766584a6c5132717af9f048cab2d154350ce091a74104d3c18c\"",
					"                }",
					"            },",
					"            {",
					"                \"totalDocuments\": 3.0,",
					"                \"visible\": true,",
					"                \"totalDocumentsUnread\": 3.0,",
					"                \"tenantId\": \"19901\",",
					"                \"description\": \"Test Tax records\",",
					"                \"self\": {",
					"                    \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/categories/__ID__78583866544f354766584a6c5132717af8725be1d17240835a51e8a60ce63737db\"",
					"                },",
					"                \"code\": \"TCsteuerbe\",",
					"                \"type\": \"BANK_DOCUMENT\",",
					"                \"relevance\": null,",
					"                \"id\": \"__ID__78583866544f354766584a6c5132717af8725be1d17240835a51e8a60ce63737db\",",
					"                \"createdOn\": \"2020-03-02T09:12:47\",",
					"                \"sortCode\": \"20\",",
					"                \"name\": \"Test Tax records\"",
					"            }",
					"        ],",
					"        \"required\": [",
					"            \"id\",",
					"            \"tenantId\",",
					"            \"code\",",
					"            \"sortCode\",",
					"            \"type\",",
					"            \"visible\",",
					"            \"relevance\",",
					"            \"name\",",
					"            \"description\",",
					"            \"createdOn\",",
					"            \"totalDocuments\",",
					"            \"totalDocumentsUnread\",",
					"            \"self\"",
					"        ],",
					"        \"properties\": {",
					"            \"id\": {",
					"                \"$id\": \"#/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"description\": \"An explanation about the purpose of this instance.\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                    \"__ID__78583866544f354766584a6c5132717afdbe04673c5d06ec562575a2768f4018d3\"",
					"                ]",
					"            },",
					"            \"tenantId\": {",
					"                \"$id\": \"#/items/properties/tenantId\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Tenantid Schema\",",
					"                \"description\": \"An explanation about the purpose of this instance.\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                    \"19901\"",
					"                ]",
					"            },",
					"            \"code\": {",
					"                \"$id\": \"#/items/properties/code\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Code Schema\",",
					"                \"description\": \"An explanation about the purpose of this instance.\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                    \"TCFather\"",
					"                ]",
					"            },",
					"            \"sortCode\": {",
					"                \"$id\": \"#/items/properties/sortCode\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Sortcode Schema\",",
					"                \"description\": \"An explanation about the purpose of this instance.\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                    \"20\"",
					"                ]",
					"            },",
					"            \"type\": {",
					"                \"$id\": \"#/items/properties/type\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Type Schema\",",
					"                \"description\": \"An explanation about the purpose of this instance.\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                    \"BANK_DOCUMENT\"",
					"                ]",
					"            },",
					"            \"visible\": {",
					"                \"$id\": \"#/items/properties/visible\",",
					"                \"type\": \"boolean\",",
					"                \"title\": \"The Visible Schema\",",
					"                \"description\": \"An explanation about the purpose of this instance.\",",
					"                \"default\": false,",
					"                \"examples\": [",
					"                    true",
					"                ]",
					"            },",
					"            \"relevance\": {",
					"                \"$id\": \"#/items/properties/relevance\",",
					"                \"title\": \"The Relevance Schema\",",
					"                \"description\": \"An explanation about the purpose of this instance.\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                    null",
					"                ]",
					"            },",
					"            \"name\": {",
					"                \"$id\": \"#/items/properties/name\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Name Schema\",",
					"                \"description\": \"An explanation about the purpose of this instance.\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                    \"Test Category Father\"",
					"                ]",
					"            },",
					"            \"description\": {",
					"                \"$id\": \"#/items/properties/description\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Description Schema\",",
					"                \"description\": \"An explanation about the purpose of this instance.\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                    \"Test Category Father\"",
					"                ]",
					"            },",
					"            \"createdOn\": {",
					"                \"$id\": \"#/items/properties/createdOn\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Createdon Schema\",",
					"                \"description\": \"An explanation about the purpose of this instance.\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                    \"2020-03-02T09:12:47\"",
					"                ]",
					"            },",
					"            \"totalDocuments\": {",
					"                \"$id\": \"#/items/properties/totalDocuments\",",
					"                \"type\": \"integer\",",
					"                \"title\": \"The Totaldocuments Schema\",",
					"                \"description\": \"An explanation about the purpose of this instance.\",",
					"                \"default\": 0,",
					"                \"examples\": [",
					"                    2",
					"                ]",
					"            },",
					"            \"totalDocumentsUnread\": {",
					"                \"$id\": \"#/items/properties/totalDocumentsUnread\",",
					"                \"type\": \"integer\",",
					"                \"title\": \"The Totaldocumentsunread Schema\",",
					"                \"description\": \"An explanation about the purpose of this instance.\",",
					"                \"default\": 0,",
					"                \"examples\": [",
					"                    2",
					"                ]",
					"            },",
					"            \"self\": {",
					"                \"$id\": \"#/items/properties/self\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Self Schema\",",
					"                \"description\": \"An explanation about the purpose of this instance.\",",
					"                \"default\": {},",
					"                \"examples\": [",
					"                    {",
					"                        \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/categories/__ID__78583866544f354766584a6c5132717afdbe04673c5d06ec562575a2768f4018d3\"",
					"                    }",
					"                ],",
					"                \"required\": [",
					"                    \"href\"",
					"                ],",
					"                \"properties\": {",
					"                    \"href\": {",
					"                        \"$id\": \"#/items/properties/self/properties/href\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Href Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/categories/__ID__78583866544f354766584a6c5132717afdbe04673c5d06ec562575a2768f4018d3\"",
					"                        ]",
					"                    }",
					"                }",
					"            }",
					"        }",
					"    }",
					"};",
					"pm.environment.set(\"getCategoriesSchema\", getCategoriesSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'getCategoryById' *****************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const getCategoryByIdSchema = {",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"    \"$id\": \"http://example.com/example.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The Root Schema\",",
					"    \"description\": \"The root schema comprises the entire JSON document.\",",
					"    \"required\": [",
					"        \"id\",",
					"        \"tenantId\",",
					"        \"code\",",
					"        \"sortCode\",",
					"        \"type\",",
					"        \"visible\",",
					"        \"relevance\",",
					"        \"name\",",
					"        \"description\",",
					"        \"createdOn\",",
					"        \"totalDocuments\",",
					"        \"totalDocumentsUnread\",",
					"        \"self\"",
					"    ],",
					"    \"properties\": {",
					"        \"id\": {",
					"            \"$id\": \"#/properties/id\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Id Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"__ID__78583866544f354766584a6c5132717afdbe04673c5d06ec562575a2768f4018d3\"",
					"            ]",
					"        },",
					"        \"tenantId\": {",
					"            \"$id\": \"#/properties/tenantId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Tenantid Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"19901\"",
					"            ]",
					"        },",
					"        \"code\": {",
					"            \"$id\": \"#/properties/code\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Code Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"TCFather\"",
					"            ]",
					"        },",
					"        \"sortCode\": {",
					"            \"$id\": \"#/properties/sortCode\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Sortcode Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"20\"",
					"            ]",
					"        },",
					"        \"type\": {",
					"            \"$id\": \"#/properties/type\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Type Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"BANK_DOCUMENT\"",
					"            ]",
					"        },",
					"        \"visible\": {",
					"            \"$id\": \"#/properties/visible\",",
					"            \"type\": \"boolean\",",
					"            \"title\": \"The Visible Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": false,",
					"            \"examples\": [",
					"                true",
					"            ]",
					"        },",
					"        \"relevance\": {",
					"            \"$id\": \"#/properties/relevance\",",
					"            \"title\": \"The Relevance Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"name\": {",
					"            \"$id\": \"#/properties/name\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Name Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"Test Category Father\"",
					"            ]",
					"        },",
					"        \"description\": {",
					"            \"$id\": \"#/properties/description\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Description Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"Test Category Father\"",
					"            ]",
					"        },",
					"        \"createdOn\": {",
					"            \"$id\": \"#/properties/createdOn\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Createdon Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"2020-03-02T09:12:47\"",
					"            ]",
					"        },",
					"        \"totalDocuments\": {",
					"            \"$id\": \"#/properties/totalDocuments\",",
					"            \"type\": \"integer\",",
					"            \"title\": \"The Totaldocuments Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": 0,",
					"            \"examples\": [",
					"                2",
					"            ]",
					"        },",
					"        \"totalDocumentsUnread\": {",
					"            \"$id\": \"#/properties/totalDocumentsUnread\",",
					"            \"type\": \"integer\",",
					"            \"title\": \"The Totaldocumentsunread Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": 0,",
					"            \"examples\": [",
					"                2",
					"            ]",
					"        },",
					"        \"self\": {",
					"            \"$id\": \"#/properties/self\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Self Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"                {",
					"                    \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/categories/__ID__78583866544f354766584a6c5132717afdbe04673c5d06ec562575a2768f4018d3\"",
					"                }",
					"            ],",
					"            \"required\": [",
					"                \"href\"",
					"            ],",
					"            \"properties\": {",
					"                \"href\": {",
					"                    \"$id\": \"#/properties/self/properties/href\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Href Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/documents/19901/v1/categories/__ID__78583866544f354766584a6c5132717afdbe04673c5d06ec562575a2768f4018d3\"",
					"                    ]",
					"                }",
					"            }",
					"        }",
					"    }",
					"};",
					"pm.environment.set(\"getCategoryByIdSchema\", getCategoryByIdSchema);",
					"//************************************************************************************************",
					"// Schema for 'newCategory' *******************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const newCategorySchema =",
					"{",
					"    \"definitions\": {},",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"    \"$id\": \"http://example.com/root.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The Root Schema\",",
					"    \"required\": [",
					"        \"id\",",
					"        \"tenantId\",",
					"        \"code\",",
					"        \"sortCode\",",
					"        \"type\",",
					"        \"visible\",",
					"        \"relevance\",",
					"        \"name\",",
					"        \"description\",",
					"        \"createdOn\",",
					"        \"totalDocuments\",",
					"        \"totalDocumentsUnread\",",
					"        \"self\"",
					"    ],",
					"    \"properties\": {",
					"        \"id\": {",
					"            \"$id\": \"#/properties/id\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Id Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"__ID__3a0003d2f7ad3775a2b45161e1922a1d980c281ffc6c1061399a7856cbd0eb81ab7662bdaddb98\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"tenantId\": {",
					"            \"$id\": \"#/properties/tenantId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Tenantid Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"string\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"code\": {",
					"            \"$id\": \"#/properties/code\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Code Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"string\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"sortCode\": {",
					"            \"$id\": \"#/properties/sortCode\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Sortcode Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"string\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"type\": {",
					"            \"$id\": \"#/properties/type\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Type Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"BANK_DOCUMENT\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"visible\": {",
					"            \"$id\": \"#/properties/visible\",",
					"            \"type\": \"boolean\",",
					"            \"title\": \"The Visible Schema\",",
					"            \"default\": false,",
					"            \"examples\": [",
					"                true",
					"            ]",
					"        },",
					"        \"relevance\": {",
					"            \"$id\": \"#/properties/relevance\",",
					"            \"type\": \"integer\",",
					"            \"title\": \"The Relevance Schema\",",
					"            \"default\": 0,",
					"            \"examples\": [",
					"                0",
					"            ]",
					"        },",
					"        \"name\": {",
					"            \"$id\": \"#/properties/name\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Name Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"string\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"description\": {",
					"            \"$id\": \"#/properties/description\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Description Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"string\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"createdOn\": {",
					"            \"$id\": \"#/properties/createdOn\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Createdon Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"2020-01-13T13:37:43.271Z\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"totalDocuments\": {",
					"            \"$id\": \"#/properties/totalDocuments\",",
					"            \"type\": \"integer\",",
					"            \"title\": \"The Totaldocuments Schema\",",
					"            \"default\": 0,",
					"            \"examples\": [",
					"                0",
					"            ]",
					"        },",
					"        \"totalDocumentsUnread\": {",
					"            \"$id\": \"#/properties/totalDocumentsUnread\",",
					"            \"type\": \"integer\",",
					"            \"title\": \"The Totaldocumentsunread Schema\",",
					"            \"default\": 0,",
					"            \"examples\": [",
					"                0",
					"            ]",
					"        },",
					"        \"self\": {",
					"            \"$id\": \"#/properties/self\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Self Schema\",",
					"            \"required\": [",
					"                \"href\"",
					"            ],",
					"            \"properties\": {",
					"                \"href\": {",
					"                    \"$id\": \"#/properties/self/properties/href\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Href Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"/messaging/documents/v1?page=0&size=30\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                }",
					"            }",
					"        }",
					"    }",
					"};",
					"pm.environment.set(\"newCategorySchema\", newCategorySchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'addAttachment to document' ********************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const addAttachmentSchema =",
					"{",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"    \"$id\": \"http://example.com/example.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The root schema\",",
					"    \"description\": \"The root schema comprises the entire JSON document.\",",
					"    \"default\": {},",
					"    \"examples\": [",
					"        {",
					"            \"id\": \"__ID__3565573063344c64536a59484553394fc8910efc6700d2fc50056605981e37b487dedaac\",",
					"            \"tenantId\": \"19901\",",
					"            \"category\": {",
					"                \"id\": \"__ID__3565573063344c64536a59484553394fcc8f5a3f0be64ac9d8577684e20a411b0d\",",
					"                \"tenantId\": \"19901\",",
					"                \"code\": \"TCFather\",",
					"                \"type\": \"BANK_DOCUMENT\",",
					"                \"name\": \"Test Category Father\",",
					"                \"createdOn\": \"2020-04-16T13:33:37\",",
					"                \"self\": {",
					"                    \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/api/documents/19901/v1/categories/__ID__3565573063344c64536a59484553394fcc8f5a3f0be64ac9d8577684e20a411b0d\"",
					"                }",
					"            },",
					"            \"customerId\": null,",
					"            \"publishingDate\": \"2020-05-13T15:26:49\",",
					"            \"referencedObjectType\": null,",
					"            \"senderName\": \"Freddy Hinz\",",
					"            \"senderId\": null,",
					"            \"isRead\": null,",
					"            \"referencedObjectNo\": null,",
					"            \"dateRead\": null,",
					"            \"title\": \"Created_Document_With_Attachment\",",
					"            \"body\": \"This is the newly created document body with an added attachment\",",
					"            \"deleted\": null,",
					"            \"attachments\": [",
					"                {",
					"                    \"id\": \"__ID__3565573063344c64536a59484553394fcc950cfceef6ebf9041cabaf6b92b474395d55e3\",",
					"                    \"mimetype\": \"application/pdf\",",
					"                    \"name\": \"Account_Transfer_TEST.pdf\",",
					"                    \"self\": {",
					"                        \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/api/documents/19901/v1/documents/__ID__3565573063344c64536a59484553394fc8910efc6700d2fc50056605981e37b487dedaac/attachments/__ID__3565573063344c64536a59484553394fcc950cfceef6ebf9041cabaf6b92b474395d55e3\"",
					"                    },",
					"                    \"publishingDate\": \"2020-05-13T15:26:49\",",
					"                    \"size\": 363778,",
					"                    \"encoding\": null",
					"                },",
					"                {",
					"                    \"id\": \"__ID__3565573063344c64536a59484553394fcc950cffde7de44d31610f4a56484fa7b25e83c4\",",
					"                    \"mimetype\": \"application/pdf\",",
					"                    \"name\": \"crealogix_medienmitteilung.pdf\",",
					"                    \"self\": {",
					"                        \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/api/documents/19901/v1/documents/__ID__3565573063344c64536a59484553394fc8910efc6700d2fc50056605981e37b487dedaac/attachments/__ID__3565573063344c64536a59484553394fcc950cffde7de44d31610f4a56484fa7b25e83c4\"",
					"                    },",
					"                    \"publishingDate\": \"2020-05-13T15:27:00\",",
					"                    \"size\": 148049,",
					"                    \"encoding\": null",
					"                }",
					"            ],",
					"            \"self\": {",
					"                \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/api/documents/19901/v1/documents/__ID__3565573063344c64536a59484553394fc8910efc6700d2fc50056605981e37b487dedaac\"",
					"            }",
					"        }",
					"    ],",
					"    \"required\": [",
					"        \"id\",",
					"        \"tenantId\",",
					"        \"category\",",
					"        \"customerId\",",
					"        \"publishingDate\",",
					"        \"referencedObjectType\",",
					"        \"senderName\",",
					"        \"senderId\",",
					"        \"isRead\",",
					"        \"referencedObjectNo\",",
					"        \"dateRead\",",
					"        \"title\",",
					"        \"body\",",
					"        \"deleted\",",
					"        \"attachments\",",
					"        \"self\"",
					"    ],",
					"    \"additionalProperties\": true,",
					"    \"properties\": {",
					"        \"id\": {",
					"            \"$id\": \"#/properties/id\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The id schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"__ID__3565573063344c64536a59484553394fc8910efc6700d2fc50056605981e37b487dedaac\"",
					"            ]",
					"        },",
					"        \"tenantId\": {",
					"            \"$id\": \"#/properties/tenantId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The tenantId schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"19901\"",
					"            ]",
					"        },",
					"        \"category\": {",
					"            \"$id\": \"#/properties/category\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The category schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"                {",
					"                    \"id\": \"__ID__3565573063344c64536a59484553394fcc8f5a3f0be64ac9d8577684e20a411b0d\",",
					"                    \"tenantId\": \"19901\",",
					"                    \"code\": \"TCFather\",",
					"                    \"type\": \"BANK_DOCUMENT\",",
					"                    \"name\": \"Test Category Father\",",
					"                    \"createdOn\": \"2020-04-16T13:33:37\",",
					"                    \"self\": {",
					"                        \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/api/documents/19901/v1/categories/__ID__3565573063344c64536a59484553394fcc8f5a3f0be64ac9d8577684e20a411b0d\"",
					"                    }",
					"                }",
					"            ],",
					"            \"required\": [",
					"                \"id\",",
					"                \"tenantId\",",
					"                \"code\",",
					"                \"type\",",
					"                \"name\",",
					"                \"createdOn\",",
					"                \"self\"",
					"            ],",
					"            \"additionalProperties\": true,",
					"            \"properties\": {",
					"                \"id\": {",
					"                    \"$id\": \"#/properties/category/properties/id\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The id schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"__ID__3565573063344c64536a59484553394fcc8f5a3f0be64ac9d8577684e20a411b0d\"",
					"                    ]",
					"                },",
					"                \"tenantId\": {",
					"                    \"$id\": \"#/properties/category/properties/tenantId\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The tenantId schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"19901\"",
					"                    ]",
					"                },",
					"                \"code\": {",
					"                    \"$id\": \"#/properties/category/properties/code\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The code schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"TCFather\"",
					"                    ]",
					"                },",
					"                \"type\": {",
					"                    \"$id\": \"#/properties/category/properties/type\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The type schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"BANK_DOCUMENT\"",
					"                    ]",
					"                },",
					"                \"name\": {",
					"                    \"$id\": \"#/properties/category/properties/name\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The name schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"Test Category Father\"",
					"                    ]",
					"                },",
					"                \"createdOn\": {",
					"                    \"$id\": \"#/properties/category/properties/createdOn\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The createdOn schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"2020-04-16T13:33:37\"",
					"                    ]",
					"                },",
					"                \"self\": {",
					"                    \"$id\": \"#/properties/category/properties/self\",",
					"                    \"type\": \"object\",",
					"                    \"title\": \"The self schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": {},",
					"                    \"examples\": [",
					"                        {",
					"                            \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/api/documents/19901/v1/categories/__ID__3565573063344c64536a59484553394fcc8f5a3f0be64ac9d8577684e20a411b0d\"",
					"                        }",
					"                    ],",
					"                    \"required\": [",
					"                        \"href\"",
					"                    ],",
					"                    \"additionalProperties\": true,",
					"                    \"properties\": {",
					"                        \"href\": {",
					"                            \"$id\": \"#/properties/category/properties/self/properties/href\",",
					"                            \"type\": \"string\",",
					"                            \"title\": \"The href schema\",",
					"                            \"description\": \"An explanation about the purpose of this instance.\",",
					"                            \"default\": \"\",",
					"                            \"examples\": [",
					"                                \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/api/documents/19901/v1/categories/__ID__3565573063344c64536a59484553394fcc8f5a3f0be64ac9d8577684e20a411b0d\"",
					"                            ]",
					"                        }",
					"                    }",
					"                }",
					"            }",
					"        },",
					"        \"customerId\": {",
					"            \"$id\": \"#/properties/customerId\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The customerId schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"publishingDate\": {",
					"            \"$id\": \"#/properties/publishingDate\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The publishingDate schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"2020-05-13T15:26:49\"",
					"            ]",
					"        },",
					"        \"referencedObjectType\": {",
					"            \"$id\": \"#/properties/referencedObjectType\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The referencedObjectType schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"senderName\": {",
					"            \"$id\": \"#/properties/senderName\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The senderName schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"Freddy Hinz\"",
					"            ]",
					"        },",
					"        \"senderId\": {",
					"            \"$id\": \"#/properties/senderId\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The senderId schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"isRead\": {",
					"            \"$id\": \"#/properties/isRead\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The isRead schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"referencedObjectNo\": {",
					"            \"$id\": \"#/properties/referencedObjectNo\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The referencedObjectNo schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"dateRead\": {",
					"            \"$id\": \"#/properties/dateRead\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The dateRead schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"title\": {",
					"            \"$id\": \"#/properties/title\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The title schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"Created_Document_With_Attachment\"",
					"            ]",
					"        },",
					"        \"body\": {",
					"            \"$id\": \"#/properties/body\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The body schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"This is the newly created document body with an added attachment\"",
					"            ]",
					"        },",
					"        \"deleted\": {",
					"            \"$id\": \"#/properties/deleted\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The deleted schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"attachments\": {",
					"            \"$id\": \"#/properties/attachments\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The attachments schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": [],",
					"            \"examples\": [",
					"                [",
					"                    {",
					"                        \"id\": \"__ID__3565573063344c64536a59484553394fcc950cfceef6ebf9041cabaf6b92b474395d55e3\",",
					"                        \"mimetype\": \"application/pdf\",",
					"                        \"name\": \"Account_Transfer_TEST.pdf\",",
					"                        \"self\": {",
					"                            \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/api/documents/19901/v1/documents/__ID__3565573063344c64536a59484553394fc8910efc6700d2fc50056605981e37b487dedaac/attachments/__ID__3565573063344c64536a59484553394fcc950cfceef6ebf9041cabaf6b92b474395d55e3\"",
					"                        },",
					"                        \"publishingDate\": \"2020-05-13T15:26:49\",",
					"                        \"size\": 363778,",
					"                        \"encoding\": null",
					"                    },",
					"                    {",
					"                        \"id\": \"__ID__3565573063344c64536a59484553394fcc950cffde7de44d31610f4a56484fa7b25e83c4\",",
					"                        \"mimetype\": \"application/pdf\",",
					"                        \"name\": \"crealogix_medienmitteilung.pdf\",",
					"                        \"self\": {",
					"                            \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/api/documents/19901/v1/documents/__ID__3565573063344c64536a59484553394fc8910efc6700d2fc50056605981e37b487dedaac/attachments/__ID__3565573063344c64536a59484553394fcc950cffde7de44d31610f4a56484fa7b25e83c4\"",
					"                        },",
					"                        \"publishingDate\": \"2020-05-13T15:27:00\",",
					"                        \"size\": 148049,",
					"                        \"encoding\": null",
					"                    }",
					"                ]",
					"            ],",
					"            \"additionalItems\": true,",
					"            \"items\": {",
					"                \"anyOf\": [",
					"                    {",
					"                        \"$id\": \"#/properties/attachments/items/anyOf/0\",",
					"                        \"type\": \"object\",",
					"                        \"title\": \"The first anyOf schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": {},",
					"                        \"examples\": [",
					"                            {",
					"                                \"id\": \"__ID__3565573063344c64536a59484553394fcc950cfceef6ebf9041cabaf6b92b474395d55e3\",",
					"                                \"mimetype\": \"application/pdf\",",
					"                                \"name\": \"Account_Transfer_TEST.pdf\",",
					"                                \"self\": {",
					"                                    \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/api/documents/19901/v1/documents/__ID__3565573063344c64536a59484553394fc8910efc6700d2fc50056605981e37b487dedaac/attachments/__ID__3565573063344c64536a59484553394fcc950cfceef6ebf9041cabaf6b92b474395d55e3\"",
					"                                },",
					"                                \"publishingDate\": \"2020-05-13T15:26:49\",",
					"                                \"size\": 363778,",
					"                                \"encoding\": null",
					"                            }",
					"                        ],",
					"                        \"required\": [",
					"                            \"id\",",
					"                            \"mimetype\",",
					"                            \"name\",",
					"                            \"self\",",
					"                            \"publishingDate\",",
					"                            \"size\",",
					"                            \"encoding\"",
					"                        ],",
					"                        \"additionalProperties\": true,",
					"                        \"properties\": {",
					"                            \"id\": {",
					"                                \"$id\": \"#/properties/attachments/items/anyOf/0/properties/id\",",
					"                                \"type\": \"string\",",
					"                                \"title\": \"The id schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": \"\",",
					"                                \"examples\": [",
					"                                    \"__ID__3565573063344c64536a59484553394fcc950cfceef6ebf9041cabaf6b92b474395d55e3\"",
					"                                ]",
					"                            },",
					"                            \"mimetype\": {",
					"                                \"$id\": \"#/properties/attachments/items/anyOf/0/properties/mimetype\",",
					"                                \"type\": \"string\",",
					"                                \"title\": \"The mimetype schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": \"\",",
					"                                \"examples\": [",
					"                                    \"application/pdf\"",
					"                                ]",
					"                            },",
					"                            \"name\": {",
					"                                \"$id\": \"#/properties/attachments/items/anyOf/0/properties/name\",",
					"                                \"type\": \"string\",",
					"                                \"title\": \"The name schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": \"\",",
					"                                \"examples\": [",
					"                                    \"Account_Transfer_TEST.pdf\"",
					"                                ]",
					"                            },",
					"                            \"self\": {",
					"                                \"$id\": \"#/properties/attachments/items/anyOf/0/properties/self\",",
					"                                \"type\": \"object\",",
					"                                \"title\": \"The self schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": {},",
					"                                \"examples\": [",
					"                                    {",
					"                                        \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/api/documents/19901/v1/documents/__ID__3565573063344c64536a59484553394fc8910efc6700d2fc50056605981e37b487dedaac/attachments/__ID__3565573063344c64536a59484553394fcc950cfceef6ebf9041cabaf6b92b474395d55e3\"",
					"                                    }",
					"                                ],",
					"                                \"required\": [",
					"                                    \"href\"",
					"                                ],",
					"                                \"additionalProperties\": true,",
					"                                \"properties\": {",
					"                                    \"href\": {",
					"                                        \"$id\": \"#/properties/attachments/items/anyOf/0/properties/self/properties/href\",",
					"                                        \"type\": \"string\",",
					"                                        \"title\": \"The href schema\",",
					"                                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                                        \"default\": \"\",",
					"                                        \"examples\": [",
					"                                            \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/api/documents/19901/v1/documents/__ID__3565573063344c64536a59484553394fc8910efc6700d2fc50056605981e37b487dedaac/attachments/__ID__3565573063344c64536a59484553394fcc950cfceef6ebf9041cabaf6b92b474395d55e3\"",
					"                                        ]",
					"                                    }",
					"                                }",
					"                            },",
					"                            \"publishingDate\": {",
					"                                \"$id\": \"#/properties/attachments/items/anyOf/0/properties/publishingDate\",",
					"                                \"type\": \"string\",",
					"                                \"title\": \"The publishingDate schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": \"\",",
					"                                \"examples\": [",
					"                                    \"2020-05-13T15:26:49\"",
					"                                ]",
					"                            },",
					"                            \"size\": {",
					"                                \"$id\": \"#/properties/attachments/items/anyOf/0/properties/size\",",
					"                                \"type\": \"integer\",",
					"                                \"title\": \"The size schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": 0,",
					"                                \"examples\": [",
					"                                    363778",
					"                                ]",
					"                            },",
					"                            \"encoding\": {",
					"                                \"$id\": \"#/properties/attachments/items/anyOf/0/properties/encoding\",",
					"                                \"type\": \"null\",",
					"                                \"title\": \"The encoding schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": null,",
					"                                \"examples\": [",
					"                                    null",
					"                                ]",
					"                            }",
					"                        }",
					"                    }",
					"                ],",
					"                \"$id\": \"#/properties/attachments/items\"",
					"            }",
					"        },",
					"        \"self\": {",
					"            \"$id\": \"#/properties/self\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The self schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"                {",
					"                    \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/api/documents/19901/v1/documents/__ID__3565573063344c64536a59484553394fc8910efc6700d2fc50056605981e37b487dedaac\"",
					"                }",
					"            ],",
					"            \"required\": [",
					"                \"href\"",
					"            ],",
					"            \"additionalProperties\": true,",
					"            \"properties\": {",
					"                \"href\": {",
					"                    \"$id\": \"#/properties/self/properties/href\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The href schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/api/documents/19901/v1/documents/__ID__3565573063344c64536a59484553394fc8910efc6700d2fc50056605981e37b487dedaac\"",
					"                    ]",
					"                }",
					"            }",
					"        }",
					"    }",
					"};",
					"pm.environment.set(\"addAttachmentSchema\", addAttachmentSchema);",
					"//************************************************************************************************",
					"// Schema for 'document not found' ***************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const notFoundSchema =",
					"{",
					"    \"type\": \"object\",",
					"    \"required\": [",
					"        \"status\",",
					"        \"messages\",",
					"        \"timestamp\"",
					"    ],",
					"    \"properties\": {",
					"        \"status\": {",
					"            \"type\": \"boolean\"",
					"        },",
					"        \"messages\": {",
					"            \"type\": \"array\",",
					"            \"items\": {",
					"                \"type\": \"object\",",
					"                \"required\": [",
					"                    \"category\",",
					"                    \"code\",",
					"                    \"path\",",
					"                    \"text\"",
					"                ],",
					"                \"properties\": {",
					"                    \"category\": {",
					"                        \"type\": \"string\",",
					"                        \"pattern\": \"^(.*)$\"",
					"                    },",
					"                    \"code\": {",
					"                        \"type\": \"string\",",
					"                        \"pattern\": \"^(.*)$\"",
					"                    },",
					"                    \"path\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"                    \"text\": {",
					"                        \"type\": \"string\"",
					"                    }",
					"                }",
					"            }",
					"        },",
					"        \"timestamp\": {",
					"            \"type\": \"string\",",
					"            \"pattern\": \"^(.*)$\"",
					"        }",
					"    }",
					"};",
					"pm.environment.set(\"notFoundSchema\", notFoundSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'updateAttachmentSchema' ***********************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const updateAttachmentSchema =",
					"{",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"    \"$id\": \"http://example.com/example.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The root schema\",",
					"    \"description\": \"The root schema comprises the entire JSON document.\",",
					"    \"default\": {},",
					"    \"examples\": [",
					"        {",
					"            \"id\": \"__ID__3565573063344c64536a59484553394fcc950cf182a3d045c2c15b98884f0d8b6c53409d\",",
					"            \"mimetype\": \"application/pdf\",",
					"            \"name\": \"Updated_Attachment_Name.pdf\",",
					"            \"self\": {",
					"                \"href\": \"/messaging/api/documents/19901/v1/documents/__ID__3565573063344c64536a59484553394fc8910efc6700d2fc50056605981e37b487dedaac/attachments/__ID__3565573063344c64536a59484553394fcc950cf182a3d045c2c15b98884f0d8b6c53409d\"",
					"            },",
					"            \"publishingDate\": \"2020-05-13T15:38:32\",",
					"            \"size\": 148049,",
					"            \"encoding\": null",
					"        }",
					"    ],",
					"    \"required\": [",
					"        \"id\",",
					"        \"mimetype\",",
					"        \"name\",",
					"        \"self\",",
					"        \"publishingDate\",",
					"        \"size\",",
					"        \"encoding\"",
					"    ],",
					"    \"additionalProperties\": true,",
					"    \"properties\": {",
					"        \"id\": {",
					"            \"$id\": \"#/properties/id\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The id schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"__ID__3565573063344c64536a59484553394fcc950cf182a3d045c2c15b98884f0d8b6c53409d\"",
					"            ]",
					"        },",
					"        \"mimetype\": {",
					"            \"$id\": \"#/properties/mimetype\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The mimetype schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"application/pdf\"",
					"            ]",
					"        },",
					"        \"name\": {",
					"            \"$id\": \"#/properties/name\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The name schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"Updated_Attachment_Name.pdf\"",
					"            ]",
					"        },",
					"        \"self\": {",
					"            \"$id\": \"#/properties/self\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The self schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"                {",
					"                    \"href\": \"/messaging/api/documents/19901/v1/documents/__ID__3565573063344c64536a59484553394fc8910efc6700d2fc50056605981e37b487dedaac/attachments/__ID__3565573063344c64536a59484553394fcc950cf182a3d045c2c15b98884f0d8b6c53409d\"",
					"                }",
					"            ],",
					"            \"required\": [",
					"                \"href\"",
					"            ],",
					"            \"additionalProperties\": true,",
					"            \"properties\": {",
					"                \"href\": {",
					"                    \"$id\": \"#/properties/self/properties/href\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The href schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"/messaging/api/documents/19901/v1/documents/__ID__3565573063344c64536a59484553394fc8910efc6700d2fc50056605981e37b487dedaac/attachments/__ID__3565573063344c64536a59484553394fcc950cf182a3d045c2c15b98884f0d8b6c53409d\"",
					"                    ]",
					"                }",
					"            }",
					"        },",
					"        \"publishingDate\": {",
					"            \"$id\": \"#/properties/publishingDate\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The publishingDate schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"2020-05-13T15:38:32\"",
					"            ]",
					"        },",
					"        \"size\": {",
					"            \"$id\": \"#/properties/size\",",
					"            \"type\": \"integer\",",
					"            \"title\": \"The size schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": 0,",
					"            \"examples\": [",
					"                148049",
					"            ]",
					"        },",
					"        \"encoding\": {",
					"            \"$id\": \"#/properties/encoding\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The encoding schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        }",
					"    }",
					"};",
					"pm.environment.set(\"updateAttachmentSchema\", updateAttachmentSchema);",
					"//************************************************************************************************",
					"// Schema for 'deleteAttachmentSchema' ***********************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const deleteAttachmentSchema = {",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"    \"$id\": \"http://example.com/example.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The root schema\",",
					"    \"description\": \"The root schema comprises the entire JSON document.\",",
					"    \"default\": {},",
					"    \"examples\": [",
					"        {",
					"            \"id\": \"__ID__3565573063344c64536a59484553394fc8910efc6700d2fc50056605981e37b487dedaac\",",
					"            \"tenantId\": \"19901\",",
					"            \"category\": {",
					"                \"id\": \"__ID__3565573063344c64536a59484553394fcc8f5a3f0be64ac9d8577684e20a411b0d\",",
					"                \"tenantId\": \"19901\",",
					"                \"code\": \"TCFather\",",
					"                \"type\": \"BANK_DOCUMENT\",",
					"                \"name\": \"Test Category Father\",",
					"                \"createdOn\": \"2020-04-16T13:33:37\",",
					"                \"self\": {",
					"                    \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/api/documents/19901/v1/categories/__ID__3565573063344c64536a59484553394fcc8f5a3f0be64ac9d8577684e20a411b0d\"",
					"                }",
					"            },",
					"            \"customerId\": null,",
					"            \"publishingDate\": \"2020-05-13T15:26:49\",",
					"            \"referencedObjectType\": null,",
					"            \"senderName\": \"Freddy Hinz\",",
					"            \"senderId\": null,",
					"            \"isRead\": null,",
					"            \"referencedObjectNo\": null,",
					"            \"dateRead\": null,",
					"            \"title\": \"Created_Document_With_Attachment\",",
					"            \"body\": \"This is the newly created document body with an added attachment\",",
					"            \"deleted\": null,",
					"            \"attachments\": [],",
					"            \"self\": {",
					"                \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/api/documents/19901/v1/documents/__ID__3565573063344c64536a59484553394fc8910efc6700d2fc50056605981e37b487dedaac\"",
					"            }",
					"        }",
					"    ],",
					"    \"required\": [",
					"        \"id\",",
					"        \"tenantId\",",
					"        \"category\",",
					"        \"customerId\",",
					"        \"publishingDate\",",
					"        \"referencedObjectType\",",
					"        \"senderName\",",
					"        \"senderId\",",
					"        \"isRead\",",
					"        \"referencedObjectNo\",",
					"        \"dateRead\",",
					"        \"title\",",
					"        \"body\",",
					"        \"deleted\",",
					"        \"attachments\",",
					"        \"self\"",
					"    ],",
					"    \"additionalProperties\": true,",
					"    \"properties\": {",
					"        \"id\": {",
					"            \"$id\": \"#/properties/id\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The id schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"__ID__3565573063344c64536a59484553394fc8910efc6700d2fc50056605981e37b487dedaac\"",
					"            ]",
					"        },",
					"        \"tenantId\": {",
					"            \"$id\": \"#/properties/tenantId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The tenantId schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"19901\"",
					"            ]",
					"        },",
					"        \"category\": {",
					"            \"$id\": \"#/properties/category\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The category schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"                {",
					"                    \"id\": \"__ID__3565573063344c64536a59484553394fcc8f5a3f0be64ac9d8577684e20a411b0d\",",
					"                    \"tenantId\": \"19901\",",
					"                    \"code\": \"TCFather\",",
					"                    \"type\": \"BANK_DOCUMENT\",",
					"                    \"name\": \"Test Category Father\",",
					"                    \"createdOn\": \"2020-04-16T13:33:37\",",
					"                    \"self\": {",
					"                        \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/api/documents/19901/v1/categories/__ID__3565573063344c64536a59484553394fcc8f5a3f0be64ac9d8577684e20a411b0d\"",
					"                    }",
					"                }",
					"            ],",
					"            \"required\": [",
					"                \"id\",",
					"                \"tenantId\",",
					"                \"code\",",
					"                \"type\",",
					"                \"name\",",
					"                \"createdOn\",",
					"                \"self\"",
					"            ],",
					"            \"additionalProperties\": true,",
					"            \"properties\": {",
					"                \"id\": {",
					"                    \"$id\": \"#/properties/category/properties/id\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The id schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"__ID__3565573063344c64536a59484553394fcc8f5a3f0be64ac9d8577684e20a411b0d\"",
					"                    ]",
					"                },",
					"                \"tenantId\": {",
					"                    \"$id\": \"#/properties/category/properties/tenantId\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The tenantId schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"19901\"",
					"                    ]",
					"                },",
					"                \"code\": {",
					"                    \"$id\": \"#/properties/category/properties/code\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The code schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"TCFather\"",
					"                    ]",
					"                },",
					"                \"type\": {",
					"                    \"$id\": \"#/properties/category/properties/type\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The type schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"BANK_DOCUMENT\"",
					"                    ]",
					"                },",
					"                \"name\": {",
					"                    \"$id\": \"#/properties/category/properties/name\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The name schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"Test Category Father\"",
					"                    ]",
					"                },",
					"                \"createdOn\": {",
					"                    \"$id\": \"#/properties/category/properties/createdOn\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The createdOn schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"2020-04-16T13:33:37\"",
					"                    ]",
					"                },",
					"                \"self\": {",
					"                    \"$id\": \"#/properties/category/properties/self\",",
					"                    \"type\": \"object\",",
					"                    \"title\": \"The self schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": {},",
					"                    \"examples\": [",
					"                        {",
					"                            \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/api/documents/19901/v1/categories/__ID__3565573063344c64536a59484553394fcc8f5a3f0be64ac9d8577684e20a411b0d\"",
					"                        }",
					"                    ],",
					"                    \"required\": [",
					"                        \"href\"",
					"                    ],",
					"                    \"additionalProperties\": true,",
					"                    \"properties\": {",
					"                        \"href\": {",
					"                            \"$id\": \"#/properties/category/properties/self/properties/href\",",
					"                            \"type\": \"string\",",
					"                            \"title\": \"The href schema\",",
					"                            \"description\": \"An explanation about the purpose of this instance.\",",
					"                            \"default\": \"\",",
					"                            \"examples\": [",
					"                                \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/api/documents/19901/v1/categories/__ID__3565573063344c64536a59484553394fcc8f5a3f0be64ac9d8577684e20a411b0d\"",
					"                            ]",
					"                        }",
					"                    }",
					"                }",
					"            }",
					"        },",
					"        \"customerId\": {",
					"            \"$id\": \"#/properties/customerId\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The customerId schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"publishingDate\": {",
					"            \"$id\": \"#/properties/publishingDate\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The publishingDate schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"2020-05-13T15:26:49\"",
					"            ]",
					"        },",
					"        \"referencedObjectType\": {",
					"            \"$id\": \"#/properties/referencedObjectType\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The referencedObjectType schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"senderName\": {",
					"            \"$id\": \"#/properties/senderName\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The senderName schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"Freddy Hinz\"",
					"            ]",
					"        },",
					"        \"senderId\": {",
					"            \"$id\": \"#/properties/senderId\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The senderId schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"isRead\": {",
					"            \"$id\": \"#/properties/isRead\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The isRead schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"referencedObjectNo\": {",
					"            \"$id\": \"#/properties/referencedObjectNo\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The referencedObjectNo schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"dateRead\": {",
					"            \"$id\": \"#/properties/dateRead\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The dateRead schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"title\": {",
					"            \"$id\": \"#/properties/title\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The title schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"Created_Document_With_Attachment\"",
					"            ]",
					"        },",
					"        \"body\": {",
					"            \"$id\": \"#/properties/body\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The body schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"This is the newly created document body with an added attachment\"",
					"            ]",
					"        },",
					"        \"deleted\": {",
					"            \"$id\": \"#/properties/deleted\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The deleted schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"attachments\": {",
					"            \"$id\": \"#/properties/attachments\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The attachments schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": [],",
					"            \"examples\": [",
					"                []",
					"            ],",
					"            \"additionalItems\": true,",
					"            \"items\": {",
					"                \"anyOf\": [],",
					"                \"$id\": \"#/properties/attachments/items\"",
					"            }",
					"        },",
					"        \"self\": {",
					"            \"$id\": \"#/properties/self\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The self schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"                {",
					"                    \"href\": \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/api/documents/19901/v1/documents/__ID__3565573063344c64536a59484553394fc8910efc6700d2fc50056605981e37b487dedaac\"",
					"                }",
					"            ],",
					"            \"required\": [",
					"                \"href\"",
					"            ],",
					"            \"additionalProperties\": true,",
					"            \"properties\": {",
					"                \"href\": {",
					"                    \"$id\": \"#/properties/self/properties/href\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The href schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"http://dbh-documents.mdb-master-lat.k8s-core.ebs.crealogix.net/messaging/api/documents/19901/v1/documents/__ID__3565573063344c64536a59484553394fc8910efc6700d2fc50056605981e37b487dedaac\"",
					"                    ]",
					"                }",
					"            }",
					"        }",
					"    }",
					"};",
					"pm.environment.set(\"deleteAttachmentSchema\", deleteAttachmentSchema);",
					"//************************************************************************************************",
					"// Schema for 'deleteDocument' *******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const deleteDocument = {",
					"    \"type\": \"object\",",
					"    \"required\": [",
					"        \"status\",",
					"        \"messages\",",
					"        \"timestamp\"",
					"    ],",
					"    \"properties\": {",
					"        \"status\": {",
					"            \"$id\": \"#/properties/status\",",
					"            \"type\": \"boolean\",",
					"            \"title\": \"The Status Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": false,",
					"            \"examples\": [",
					"                true",
					"            ]",
					"        },",
					"        \"messages\": {",
					"            \"$id\": \"#/properties/messages\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The Messages Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": [],",
					"            \"items\": {",
					"                \"$id\": \"#/properties/messages/items\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Items Schema\",",
					"                \"description\": \"An explanation about the purpose of this instance.\",",
					"                \"default\": {},",
					"                \"examples\": [",
					"                    {",
					"                        \"path\": \"/messaging/documents/19901/v1/documents/__ID__4742635a475552533847736544503273db6671e357c83c7fe4a63e1c901bc02af3ef\",",
					"                        \"text\": \"The resource was deleted successfully.\",",
					"                        \"category\": \"INFO\",",
					"                        \"code\": \"200\"",
					"                    }",
					"                ],",
					"                \"required\": [",
					"                    \"category\",",
					"                    \"code\",",
					"                    \"path\",",
					"                    \"text\"",
					"                ],",
					"                \"properties\": {",
					"                    \"category\": {",
					"                        \"$id\": \"#/properties/messages/items/properties/category\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Category Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"INFO\"",
					"                        ]",
					"                    },",
					"                    \"code\": {",
					"                        \"$id\": \"#/properties/messages/items/properties/code\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Code Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"200\"",
					"                        ]",
					"                    },",
					"                    \"path\": {",
					"                        \"$id\": \"#/properties/messages/items/properties/path\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Path Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"/messaging/documents/19901/v1/documents/__ID__4742635a475552533847736544503273db6671e357c83c7fe4a63e1c901bc02af3ef\"",
					"                        ]",
					"                    },",
					"                    \"text\": {",
					"                        \"$id\": \"#/properties/messages/items/properties/text\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Text Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"The resource was deleted successfully.\"",
					"                        ]",
					"                    }",
					"                }",
					"            }",
					"        },",
					"        \"timestamp\": {",
					"            \"$id\": \"#/properties/timestamp\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Timestamp Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"2020-03-02T11:44:27.975\"",
					"            ]",
					"        }",
					"    }",
					"};",
					"pm.environment.set(\"deleteDocument\", deleteDocument);",
					"//************************************************************************************************",
					"// Schema for 'noDocumentOnPageSchema' ***********************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const noDocumentOnPageSchema =",
					"{",
					"    \"definitions\": {},",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"    \"$id\": \"http://example.com/root.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The Root Schema\",",
					"    \"required\": [",
					"        \"_messages\",",
					"        \"_status\"",
					"    ],",
					"    \"properties\": {",
					"        \"_messages\": {",
					"            \"$id\": \"#/properties/_messages\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The _messages Schema\",",
					"            \"items\": {",
					"                \"$id\": \"#/properties/_messages/items\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Items Schema\",",
					"                \"required\": [",
					"                    \"category\",",
					"                    \"code\",",
					"                    \"text\"",
					"                ],",
					"                \"properties\": {",
					"                    \"category\": {",
					"                        \"$id\": \"#/properties/_messages/items/properties/category\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Category Schema\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"ERROR\"",
					"                        ],",
					"                        \"pattern\": \"^(.*)$\"",
					"                    },",
					"                    \"code\": {",
					"                        \"$id\": \"#/properties/_messages/items/properties/code\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Code Schema\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"404\"",
					"                        ],",
					"                        \"pattern\": \"^(.*)$\"",
					"                    },",
					"                    \"text\": {",
					"                        \"$id\": \"#/properties/_messages/items/properties/text\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Text Schema\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"No documents found on page: 3\"",
					"                        ],",
					"                        \"pattern\": \"^(.*)$\"",
					"                    }",
					"                }",
					"            }",
					"        },",
					"        \"_status\": {",
					"            \"$id\": \"#/properties/_status\",",
					"            \"type\": \"boolean\",",
					"            \"title\": \"The _status Schema\",",
					"            \"default\": false,",
					"            \"examples\": [",
					"                true",
					"            ]",
					"        }",
					"    }",
					"};",
					"pm.environment.set(\"noDocumentOnPageSchema\", noDocumentOnPageSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'validatonSchema' ******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"",
					"const validationSchema =",
					"{",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"    \"$id\": \"http://example.com/example.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The root schema\",",
					"    \"description\": \"The root schema comprises the entire JSON document.\",",
					"    \"default\": {},",
					"    \"examples\": [",
					"        {",
					"            \"_status\": false,",
					"            \"_messages\": [",
					"                {",
					"                    \"category\": \"ERROR\",",
					"                    \"code\": \"ExtensionCheck\",",
					"                    \"path\": \"attachments[0].filename\",",
					"                    \"params\": {}",
					"                }",
					"            ],",
					"            \"_timestamp\": \"2020-05-14T15:20:00.596+02:00\"",
					"        }",
					"    ],",
					"    \"required\": [",
					"        \"_status\",",
					"        \"_messages\",",
					"        \"_timestamp\"",
					"    ],",
					"    \"additionalProperties\": true,",
					"    \"properties\": {",
					"        \"_status\": {",
					"            \"$id\": \"#/properties/_status\",",
					"            \"type\": \"boolean\",",
					"            \"title\": \"The _status schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": false,",
					"            \"examples\": [",
					"                false",
					"            ]",
					"        },",
					"        \"_messages\": {",
					"            \"$id\": \"#/properties/_messages\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The _messages schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": [],",
					"            \"examples\": [",
					"                [",
					"                    {",
					"                        \"category\": \"ERROR\",",
					"                        \"code\": \"ExtensionCheck\",",
					"                        \"path\": \"attachments[0].filename\",",
					"                        \"params\": {}",
					"                    }",
					"                ]",
					"            ],",
					"            \"additionalItems\": true,",
					"            \"items\": {",
					"                \"anyOf\": [",
					"                    {",
					"                        \"$id\": \"#/properties/_messages/items/anyOf/0\",",
					"                        \"type\": \"object\",",
					"                        \"title\": \"The first anyOf schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": {},",
					"                        \"examples\": [",
					"                            {",
					"                                \"category\": \"ERROR\",",
					"                                \"code\": \"ExtensionCheck\",",
					"                                \"path\": \"attachments[0].filename\",",
					"                                \"params\": {}",
					"                            }",
					"                        ],",
					"                        \"required\": [",
					"                            \"category\",",
					"                            \"code\",",
					"                            \"path\",",
					"                            \"params\"",
					"                        ],",
					"                        \"additionalProperties\": true,",
					"                        \"properties\": {",
					"                            \"category\": {",
					"                                \"$id\": \"#/properties/_messages/items/anyOf/0/properties/category\",",
					"                                \"type\": \"string\",",
					"                                \"title\": \"The category schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": \"\",",
					"                                \"examples\": [",
					"                                    \"ERROR\"",
					"                                ]",
					"                            },",
					"                            \"code\": {",
					"                                \"$id\": \"#/properties/_messages/items/anyOf/0/properties/code\",",
					"                                \"type\": \"string\",",
					"                                \"title\": \"The code schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": \"\",",
					"                                \"examples\": [",
					"                                    \"ExtensionCheck\"",
					"                                ]",
					"                            },",
					"                            \"path\": {",
					"                                \"$id\": \"#/properties/_messages/items/anyOf/0/properties/path\",",
					"                                \"type\": \"string\",",
					"                                \"title\": \"The path schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": \"\",",
					"                                \"examples\": [",
					"                                    \"attachments[0].filename\"",
					"                                ]",
					"                            },",
					"                            \"params\": {",
					"                                \"$id\": \"#/properties/_messages/items/anyOf/0/properties/params\",",
					"                                \"type\": \"object\",",
					"                                \"title\": \"The params schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": {},",
					"                                \"examples\": [",
					"                                    {}",
					"                                ],",
					"                                \"required\": [],",
					"                                \"additionalProperties\": true,",
					"                                \"properties\": {}",
					"                            }",
					"                        }",
					"                    }",
					"                ],",
					"                \"$id\": \"#/properties/_messages/items\"",
					"            }",
					"        },",
					"        \"_timestamp\": {",
					"            \"$id\": \"#/properties/_timestamp\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The _timestamp schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"2020-05-14T15:20:00.596+02:00\"",
					"            ]",
					"        }",
					"    }",
					"};",
					"pm.environment.set(\"validationSchema\", validationSchema);",
					"//************************************************************************************************",
					"// Schema for 'accessDeniedSchema' ***************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const accessDeniedSchema =",
					"{",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"    \"$id\": \"http://example.com/example.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The root schema\",",
					"    \"description\": \"The root schema comprises the entire JSON document.\",",
					"    \"default\": {},",
					"    \"examples\": [",
					"        {",
					"            \"status\": false,",
					"            \"messages\": [",
					"                {",
					"                    \"category\": \"ERROR\",",
					"                    \"code\": \"ERROR_ACCESS_DENIED\",",
					"                    \"path\": \"/messaging/api/documents/19901/v1/documents\",",
					"                    \"text\": \"Access is denied\"",
					"                }",
					"            ],",
					"            \"timestamp\": \"2020-08-17T15:41:11.131\"",
					"        }",
					"    ],",
					"    \"required\": [",
					"        \"status\",",
					"        \"messages\",",
					"        \"timestamp\"",
					"    ],",
					"    \"properties\": {",
					"        \"status\": {",
					"            \"$id\": \"#/properties/status\",",
					"            \"type\": \"boolean\",",
					"            \"title\": \"The status schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": false,",
					"            \"examples\": [",
					"                false",
					"            ]",
					"        },",
					"        \"messages\": {",
					"            \"$id\": \"#/properties/messages\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The messages schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": [],",
					"            \"examples\": [",
					"                [",
					"                    {",
					"                        \"category\": \"ERROR\",",
					"                        \"code\": \"ERROR_ACCESS_DENIED\",",
					"                        \"path\": \"/messaging/api/documents/19901/v1/documents\",",
					"                        \"text\": \"Access is denied\"",
					"                    }",
					"                ]",
					"            ],",
					"            \"additionalItems\": true,",
					"            \"items\": {",
					"                \"$id\": \"#/properties/messages/items\",",
					"                \"anyOf\": [",
					"                    {",
					"                        \"$id\": \"#/properties/messages/items/anyOf/0\",",
					"                        \"type\": \"object\",",
					"                        \"title\": \"The first anyOf schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": {},",
					"                        \"examples\": [",
					"                            {",
					"                                \"category\": \"ERROR\",",
					"                                \"code\": \"ERROR_ACCESS_DENIED\",",
					"                                \"path\": \"/messaging/api/documents/19901/v1/documents\",",
					"                                \"text\": \"Access is denied\"",
					"                            }",
					"                        ],",
					"                        \"required\": [",
					"                            \"category\",",
					"                            \"code\",",
					"                            \"path\",",
					"                            \"text\"",
					"                        ],",
					"                        \"properties\": {",
					"                            \"category\": {",
					"                                \"$id\": \"#/properties/messages/items/anyOf/0/properties/category\",",
					"                                \"type\": \"string\",",
					"                                \"title\": \"The category schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": \"\",",
					"                                \"examples\": [",
					"                                    \"ERROR\"",
					"                                ]",
					"                            },",
					"                            \"code\": {",
					"                                \"$id\": \"#/properties/messages/items/anyOf/0/properties/code\",",
					"                                \"type\": \"string\",",
					"                                \"title\": \"The code schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": \"\",",
					"                                \"examples\": [",
					"                                    \"ERROR_ACCESS_DENIED\"",
					"                                ]",
					"                            },",
					"                            \"path\": {",
					"                                \"$id\": \"#/properties/messages/items/anyOf/0/properties/path\",",
					"                                \"type\": \"string\",",
					"                                \"title\": \"The path schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": \"\",",
					"                                \"examples\": [",
					"                                    \"/messaging/api/documents/19901/v1/documents\"",
					"                                ]",
					"                            },",
					"                            \"text\": {",
					"                                \"$id\": \"#/properties/messages/items/anyOf/0/properties/text\",",
					"                                \"type\": \"string\",",
					"                                \"title\": \"The text schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": \"\",",
					"                                \"examples\": [",
					"                                    \"Access is denied\"",
					"                                ]",
					"                            }",
					"                        },",
					"                        \"additionalProperties\": true",
					"                    }",
					"                ]",
					"            }",
					"        },",
					"        \"timestamp\": {",
					"            \"$id\": \"#/properties/timestamp\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The timestamp schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"2020-08-17T15:41:11.131\"",
					"            ]",
					"        }",
					"    },",
					"    \"additionalProperties\": true",
					"};",
					"pm.environment.set(\"accessDeniedSchema\", accessDeniedSchema);",
					"//************************************************************************************************",
					"//global function to determine next day/next working day *****************************************",
					"//************************************************************************************************",
					"var moment = require('moment');",
					"let nextDay = moment().add(\"days\", 1).format(\"YYYY-MM-DD\"); //next day in specified format",
					"switch (moment().add(\"days\", 1).format(\"dddd\")) {",
					"    case \"Sunday\":",
					"        var nextWorkingDay = moment().add(\"days\", 2).format(\"YYYY-MM-DD\");",
					"        break;",
					"    case \"Saturday\":",
					"        var nextWorkingDay = moment().add(\"days\", 3).format(\"YYYY-MM-DD\");",
					"        break;",
					"    default:",
					"        var nextWorkingDay = moment().add(\"days\", 1).format(\"YYYY-MM-DD\");",
					"}",
					"pm.globals.set('PrS:nextDay', JSON.stringify(nextDay));",
					"pm.globals.set('PrS:nextWorkingDay', JSON.stringify(nextWorkingDay));",
					"",
					"/*",
					"// Define test data, setup configuration per environment",
					"var env = pm.environment.get(\"envName\");",
					"if (env === \"MDB-R191-TEST\") {",
					"//    var contractNumber = \"{{contractNumber}}\";",
					"//    var debtorAccountNo = \"{{debtorAccountNo}}\";",
					"//    var debtorAccountName = \"{{debtorAccountName}}\";",
					"//    var creditorAccountNo = \"{{creditorAccountNo}}\";",
					"    } else if (env === \"MDB-R191-LAT\") {",
					"} else {",
					"    throw new Error(\"Wrong environment selected, requests are skipped!\")",
					"}",
					"//pm.globals.set('PrS:contractNumber', JSON.stringify(contractNumber));",
					"//pm.globals.set('PrS:debtorAccountNo', JSON.stringify(debtorAccountNo));",
					"//pm.globals.set('PrS:debtorAccountName', JSON.stringify(debtorAccountName));",
					"//pm.globals.set('PrS:creditorAccountNo', JSON.stringify(creditorAccountNo));",
					"*/",
					"",
					"// Save the object as a variable.",
					"// JSON.stringify will serialize the object so that Postman can save it",
					"",
					"//pm.globals.set('PrS:tags', JSON.stringify(tags));",
					"//pm.environment.set(\"testGroup\",\"Patient Zero\") //set environment variable if/when needed",
					"",
					"//pm.response.to.be.ok;         - Status code must be 200",
					"//pm.response.to.be.error       - Checks 4XX or 5XX",
					"//pm.response.to.be.serverError - Checks 5XX",
					"//pm.response.to.be.clientError - Checks 4XX status code",
					"",
					"// Save Oauth Scope Validation Tests in global variable",
					"postman.setGlobalVariable(\"scopeValidationTests\", () => {",
					"    pm.test(\"Scope validation must be with a valid response body and status code\", () => {",
					"        if ([\"GET\", \"POST\", \"PUT\", \"DELETE\"].indexOf(request.method) > -1) {",
					"            //pm.response.to.be.forbidden;",
					"            pm.response.to.be.withBody;",
					"            pm.response.to.be.json;",
					"            //pm.response.to.have.status(403);",
					"        } else {",
					"            pm.response.to.not.be.withBody;",
					"        }",
					"        switch (request.method) {",
					"            case \"GET\":",
					"                pm.response.to.have.status(403);",
					"                break;",
					"            case \"POST\":",
					"                pm.response.to.have.status(403);",
					"                break;",
					"            case \"PUT\":",
					"                pm.response.to.have.status(403);",
					"                break;",
					"            case \"DELETE\":",
					"                pm.response.to.have.status(403);",
					"                break;",
					"        }",
					"    });",
					"});",
					"// Save common tests in a global variable",
					"postman.setGlobalVariable(\"commonTests\", () => {",
					"    pm.test(\"Response must be valid with/with out a body and with proper status code\", function () {",
					"        if ([\"GET\", \"POST\", \"PUT\"].indexOf(request.method) > -1) {",
					"            pm.response.to.not.be.error;",
					"            pm.response.to.be.withBody;",
					"            pm.response.to.be.json;",
					"            pm.response.to.have.jsonBody();",
					"            pm.response.to.not.have.jsonBody('error');",
					"            pm.response.to.have.header('Content-Type', 'application/json;charset=UTF-8');",
					"        } else {",
					"            pm.response.to.not.be.withBody;",
					"        }",
					"        switch (request.method) {",
					"            case \"POST\":",
					"                pm.response.to.have.status(201);",
					"                break;",
					"            case \"PUT\":",
					"                pm.response.to.have.status(200);",
					"                break;",
					"            case \"GET\":",
					"                pm.response.to.have.status(200);",
					"                break;",
					"            case \"DELETE\":",
					"                pm.response.to.have.status(204);",
					"                break;",
					"        }",
					"    });",
					"    //pm.test(\"Response time is below 1000ms\", function () {",
					"    //    pm.expect(pm.response.responseTime).to.be.below(1000);",
					"    //});",
					"});",
					"",
					"postman.setGlobalVariable(\"assertValidCreditorAgent\", () => {",
					"    pm.expect(address).to.be.an('object').with.keys('name1', 'name2', 'street', 'city', 'country');",
					"    pm.expect(address.name1).to.be.a('string').and.not.empty;",
					"    pm.expect(address.name2).to.be.a('string').and.not.empty;",
					"    pm.expect(address.street).to.be.a('string').and.not.empty;",
					"    pm.expect(address.city).to.be.a('string').and.not.empty;",
					"    pm.expect(address.country).to.be.a('string').with.lengthOf(2).and.match(/[A-Z]+/);",
					"});",
					"",
					"postman.setGlobalVariable(\"sessionInit\", (testSession, sessionName) => {",
					"    //session init section",
					"    console.log(request.name + \", initialization: \" + testSession + \", global var: \" + sessionName);",
					"    console.log(request.name + \", executing: \" + testSession[0]);",
					"",
					"    // Select first test from session to be executed",
					"    postman.setNextRequest(testSession[0]);",
					"    testSession.shift();",
					"    if (testSession.length === 0) {",
					"        console.log(request.name + \", test session is empty, unset \" + sessionName);",
					"        pm.globals.unset(sessionName);",
					"        console.log(request.name + \", terminate tests execution list\");",
					"    } else {",
					"        pm.globals.set(sessionName, testSession);",
					"        console.log(request.name + \" for \" + sessionName + \", updated list of tests to be executed: \" + testSession);",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"sessionNavigate\", () => {",
					"    console.log(request.name + \", entering ...\");",
					"    if (pm.globals.get(\"requestsToRun\") === undefined) {",
					"        console.log(request.name + \", requestsToRun is undefined\");",
					"        pm.globals.set(\"testRailTestCases\", \"\");",
					"        console.log(request.name + \", reset global var: testRailTestCases\");",
					"        if (pm.globals.get(\"testSession\") === undefined) {",
					"            console.log(request.name + \", testSession is undefined\");",
					"            //here >> export list of tests executed",
					"            var tests = pm.environment.get(\"testRailTestsInRun\");",
					"            tests = tests.replace(/C/g, \"\");",
					"            tests = tests.replace(/ /g, \", \");",
					"            tests = tests.replace(/,,/g, \",\");",
					"            console.log(\"TestRail tests executed executed in this run: \" + tests);",
					"            console.log(\"The end\");",
					"            postman.setNextRequest(null);",
					"        } else {",
					"            var testSession = pm.globals.get(\"testSession\");",
					"            console.log(request.name + \", checking what to run: \" + testSession[0]);",
					"            postman.setNextRequest(testSession[0]); // Run: GET SWIFT payment",
					"            testSession.shift();",
					"            if (testSession.length === 0) {",
					"                pm.globals.unset(\"testSession\");",
					"                console.log(request.name + \", terminate execution list\");",
					"            } else {",
					"                pm.globals.set(\"testSession\", testSession);",
					"                console.log(request.name + \", updated list of tests to be executed: \" + testSession);",
					"            }",
					"        }",
					"    } else {",
					"        var requestsToRun = pm.globals.get(\"requestsToRun\");",
					"        console.log(request.name + \", checking what to run: \" + requestsToRun[0]);",
					"        postman.setNextRequest(requestsToRun[0]);",
					"        requestsToRun.shift();",
					"        if (requestsToRun.length === 0) {",
					"            pm.globals.unset(\"requestsToRun\");",
					"            console.log(request.name + \", terminate requests execution list\");",
					"        } else {",
					"            pm.globals.set(\"requestsToRun\", requestsToRun);",
					"            console.log(request.name + \", updated list of requests to be executed: \" + requestsToRun);",
					"        }",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"cleanup\", () => {",
					"    const clean = [\"requestsToRun\", \"testSession\"];",
					"    for (let i = 0; i < clean.length; ++i) {",
					"        pm.globals.unset(clean[i]);",
					"    }",
					"    //create single secure mail by default ",
					"    pm.environment.set(\"mailsToCreate\", 1);",
					"});",
					"",
					"postman.setGlobalVariable(\"testsExecuted\", (listOfExecutedTests) => {",
					"    let tests = pm.environment.get(\"testRailTestsInRun\");",
					"    //console.log(\"TestRail tests stored in 'testRailTestsInRun': \" + tests);",
					"    if (tests.length > 0) {",
					"        tests = tests + \" \"",
					"    }",
					"    tests = tests + listOfExecutedTests;",
					"    //console.log(\"TestRail tests to be stored to 'testRailTestsInRun': \" + tests);",
					"    pm.environment.set(\"testRailTestsInRun\", tests);",
					"    //console.log(\"TestRail tests executed so far: \" + tests);",
					"});",
					"",
					"postman.setGlobalVariable(\"extractTestCaseIDFromRequestName\", () => {",
					"    let n = request.name.lastIndexOf(\"(\");",
					"    return request.name.substr(n + 1, request.name.length - n - 2);",
					"});",
					"",
					"postman.setGlobalVariable(\"schemaValidator\", (schema, jsonData) => {",
					"    //old, deprecated schema validationimplementation",
					"    //pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;",
					"",
					"    //new schema validation implementation",
					"",
					"    var schemaValidationPassed = true;",
					"    var serviceSchema = pm.environment.get(schema);",
					"    //var jsonData = JSON.parse(pm.responseBody);",
					"",
					"    var validationResult = tv4.validateMultiple(jsonData, serviceSchema, true, true);",
					"    for (var i = 0; i < validationResult.errors.length; i++) {",
					"        console.log(\"path :\" + validationResult.errors[i].dataPath + \" message :\" + validationResult.errors[i].message);",
					"        //Skipping all \"Invalid type\" errors as they are expected with current service implementations",
					"        schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);",
					"        //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);",
					"    }",
					"    return schemaValidationPassed;",
					"});",
					"",
					"postman.setGlobalVariable(\"isTest\", () => {",
					"    let reqPurpose = pm.globals.get(\"_tr_\" + request.name);",
					"    //console.log(request.name + \" has purpose: \" + reqPurpose);",
					"    if ([\"[cleanUp]\", \"[preCondition]\", \"[postCondition]\"].indexOf(reqPurpose) > -1) {",
					"        //console.log(\"Conclusion: NOT a test\");",
					"        return false;",
					"    } else {",
					"        //console.log(\"Conclusion: IS a test\");",
					"        return true;",
					"    }",
					"});",
					"",
					"//************************************************************************************************",
					"// initial code **********************************************************************************",
					"//************************************************************************************************",
					"//pm.expect(pm.environment.get(\"tenantId_security\")).to.be.a('string', \"The tenantId is not defined\");",
					"//pm.expect(pm.environment.get(\"env_securemail\")).to.be.a('string', \"The appUrl is not defined\");",
					"",
					"//pm.expect(pm.variables.get(\"path_msg_secmail\")).to.be.a('string', \"The appPath is not defined\");",
					"",
					"/* function for session retrieve*/",
					"postman.setGlobalVariable(\"sessionGet\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"test_session_url\")}?userId=${pm.environment.get(\"userId_secure_mail\")}&tenantId=${pm.environment.get(\"tenantId_security\")}`,",
					"        method: \"GET\",",
					"        header: {",
					"          'Content-Type': 'application/json',",
					"        },",
					"        body: {",
					"          mode: 'raw',",
					"          raw: JSON.stringify({})",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err);",
					"        } else {",
					"            pm.environment.set(\"nonce\",  res.text());",
					"            console.log(\"New session: \" + pm.environment.get(\"nonce\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"postman.setGlobalVariable(\"generateAccessToken\", () => {",
					"    const getAccessTokenRequest = {",
					"        url: pm.environment.get(\"env_security_testToken\"),",
					"        method: \"POST\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json'",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"                tenant_id: pm.environment.get(\"tenantId_security\"), ",
					"                tenant_external_id: pm.environment.get(\"tenantId_security\"),",
					"                sub: `${pm.environment.get(\"bcNo_security\")}:${pm.environment.get(\"userId_secure_mail\")}`,",
					"                authorities: [\"DBAN_USER\"],",
					"                aud: [\"MESSAGING\"],",
					"                loginName: `${pm.environment.get(\"userId_secure_mail\")}`,",
					"                contractNo: pm.environment.get(\"userId_secure_mail\"),",
					"                user_id: `${pm.environment.get(\"userId_secure_mail\")}`,",
					"                user_name: `${pm.environment.get(\"bcNo_security\")}:${pm.environment.get(\"userId_secure_mail\")}`,",
					"                language: pm.environment.get(\"language\"),",
					"                client_id: \"postman\",",
					"                exp: 1626270923,",
					"                jti: \"AT.2.UT.c60e3e20-1846-423d-b498-a0eaeea6f444\",",
					"                nonce: `${pm.environment.get(\"nonce\")}`,",
					"                scope: [",
					"                \t\"https://api.crealogix.com/dban\",",
					"                \t\"read\",",
					"                \t\"write\",",
					"                \t\"https://api.crealogix.com/contracts/contract.advisor.readonly\",",
					"                \t\"https://api.crealogix.com/contracts/contract.metadata.readonly\",",
					"                \t\"https://api.crealogix.com/contracts/contract.person.readonly\",",
					"                \t\"https://api.crealogix.com/payments/payment.initiate\",",
					"                \t\"https://api.crealogix.com/payments/payment.read\",",
					"                \t\"https://api.crealogix.com/payments/payment.write\",",
					"                \t\"https://api.crealogix.com/assets/account#read\",",
					"                \t\"https://api.crealogix.com/assets/account/read\",",
					"                \t\"https://api.crealogix.com/assets/account.transaction#read\",",
					"                \t\"https://api.crealogix.com/assets/account.name\",",
					"                \t\"https://api.crealogix.com/assets/account.image\",",
					"                \t\"https://api.crealogix.com/assets/cuac#read\",",
					"                \t\"https://api.crealogix.com/assets/portfolio#read\",",
					"                \t\"https://api.crealogix.com/messages/securemail.write\",",
					"                \t\"https://api.crealogix.com/messages/securemail.read\",",
					"                \t\"https://api.crealogix.com/messages/document.category.read\",",
					"                \t\"https://api.crealogix.com/messages/document.category.write\",",
					"                \t\"https://api.crealogix.com/messages/document.write\",",
					"                \t\"https://api.crealogix.com/messages/document.read\",",
					"                \t\"https://api.crealogix.com/brokerage/order\",",
					"                    \"https://api.crealogix.com/brokerage/order#read\",\t",
					"                \t\"https://api.crealogix.com/brokerage/security#read\",",
					"                    \"https://api.crealogix.com/brokerage/tradingplace#read\",\t",
					"                    \"https://api.crealogix.com/brokerage/depository#read\",",
					"                \t\"https://api.crealogix.com/deeplink/domains\",",
					"                \t\"https://api.crealogix.com/deeplink/links\"",
					"                ]",
					"            })",
					"        }",
					"    };",
					"    pm.environment.set(\"request\", JSON.stringify(getAccessTokenRequest));",
					"    pm.sendRequest(getAccessTokenRequest, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"access_token\", res.text());",
					"        }         ",
					"    });",
					"});",
					"",
					"postman.setGlobalVariable(\"generateAccessTokenScopeEmpty\", () => {",
					"    const getAccessTokenRequest = {",
					"        url: pm.environment.get(\"env_security_testToken\"),",
					"        method: \"POST\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json'",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"                tenant_id: pm.environment.get(\"tenantId_security\"), ",
					"                tenant_external_id: pm.environment.get(\"tenantId_security\"),",
					"                sub: `${pm.environment.get(\"bcNo_security\")}:${pm.environment.get(\"userId_secure_mail\")}`,",
					"                authorities: [\"DBAN_USER\"],",
					"                aud: [\"MESSAGING\"],",
					"                loginName: `${pm.environment.get(\"userId_secure_mail\")}`,",
					"                contractNo: pm.environment.get(\"userId_secure_mail\"),",
					"                user_id: `${pm.environment.get(\"userId_secure_mail\")}`,",
					"                user_name: `${pm.environment.get(\"bcNo_security\")}:${pm.environment.get(\"userId_secure_mail\")}`,",
					"                language: pm.environment.get(\"language\"),",
					"                client_id: \"postman\",",
					"                exp: 1626270923,",
					"                jti: \"AT.2.UT.c60e3e20-1846-423d-b498-a0eaeea6f444\",",
					"                nonce: `${pm.environment.get(\"nonce\")}`,",
					"                scope: []",
					"            })",
					"        }",
					"    };",
					"    pm.environment.set(\"request\", JSON.stringify(getAccessTokenRequest));",
					"    pm.sendRequest(getAccessTokenRequest, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"access_token\", res.text());",
					"        }         ",
					"    });",
					"});",
					"",
					"/* function for list categories*/",
					"postman.setGlobalVariable(\"categoriesGet\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_Documents\")}/messaging/api/documents/v1/${pm.environment.get(\"bcNo_security\")}/categories`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json; charset=UTF-8',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({})",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            //pm.environment.set(\"tmp_listing_ID\",res.json().listings[0].id);",
					"            const jsonResponse = res.json();",
					"            const response = jsonResponse[0];",
					"            const categoryId = response.id;",
					"            const tenantId = response.tenantId;",
					"            const categoryCode = response.code;",
					"            const sortCode = response.sortCode;",
					"            const categoryType = response.type;",
					"            const categoryName = response.name;",
					"            const description = response.description;",
					"            const totalDocumentsNumber = response.totalDocuments;",
					"            let allCategoryType = [];            ",
					"            ",
					"            pm.environment.set(\"categoryId\", categoryId);",
					"            pm.environment.set(\"categoryCode\", categoryCode);",
					"            pm.environment.set(\"sortCode\", sortCode);",
					"            pm.environment.set(\"categoryType\", categoryType);",
					"            pm.environment.set(\"categoryName\", categoryName);",
					"            pm.environment.set(\"description\", description);",
					"            pm.environment.set(\"totalDocumentsNumber\", totalDocumentsNumber);            ",
					"        }",
					"    });",
					"});",
					"",
					"//global function for document create",
					"postman.setGlobalVariable(\"documentCreate\", () => {",
					"    const newDocTitle = \"Newly_Created_Document_Title\";",
					"    const newDocBody = \"This is the newly created document body\";",
					"    const titleWord = newDocTitle.slice(0,5);",
					"    pm.environment.set(\"newDocBody\", newDocBody);",
					"    pm.environment.set(\"newDocTitle\", newDocTitle);    ",
					"    pm.environment.set(\"titleWord\", titleWord);",
					"",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_Documents\")}/messaging/api/documents/v1/${pm.environment.get(\"bcNo_security\")}/documents`,",
					"        method: \"POST\",",
					"        header: {",
					"          'Content-Type': 'multipart/form-data',",
					"          'Accept': 'application/json, application/hal+json',",
					"          'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"          mode: 'formdata',",
					"          formdata: [ ",
					"            {key: \"title\", value: pm.environment.get(\"newDocTitle\"), disabled: false},",
					"            {key: \"body\", value: pm.environment.get(\"newDocBody\"), disabled: false},",
					"\t\t\t{key: \"categoryCode\", value: pm.environment.get(\"categoryCode\"), disabled: false},",
					"\t\t\t{key: \"sourceType\", value: \"CUSTODY_ACCOUNT\", disabled: false}",
					"          ]",
					"        }",
					"    }, function(err, response) {",
					"        if (err) {",
					"            console.log(err);",
					"        } else {",
					"            let totalDocumentsNumber = pm.environment.get(\"totalElementCount\");",
					"            totalDocumentsNumber += 1;",
					"            pm.environment.set(\"totalElementCount\", totalDocumentsNumber);",
					"            pm.environment.set(\"createdDocumentId\", response.json().id);",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for document delete*/",
					"postman.setGlobalVariable(\"documentDelete\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_Documents\")}/messaging/api/documents/v1/${pm.environment.get(\"bcNo_security\")}/documents/${pm.environment.get(\"createdDocumentId\")}`,",
					"        method: \"DELETE\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err);",
					"        } else {",
					"            pm.environment.set(\"deletedDocumentId\", pm.environment.get(\"createdDocumentId\"));",
					"            pm.environment.unset(\"createdDocumentId\");",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for list documents*/",
					"postman.setGlobalVariable(\"documentsGet\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_Documents\")}/messaging/api/documents/v1/${pm.environment.get(\"bcNo_security\")}/documents`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json; charset=UTF-8',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({})",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            const jsonResponse = res.json();",
					"            const documents = jsonResponse.embedded;",
					"            const incorrectCategoryId = documents[0].id;",
					"            const page = jsonResponse.page;",
					"            const totalElementCount = page.totalElements;",
					"            const totalPages = page.totalPages;",
					"            const pageSize = page.size;",
					"            var newPageSize = pageSize;",
					"            newPageSize += 20;",
					"",
					"            pm.environment.set(\"newPageSize\", newPageSize);             ",
					"            pm.environment.set(\"totalElementCount\", totalElementCount);",
					"            pm.environment.set(\"totalPages\", totalPages);",
					"            pm.environment.set(\"pageSize\", pageSize);",
					"            pm.environment.set(\"incorrectCategoryId\", incorrectCategoryId);        ",
					"        }",
					"    });",
					"});",
					"",
					"/* function category create*/",
					"postman.setGlobalVariable(\"categoryCreate\", () => {",
					"    ",
					"    const createdCategoryName = \"Created_Kredit_Category\";",
					"    const createdCategoryDesc = \"Description for a user created category\";",
					"    const createdCatCode = \"kredit_Test_\" + Math.random().toString(36).substr(2, 4);",
					"    const createdSortCode = \"10\";",
					"    const createdCategoryRelevance = 1;",
					"    ",
					"    pm.environment.set(\"createdCategoryName\", createdCategoryName);",
					"    pm.environment.set(\"createdCategoryDesc\", createdCategoryDesc);",
					"    pm.environment.set(\"createdCatCode\", createdCatCode);",
					"    pm.environment.set(\"createdSortCode\", createdSortCode);",
					"    pm.environment.set(\"createdCategoryRelevance\", createdCategoryRelevance);",
					"",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_Documents\")}/messaging/api/documents/v1/${pm.environment.get(\"bcNo_security\")}/categories`,",
					"        method: \"POST\",",
					"        header: {",
					"          'Content-Type': 'application/json',",
					"          'Accept': 'application/json',",
					"          'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"          mode: 'raw',",
					"          raw: JSON.stringify({ ",
					"            code: pm.environment.get(\"createdCatCode\"),",
					"            sortCode: pm.environment.get(\"createdSortCode\"),",
					"            type: \"BANK_DOCUMENT\",",
					"            visible: true,",
					"            relevance: 1,",
					"            name: pm.environment.get(\"createdCategoryName\"),",
					"            description: pm.environment.get(\"createdCategoryDesc\")",
					"          })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err);",
					"            pm.environment.unset(\"createdCatId\");",
					"        } else {",
					"            pm.environment.set(\"createdCatId\", res.json().id);",
					"            console.log(\"New category ID: \" + pm.environment.get(\"createdCatId\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for category delete*/",
					"postman.setGlobalVariable(\"categoryDelete\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_Documents\")}/messaging/api/documents/v1/${pm.environment.get(\"bcNo_security\")}/categories/${pm.environment.get(\"createdCatId\")}`,",
					"        method: \"DELETE\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err);",
					"        } else {",
					"            pm.environment.set(\"deletedCatId\", pm.environment.get(\"createdCatId\"));",
					"            pm.environment.unset(\"createdCatId\");",
					"        }              ",
					"    });",
					"});",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "1fee989f-62a1-43d1-8604-786610ff77cd",
				"type": "text/javascript",
				"exec": [
					"/*",
					"let executeTests = eval(globals.isTest)();",
					"",
					"if (executeTests) {",
					"    // check if test is executed",
					"    pm.test(\"'\" + request.name +\"' is initiated\", function () {",
					"        //pm.response.to.have.status(200);",
					"        //pm.response.to.be.success ",
					"    });",
					"};",
					"*/",
					"",
					"// check if test is executed",
					"//pm.test(\"'\" + request.name + \"' is initiated\", function () {",
					"    //pm.response.to.have.status(200);",
					"    //pm.response.to.be.success ",
					"//});",
					""
				]
			}
		}
	]
}