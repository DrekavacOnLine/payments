{
	"info": {
		"_postman_id": "ff61e1e8-1688-40bb-a355-1abdf45ebb15",
		"name": "MODULE: Brokerage",
		"description": "Brokerage API:\n\n- Brokerage order API\n- Brokerage security API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Tests",
			"item": [
				{
					"name": "_Test session",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//reset global variables for controling execution flow",
									"eval(globals.cleanup)();",
									"//clear list of executed TestRail tests",
									"pm.environment.set(\"testRailTestsInRun\",\"\");   ",
									"",
									"//specify list of tests to be executed in exact order",
									"//const testsScope = \"Full\"; [Full|Core|Full+TestRail]",
									"let testsScope = data.testsScope;",
									"//console.log(testsScope); ",
									"",
									"switch(testsScope) {",
									"    case \"Full\":",
									"        var testSession = [",
									"            \"_Generate access token (C41673950)\",",
									"            \"List securities (C43995762)\",",
									"            \"List securities by ISIN (C43995802)\",",
									"            \"List securities by title (C43995804)\",",
									"            \"(WiP) List securities having limited permissions (C43995837)\",",
									"            \"Display security by ID (C43995806)\",",
									"            \"Display security by securityNumber (C43995801)\",",
									"            \"Display security using bad url (C43995832)\",",
									"            \"Display security using broken url (C43995836)\",",
									"            \"List listings (C43995811)\",",
									"            \"List listings by tradingPlaceId (C43995815)\",",
									"            \"List listings using bad url (C43995844)\",",
									"            \"List listings using broken url (C43995845)\",",
									"            \"Display listing by listing ID (C43995816)\",",
									"            \"List trading places (C43995818)\",",
									"            \"Display trading place by tradingPlaceId (C43995821)\",",
									"            \"List security types (C43995825)\",",
									"            \"Display security type by ID (C43995831)\",",
									"            \"Display security by security type ID (C43995787)\",",
									"            \"Display listings by security ID (C43995813)\",",
									"            \"Display securities using bad version (C43995842)\",",
									"            \"(WiP) Display security having limited permissions (C43995843)\"",
									"            ]; ",
									"        break;",
									"    case \"Core\":",
									"        var testSession = [",
									"            \"_Generate access token (C41673950)\",",
									"            \"List listings using broken url (C43995845)\"",
									"            ]; ",
									"        break;",
									"    case \"TestRailClean\":        ",
									"        var testSession = [",
									"            \"_Test session close\"",
									"            ]; ",
									"        break;",
									"    default:",
									"        throw new Error(\"No tests selected for execution!\")",
									"}        ",
									"    ",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(testSession, \"testSession\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "List securities (C43995762)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getSecurities\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getSecurities\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10196"
					},
					"response": []
				},
				{
					"name": "List securities by ISIN (C43995802)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getSecurities\",",
									"        \"getSecuritiesByISIN\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getSecurities\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getSecuritiesByISIN\",testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10199"
					},
					"response": []
				},
				{
					"name": "List securities by title (C43995804)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//testRailTestCases = \"C43995821\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getSecurities\",",
									"        \"getSecuritiesByTitle\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getSecurities\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getSecuritiesByTitle\", testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10201"
					},
					"response": []
				},
				{
					"name": "(WiP) List securities having limited permissions (C43995837)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//testRailTestCases = \"C43995821\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestTokenNoAssetsPermissions\",",
									"        \"getSecuritiesErrorForbidden\",",
									"        \"getAuthTestToken\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getAuthTestTokenNoAssetsPermissions\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getSecuritiesErrorForbidden\", testRailTestCases);",
									"    pm.globals.set(\"_tr_getAuthTestToken\",\"[postCondition]\");",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10214"
					},
					"response": []
				},
				{
					"name": "(WiP) Display security having limited permissions (C43995843)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//testRailTestCases = \"C43995821\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestTokenNoAssetsPermissions\",",
									"        \"getSecurityByIdErrorForbidden\",",
									"        \"getAuthTestToken\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getAuthTestTokenNoAssetsPermissions\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getSecurityByIdErrorForbidden\", testRailTestCases);",
									"    pm.globals.set(\"_tr_getAuthTestToken\",\"[postCondition]\");",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10214"
					},
					"response": []
				},
				{
					"name": "Display security by ID (C43995806)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//testRailTestCases = \"C43995801\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getSecurities\",",
									"        \"getSecurityById\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getSecurities\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getSecurityById\", testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10202"
					},
					"response": []
				},
				{
					"name": "Display security by securityNumber (C43995801)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//testRailTestCases = \"C43995801\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getSecurities\",",
									"        \"getSecurityBySecurityNumber\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getSecurities\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getSecurityBySecurityNumber\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10197"
					},
					"response": []
				},
				{
					"name": "Display security using bad url (C43995832)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//testRailTestCases = \"C43995801\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getSecurityErrorBadRequest\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getSecurityErrorBadRequest\", testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10212"
					},
					"response": []
				},
				{
					"name": "Display security using broken url (C43995836)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//testRailTestCases = \"C43995801\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getSecurityErrorNotFound\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getSecurityErrorNotFound\", testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10213"
					},
					"response": []
				},
				{
					"name": "List listings (C43995811)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3bf0288b-49c7-4b83-9cb9-bd90f88d4853",
								"exec": [
									"//var testRailTestCases = \"C43995811\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getListings\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getListings\",testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10204"
					},
					"response": []
				},
				{
					"name": "List listings by tradingPlaceId (C43995815)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//testRailTestCases = \"C43995815\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getTradingPlaces\",",
									"        \"getListingsByTradingPlaceId\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getTradingPlaces\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getListingsByTradingPlaceId\", testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10200, BUG: PRODUCT-10633"
					},
					"response": []
				},
				{
					"name": "List listings using bad url (C43995844)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//testRailTestCases = \"C43995801\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getListingsErrorBadRequest\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getListingsErrorBadRequest\", testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10218"
					},
					"response": []
				},
				{
					"name": "List listings using broken url (C43995845)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//testRailTestCases = \"C43995801\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getListingsErrorNotFound\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getListingsErrorNotFound\", testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10219"
					},
					"response": []
				},
				{
					"name": "Display listing by listing ID (C43995816)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b9bc4495-a6f0-46ac-8545-7470d7df11ce",
								"exec": [
									"//testRailTestCases = \"C43995816\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getListings\",",
									"        \"getListingByListingId\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getListings\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getListingByListingId\", testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10207"
					},
					"response": []
				},
				{
					"name": "List trading places (C43995818)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995818\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getTradingPlaces\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getTradingPlaces\",testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10208"
					},
					"response": []
				},
				{
					"name": "Display trading place by tradingPlaceId (C43995821)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//testRailTestCases = \"C43995821\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getTradingPlaces\",",
									"        \"getTradingPlaceByTradingPlaceId\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getTradingPlaces\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getTradingPlaceByTradingPlaceId\", testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10209"
					},
					"response": []
				},
				{
					"name": "List security types (C43995825)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//testRailTestCases = \"C43995825\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getSecurityTypes\"",
									"    ];",
									"    pm.globals.set(\"_tr_getSecurityTypes\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10210"
					},
					"response": []
				},
				{
					"name": "Display security type by ID (C43995831)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//testRailTestCases = \"C43995825\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getSecurityTypes\",",
									"        \"getSecurityTypeById\"",
									"    ];",
									"    pm.globals.set(\"_tr_getSecurityTypes\", \"[preCondition]\");",
									"    pm.globals.set(\"_tr_getSecurityTypeById\", testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10211"
					},
					"response": []
				},
				{
					"name": "Display security by security type ID (C43995787)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//testRailTestCases = \"C43995787\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getSecurityTypes\",",
									"        \"getSecurityBySecurityTypeId\"",
									"    ];",
									"    pm.globals.set(\"_tr_getSecurityTypes\", \"[preCondition]\");",
									"    pm.globals.set(\"_tr_getSecurityBySecurityTypeId\", testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10198"
					},
					"response": []
				},
				{
					"name": "Display listings by security ID (C43995813)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//testRailTestCases = \"C43995813\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getSecurities\",",
									"        \"getListingBySecurityId\"",
									"    ];",
									"    pm.globals.set(\"_tr_getSecurities\", \"[preCondition]\");",
									"    pm.globals.set(\"_tr_getListingBySecurityId\", testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10205"
					},
					"response": []
				},
				{
					"name": "Display securities using bad version (C43995842)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//testRailTestCases = \"C43995842\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getSecuritiesErrorNotFound\"",
									"    ];",
									"    pm.globals.set(\"_tr_getSecuritiesErrorNotFound\", testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10216"
					},
					"response": []
				},
				{
					"name": "_Generate access token (C41673950)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "16823b44-ac18-4aa0-a33b-c3ac6cbc6d87",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestToken\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getAuthTestToken\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "_Test session close",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"var requestsToRun = ",
									"    [",
									"        \"Clean TestRail Run\"",
									"    ]; ",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Requests",
			"item": [
				{
					"name": "Order Tests",
					"item": [
						{
							"name": "getOrders (WIP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "726cfe4b-2dd4-43b5-82e5-4c4aef5938df",
										"exec": [
											"eval(globals.commonTests)();",
											"",
											"let json =JSON.parse(responseBody);",
											"let data = jsonData.data;",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Orders are present and all assertions passed\", function () { ",
											"    ",
											"    pm.response.to.have.status(200);",
											"    ",
											"    /*",
											"    var schemaValidationPassed = eval(globals.schemaValidator)(\"getAllFoldersSchema\", jsonData);",
											"    pm.test(\"Response schema is correct\", function() {",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"    ",
											"    pm.test(\"Folders list must contain the folder searched for\", function () { ",
											"        const folders = pm.response.json();",
											"        pm.expect(folders).to.be.an('array');",
											"        pm.expect(folders).to.not.be.empty;",
											"        pm.expect(folders).to.have.lengthOf.at.least(1);",
											"        pm.expect(folders.map(folder => folder.name)).to.include.members([folderName]);",
											"        ",
											"        console.log(`Folder is found`);",
											"    });",
											"    */",
											"",
											"});",
											"",
											"eval(globals.sessionNavigate)();",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{env_brokerage}}/brokerage/orders/{{tenantId_brokerage}}/v1/orders",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"orders",
										"{{tenantId_brokerage}}",
										"v1",
										"orders"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Security Tests",
					"item": [
						{
							"name": "getSecurities",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81b56885-cb8b-4a7b-866e-ba015f333cbc",
										"exec": [
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of securities is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"securitiesSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"securitiesSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_securityId\",jsonData.securities[0].id);\r",
											"    pm.environment.set(\"_tmp_securityNumber\",jsonData.securities[0].securityNumber);\r",
											"    pm.environment.set(\"_tmp_isin\",jsonData.securities[0].isin);\r",
											"    pm.environment.set(\"_tmp_shortDescription\",jsonData.securities[0].descriptions[0].shortDescription);\r",
											"    console.log(jsonData.securities[0].descriptions[0].shortDescription);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_securityId\");\r",
											"    pm.environment.unset(\"_tmp_securityNumber\");\r",
											"    pm.environment.unset(\"_tmp_isin\");\r",
											"    pm.environment.unset(\"_tmp_shortDescription\");\r",
											"}\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d873ed76-b449-4069-8385-ae5f6ad05400",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/securities",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"securities"
									]
								}
							},
							"response": []
						},
						{
							"name": "getSecuritiesByISIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81b56885-cb8b-4a7b-866e-ba015f333cbc",
										"exec": [
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of securities by ISIN is retrieved and response schema i validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let isin = pm.environment.get(\"_tmp_isin\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"securitiesSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    pm.test(\"Returned securities match to specified ISIN\", () => {\r",
											"        for(var x = 0;x<jsonData._embedded.securities.length;x++) {\r",
											"            //console.log(\"Iteration: \"+ x+1 +\" is: \"+jsonData._embedded.securities[x].isin);\r",
											"            result = result && (jsonData._embedded.securities[x].isin === isin);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d873ed76-b449-4069-8385-ae5f6ad05400",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/securities?isin={{_tmp_isin}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"securities"
									],
									"query": [
										{
											"key": "isin",
											"value": "{{_tmp_isin}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getSecuritiesByTitle",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81b56885-cb8b-4a7b-866e-ba015f333cbc",
										"exec": [
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of securities by ISIN is retrieved and response schema i validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let shortDescription = pm.environment.get(\"_tmp_shortDescription\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"securitiesSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    pm.test(\"Returned securities match to specified short description\", () => {\r",
											"        for(var x = 0;x<jsonData._embedded.securities.length;x++) {\r",
											"            //console.log(\"Iteration: \"+ x+1 +\" is: \"+jsonData._embedded.securities[x].descriptions[0].shortDescription);\r",
											"            result = result && (jsonData._embedded.securities[x].descriptions[0].shortDescription === shortDescription);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d873ed76-b449-4069-8385-ae5f6ad05400",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/securities?title={{_tmp_shortDescription}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"securities"
									],
									"query": [
										{
											"key": "title",
											"value": "{{_tmp_shortDescription}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getSecuritiesErrorForbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81b56885-cb8b-4a7b-866e-ba015f333cbc",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List securities fail if access token is generated without needed scope\", function () {\r",
											"\r",
											"    let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    pm.test(\"Status 403 Forbidden is displayed\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response contains proper error type and code\", function () {\r",
											"        pm.expect(jsonData.status).to.be.eql(403) &&\r",
											"        pm.expect(jsonData.error).to.be.eql(\"Forbidden\");\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(403) &&\r",
											"    pm.expect(jsonData.status).to.be.eql(403) &&\r",
											"    pm.expect(jsonData.error).to.be.eql(\"Forbidden\");\r",
											"});\r",
											"\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d873ed76-b449-4069-8385-ae5f6ad05400",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/securities",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"securities"
									]
								}
							},
							"response": []
						},
						{
							"name": "getSecuritiesErrorNotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81b56885-cb8b-4a7b-866e-ba015f333cbc",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Display securities fails if wrong version is provided in url\", function () {\r",
											"\r",
											"    let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    pm.test(\"Status 404 Not Found is displayed\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response contains proper error type and code\", function () {\r",
											"        pm.expect(jsonData.status).to.be.eql(404) &&\r",
											"        pm.expect(jsonData.error).to.be.eql(\"Not Found\");\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(404) &&\r",
											"    pm.expect(jsonData.status).to.be.eql(404) &&\r",
											"    pm.expect(jsonData.error).to.be.eql(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d873ed76-b449-4069-8385-ae5f6ad05400",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v2/securities/{{_tmp_securityId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v2",
										"securities",
										"{{_tmp_securityId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getSecurityById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81b56885-cb8b-4a7b-866e-ba015f333cbc",
										"exec": [
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Security by ID is retrieved and response schema i validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let id = pm.environment.get(\"_tmp_securityId\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"securityByIdSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    pm.test(\"Returned security matches to specified ID\", () => {\r",
											"        pm.expect(jsonData.id).to.be.eql(id);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"    pm.expect(jsonData.id).to.be.eql(id);;\r",
											"});\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d873ed76-b449-4069-8385-ae5f6ad05400",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/securities/{{_tmp_securityId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"securities",
										"{{_tmp_securityId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getSecurityBySecurityNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Security is retrieved by securityNumber and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitySchema = pm.environment.get(\"securitySchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var jsonDataEmbed = JSON.parse(responseBody)._embedded;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"securitySchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);        \r",
											"    });\r",
											"    \r",
											"    pm.test(\"Single security matched with securityNumber is in response\", function () {\r",
											"        pm.expect(jsonDataEmbed.securities.length).to.be.eql(1) &&\r",
											"        pm.expect(jsonDataEmbed.securities[0].securityNumber).to.be.eql(pm.environment.get(\"_tmp_securityNumber\"));\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true)   //pm.expect(tv4.validate(jsonData, securitySchema)).to.be.true\r",
											"    && pm.expect(jsonDataEmbed.securities.length).to.be.eql(1)\r",
											"    && pm.expect(jsonDataEmbed.securities[0].securityNumber).to.be.eql(pm.environment.get(\"_tmp_securityNumber\"));\r",
											"});\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/securities?securityNumber={{_tmp_securityNumber}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"securities"
									],
									"query": [
										{
											"key": "securityNumber",
											"value": "{{_tmp_securityNumber}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getSecurityErrorBadRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81b56885-cb8b-4a7b-866e-ba015f333cbc",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Display security fails if bad url is used\", function () {\r",
											"\r",
											"    pm.test(\"Status 400 Bad Request is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response is without body\", function () {\r",
											"        pm.response.to.not.be.withBody;\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(400) &&\r",
											"    pm.response.to.not.be.withBody;\r",
											"});\r",
											"\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d873ed76-b449-4069-8385-ae5f6ad05400",
										"exec": [
											"const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\r",
											"pm.environment.set(\"_tmp_randomString\", Array.from({length:6}, _ => c[Math.floor(Math.random()*c.length)]).join(''))"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/securities/{{_tmp_randomString}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"securities",
										"{{_tmp_randomString}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getSecurityErrorNotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81b56885-cb8b-4a7b-866e-ba015f333cbc",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Display security fails if url is completely broken\", function () {\r",
											"\r",
											"    let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    pm.test(\"Status 404 Not Found is displayed\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response contains proper error type and code\", function () {\r",
											"        pm.expect(jsonData.status).to.be.eql(404) &&\r",
											"        pm.expect(jsonData.error).to.be.eql(\"Not Found\");\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(404) &&\r",
											"    pm.expect(jsonData.status).to.be.eql(404) &&\r",
											"    pm.expect(jsonData.error).to.be.eql(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d873ed76-b449-4069-8385-ae5f6ad05400",
										"exec": [
											"const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\r",
											"pm.environment.set(\"_tmp_randomString\", Array.from({length:6}, _ => c[Math.floor(Math.random()*c.length)]).join(''))"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/securities{{_tmp_randomString}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"securities{{_tmp_randomString}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getSecurityByIdErrorForbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81b56885-cb8b-4a7b-866e-ba015f333cbc",
										"exec": [
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Display security fails if access token is generated without needed scope\", function () {\r",
											"\r",
											"    let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    pm.test(\"Status 403 Forbidden is displayed\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response contains proper error type and code\", function () {\r",
											"        pm.expect(jsonData.status).to.be.eql(403) &&\r",
											"        pm.expect(jsonData.error).to.be.eql(\"Forbidden\");\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(403) &&\r",
											"    pm.expect(jsonData.status).to.be.eql(403) &&\r",
											"    pm.expect(jsonData.error).to.be.eql(\"Forbidden\");\r",
											"});\r",
											"\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d873ed76-b449-4069-8385-ae5f6ad05400",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/securities/{{_tmp_securityId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"securities",
										"{{_tmp_securityId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getSecurityTypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Security types are retrieved and response schema is validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var securityTypesSchema = pm.environment.get(\"securityTypesSchema\");\r",
											"    var jsonDataEmbed = JSON.parse(responseBody)._embedded;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"securityTypesSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);        \r",
											"    });\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"if (pm.response.code === 200) {\r",
											"    pm.environment.set(\"_tmp_typeId\",jsonData._embedded.securityTypes[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_typeId\");\r",
											"}\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/types",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"types"
									]
								}
							},
							"response": []
						},
						{
							"name": "getSecurityTypeById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Security type is retrieved by its' ID and response schema is validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var securityTypesSchema = pm.environment.get(\"securityTypeSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let typeId = pm.environment.get(\"_tmp_typeId\");\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"securityTypeSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);        \r",
											"    });\r",
											"\r",
											"    pm.test(\"Expected security type is displayed\", function () {\r",
											"        pm.expect(jsonData.id).to.eql(typeId);\r",
											"    });\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"    pm.expect(jsonData.id).to.eql(typeId);\r",
											"});\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/types/{{_tmp_typeId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"types",
										"{{_tmp_typeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getSecurityBySecurityTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Security is retrieved by security type ID and response schema is validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var securityTypesSchema = pm.environment.get(\"securitiesSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"securitiesSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);        \r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/securities?securityTypeId={{_tmp_typeId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"securities"
									],
									"query": [
										{
											"key": "securityTypeId",
											"value": "{{_tmp_typeId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getListings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "590da4a5-4cbe-4116-bedc-ae2fda9b4dec",
										"exec": [
											"eval(globals.commonTests)();",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Listings are returned and all assertions passed\", function (){",
											"",
											"    var listingsSchema = pm.environment.get(\"listingsSchema\");",
											"    pm.test(\"Status 200 OK is displayed\", function () {",
											"    pm.response.to.have.status(200);",
											"    });",
											"    ",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"listingsSchema\",jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    }); ",
											"    ",
											"    pm.response.to.have.status(200)",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);   ",
											"    ",
											"",
											"});",
											"",
											"/*pm.test(\"get listing ID\", () => {",
											"    var ticker=\"ROG-T5\";",
											"    jsonData._embedded.listings.forEach(function(obj){",
											"       if(obj.ticker===ticker){",
											"            pm.globals.set('listing_ID', obj.id);",
											"       }",
											"   });   ",
											"});*/",
											"",
											"if (pm.response.code === 200) {",
											"    pm.environment.set(\"tmp_listing_ID\",jsonData._embedded.listings[0].id);",
											"} else {",
											"    pm.environment.unset(\"tmp_listing_ID\");",
											"}",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/listings",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"listings"
									]
								}
							},
							"response": []
						},
						{
							"name": "getListingsErrorNotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81b56885-cb8b-4a7b-866e-ba015f333cbc",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List listings fails if url is completely broken\", function () {\r",
											"\r",
											"    let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    pm.test(\"Status 404 Not Found is displayed\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response contains proper error type and code\", function () {\r",
											"        pm.expect(jsonData.status).to.be.eql(404) &&\r",
											"        pm.expect(jsonData.error).to.be.eql(\"Not Found\");\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(404) &&\r",
											"    pm.expect(jsonData.status).to.be.eql(404) &&\r",
											"    pm.expect(jsonData.error).to.be.eql(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d873ed76-b449-4069-8385-ae5f6ad05400",
										"exec": [
											"const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\r",
											"pm.environment.set(\"_tmp_randomString\", Array.from({length:6}, _ => c[Math.floor(Math.random()*c.length)]).join(''))"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/listings{{_tmp_randomString}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"listings{{_tmp_randomString}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getListingsByTradingPlaceId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"eval(globals.commonTests)();\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Listings are returned and all assertions passed\", function () {\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"listingsSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"});\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/listings?tradingPlaceId={{_tmp_tradingPlaceId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"listings"
									],
									"query": [
										{
											"key": "tradingPlaceId",
											"value": "{{_tmp_tradingPlaceId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getListingsErrorBadRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "590da4a5-4cbe-4116-bedc-ae2fda9b4dec",
										"exec": [
											"//eval(globals.commonTests)();",
											"//var jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Display listings fails if bad url is used\", function (){",
											"",
											"    pm.test(\"Status 400 Bad Request is displayed\", function () {",
											"        pm.response.to.have.status(400);",
											"    });",
											"",
											"    pm.test(\"Response is without body\", function () {",
											"        pm.response.to.not.be.withBody;",
											"    });",
											"",
											"    pm.response.to.have.status(400) &&",
											"    pm.response.to.not.be.withBody;   ",
											"",
											"});",
											"",
											"eval(globals.sessionNavigate)();",
											"",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d895bd9e-ddbc-4266-9015-35bd19a3628e",
										"exec": [
											"const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\r",
											"pm.environment.set(\"_tmp_randomString\", Array.from({length:6}, _ => c[Math.floor(Math.random()*c.length)]).join(''))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/listings/{{_tmp_randomString}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"listings",
										"{{_tmp_randomString}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getListingByListingId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17b7e3b9-73f9-424c-bf53-aa31004f3747",
										"exec": [
											"eval(globals.commonTests)();",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Listings are returns and all assertions passed\", function (){",
											" pm.test(\"Main elements are present\", () => {",
											"  pm.expect(jsonData).to.have.property(\"id\");",
											"  pm.expect(jsonData).to.have.property(\"ticker\");",
											"  pm.expect(jsonData).to.have.property(\"rate\");",
											"  pm.expect(jsonData).to.have.property(\"fixAt\");",
											"  pm.expect(jsonData).to.have.property(\"roundLot\");",
											" });",
											"",
											" pm.test(\"ID is correct\", () => {",
											"  pm.expect(jsonData.id).to.be.eql(pm.environment.get(\"tmp_listing_ID\"));",
											" });",
											" ",
											"  pm.expect(jsonData).to.have.property(\"id\")&&",
											"  pm.expect(jsonData).to.have.property(\"ticker\")&&",
											"  pm.expect(jsonData).to.have.property(\"rate\")&&",
											"  pm.expect(jsonData).to.have.property(\"fixAt\")&&",
											"  pm.expect(jsonData).to.have.property(\"roundLot\")&&",
											"  pm.expect(jsonData.id).to.be.eql(pm.environment.get(\"tmp_listing_ID\"));",
											" ",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer{{token}}",
										"type": "text"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/listings/{{tmp_listing_ID}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"listings",
										"{{tmp_listing_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getListingBySecurityId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17b7e3b9-73f9-424c-bf53-aa31004f3747",
										"exec": [
											"eval(globals.commonTests)();",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Listings are returns for provided security ID and all assertions passed\", function (){",
											"",
											"    pm.test(\"Main elements are present\", function() {",
											"        jsonData._embedded.listings.forEach(function(listings) {",
											"            pm.expect(listings).to.have.property(\"id\");",
											"            pm.expect(listings).to.have.property(\"ticker\");",
											"            pm.expect(listings).to.have.property(\"rate\");",
											"            pm.expect(listings).to.have.property(\"fixAt\");",
											"            pm.expect(listings).to.have.property(\"roundLot\");",
											"        });",
											"    });",
											"    ",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    ",
											"    jsonData._embedded.listings.forEach(function(listings) {",
											"        pm.expect(listings).to.have.property(\"id\");",
											"        pm.expect(listings).to.have.property(\"ticker\");",
											"        pm.expect(listings).to.have.property(\"rate\");",
											"        pm.expect(listings).to.have.property(\"fixAt\");",
											"        pm.expect(listings).to.have.property(\"roundLot\");",
											"        })&&",
											"    pm.response.to.have.status(200);",
											" ",
											"});",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer{{token}}"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/listings?securityId={{_tmp_securityId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"listings"
									],
									"query": [
										{
											"key": "securityId",
											"value": "{{_tmp_securityId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getTradingPlaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81b56885-cb8b-4a7b-866e-ba015f333cbc",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of trading places is retrieved and response schema is validated\", function () {\r",
											"\r",
											"    var tradingPlacesSchema = pm.environment.get(\"tradingPlacesSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"tradingPlacesSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"// store tradingPlaceId as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_tradingPlaceId\",jsonData.tradingPlaces[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_tradingPlaceId\");\r",
											"}\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d873ed76-b449-4069-8385-ae5f6ad05400",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/tradingplaces",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"tradingplaces"
									]
								}
							},
							"response": []
						},
						{
							"name": "getTradingPlaceByTradingPlaceId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Trading place is retrieved by tradingPlaceId and response schema is validated\", function () {\r",
											"\r",
											"    var tradingPlaceSchema = pm.environment.get(\"tradingPlaceSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"tradingPlaceSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true); \r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"    && pm.expect(jsonData.id).to.be.eql(pm.environment.get(\"_tmp_tradingPlaceId\"));\r",
											"});\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/tradingplaces/{{_tmp_tradingPlaceId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"tradingplaces",
										"{{_tmp_tradingPlaceId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Deprecated",
			"item": [
				{
					"name": "(WiP) List securities by tradingPlaceId (C43995803)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//testRailTestCases = \"C43995821\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getTradingPlaces\",",
									"        \"getSecuritiesByTradingPlaceId\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getTradingPlaces\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getSecuritiesByTradingPlaceId\", testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10200, BUG: PRODUCT-10633"
					},
					"response": []
				},
				{
					"name": "getSecuritiesByTradingPlaceId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
								"exec": [
									"eval(globals.commonTests)();\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Securities are retrieved by tradingPlaceId and response schema is validated\", function () {\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									"    \r",
									"    pm.test(\"Status 200 OK is displayed\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response schema is correct\", () => {\r",
									"        schemaValidationPassed = eval(globals.schemaValidator)(\"securitiesSchema\",jsonData);\r",
									"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
									"    });\r",
									"\r",
									"    pm.response.to.have.status(200)\r",
									"    && pm.expect(schemaValidationPassed).to.be.eql(true)\r",
									"    && pm.expect(jsonData.id).to.be.eql(pm.environment.get(\"_tmp_tradingPlaceId\"));\r",
									"});\r",
									"\r",
									"eval(globals.sessionNavigate)();\r",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json; charset=UTF-8"
							},
							{
								"key": "accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/securities?tradingPlaceId={{_tmp_tradingPlaceId}}",
							"host": [
								"{{env_brokerage}}"
							],
							"path": [
								"brokerage",
								"securities",
								"{{tenantId_brokerage}}",
								"v1",
								"securities"
							],
							"query": [
								{
									"key": "tradingPlaceId",
									"value": "{{_tmp_tradingPlaceId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Clean TestRail Run",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f5d00dc8-f552-48c0-9a1c-2510df583464",
						"exec": [
							"// Prepare list of TestRail tests for 'Clean TestRail Run' request",
							"//var execTests = pm.globals.get(\"testRailTestsInRun\");",
							"var execTests = data.executedTests;",
							"console.log(\"TestRail, tests executed in last run: \" + execTests);",
							"execTests = execTests.replace(/C/g, \"\");",
							"//console.log(\"TestRail, first cleanup: \" + execTests);",
							"execTests = execTests.replace(/ /g, \", \");",
							"//console.log(\"TestRail, second cleanup: \" + execTests);",
							"execTests = execTests.replace(/,,/g, \",\");",
							"pm.globals.set(\"testRailTestsInRun\", execTests); ",
							"",
							"var array = JSON.parse(\"[\" + execTests + \"]\"); //convert string to array",
							"for(let i = 0; i < 10; i++){",
							"    let runId = JSON.parse(responseBody)[i].id;",
							"    let runName = JSON.parse(responseBody)[i].name;",
							"    let runSuiteId = JSON.parse(responseBody)[i].suite_id;",
							"    if (runName === \"Postman API Tests\") { //determine proper run",
							"        //console.log(runId);   ",
							"        console.log(\"TestRail run '\" + runId + \"' updating for tests: \" + execTests);",
							"        pm.sendRequest({",
							"            url: \"https://testrail.ebs.crealogix.net/index.php?/api/v2/update_run/\" + runId,",
							"            method: \"POST\",",
							"            header: {",
							"                \"Authorization\": \"Basic bWlsYW4ua2FyYWRlZ2xpY0BjcmVhbG9naXguY29tOlNTQ25hcG9saTEyMzQ1Njc4OQ==\",",
							"                \"Content-Type\": \"application/json\"",
							"            },",
							"            body: {",
							"                mode: 'raw',",
							"                raw: JSON.stringify({ include_all: false, case_ids: array })",
							"        \t}",
							"        });",
							"        break;",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "22f2990b-adb1-4668-a6e9-92884e953577",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "SSCnapoli123456789",
							"type": "string"
						},
						{
							"key": "username",
							"value": "milan.karadeglic@crealogix.com",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "content-type",
						"value": "application/json; charset=UTF-8"
					},
					{
						"key": "accept",
						"value": "application/json, application/hal+json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{token}}",
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://testrail.ebs.crealogix.net/index.php?/api/v2/get_runs/8=",
					"protocol": "https",
					"host": [
						"testrail",
						"ebs",
						"crealogix",
						"net"
					],
					"path": [
						"index.php"
					],
					"query": [
						{
							"key": "/api/v2/get_runs/8",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getAuthTestToken",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "871a062d-fd8b-4583-a09e-84e18b781faa",
						"exec": [
							"// This is only required if there are multiple \"getToken\" requests and some need to be skipped",
							"//postman.setNextRequest(\"getAllTopics (C41673954)\");",
							"",
							"console.log(\"Test Token url is: \" + pm.environment.get(\"env_security_testToken\"));",
							"",
							"// Set up pre-conditions with Chai Assertion library. https://www.chaijs.com/api/bdd/",
							"pm.expect(pm.environment.get(\"env_securemail\")).to.be.a('string', \"The env_securemail is not defined\");",
							"pm.expect(pm.environment.get(\"env_security_testToken\")).to.be.a('string', \"The testTokenUrl is not defined\");",
							"pm.expect(pm.environment.get(\"tenantId_security\")).to.be.a('string', \"The tenantId is not defined\");",
							"pm.expect(pm.environment.get(\"tenantName_security\")).to.be.a('string', \"The tenantName is not defined\");",
							"pm.expect(pm.environment.get(\"userName_security\")).to.be.a('string', \"The userName is not defined\");",
							"pm.expect(pm.environment.get(\"contractNo_security\")).to.be.a('string', \"The contractNo is not defined\");",
							"pm.expect(pm.environment.get(\"bcNo_security\")).to.be.a('string', \"The bcNo is not defined\");",
							"pm.expect(pm.environment.get(\"userId_security\")).to.be.a('string', \"The userId is not defined\");",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2c7c456c-2745-40e5-a4ff-aba74cc52590",
						"exec": [
							"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.environment.set(\"token\", pm.response.text());",
							"});",
							"",
							"",
							"// Session navigate from PrS using eval()",
							"eval(globals.sessionNavigate)();",
							"",
							"// Reset reference to TR test cases",
							"pm.globals.unset(\"_tr_\" + request.name);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"tenant_id\": {{tenantId_security}},\r\n  \"acsKey\": \"i6PiNObtdp2rCNW7mlV51BDSY4zAliSvBCyVsuML1000203567\",\r\n  \"tenant_name\": \"{{tenantName_security}}\",\r\n  \"user_name\": \"{{userId_security}}\",\r\n  \"contractNo\": \"{{contractNo_security}}\",\r\n  \"languageCode\": \"en\",\r\n  \"bcNo\": \"{{bcNo_security}}\",\r\n  \"authorities\": [],\r\n  \"client_id\": \"postman\",\r\n  \"user_id\": {{userId_security}},\r\n  \"scope\": [\r\n    \"https://api.crealogix.com/dban\",\r\n    \"read\",\r\n    \"https://api.crealogix.com/contracts/contract.advisor.readonly\",\r\n    \"https://api.crealogix.com/assets/account.balance.readonly\",\r\n    \"https://api.crealogix.com/contracts/contract.metadata.readonly\",\r\n    \"https://api.crealogix.com/contracts/contract.person.readonly\",\r\n    \"https://api.crealogix.com/payments/payment.initiate\",\r\n    \"https://api.crealogix.com/assets/account.transaction.readonly\",\r\n    \"https://api.crealogix.com/assets/account.permission.readonly\",\r\n    \"write\",\r\n    \"https://api.crealogix.com/assets/account.metadata.readonly\",\r\n    \"https://api.crealogix.com/messages/securemail.write\",\r\n    \"https://api.crealogix.com/messages/securemail.read\"\r\n  ],\r\n  \"loginName\": \"{{userId_security}}\",\r\n  \"exp\": 32479694642,\r\n  \"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\r\n  \"iat\": 1553855569\r\n}"
				},
				"url": {
					"raw": "{{env_security_testToken}}",
					"host": [
						"{{env_security_testToken}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "getAuthTestTokenNoAssetsPermissions",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "871a062d-fd8b-4583-a09e-84e18b781faa",
						"exec": [
							"// This is only required if there are multiple \"getToken\" requests and some need to be skipped",
							"//postman.setNextRequest(\"getAllTopics (C41673954)\");",
							"",
							"console.log(\"Test Token url is: \" + pm.environment.get(\"env_security_testToken\"));",
							"",
							"// Set up pre-conditions with Chai Assertion library. https://www.chaijs.com/api/bdd/",
							"pm.expect(pm.environment.get(\"env_securemail\")).to.be.a('string', \"The env_securemail is not defined\");",
							"pm.expect(pm.environment.get(\"env_security_testToken\")).to.be.a('string', \"The testTokenUrl is not defined\");",
							"pm.expect(pm.environment.get(\"tenantId_security\")).to.be.a('string', \"The tenantId is not defined\");",
							"pm.expect(pm.environment.get(\"tenantName_security\")).to.be.a('string', \"The tenantName is not defined\");",
							"pm.expect(pm.environment.get(\"userName_security\")).to.be.a('string', \"The userName is not defined\");",
							"pm.expect(pm.environment.get(\"contractNo_security\")).to.be.a('string', \"The contractNo is not defined\");",
							"pm.expect(pm.environment.get(\"bcNo_security\")).to.be.a('string', \"The bcNo is not defined\");",
							"pm.expect(pm.environment.get(\"userId_security\")).to.be.a('string', \"The userId is not defined\");",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2c7c456c-2745-40e5-a4ff-aba74cc52590",
						"exec": [
							"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.environment.set(\"token\", pm.response.text());",
							"});",
							"",
							"",
							"// Session navigate from PrS using eval()",
							"eval(globals.sessionNavigate)();",
							"",
							"// Reset reference to TR test cases",
							"pm.globals.unset(\"_tr_\" + request.name);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"tenant_id\": {{tenantId_security}},\r\n  \"acsKey\": \"i6PiNObtdp2rCNW7mlV51BDSY4zAliSvBCyVsuML1000203567\",\r\n  \"tenant_name\": \"{{tenantName_security}}\",\r\n  \"user_name\": \"{{userId_security}}\",\r\n  \"contractNo\": \"{{contractNo_security}}\",\r\n  \"languageCode\": \"en\",\r\n  \"bcNo\": \"{{bcNo_security}}\",\r\n  \"authorities\": [],\r\n  \"client_id\": \"postman\",\r\n  \"user_id\": {{userId_security}},\r\n  \"scope\": [\r\n\t\"https://api.crealogix.com/payments/payment.initiate\",\r\n\t\"https://api.crealogix.com/contracts/contract.metadata.readonly\",\r\n\t\"https://api.crealogix.com/contracts/contract.person.readonly\",\r\n\t\"https://api.crealogix.com/contracts/contract.advisor.readonly\",\r\n\t\"https://api.crealogix.com/messages/document.metadata.readonly\",\r\n\t\"https://api.crealogix.com/messages/document.content.readonly\"\r\n  ],\r\n  \"loginName\": \"{{userId_security}}\",\r\n  \"exp\": 32479694642,\r\n  \"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\r\n  \"iat\": 1553855569\r\n}"
				},
				"url": {
					"raw": "{{env_security_testToken}}",
					"host": [
						"{{env_security_testToken}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "cc52a1da-bedb-499b-9889-bd5c4a2f665c",
				"type": "text/javascript",
				"exec": [
					"//************************************************************************************************",
					"// variable initialization************************************************************************",
					"//************************************************************************************************",
					"var test = pm.environment.get(\"testRailTestsInRun\");",
					"if( !test) {",
					"    pm.environment.set(\"testRailTestsInRun\",\"\");",
					"}",
					"",
					"//************************************************************************************************",
					"// connect to TestRail ***************************************************************************",
					"//************************************************************************************************",
					"pm.globals.set(\"TESTRAIL_DOMAIN\",\"testrail.ebs.crealogix.net\");",
					"pm.globals.set(\"TESTRAIL_USERNAME\",\"milan.karadeglic@crealogix.com\"); ",
					"pm.globals.set(\"TESTRAIL_APIKEY\",\"Q4MlDw1e70Kxh1g1YPq9-Dg0abDWer.pSWcVWcxO4\");",
					"pm.globals.set(\"TESTRAIL_PROJECTID\",8); ",
					"pm.globals.set(\"TESTRAIL_TITLE\",\"Postman API Tests\");",
					"",
					"//************************************************************************************************",
					"// Schema for 'securities' ***********************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const securitiesSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"securities\"",
					"      ],",
					"      \"properties\": {",
					"        \"securities\": {",
					"          \"$id\": \"#/properties/_embedded/properties/securities\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Securities Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/securities/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"currencyIsoCode\",",
					"              \"descriptions\",",
					"              \"id\",",
					"              \"isin\",",
					"              \"interestFrequency\",",
					"              \"maturityDate\",",
					"              \"maturityRate\",",
					"              \"modifiedDuration\",",
					"              \"optionType\",",
					"              \"orderType\",",
					"              \"rating\",",
					"              \"ratingSource\",",
					"              \"riskCurrencyIsoCode\",",
					"              \"securityNumber\",",
					"              \"securityValue\",",
					"              \"status\",",
					"              \"strikePrice\",",
					"              \"timeToMaturity\",",
					"              \"tradable\",",
					"              \"tradeUnit\",",
					"              \"tradingRestrictions\",",
					"              \"usAsset\",",
					"              \"withdrawalInterseRate\",",
					"              \"withdrawalInterestPeriod\",",
					"              \"yieldToMaturity\"",
					"            ],",
					"            \"properties\": {",
					"              \"currencyIsoCode\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/currencyIsoCode\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Currencyisocode Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"CHF\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"descriptions\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/descriptions\",",
					"                \"type\": \"array\",",
					"                \"title\": \"The Descriptions Schema\",",
					"                \"items\": {",
					"                  \"$id\": \"#/properties/_embedded/properties/securities/items/properties/descriptions/items\",",
					"                  \"type\": \"object\",",
					"                  \"title\": \"The Items Schema\",",
					"                  \"required\": [",
					"                    \"language\",",
					"                    \"description\",",
					"                    \"shortDescription\"",
					"                  ],",
					"                  \"properties\": {",
					"                    \"language\": {",
					"                      \"$id\": \"#/properties/_embedded/properties/securities/items/properties/descriptions/items/properties/language\",",
					"                      \"type\": \"string\",",
					"                      \"title\": \"The Language Schema\",",
					"                      \"default\": \"\",",
					"                      \"examples\": [",
					"                        \"EN\"",
					"                      ],",
					"                      \"pattern\": \"^(.*)$\"",
					"                    },",
					"                    \"description\": {",
					"                      \"$id\": \"#/properties/_embedded/properties/securities/items/properties/descriptions/items/properties/description\",",
					"                      \"type\": \"string\",",
					"                      \"title\": \"The Description Schema\",",
					"                      \"default\": \"\",",
					"                      \"examples\": [",
					"                        \"Securities are generally classified as either equity securities, such as stocks and debt securities, such as bonds and debentures. The sale of securities to investors is one of the primary ways that publicly-traded companies  drive new capital for operations.\"",
					"                      ],",
					"                      \"pattern\": \"^(.*)$\"",
					"                    },",
					"                    \"shortDescription\": {",
					"                      \"$id\": \"#/properties/_embedded/properties/securities/items/properties/descriptions/items/properties/shortDescription\",",
					"                      \"type\": \"string\",",
					"                      \"title\": \"The Shortdescription Schema\",",
					"                      \"default\": \"\",",
					"                      \"examples\": [",
					"                        \"A security, in a financial context, is a certificate or other financial instrument that has monetary value and can be traded.\"",
					"                      ],",
					"                      \"pattern\": \"^(.*)$\"",
					"                    }",
					"                  }",
					"                }",
					"              },",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"isin\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/isin\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Isin Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"US5949181045\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"interestFrequency\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/interestFrequency\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Interestfrequency Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"maturityDate\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/maturityDate\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Maturitydate Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"maturityRate\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/maturityRate\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Maturityrate Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"modifiedDuration\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/modifiedDuration\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Modifiedduration Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"optionType\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/optionType\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Optiontype Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"CALL\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"orderType\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/orderType\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Ordertype Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"LIMITED_OR_UNLIMITED\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"rating\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/rating\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Rating Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"ratingSource\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/ratingSource\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Ratingsource Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"riskCurrencyIsoCode\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/riskCurrencyIsoCode\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Riskcurrencyisocode Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"CHF\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"securityNumber\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/securityNumber\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Securitynumber Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"123456789123456780\"",
					"                ]",
					"              },",
					"              \"securityValue\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/securityValue\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Securityvalue Schema\",",
					"                \"required\": [",
					"                  \"data\",",
					"                  \"type\"",
					"                ],",
					"                \"properties\": {",
					"                  \"data\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/securities/items/properties/securityValue/properties/data\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Data Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      245.45",
					"                    ]",
					"                  },",
					"                  \"type\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/securities/items/properties/securityValue/properties/type\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Type Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"NOMINAL\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  }",
					"                }",
					"              },",
					"              \"status\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/status\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Status Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"strikePrice\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/strikePrice\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Strikeprice Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"timeToMaturity\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/timeToMaturity\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Timetomaturity Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"tradable\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/tradable\",",
					"                \"type\": \"boolean\",",
					"                \"title\": \"The Tradable Schema\",",
					"                \"default\": false,",
					"                \"examples\": [",
					"                  true",
					"                ]",
					"              },",
					"              \"tradeUnit\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/tradeUnit\",",
					"                \"type\": \"integer\",",
					"                \"title\": \"The Tradeunit Schema\",",
					"                \"default\": 0,",
					"                \"examples\": [",
					"                  1",
					"                ]",
					"              },",
					"              \"tradingRestrictions\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/tradingRestrictions\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Tradingrestrictions Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"UNRESTRICTED\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"usAsset\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/usAsset\",",
					"                \"type\": \"boolean\",",
					"                \"title\": \"The Usasset Schema\",",
					"                \"default\": false,",
					"                \"examples\": [",
					"                  false",
					"                ]",
					"              },",
					"              \"withdrawalInterseRate\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/withdrawalInterseRate\",",
					"                \"type\": \"number\",",
					"                \"title\": \"The Withdrawalinterserate Schema\",",
					"                \"default\": 0.0,",
					"                \"examples\": [",
					"                  5.5",
					"                ]",
					"              },",
					"              \"withdrawalInterestPeriod\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/withdrawalInterestPeriod\",",
					"                \"type\": \"integer\",",
					"                \"title\": \"The Withdrawalinterestperiod Schema\",",
					"                \"default\": 0,",
					"                \"examples\": [",
					"                  30",
					"                ]",
					"              },",
					"              \"yieldToMaturity\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/yieldToMaturity\",",
					"                \"type\": \"number\",",
					"                \"title\": \"The Yieldtomaturity Schema\",",
					"                \"default\": 0.0,",
					"                \"examples\": [",
					"                  123.45",
					"                ]",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"};",
					"pm.environment.set(\"securitiesSchema\", securitiesSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'security' *************************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const securitySchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": [",
					"    \"object\",",
					"    \"null\"",
					"  ],",
					"  \"required\": [",
					"    \"page\",",
					"    \"_embedded\"",
					"  ],",
					"  \"properties\": {",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": [",
					"        \"object\",",
					"        \"null\"",
					"      ],",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": [",
					"            \"number\",",
					"            \"null\"",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": [",
					"            \"number\",",
					"            \"null\"",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": [",
					"            \"number\",",
					"            \"null\"",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": [",
					"            \"number\",",
					"            \"null\"",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": [",
					"        \"object\",",
					"        \"null\"",
					"      ],",
					"      \"required\": [",
					"        \"securities\"",
					"      ],",
					"      \"properties\": {",
					"        \"securities\": {",
					"          \"$id\": \"#/properties/_embedded/properties/securities\",",
					"          \"type\": [",
					"            \"array\",",
					"            \"null\"",
					"          ],",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/securities/items\",",
					"            \"type\": [",
					"              \"object\",",
					"              \"null\"",
					"            ],",
					"            \"required\": [",
					"              \"id\",",
					"              \"isin\",",
					"              \"securityNumber\",",
					"              \"descriptions\",",
					"              \"currencyIsoCode\",",
					"              \"interestFrequency\",",
					"              \"maturityDate\",",
					"              \"maturityRate\",",
					"              \"modifiedDuration\",",
					"              \"optionType\",",
					"              \"orderType\",",
					"              \"rating\",",
					"              \"ratingSource\",",
					"              \"riskCurrencyIsoCode\",",
					"              \"securityValue\",",
					"              \"status\",",
					"              \"strikePrice\",",
					"              \"timeToMaturity\",",
					"              \"tradable\",",
					"              \"tradeUnit\",",
					"              \"tradingRestrictions\",",
					"              \"usAsset\",",
					"              \"withdrawalInterseRate\",",
					"              \"withdrawalInterestPeriod\",",
					"              \"yieldToMaturity\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/id\",",
					"                \"type\": [",
					"                  \"string\",",
					"                  \"null\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"isin\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/isin\",",
					"                \"type\": [",
					"                  \"string\",",
					"                  \"null\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"securityNumber\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/securityNumber\",",
					"                \"type\": [",
					"                  \"string\",",
					"                  \"null\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"descriptions\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/descriptions\",",
					"                \"type\": [",
					"                  \"array\",",
					"                  \"null\"",
					"                ],",
					"                \"items\": {",
					"                  \"$id\": \"#/properties/_embedded/properties/securities/items/properties/descriptions/items\",",
					"                  \"type\": [",
					"                    \"object\",",
					"                    \"null\"",
					"                  ],",
					"                  \"required\": [",
					"                    \"language\",",
					"                    \"description\",",
					"                    \"shortDescription\"",
					"                  ],",
					"                  \"properties\": {",
					"                    \"language\": {",
					"                      \"$id\": \"#/properties/_embedded/properties/securities/items/properties/descriptions/items/properties/language\",",
					"                      \"type\": [",
					"                        \"string\",",
					"                        \"null\"",
					"                      ],",
					"                      \"pattern\": \"^(.*)$\"",
					"                    },",
					"                    \"description\": {",
					"                      \"$id\": \"#/properties/_embedded/properties/securities/items/properties/descriptions/items/properties/description\",",
					"                      \"type\": [",
					"                        \"string\",",
					"                        \"null\"",
					"                      ],",
					"                      \"pattern\": \"^(.*)$\"",
					"                    },",
					"                    \"shortDescription\": {",
					"                      \"$id\": \"#/properties/_embedded/properties/securities/items/properties/descriptions/items/properties/shortDescription\",",
					"                      \"type\": [",
					"                        \"string\",",
					"                        \"null\"",
					"                      ],",
					"                      \"pattern\": \"^(.*)$\"",
					"                    }",
					"                  }",
					"                }",
					"              },",
					"              \"currencyIsoCode\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/currencyIsoCode\",",
					"                \"type\": [",
					"                  \"string\",",
					"                  \"null\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"interestFrequency\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/interestFrequency\",",
					"                \"type\": \"null\"",
					"              },",
					"              \"maturityDate\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/maturityDate\",",
					"                \"type\": [",
					"                  \"string\",",
					"                  \"null\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"maturityRate\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/maturityRate\",",
					"                \"type\": [",
					"                  \"number\",",
					"                  \"null\"",
					"                ]",
					"              },",
					"              \"modifiedDuration\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/modifiedDuration\",",
					"                \"type\": [",
					"                  \"number\",",
					"                  \"null\"",
					"                ]",
					"              },",
					"              \"optionType\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/optionType\",",
					"                \"type\": [",
					"                  \"string\",",
					"                  \"null\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"orderType\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/orderType\",",
					"                \"type\": [",
					"                  \"string\",",
					"                  \"null\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"rating\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/rating\",",
					"                \"type\": \"null\"",
					"              },",
					"              \"ratingSource\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/ratingSource\",",
					"                \"type\": \"null\"",
					"              },",
					"              \"riskCurrencyIsoCode\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/riskCurrencyIsoCode\",",
					"                \"type\": [",
					"                  \"string\",",
					"                  \"null\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"securityValue\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/securityValue\",",
					"                \"type\": [",
					"                  \"object\",",
					"                  \"null\"",
					"                ],",
					"                \"required\": [",
					"                  \"data\",",
					"                  \"type\"",
					"                ],",
					"                \"properties\": {",
					"                  \"data\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/securities/items/properties/securityValue/properties/data\",",
					"                    \"type\": [",
					"                      \"number\",",
					"                      \"null\"",
					"                    ]",
					"                  },",
					"                  \"type\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/securities/items/properties/securityValue/properties/type\",",
					"                    \"type\": [",
					"                      \"string\",",
					"                      \"null\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  }",
					"                }",
					"              },",
					"              \"status\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/status\",",
					"                \"type\": [",
					"                  \"string\",",
					"                  \"null\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"strikePrice\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/strikePrice\",",
					"                \"type\": [",
					"                  \"object\",",
					"                  \"null\"",
					"                ],",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/securities/items/properties/strikePrice/properties/currencyIsoCode\",",
					"                    \"type\": [",
					"                      \"string\",",
					"                      \"null\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/securities/items/properties/strikePrice/properties/value\",",
					"                    \"type\": [",
					"                      \"number\",",
					"                      \"null\"",
					"                    ]",
					"                  }",
					"                }",
					"              },",
					"              \"timeToMaturity\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/timeToMaturity\",",
					"                \"type\": [",
					"                  \"number\",",
					"                  \"null\"",
					"                ]",
					"              },",
					"              \"tradable\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/tradable\",",
					"                \"type\": [",
					"                  \"boolean\",",
					"                  \"null\"",
					"                ]",
					"              },",
					"              \"tradeUnit\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/tradeUnit\",",
					"                \"type\": [",
					"                  \"number\",",
					"                  \"null\"",
					"                ]",
					"              },",
					"              \"tradingRestrictions\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/tradingRestrictions\",",
					"                \"type\": \"null\"",
					"              },",
					"              \"usAsset\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/usAsset\",",
					"                \"type\": [",
					"                  \"boolean\",",
					"                  \"null\"",
					"                ]",
					"              },",
					"              \"withdrawalInterseRate\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/withdrawalInterseRate\",",
					"                \"type\": [",
					"                  \"number\",",
					"                  \"null\"",
					"                ]",
					"              },",
					"              \"withdrawalInterestPeriod\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/withdrawalInterestPeriod\",",
					"                \"type\": [",
					"                  \"number\",",
					"                  \"null\"",
					"                ]",
					"              },",
					"              \"yieldToMaturity\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securities/items/properties/yieldToMaturity\",",
					"                \"type\": [",
					"                  \"number\",",
					"                  \"null\"",
					"                ]",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    }",
					"  }",
					"};",
					"pm.environment.set(\"securitySchema\", securitySchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'trading places' *******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const tradingPlacesSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"tradingPlaces\"",
					"      ],",
					"      \"properties\": {",
					"        \"tradingPlaces\": {",
					"          \"$id\": \"#/properties/_embedded/properties/tradingPlaces\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Tradingplaces Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/tradingPlaces/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"closingTime\",",
					"              \"code\",",
					"              \"country\",",
					"              \"executionDeadLine\",",
					"              \"descriptions\",",
					"              \"id\",",
					"              \"lunchTimeEnd\",",
					"              \"lunchTimeStart\",",
					"              \"onlineTradeAllowed\",",
					"              \"openingTime\",",
					"              \"tradingAllowed\"",
					"            ],",
					"            \"properties\": {",
					"              \"closingTime\": {",
					"                \"$id\": \"#/properties/_embedded/properties/tradingPlaces/items/properties/closingTime\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Closingtime Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"code\": {",
					"                \"$id\": \"#/properties/_embedded/properties/tradingPlaces/items/properties/code\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Code Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"SIX\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"country\": {",
					"                \"$id\": \"#/properties/_embedded/properties/tradingPlaces/items/properties/country\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Country Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"CH\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"executionDeadLine\": {",
					"                \"$id\": \"#/properties/_embedded/properties/tradingPlaces/items/properties/executionDeadLine\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Executiondeadline Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"descriptions\": {",
					"                \"$id\": \"#/properties/_embedded/properties/tradingPlaces/items/properties/descriptions\",",
					"                \"type\": \"array\",",
					"                \"title\": \"The Descriptions Schema\",",
					"                \"items\": {",
					"                  \"$id\": \"#/properties/_embedded/properties/tradingPlaces/items/properties/descriptions/items\",",
					"                  \"type\": \"object\",",
					"                  \"title\": \"The Items Schema\",",
					"                  \"required\": [",
					"                    \"fullDescription\",",
					"                    \"shortDescription\",",
					"                    \"language\"",
					"                  ],",
					"                  \"properties\": {",
					"                    \"fullDescription\": {",
					"                      \"$id\": \"#/properties/_embedded/properties/tradingPlaces/items/properties/descriptions/items/properties/fullDescription\",",
					"                      \"type\": \"string\",",
					"                      \"title\": \"The Fulldescription Schema\",",
					"                      \"default\": \"\",",
					"                      \"examples\": [",
					"                        \"This is the full description of the trading place.\"",
					"                      ],",
					"                      \"pattern\": \"^(.*)$\"",
					"                    },",
					"                    \"shortDescription\": {",
					"                      \"$id\": \"#/properties/_embedded/properties/tradingPlaces/items/properties/descriptions/items/properties/shortDescription\",",
					"                      \"type\": \"string\",",
					"                      \"title\": \"The Shortdescription Schema\",",
					"                      \"default\": \"\",",
					"                      \"examples\": [",
					"                        \"short description\"",
					"                      ],",
					"                      \"pattern\": \"^(.*)$\"",
					"                    },",
					"                    \"language\": {",
					"                      \"$id\": \"#/properties/_embedded/properties/tradingPlaces/items/properties/descriptions/items/properties/language\",",
					"                      \"type\": \"string\",",
					"                      \"title\": \"The Language Schema\",",
					"                      \"default\": \"\",",
					"                      \"examples\": [",
					"                        \"DE\"",
					"                      ],",
					"                      \"pattern\": \"^(.*)$\"",
					"                    }",
					"                  }",
					"                }",
					"              },",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/tradingPlaces/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__ad64369c7b0b13eb2acbb8f8c1f9824196e0647168432e2cb7148585282f7c96235cc2\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"lunchTimeEnd\": {",
					"                \"$id\": \"#/properties/_embedded/properties/tradingPlaces/items/properties/lunchTimeEnd\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Lunchtimeend Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"lunchTimeStart\": {",
					"                \"$id\": \"#/properties/_embedded/properties/tradingPlaces/items/properties/lunchTimeStart\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Lunchtimestart Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"onlineTradeAllowed\": {",
					"                \"$id\": \"#/properties/_embedded/properties/tradingPlaces/items/properties/onlineTradeAllowed\",",
					"                \"type\": \"boolean\",",
					"                \"title\": \"The Onlinetradeallowed Schema\",",
					"                \"default\": false,",
					"                \"examples\": [",
					"                  true",
					"                ]",
					"              },",
					"              \"openingTime\": {",
					"                \"$id\": \"#/properties/_embedded/properties/tradingPlaces/items/properties/openingTime\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Openingtime Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"tradingAllowed\": {",
					"                \"$id\": \"#/properties/_embedded/properties/tradingPlaces/items/properties/tradingAllowed\",",
					"                \"type\": \"boolean\",",
					"                \"title\": \"The Tradingallowed Schema\",",
					"                \"default\": false,",
					"                \"examples\": [",
					"                  true",
					"                ]",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"};",
					"pm.environment.set(\"tradingPlacesSchema\", tradingPlacesSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'trading place' ********************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const tradingPlaceSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"closingTime\",",
					"    \"code\",",
					"    \"country\",",
					"    \"executionDeadLine\",",
					"    \"descriptions\",",
					"    \"id\",",
					"    \"lunchTimeEnd\",",
					"    \"lunchTimeStart\",",
					"    \"onlineTradeAllowed\",",
					"    \"openingTime\",",
					"    \"tradingAllowed\"",
					"  ],",
					"  \"properties\": {",
					"    \"closingTime\": {",
					"      \"$id\": \"#/properties/closingTime\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Closingtime Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"code\": {",
					"      \"$id\": \"#/properties/code\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Code Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"SIX\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"country\": {",
					"      \"$id\": \"#/properties/country\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Country Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"CH\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"executionDeadLine\": {",
					"      \"$id\": \"#/properties/executionDeadLine\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Executiondeadline Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"descriptions\": {",
					"      \"$id\": \"#/properties/descriptions\",",
					"      \"type\": \"array\",",
					"      \"title\": \"The Descriptions Schema\",",
					"      \"items\": {",
					"        \"$id\": \"#/properties/descriptions/items\",",
					"        \"type\": \"object\",",
					"        \"title\": \"The Items Schema\",",
					"        \"required\": [",
					"          \"fullDescription\",",
					"          \"shortDescription\",",
					"          \"language\"",
					"        ],",
					"        \"properties\": {",
					"          \"fullDescription\": {",
					"            \"$id\": \"#/properties/descriptions/items/properties/fullDescription\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Fulldescription Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"This is the full description of the trading place.\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"shortDescription\": {",
					"            \"$id\": \"#/properties/descriptions/items/properties/shortDescription\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Shortdescription Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"short description\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"language\": {",
					"            \"$id\": \"#/properties/descriptions/items/properties/language\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Language Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"DE\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__ad64369c7b0b13eb2acbb8f8c1f9824196e0647168432e2cb7148585282f7c96235cc2\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"lunchTimeEnd\": {",
					"      \"$id\": \"#/properties/lunchTimeEnd\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Lunchtimeend Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"lunchTimeStart\": {",
					"      \"$id\": \"#/properties/lunchTimeStart\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Lunchtimestart Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"onlineTradeAllowed\": {",
					"      \"$id\": \"#/properties/onlineTradeAllowed\",",
					"      \"type\": \"boolean\",",
					"      \"title\": \"The Onlinetradeallowed Schema\",",
					"      \"default\": false,",
					"      \"examples\": [",
					"        true",
					"      ]",
					"    },",
					"    \"openingTime\": {",
					"      \"$id\": \"#/properties/openingTime\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Openingtime Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"tradingAllowed\": {",
					"      \"$id\": \"#/properties/tradingAllowed\",",
					"      \"type\": \"boolean\",",
					"      \"title\": \"The Tradingallowed Schema\",",
					"      \"default\": false,",
					"      \"examples\": [",
					"        true",
					"      ]",
					"    }",
					"  }",
					"};",
					"pm.environment.set(\"tradingPlaceSchema\", tradingPlaceSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'listings' *************************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const listingsSchema =",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": [",
					"    \"object\",",
					"    \"null\"",
					"  ],",
					"  \"required\": [",
					"    \"page\",",
					"    \"_embedded\"",
					"  ],",
					"  \"properties\": {",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": [",
					"        \"object\",",
					"        \"null\"",
					"      ],",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": [",
					"            \"number\",",
					"            \"null\"",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": [",
					"            \"number\",",
					"            \"null\"",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": [",
					"            \"number\",",
					"            \"null\"",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": [",
					"            \"number\",",
					"            \"null\"",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": [",
					"        \"object\",",
					"        \"null\"",
					"      ],",
					"      \"required\": [",
					"        \"listings\"",
					"      ],",
					"      \"properties\": {",
					"        \"listings\": {",
					"          \"$id\": \"#/properties/_embedded/properties/listings\",",
					"          \"type\": [",
					"            \"array\",",
					"            \"null\"",
					"          ],",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/listings/items\",",
					"            \"type\": [",
					"              \"object\",",
					"              \"null\"",
					"            ],",
					"            \"required\": [",
					"              \"id\",",
					"              \"ticker\",",
					"              \"rate\",",
					"              \"fixAt\",",
					"              \"roundLot\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/listings/items/properties/id\",",
					"                \"type\": [",
					"                  \"string\",",
					"                  \"null\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"ticker\": {",
					"                \"$id\": \"#/properties/_embedded/properties/listings/items/properties/ticker\",",
					"                \"type\": [",
					"                  \"string\",",
					"                  \"null\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"rate\": {",
					"                \"$id\": \"#/properties/_embedded/properties/listings/items/properties/rate\",",
					"                \"type\": [",
					"                  \"number\",",
					"                  \"null\"",
					"                ]",
					"              },",
					"              \"fixAt\": {",
					"                \"$id\": \"#/properties/_embedded/properties/listings/items/properties/fixAt\",",
					"                \"type\": [",
					"                  \"string\",",
					"                  \"null\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"roundLot\": {",
					"                \"$id\": \"#/properties/_embedded/properties/listings/items/properties/roundLot\",",
					"                \"type\": [",
					"                  \"number\",",
					"                  \"null\"",
					"                ]",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    }",
					"  }",
					"};",
					"pm.environment.set(\"listingsSchema\", listingsSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'security types'********************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const securityTypesSchema =",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"securityTypes\"",
					"      ],",
					"      \"properties\": {",
					"        \"securityTypes\": {",
					"          \"$id\": \"#/properties/_embedded/properties/securityTypes\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Securitytypes Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/securityTypes/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"id\",",
					"              \"code\",",
					"              \"descriptions\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securityTypes/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__35695a31497042534976574d443565538c1bf563cdd82c8db3cff41a82f5047a4b\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"code\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securityTypes/items/properties/code\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Code Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"1217\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"descriptions\": {",
					"                \"$id\": \"#/properties/_embedded/properties/securityTypes/items/properties/descriptions\",",
					"                \"type\": \"array\",",
					"                \"title\": \"The Descriptions Schema\",",
					"                \"items\": {",
					"                  \"$id\": \"#/properties/_embedded/properties/securityTypes/items/properties/descriptions/items\",",
					"                  \"type\": \"object\",",
					"                  \"title\": \"The Items Schema\",",
					"                  \"required\": [",
					"                    \"language\",",
					"                    \"description\"",
					"                  ],",
					"                  \"properties\": {",
					"                    \"language\": {",
					"                      \"$id\": \"#/properties/_embedded/properties/securityTypes/items/properties/descriptions/items/properties/language\",",
					"                      \"type\": \"string\",",
					"                      \"title\": \"The Language Schema\",",
					"                      \"default\": \"\",",
					"                      \"examples\": [",
					"                        \"EN\"",
					"                      ],",
					"                      \"pattern\": \"^(.*)$\"",
					"                    },",
					"                    \"description\": {",
					"                      \"$id\": \"#/properties/_embedded/properties/securityTypes/items/properties/descriptions/items/properties/description\",",
					"                      \"type\": \"string\",",
					"                      \"title\": \"The Description Schema\",",
					"                      \"default\": \"\",",
					"                      \"examples\": [",
					"                        \"Money Market Deposit\"",
					"                      ],",
					"                      \"pattern\": \"^(.*)$\"",
					"                    }",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            137",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            14",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"};",
					"pm.environment.set(\"securityTypesSchema\", securityTypesSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'security type' ********************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const securityTypeSchema =",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"code\",",
					"    \"descriptions\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__3834474e6c344746576859754453387744eddcf7b4ad9abcd6311e8acfe8c07389\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"code\": {",
					"      \"$id\": \"#/properties/code\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Code Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"1217\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"descriptions\": {",
					"      \"$id\": \"#/properties/descriptions\",",
					"      \"type\": \"array\",",
					"      \"title\": \"The Descriptions Schema\",",
					"      \"items\": {",
					"        \"$id\": \"#/properties/descriptions/items\",",
					"        \"type\": \"object\",",
					"        \"title\": \"The Items Schema\",",
					"        \"required\": [",
					"          \"language\",",
					"          \"description\"",
					"        ],",
					"        \"properties\": {",
					"          \"language\": {",
					"            \"$id\": \"#/properties/descriptions/items/properties/language\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Language Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"EN\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"description\": {",
					"            \"$id\": \"#/properties/descriptions/items/properties/description\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Description Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"Money Market Deposit\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          }",
					"        }",
					"      }",
					"    }",
					"  }",
					"};",
					"pm.environment.set(\"securityTypeSchema\", securityTypeSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'security by ID'********************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const securityByIdSchema =",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"isin\",",
					"    \"securityNumber\",",
					"    \"descriptions\",",
					"    \"currencyIsoCode\",",
					"    \"interestFrequency\",",
					"    \"maturityDate\",",
					"    \"maturityRate\",",
					"    \"modifiedDuration\",",
					"    \"optionType\",",
					"    \"orderType\",",
					"    \"rating\",",
					"    \"ratingSource\",",
					"    \"riskCurrencyIsoCode\",",
					"    \"securityValue\",",
					"    \"status\",",
					"    \"strikePrice\",",
					"    \"timeToMaturity\",",
					"    \"tradable\",",
					"    \"tradeUnit\",",
					"    \"tradingRestrictions\",",
					"    \"usAsset\",",
					"    \"withdrawalInterseRate\",",
					"    \"withdrawalInterestPeriod\",",
					"    \"yieldToMaturity\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__5079555876724670376d774974325a688111a7cad5818bb9a5bd3444f82545f505c0\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"isin\": {",
					"      \"$id\": \"#/properties/isin\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Isin Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"CH9803671440\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"securityNumber\": {",
					"      \"$id\": \"#/properties/securityNumber\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Securitynumber Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"980367144\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"descriptions\": {",
					"      \"$id\": \"#/properties/descriptions\",",
					"      \"type\": \"array\",",
					"      \"title\": \"The Descriptions Schema\",",
					"      \"items\": {",
					"        \"$id\": \"#/properties/descriptions/items\",",
					"        \"type\": \"object\",",
					"        \"title\": \"The Items Schema\",",
					"        \"required\": [",
					"          \"language\",",
					"          \"description\",",
					"          \"shortDescription\"",
					"        ],",
					"        \"properties\": {",
					"          \"language\": {",
					"            \"$id\": \"#/properties/descriptions/items/properties/language\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Language Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"EN\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"description\": {",
					"            \"$id\": \"#/properties/descriptions/items/properties/description\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Description Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"NA\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"shortDescription\": {",
					"            \"$id\": \"#/properties/descriptions/items/properties/shortDescription\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Shortdescription Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"Reg. shs Rieter Holding Ltd CHF 5 nom. (367144)\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"currencyIsoCode\": {",
					"      \"$id\": \"#/properties/currencyIsoCode\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Currencyisocode Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"CHF\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"interestFrequency\": {",
					"      \"$id\": \"#/properties/interestFrequency\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Interestfrequency Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"maturityDate\": {",
					"      \"$id\": \"#/properties/maturityDate\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Maturitydate Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"maturityRate\": {",
					"      \"$id\": \"#/properties/maturityRate\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Maturityrate Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"modifiedDuration\": {",
					"      \"$id\": \"#/properties/modifiedDuration\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Modifiedduration Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"optionType\": {",
					"      \"$id\": \"#/properties/optionType\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Optiontype Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"NONE\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"orderType\": {",
					"      \"$id\": \"#/properties/orderType\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Ordertype Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"LIMITED_OR_UNLIMITED\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"rating\": {",
					"      \"$id\": \"#/properties/rating\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Rating Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"ratingSource\": {",
					"      \"$id\": \"#/properties/ratingSource\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Ratingsource Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"riskCurrencyIsoCode\": {",
					"      \"$id\": \"#/properties/riskCurrencyIsoCode\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Riskcurrencyisocode Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"CHF\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"securityValue\": {",
					"      \"$id\": \"#/properties/securityValue\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Securityvalue Schema\",",
					"      \"required\": [",
					"        \"data\",",
					"        \"type\"",
					"      ],",
					"      \"properties\": {",
					"        \"data\": {",
					"          \"$id\": \"#/properties/securityValue/properties/data\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Data Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            5",
					"          ]",
					"        },",
					"        \"type\": {",
					"          \"$id\": \"#/properties/securityValue/properties/type\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Type Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"PIECE\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        }",
					"      }",
					"    },",
					"    \"status\": {",
					"      \"$id\": \"#/properties/status\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Status Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"ACTIVE\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"strikePrice\": {",
					"      \"$id\": \"#/properties/strikePrice\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Strikeprice Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"timeToMaturity\": {",
					"      \"$id\": \"#/properties/timeToMaturity\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Timetomaturity Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"tradable\": {",
					"      \"$id\": \"#/properties/tradable\",",
					"      \"type\": \"boolean\",",
					"      \"title\": \"The Tradable Schema\",",
					"      \"default\": false,",
					"      \"examples\": [",
					"        true",
					"      ]",
					"    },",
					"    \"tradeUnit\": {",
					"      \"$id\": \"#/properties/tradeUnit\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Tradeunit Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        1",
					"      ]",
					"    },",
					"    \"tradingRestrictions\": {",
					"      \"$id\": \"#/properties/tradingRestrictions\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Tradingrestrictions Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"usAsset\": {",
					"      \"$id\": \"#/properties/usAsset\",",
					"      \"type\": \"boolean\",",
					"      \"title\": \"The Usasset Schema\",",
					"      \"default\": false,",
					"      \"examples\": [",
					"        false",
					"      ]",
					"    },",
					"    \"withdrawalInterseRate\": {",
					"      \"$id\": \"#/properties/withdrawalInterseRate\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Withdrawalinterserate Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        0",
					"      ]",
					"    },",
					"    \"withdrawalInterestPeriod\": {",
					"      \"$id\": \"#/properties/withdrawalInterestPeriod\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Withdrawalinterestperiod Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        0",
					"      ]",
					"    },",
					"    \"yieldToMaturity\": {",
					"      \"$id\": \"#/properties/yieldToMaturity\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Yieldtomaturity Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    }",
					"  }",
					"};",
					"pm.environment.set(\"securityByIdSchema\", securityByIdSchema);",
					"",
					"//************************************************************************************************",
					"//global function to determine next day/next working day *****************************************",
					"//************************************************************************************************",
					"var moment = require('moment');",
					"let nextDay = moment().add(\"days\",1).format(\"YYYY-MM-DD\"); //next day in specified format",
					"switch (moment().add(\"days\",1).format(\"dddd\")){",
					"    case \"Sunday\":",
					"        var nextWorkingDay = moment().add(\"days\",2).format(\"YYYY-MM-DD\");",
					"        break;",
					"    case \"Saturday\":",
					"        var nextWorkingDay = moment().add(\"days\",3).format(\"YYYY-MM-DD\");",
					"        break;",
					"    default:",
					"        var nextWorkingDay = moment().add(\"days\",1).format(\"YYYY-MM-DD\");",
					"}",
					"pm.globals.set('PrS:nextDay', JSON.stringify(nextDay));",
					"pm.globals.set('PrS:nextWorkingDay', JSON.stringify(nextWorkingDay));",
					"",
					"/*",
					"// Define test data, setup configuration per environment",
					"var env = pm.environment.get(\"envName\");",
					"if (env === \"MDB-R191-TEST\") {",
					"//    var contractNumber = \"{{contractNumber}}\";",
					"//    var debtorAccountNo = \"{{debtorAccountNo}}\";",
					"//    var debtorAccountName = \"{{debtorAccountName}}\";",
					"//    var creditorAccountNo = \"{{creditorAccountNo}}\";",
					"    } else if (env === \"MDB-R191-LAT\") {",
					"} else {",
					"    throw new Error(\"Wrong environment selected, requests are skipped!\")",
					"}",
					"//pm.globals.set('PrS:contractNumber', JSON.stringify(contractNumber));",
					"//pm.globals.set('PrS:debtorAccountNo', JSON.stringify(debtorAccountNo));",
					"//pm.globals.set('PrS:debtorAccountName', JSON.stringify(debtorAccountName));",
					"//pm.globals.set('PrS:creditorAccountNo', JSON.stringify(creditorAccountNo));",
					"*/",
					"",
					"// Save the object as a variable.",
					"// JSON.stringify will serialize the object so that Postman can save it",
					"",
					"//pm.globals.set('PrS:tags', JSON.stringify(tags));",
					"//pm.environment.set(\"testGroup\",\"Patient Zero\") //set environment variable if/when needed",
					"",
					"                //pm.response.to.be.ok;         - Status code must be 200",
					"                //pm.response.to.be.error       - Checks 4XX or 5XX",
					"                //pm.response.to.be.serverError - Checks 5XX",
					"                //pm.response.to.be.clientError - Checks 4XX status code",
					"",
					"// Save common tests in a global variable",
					"postman.setGlobalVariable(\"commonTests\", () => {",
					"    pm.test(\"Response must be valid with/with out a body and with proper status code\", function () {",
					"        if ([\"GET\",\"POST\",\"PUT\"].indexOf(request.method) > -1) {",
					"            pm.response.to.not.be.error;",
					"            pm.response.to.be.withBody;",
					"            pm.response.to.be.json;",
					"            pm.response.to.have.jsonBody();",
					"            pm.response.to.not.have.jsonBody('error');",
					"            pm.response.to.have.header('Content-Type', 'application/hal+json;charset=UTF-8');",
					"        } else {",
					"            pm.response.to.not.be.withBody;",
					"        }",
					"        switch(request.method){",
					"            case \"POST\":",
					"                pm.response.to.have.status(201);",
					"                break;",
					"            case \"PUT\":",
					"                pm.response.to.have.status(200);",
					"                break;",
					"            case \"GET\":",
					"                pm.response.to.have.status(200);",
					"                break;",
					"            case \"DELETE\":",
					"                pm.response.to.have.status(204);",
					"                break;",
					"        }        ",
					"    });",
					"    //pm.test(\"Response time is below 1000ms\", function () {",
					"    //    pm.expect(pm.response.responseTime).to.be.below(1000);",
					"    //});",
					"});",
					"",
					"postman.setGlobalVariable(\"assertValidCreditorAgent\", () => {",
					"    pm.expect(address).to.be.an('object').with.keys('name1', 'name2', 'street', 'city', 'country');",
					"    pm.expect(address.name1).to.be.a('string').and.not.empty;",
					"    pm.expect(address.name2).to.be.a('string').and.not.empty;",
					"    pm.expect(address.street).to.be.a('string').and.not.empty;",
					"    pm.expect(address.city).to.be.a('string').and.not.empty;",
					"    pm.expect(address.country).to.be.a('string').with.lengthOf(2).and.match(/[A-Z]+/);",
					"});",
					"",
					"postman.setGlobalVariable(\"sessionInit\", (testSession, sessionName) => {",
					"    //session init section",
					"    console.log(request.name + \", initialization: \" + testSession + \", global var: \" + sessionName);",
					"    console.log(request.name + \", executing: \" + testSession[0]);",
					"    ",
					"    // Select first test from session to be executed",
					"    postman.setNextRequest(testSession[0]); ",
					"    testSession.shift();",
					"    if (testSession.length === 0) {",
					"        console.log(request.name + \", test session is empty, unset \" + sessionName);",
					"        pm.globals.unset(sessionName);",
					"        console.log(request.name + \", terminate tests execution list\");",
					"    } else {",
					"        pm.globals.set(sessionName, testSession);",
					"        console.log(request.name + \" for \" + sessionName + \", updated list of tests to be executed: \" + testSession);",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"sessionNavigate\", () => {",
					"    console.log(request.name + \", entering ...\");",
					"    if (pm.globals.get(\"requestsToRun\") === undefined){",
					"        console.log(request.name + \", requestsToRun is undefined\");",
					"        pm.globals.set(\"testRailTestCases\",\"\");",
					"        console.log(request.name + \", reset global var: testRailTestCases\");    ",
					"        if (pm.globals.get(\"testSession\") === undefined){",
					"            console.log(request.name + \", testSession is undefined\");",
					"            //here >> export list of tests executed",
					"            var tests = pm.environment.get(\"testRailTestsInRun\");",
					"            tests = tests.replace(/C/g, \"\");",
					"            tests = tests.replace(/ /g, \", \");",
					"            tests = tests.replace(/,,/g, \",\");",
					"            console.log(\"TestRail tests executed executed in this run: \" + tests);",
					"            console.log(\"The end\");",
					"            postman.setNextRequest(null);",
					"        } else {",
					"        var testSession = pm.globals.get(\"testSession\");",
					"        console.log(request.name + \", checking what to run: \" + testSession[0]);",
					"        postman.setNextRequest(testSession[0]); // Run: GET SWIFT payment",
					"        testSession.shift();",
					"        if (testSession.length === 0) {",
					"            pm.globals.unset(\"testSession\");",
					"            console.log(request.name + \", terminate execution list\");",
					"        } else {",
					"            pm.globals.set(\"testSession\", testSession);",
					"            console.log(request.name + \", updated list of tests to be executed: \" + testSession);",
					"        }}",
					"    } else {",
					"    var requestsToRun = pm.globals.get(\"requestsToRun\");",
					"    console.log(request.name + \", checking what to run: \" + requestsToRun[0]);",
					"    postman.setNextRequest(requestsToRun[0]); ",
					"    requestsToRun.shift();",
					"    if (requestsToRun.length === 0) {",
					"        pm.globals.unset(\"requestsToRun\");",
					"        console.log(request.name + \", terminate requests execution list\");",
					"    } else {",
					"        pm.globals.set(\"requestsToRun\", requestsToRun);",
					"        console.log(request.name + \", updated list of requests to be executed: \" + requestsToRun);",
					"    }}",
					"});",
					"",
					"postman.setGlobalVariable(\"cleanup\", () => {",
					"    const clean = [\"requestsToRun\", \"testSession\"];",
					"    for(let i = 0; i < clean.length; ++i){",
					"        pm.globals.unset(clean[i]);",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"testsExecuted\", (listOfExecutedTests) => {",
					"    let tests =  pm.environment.get(\"testRailTestsInRun\");",
					"    //console.log(\"TestRail tests stored in 'testRailTestsInRun': \" + tests);",
					"    if (tests.length > 0) {",
					"        tests = tests + \" \"",
					"    }",
					"    tests = tests + listOfExecutedTests;",
					"    //console.log(\"TestRail tests to be stored to 'testRailTestsInRun': \" + tests);",
					"    pm.environment.set(\"testRailTestsInRun\",tests);",
					"    //console.log(\"TestRail tests executed so far: \" + tests);",
					"});",
					"",
					"postman.setGlobalVariable(\"extractTestCaseIDFromRequestName\", () => {",
					"    let n = request.name.lastIndexOf(\"(\");",
					"    return request.name.substr(n + 1, request.name.length - n - 2);",
					"});",
					"",
					"postman.setGlobalVariable(\"schemaValidator\", (schema, jsonData) => {",
					"    //old, deprecated schema validationimplementation",
					"    //pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;",
					"    ",
					"    //new schema validation implementation",
					"    ",
					"    var schemaValidationPassed = true;",
					"    var serviceSchema = pm.environment.get(schema);",
					"    //var jsonData = JSON.parse(pm.responseBody);",
					"",
					"    var validationResult = tv4.validateMultiple(jsonData, serviceSchema, true, true);",
					"    for(var i =0; i<validationResult.errors.length;i++){",
					"        console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  ",
					"        //Skipping all \"Invalid type\" errors as they are expected with current service implementations",
					"        schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);",
					"        //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);",
					"    }    ",
					"    return schemaValidationPassed;",
					"}); "
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7e7d41ba-50b0-48b0-bc52-53d4e572706a",
				"type": "text/javascript",
				"exec": [
					"// check if test is executed",
					"pm.test(\"'\" + request.name +\"' is initiated\", function () {",
					"    //pm.response.to.have.status(200);",
					"    //pm.response.to.be.success;",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"id": "f0f0af4f-b90d-4691-a243-b3f815d00b6b",
			"key": "EPIC",
			"value": "PRODUCT-6323",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}