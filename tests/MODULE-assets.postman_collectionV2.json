{
	"info": {
		"_postman_id": "5aaf5cc2-67b5-4eb3-b586-437a9adef646",
		"name": "MODULE: Assets (actual)",
		"description": "Asset API:\n\n- Custody account API\n- Assets account\n- Portfolio API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Tests",
			"item": [
				{
					"name": "_Test session",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//reset global variables for controling execution flow",
									"eval(globals.cleanup)();",
									"//clear list of executed TestRail tests",
									"pm.environment.set(\"testRailTestsInRun\", \"\");",
									"",
									"//specify list of tests to be executed in exact order",
									"//const testsScope = \"Full\"; [Full|Core|Full+TestRail]",
									"let testsScope = data.testsScope;",
									"//console.log(testsScope); ",
									"",
									"switch (testsScope) {",
									"    case \"Full\":",
									"        var testSession = [",
									"            \"_Generate access token K8S\",",
									"            \"Accounts_Search (C33529902)\",",
									"            \"Accounts_Search_contract iban desc (C38950549)\",",
									"            \"Accounts_Search_contract iban asc (C38950548)\",",
									"            \"Accounts_Search_Account_Number (C37972701)\",",
									"            \"Accounts_Search_Multiple_Names (C38950539)\",",
									"            \"Accounts_Search_AccountType_Current (C38950541)\",",
									"            \"Accounts_Search_Multiple_Account_Number (C38950540)\",",
									"            \"Accounts_Search_AccountType_Multiple (C41083339)\",",
									"            \"Accounts_Search_AccountType_Other (C41083337)\",",
									"            \"Accounts_Search_iban (C38950543)\",",
									"            \"Accounts_Search_multiple_iban (C38950544)\",",
									"            \"Accounts_Search_contractId (C38950547)\",",
									"            \"List of custody accounts (C41736189)\",",
									"            \"List of portfolios (C43024137)\",",
									"            \"Portfolio details (C43024139)\",",
									"            \"Portfolio performance details (C43181629)\",",
									"            \"Portfolio assets details (C43181622)\",",
									"            \"Maturity details (C43181624)\",",
									"            \"Check proper custody account (C41853576)\",",
									"            \"Check proper custody account searched by PortfolioId (C41853577)\",",
									"            \"Custody account details (C41853582)\",",
									"            \"Order_by_amount_asc (C37972704)\",",
									"            \"Order_by_amount_desc (C38719010)\",",
									"            \"Order_by_multiple_criteria (C38763407)\",",
									"            \"Transaction details search by amountForm (C37905040)\",",
									"            \"Transaction details search by amountTo (C37905041)\",",
									"            \"Transaction details search by amountTo-amountFrom (C37905042)\",",
									"            \"set new alias (C37905058)\",",
									"            \"update alias (C37905064)\",",
									"            \"delete alias (C37905066)\"",
									"        ];",
									"        break;",
									"    case \"Core\":",
									"        var testSession = [",
									"            \"_Generate access token K8S\",",
									"            \"Accounts_Search (C33529902)\",",
									"            \"Accounts_Search_contract iban desc (C38950549)\",",
									"            \"Accounts_Search_contract iban asc (C38950548)\",",
									"            \"Accounts_Search_Account_Number (C37972701)\",",
									"            \"Accounts_Search_Multiple_Names (C38950539)\",",
									"            \"Accounts_Search_AccountType_Current (C38950541)\",",
									"            \"Accounts_Search_Multiple_Account_Number (C38950540)\",",
									"            \"Accounts_Search_AccountType_Multiple (C41083339)\",",
									"            \"Accounts_Search_AccountType_Other (C41083337)\",",
									"            \"Accounts_Search_iban (C38950543)\",",
									"            \"Accounts_Search_multiple_iban (C38950544)\",",
									"            \"Accounts_Search_contractId (C38950547)\",",
									"            \"List of custody accounts (C41736189)\",",
									"            \"List of portfolios (C43024137)\",",
									"            \"Portfolio details (C43024139)\",",
									"            //\"Portfolio performance details (C43181629)\",",
									"            \"Portfolio assets details (C43181622)\",",
									"            \"Maturity details (C43181624)\",",
									"            \"Check proper custody account (C41853576)\",",
									"            \"Check proper custody account searched by PortfolioId (C41853577)\",",
									"            \"Custody account details (C41853582)\",",
									"            \"Order_by_amount_asc (C37972704)\",",
									"            \"Order_by_amount_desc (C38719010)\",",
									"            //\"Order_by_multiple_criteria (C38763407)\",",
									"            \"Transaction details search by amountForm (C37905040)\",",
									"            \"Transaction details search by amountTo (C37905041)\",",
									"            \"Transaction details search by amountTo-amountFrom (C37905042)\",",
									"            \"set new alias (C37905058)\",",
									"            \"update alias (C37905064)\",",
									"            \"delete alias (C37905066)\"",
									"            ];",
									"        break;",
									"    case \"ToDo\":",
									"        var testSession = [",
									"            \"Portfolio assets details (C43181622)\",",
									"            \"Maturity details (C43181624)\",",
									"            \"Check proper custody account searched by PortfolioId (C41853577)\"",
									"            ];",
									"        break;",
									"    case \"TestRailClean\":",
									"        var testSession = [",
									"            \"_Test session close\"",
									"        ];",
									"        break;",
									"    default:",
									"        throw new Error(\"No tests selected for execution!\")",
									"}",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(testSession, \"testSession\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "_Generate access token K8S",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae9a03b6-e62e-48de-b80c-7144951c24e0",
								"exec": [
									"var requestsToRun = [",
									"        \"getAuthTestTokenK8S\"",
									"    ]; ",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "da97c8d7-19cf-460d-b66c-1dd884a89f7a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search (C33529902)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search\"",
									"    ]; ",
									"    pm.environment.set(\"request_body\", ('{}'));",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_contract iban desc (C38950549)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_Multiple_criteria_iban_desc\"",
									"    ]; ",
									"",
									"    pm.globals.set(\"_tr_Account_Search_Multiple_criteria_iban_desc\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_contract iban asc (C38950548)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_Multiple_criteria_iban_asc\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_Multiple_criteria_iban_asc\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_Account_Number (C37972701)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"Account_Search_Account number\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Account_Search_Account number\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_Multiple_Names (C38950539)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_Multiple names\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_Multiple names\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_AccountType_Current (C38950541)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_AccountType_Current\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_AccountType_Current\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_Multiple_Account_Number (C38950540)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"Account_Search_Multiple_Account_number\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Account_Search_Multiple_Account_number\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_AccountType_Multiple (C41083339)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_AccountType_Multiple\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_AccountType_Multiple\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_AccountType_Other (C41083337)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_AccountType_Current\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_AccountType_Current\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_iban (C38950543)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_iban\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_iban\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_multiple_iban (C38950544)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_multiple_iban\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_multiple_iban\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_contractId (C38950547)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_iban\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_iban\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "List of custody accounts (C41736189)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get custody accounts\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get custody accounts\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "List of portfolios (C43024137)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_portfolios_list\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_portfolios_list\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Portfolio details (C43024139)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_portfolios_details_list\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_portfolios_details_list\",testRailTestCases);",
									"",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Portfolio performance details (C43181629)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_portfolios_list\",",
									"        \"Get_performance_details\"",
									"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_portfolios_list\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Get_performance_details\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Portfolio assets details (C43181622)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_portfolios_list\",",
									"        \"Get_assets_list\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_portfolios_list\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Get_assets_list\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Maturity details (C43181624)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_maturity_list\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_maturity_list\",testRailTestCases);",
									" ",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check proper custody account (C41853576)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5713fffc-7b09-43bf-9e03-bffd98098ce9",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get custody accounts\",",
									"        \"Get_customer_info_by_his_ID\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get custody accounts\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Get_customer_info_by_his_ID\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e1192972-08b6-4394-ac35-e6f9c77bfb74",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check proper custody account searched by PortfolioId (C41853577)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5713fffc-7b09-43bf-9e03-bffd98098ce9",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get custody accounts\",",
									"        \"Get_customer_info_by_his_ID\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get custody accounts\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Get_customer_info_by_his_ID\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e1192972-08b6-4394-ac35-e6f9c77bfb74",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Custody account details (C41853582)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_customer_info_by_his_ID\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_customer_info_by_his_ID\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search_by_startdate (C37786354)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9c925e79-cbc4-45c9-b49e-603c026695dc",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search_startDate\"",
									"    ]; ",
									"",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_startDate\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a0f68433-3cf6-4e03-beee-2db34084f897",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order_by_amount_desc (C38719010)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search_desc\"",
									"    ]; ",
									"",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_desc\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order_by_multiple_criteria (C38763407)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9c925e79-cbc4-45c9-b49e-603c026695dc",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search_multiple_criteria\"",
									"    ]; ",
									"",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_multiple_criteria\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a0f68433-3cf6-4e03-beee-2db34084f897",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order_by_amount_asc (C37972704)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Transaction details search by amountForm (C37905040)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"AccountId_Transaction_Search_amountFrom\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_amountFrom\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Transaction details search by amountTo (C37905041)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"AccountId_Transaction_Search_amountTo\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_amountTo\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Transaction details search by amountTo-amountFrom (C37905042)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"AccountId_Transaction_Search_multiple_amontFrom_amountTo\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_multiple_amontFrom_amountTo\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "set new alias (C37905058)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"set_alias\",",
									"        \"Account_Search_alias\",",
									"        \"Account_Search_alias_Postconditions\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_set_alias\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Account_Search_alias\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Account_Search_alias_Postconditions\",testRailTestCases);",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "update alias (C37905064)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"set_alias\",",
									"        \"update alias\",",
									"        \"Account_Search_updated_alias\",",
									"        \"Account_Search_alias_Postconditions\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_set_alias\",testRailTestCases);",
									"    pm.globals.set(\"_tr_update alias\",testRailTestCases);",
									"",
									"    pm.globals.set(\"_tr_Account_Search_updated_alias\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Account_Search_alias_Postconditions\",testRailTestCases);",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete alias (C37905066)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"set_alias\",",
									"        \"delete alias\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_set_alias\",testRailTestCases);",
									"    pm.globals.set(\"_tr_delete alias\",testRailTestCases);",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Transaction details search by reference text (C37905050)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9c925e79-cbc4-45c9-b49e-603c026695dc",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search_Reference_Text\"",
									"    ]; ",
									"",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_Reference_Text\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a0f68433-3cf6-4e03-beee-2db34084f897",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Custody account transactions details (C43024136)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get custody account transactions details\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get custody account transactions details\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Custody account position list (C41853583)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get positons for cuacsId\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get positons for cuacsId\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Custody account position details (C42065196)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get custody account positions\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get custody account positions\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Display listing by listing ID (C43995816)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b9bc4495-a6f0-46ac-8545-7470d7df11ce",
								"exec": [
									"//testRailTestCases = \"C43995816\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get listings\",",
									"        \"Get listing by listing ID\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get listings\",\"[precondition]\");",
									"    pm.globals.set(\"_tr_Get listing by listing ID\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Account transaction sorted by amount (C37972704)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b9bc4495-a6f0-46ac-8545-7470d7df11ce",
								"exec": [
									"//testRailTestCases = \"C43995816\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    \"Account_Searchs\",",
									"    \"AccountId_Transaction_Search\"",
									"];",
									"pm.globals.set(\"_tr_Account_Search\");",
									"pm.globals.set(\"_tr_AccountId_Transaction_Search\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\", testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "List trading places (C43995818)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995818\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get trading places\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get trading places\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Display trading place by tradingPlaceId (C43995821)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//testRailTestCases = \"C43995821\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get trading places\",",
									"        \"Get trading place by tradingPlaceId\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get trading places\",\"[precondition]\");",
									"    pm.globals.set(\"_tr_Get trading place by tradingPlaceId\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "_Test session close",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"var requestsToRun = ",
									"    [",
									"        \"Clean TestRail Run\"",
									"    ]; ",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Requests",
			"item": [
				{
					"name": "portfolio request",
					"item": [
						{
							"name": "Get_portfolios_list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81b56885-cb8b-4a7b-866e-ba015f333cbc",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of portfolios and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let portId = pm.environment.get(\"_tmp_portfolioId\");\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioSchema\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"    if (pm.response.code === 200) {\r",
											"        var jsonData = JSON.parse(responseBody)._embedded;\r",
											"        pm.environment.set(\"_tmp_portfolioId\",jsonData.portfolios[0].id);\r",
											"        pm.environment.set(\"_tmp_customerId\",jsonData.portfolios[0].customerId);\r",
											"    \r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_portfolioId\");\r",
											"        pm.environment.unset(\"_tmp_customerId\");\r",
											"    \r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d873ed76-b449-4069-8385-ae5f6ad05400",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_portfolios_details_list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81b56885-cb8b-4a7b-866e-ba015f333cbc",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let portId = pm.environment.get(\"_tmp_portfolioId\");\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioDetailsSchema\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returned orders match to specified cuacsId\", () => {\r",
											"  \r",
											"        result = result && (jsonData.id === portId);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d873ed76-b449-4069-8385-ae5f6ad05400",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_assets_list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ffd52721-d3a2-4bf1-957a-44449ca6c1b8",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let assetNo = pm.environment.get(\"_tmp_portfolioId\");\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"DetailAssets\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "afb4d309-1006-4323-8b87-5ae18115f758",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/assets",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"assets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_assets_list_details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81b56885-cb8b-4a7b-866e-ba015f333cbc",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let assetNo = pm.environment.get(\"_tmp_portfolioId\");\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioDetailsSchema\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returned orders match to specified cuacsId\", () => {\r",
											"  \r",
											"        result = result && (jsonData.id === portId);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d873ed76-b449-4069-8385-ae5f6ad05400",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/assets",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"assets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_maturity_list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81b56885-cb8b-4a7b-866e-ba015f333cbc",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"(jsonData._embedded.maturities.length == 0 ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioDetailsSchema\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d873ed76-b449-4069-8385-ae5f6ad05400",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/maturities",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"maturities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_performance_details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81b56885-cb8b-4a7b-866e-ba015f333cbc",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let assetNo = pm.environment.get(\"_tmp_portfolioId\");\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioPerformanceSchema\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d873ed76-b449-4069-8385-ae5f6ad05400",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/performance",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"performance"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Custody accounts",
					"item": [
						{
							"name": "Get custody accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d015f9cb-901f-4329-bf5c-6cc126cd7e84",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsSchema = pm.environment.get(\"cuacsSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_cuacsId\",jsonData.cuacs[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_cuacsId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88299e46-4ade-4d4c-9252-685fa43e9953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get custody account positions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4611159-c904-440a-82a7-440505aad89f",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Position details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var positionIdSchema = pm.environment.get(\"positionIdSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"positionIdSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"   }); \r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cfcb4a6e-8a10-4683-90e6-a4bd72cfd96c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/positions/{{_tmp_positionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"positions",
										"{{_tmp_positionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get positons for cuacsId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4611159-c904-440a-82a7-440505aad89f",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Position details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsPositionSchema = pm.environment.get(\"cuacsPositionSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsPositionSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"   \r",
											" // store last securityNumber as environment variable\r",
											"    if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_positionsId\",jsonData.positions[0].id);\r",
											"    } else {\r",
											"    pm.environment.unset(\"_tmp_positionsId\");\r",
											"}\r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cfcb4a6e-8a10-4683-90e6-a4bd72cfd96c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/positions",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get transactions for cuacsId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4611159-c904-440a-82a7-440505aad89f",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Transactions details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsPositionSchema = pm.environment.get(\"cuacsPositionSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsIdSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"   \r",
											" // store last securityNumber as environment variable\r",
											"    if (pm.response.code === 200) {\r",
											"        var jsonData = JSON.parse(responseBody)._embedded;\r",
											"        pm.environment.set(\"_tmp_transactionsId\",jsonData.transactions[0].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_transactionsId\");\r",
											"    }\r",
											"\r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cfcb4a6e-8a10-4683-90e6-a4bd72cfd96c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/transactions/",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"transactions",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get custody account positions details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4611159-c904-440a-82a7-440505aad89f",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Position details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var positionIdSchema = pm.environment.get(\"positionIdSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"positionIdSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cfcb4a6e-8a10-4683-90e6-a4bd72cfd96c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/positions/{{_tmp_positionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"positions",
										"{{_tmp_positionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get custody account transactions details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4611159-c904-440a-82a7-440505aad89f",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Transactions details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var positionIdSchema = pm.environment.get(\"positionIdSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsIdDetailsSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cfcb4a6e-8a10-4683-90e6-a4bd72cfd96c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/transactions/{{_tmp_transactionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"transactions",
										"{{_tmp_transactionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_customer_info_by_his_ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "716d6a3a-ef08-41f1-b9f4-ed582ebb8650",
										"exec": [
											"//eval(globals.commonTests)();",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"    let cuacsId = pm.environment.get(\"_tmp_cuacsId\");",
											"    let result = true;",
											"",
											"    pm.test(\"Status 200 OK is displayed\", function() {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsDetSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"",
											"    pm.test(\"Returned orders match to specified cuacsId\", () => {",
											"  ",
											"        result = result && (jsonData.id === cuacsId);",
											"        ",
											"        pm.expect(result).to.be.eql(true);",
											"    });",
											"",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&",
											"    pm.expect(result).to.be.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "851eecab-e9a9-4274-97d4-2984b6f42fc2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Assets",
					"item": [
						{
							"name": "Account_Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[jsonData.page.totalElements-1].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId2\",jsonData.accountList[1].id);\r",
											"    pm.environment.set(\"_tmp_accountIdAlias\",jsonData.accountList[2].id);\r",
											"    pm.environment.set(\"_tmp_accountNumber1\",jsonData.accountList[0].accountNumber);\r",
											"    pm.environment.set(\"_tmp_accountNumber2\",jsonData.accountList[1].accountNumber);\r",
											"    pm.environment.set(\"_tmp_iban1\",jsonData.accountList[0].iban);\r",
											"    pm.environment.set(\"_tmp_iban2\",jsonData.accountList[1].iban);\r",
											"    pm.environment.set(\"_tmp_id1\",jsonData.accountList[0].id);\r",
											"    pm.environment.set(\"_tmp_id2\",jsonData.accountList[1].id);\r",
											"    pm.environment.set(\"_tmp_contractId\",jsonData.accountList[0].contractId);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId2\");\r",
											"    pm.environment.unset(\"_tmp_accountIdAlias\");\r",
											"    pm.environment.unset(\"_tmp_accountNumber1\");\r",
											"    pm.environment.unset(\"_tmp_accountNumber2\");\r",
											"    pm.environment.unset(\"_tmp_iban1\");\r",
											"    pm.environment.unset(\"_tmp_iban2\");\r",
											"    pm.environment.unset(\"_tmp_id1\");\r",
											"    pm.environment.unset(\"_tmp_id2\");\r",
											"    pm.environment.unset(\"_tmp_contractId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=30",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "30"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_account_Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"(jsonData.accountList.length == 0 ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200 && jsonData.accountList.length > 0) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountName\": [\r\n      \"1704 USD\"\r\n    ]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple names",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"(jsonData.accountList.length == 0 ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200 && jsonData.accountList.length > 0) {\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountName\": [\r\n      \"1704 USD\",\"1501 CHF\"\r\n    ]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Account number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\n    \"accountNumber\": [\n      {{_tmp_accountNumber1}}\n    ]\n\t}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_Current",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"CURRENT\"\r\n    ]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_Other",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"OTHER\"\r\n    ]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_Multiple",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"OTHER\",\"CURRENT\"\r\n    ]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple_Account_number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountNumber\": [\r\n      {{_tmp_accountNumber1}},{{_tmp_accountNumber2}}\r\n    ]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_iban",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"iban\": [\r\n      \"{{_tmp_iban1}}\"\r\n    ]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_multiple_iban",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"iban\": [\r\n      \"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"\r\n    ]\r\n\r\n}\r\n}\r\n\r\n\r\n"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"iban\": [\r\n      \"{{_tmp_iban1}}\"\r\n    ]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_ContractId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"iban\": [\r\n      \"{{_tmp_iban1}}\"\r\n    ]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple_criteria_iban_asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"orderBy\": [\r\n{\r\n\"field\": \"AMOUNT\",\r\n\"sortOrder\": \"DESC\"\r\n}\r\n],\r\n\"criteria\": {\r\n\"iban\": [\r\n\"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"\r\n]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple_criteria_iban_desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"orderBy\": [\r\n{\r\n\"field\": \"AMOUNT\",\r\n\"sortOrder\": \"DESC\"\r\n}\r\n],\r\n\"criteria\": {\r\n\"iban\": [\r\n\"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"\r\n]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}\n"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_multiple_criteria",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var transactionDate = new Date('2019-01-01').getTime();\r",
											"    var endDate = new Date('2019-04-18').getTime();\r",
											"    let amountFrom = pm.environment.get(\"100.01\");\r",
											"    let amountTo = pm.environment.get(\"5001.21\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Returned orders match to specified transactions startDate 2019-01-01 \", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (transactionDate < convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Returned orders match to specified transactions endDate 2019-04-18 and after\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (endDate > convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont from\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountFrom <= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont to\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountTo <= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-04-18\",\n\n\"amountFrom\": 100.01,\n\"amountTo\": 50001.21\n}\n}\n"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"(jsonData.transactionGroups.length == 0 ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_startDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecd40e93-9b80-4437-b319-03809ab3c16d",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var transactionDate = new Date('2019-01-01').getTime();\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-01-01 and after\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (transactionDate < convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4c4df630-60fa-4d17-ab38-04e96c515c23",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\"\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_Reference_Text",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecd40e93-9b80-4437-b319-03809ab3c16d",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var referenceText = null;\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"reference text is null\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var refText = new Date(jsonData.transactionGroups[0].transactions[0].referenceText[x].referenceText);\r",
											"            result = result && (referenceText === refText);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4c4df630-60fa-4d17-ab38-04e96c515c23",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"referenceText\":null\n\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_amountFrom",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecd40e93-9b80-4437-b319-03809ab3c16d",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"(jsonData.transactionGroups.length == 0 ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    \r",
											"    let amountFrom = pm.environment.get(\"1000.01\");\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont from\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountFrom <= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4c4df630-60fa-4d17-ab38-04e96c515c23",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"criteria\": {\r\n\"startDate\": \"2019-01-01\",\r\n\"amountFrom\":\"1000.01\"\r\n}\r\n}\r\n'date is set if contract don`t have transactions in last 30 days'"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "set_alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecd40e93-9b80-4437-b319-03809ab3c16d",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"aliasSet\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											" \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4c4df630-60fa-4d17-ab38-04e96c515c23",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"alias\": \"test\"\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountIdAlias}}/alias",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountIdAlias}}",
										"alias"
									]
								}
							},
							"response": []
						},
						{
							"name": "update alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecd40e93-9b80-4437-b319-03809ab3c16d",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"aliasSet\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4c4df630-60fa-4d17-ab38-04e96c515c23",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"alias\": \"test2\"\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountIdAlias}}/alias",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountIdAlias}}",
										"alias"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecd40e93-9b80-4437-b319-03809ab3c16d",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"aliasSet\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4c4df630-60fa-4d17-ab38-04e96c515c23",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountIdAlias}}/alias",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountIdAlias}}",
										"alias"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"(jsonData.accountList.length == 0 ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    let accountNm = \"test\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"alias name is correct\", () => {\r",
											"        for(var x = 0;x<jsonData.accountList[0].accountName;x++) {\r",
											"            result = result && (jsonData.accountList[0].accountName[x].accountName === accountNm);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\n    \"accountName\": [\n      \"test\"\n    ]\n\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=20",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_updated_alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accountNm = \"test\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    for(var x = 0;x<jsonData.accountList[0].accountName;x++) {\r",
											"        result = result && (jsonData.accountList[0].accountName[x].accountName === accountNm);\r",
											"    }\r",
											"    pm.test(\"alias name is correct\", () => {\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    });    \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"    && pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\n    \"accountName\": [\n      \"test\"\n    ]\n\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=20",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_alias_Postconditions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accountNm = \"test\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    for(var x = 0;x<jsonData.accountList[0].accountName;x++) {\r",
											"        result = result && (jsonData.accountList[0].accountName[x].accountName === accountNm);\r",
											"    }\r",
											"    pm.test(\"alias name is correct\", () => {\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"    && pm.expect(result).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\n    \"accountName\": null\n\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=20",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_amountTo",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecd40e93-9b80-4437-b319-03809ab3c16d",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"(jsonData.transactionGroups.length == 0 ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    let amountTo = pm.environment.get(\"7357519.45\");\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont from\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountTo >= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4c4df630-60fa-4d17-ab38-04e96c515c23",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"criteria\": {\r\n\"startDate\": \"2019-01-01\",\r\n\"amountFrom\":\"5000.01\"\r\n}\r\n}\r\n'date is set if contract don`t have transactions in last 30 days'"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_endDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9d13462-ee76-4199-8ab8-6e275e364db7",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var transactionDate = new Date(\"2019-12-32\");\r",
											"    var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions endDate 2019-12-31\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (convertedtransactionDate > convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6d8403be-621e-462e-aba3-4132a1aaa398",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"endDate\": \"2019-12-31\"\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_multiple_amontFrom_amountTo",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"(jsonData.transactionGroups.length == 0 ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var transactionDate = new Date('2019-01-01').getTime();\r",
											"    var endDate = new Date('2019-04-18').getTime();\r",
											"    let amountFrom = pm.environment.get(\"100.01\");\r",
											"    let amountTo = pm.environment.get(\"1000.01\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"     pm.test(\"Check proper value for transactions amont from\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountFrom >= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont to\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountTo <= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"amountFrom\": 100.01,\n\"amountTo\": 1001.21\n}\n}\n"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_startDate&endDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecd40e93-9b80-4437-b319-03809ab3c16d",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var startDate = new Date('2019-01-01').getTime();\r",
											"    var endDate = new Date('2019-10-29').getTime();\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-01-01\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (startDate <= convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-10-29\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (endDate >= convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    });\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4c4df630-60fa-4d17-ab38-04e96c515c23",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-10-29\"\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecd40e93-9b80-4437-b319-03809ab3c16d",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var startDate = new Date('2019-01-01').getTime();\r",
											"    var endDate = new Date('2019-10-29').getTime();\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-01-01\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (startDate <= convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-10-29\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (endDate >= convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    });\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4c4df630-60fa-4d17-ab38-04e96c515c23",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-10-29\"\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_list_of_all_accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81b56885-cb8b-4a7b-866e-ba015f333cbc",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of portfolios is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsSchema = pm.environment.get(\"portfolioSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, portfolioSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last portfolioId as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_portfolioId\",jsonData.portfolios[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_portfolioId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d873ed76-b449-4069-8385-ae5f6ad05400",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Filter_account_by_customerId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "81b56885-cb8b-4a7b-866e-ba015f333cbc",
								"exec": [
									"//eval(globals.commonTests)();\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of portfolios is retrieved and response schema i validated\", function () {\r",
									"\r",
									"    var schemaValidationPassed = true;\r",
									"    //var cuacsSchema = pm.environment.get(\"portfolioSchema\");\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									"    \r",
									"    pm.test(\"Status 200 OK is displayed\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response schema is correct\", () => {\r",
									"\r",
									"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioSchema\",jsonData);\r",
									"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
									"    }); \r",
									"    \r",
									"    pm.response.to.have.status(200)\r",
									"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, portfolioSchema)).to.be.true;\r",
									"});\r",
									"\r",
									"// store last portfolioId as environment variable\r",
									"if (pm.response.code === 200) {\r",
									"    var jsonData = JSON.parse(responseBody)._embedded;\r",
									"    pm.environment.set(\"_tmp_portfolioId\",jsonData.portfolios[0].id);\r",
									"} else {\r",
									"    pm.environment.unset(\"_tmp_portfolioId\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d873ed76-b449-4069-8385-ae5f6ad05400",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json; charset=UTF-8"
							},
							{
								"key": "accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios",
							"host": [
								"{{env_assets}}"
							],
							"path": [
								"assets",
								"portfolios",
								"{{tenantId_assets}}",
								"v1",
								"portfolios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clean TestRail Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5d00dc8-f552-48c0-9a1c-2510df583464",
								"exec": [
									"// Prepare list of TestRail tests for 'Clean TestRail Run' request",
									"//var execTests = pm.globals.get(\"testRailTestsInRun\");",
									"var execTests = data.executedTests;",
									"console.log(\"TestRail, tests executed in last run: \" + execTests);",
									"execTests = execTests.replace(/C/g, \"\");",
									"//console.log(\"TestRail, first cleanup: \" + execTests);",
									"execTests = execTests.replace(/ /g, \", \");",
									"//console.log(\"TestRail, second cleanup: \" + execTests);",
									"execTests = execTests.replace(/,,/g, \",\");",
									"pm.globals.set(\"testRailTestsInRun\", execTests); ",
									"",
									"var array = JSON.parse(\"[\" + execTests + \"]\"); //convert string to array",
									"for(let i = 0; i < 10; i++){",
									"    let runId = JSON.parse(responseBody)[i].id;",
									"    let runName = JSON.parse(responseBody)[i].name;",
									"    let runSuiteId = JSON.parse(responseBody)[i].suite_id;",
									"    if (runName === \"Postman API Tests\") { //determine proper run",
									"        //console.log(runId);   ",
									"        console.log(\"TestRail run '\" + runId + \"' updating for tests: \" + execTests);",
									"        pm.sendRequest({",
									"            url: \"https://testrail.ebs.crealogix.net/index.php?/api/v2/update_run/\" + runId,",
									"            method: \"POST\",",
									"            header: {",
									"                \"Authorization\": \"Basic bWlsYW4ua2FyYWRlZ2xpY0BjcmVhbG9naXguY29tOlNTQ25hcG9saTEyMzQ1Njc4OQ==\",",
									"                \"Content-Type\": \"application/json\"",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ include_all: false, case_ids: array })",
									"        \t}",
									"        });",
									"        break;",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "22f2990b-adb1-4668-a6e9-92884e953577",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "SSCnapoli123456789",
									"type": "string"
								},
								{
									"key": "username",
									"value": "milan.karadeglic@crealogix.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json; charset=UTF-8"
							},
							{
								"key": "accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://testrail.ebs.crealogix.net/index.php?/api/v2/get_runs/8",
							"protocol": "https",
							"host": [
								"testrail",
								"ebs",
								"crealogix",
								"net"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "/api/v2/get_runs/8",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ccec0506-e73d-4d68-9d5f-9279cd293966",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ab58dd07-a10d-4922-b20e-d437367a281a",
						"type": "text/javascript",
						"exec": [
							"eval(globals.sessionNavigate)();",
							"pm.globals.unset(\"_tr_\" + request.name);"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tools",
			"item": [
				{
					"name": "Generate token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b9bc4495-a6f0-46ac-8545-7470d7df11ce",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e52f8e20-bd73-4f36-af86-6e4a5f9353f6",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
									"    pm.response.to.not.be.error;",
									"    //pm.response.to.be.withBody;",
									"    pm.environment.set(\"access_token\", pm.response.text());",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"tenant_id\": {{tenantId_assets}},\n  \"acsKey\": \"i6PiNObtdp2rCNW7mlV51BDSY4zAliSvBCyVsuML1000203567\",\n  \"tenant_name\": \"{{tenantName_security}}\",\n  \"user_name\": \"{{userId_security}}\",\n  \"contractNo\": \"{{contractNo_security}}\",\n  \"languageCode\": \"en\",\n  \"bcNo\": \"{{bcNo_security}}\",\n  \"authorities\": [],\n  \"client_id\": \"postman\",\n  \"user_id\": {{userId_security}},\n  \"scope\": [\n\t\"https://api.crealogix.com/dban\",\n\t\"read\",\n\t\"write\",\n\t\"https://api.crealogix.com/contracts/contract.advisor.readonly\",\n\t\"https://api.crealogix.com/contracts/contract.metadata.readonly\",\n\t\"https://api.crealogix.com/contracts/contract.person.readonly\",\n\t\"https://api.crealogix.com/payments/payment.initiate\",\n\t\"https://api.crealogix.com/payments/payment.read\",\n\t\"https://api.crealogix.com/payments/payment.write\",\n\t\"https://api.crealogix.com/assets/account#read\",\n\t\"https://api.crealogix.com/assets/account/read\",\n\t\"https://api.crealogix.com/assets/account.transaction#read\",\n\t\"https://api.crealogix.com/assets/account.name\",\n\t\"https://api.crealogix.com/assets/account.image\",\n\t\"https://api.crealogix.com/assets/cuac#read\",\n\t\"https://api.crealogix.com/assets/portfolio#read\",\n\t\"https://api.crealogix.com/messages/securemail.write\",\n\t\"https://api.crealogix.com/messages/securemail.read\",\n\t\"https://api.crealogix.com/messages/document.category.read\",\n\t\"https://api.crealogix.com/messages/document.category.write\",\n\t\"https://api.crealogix.com/messages/document.write\",\n\t\"https://api.crealogix.com/messages/document.read\",\n\t\"https://api.crealogix.com/brokerage/order\",\n    \"https://api.crealogix.com/brokerage/order#read\",\t\n\t\"https://api.crealogix.com/brokerage/security#read\",\n    \"https://api.crealogix.com/brokerage/tradingplace#read\",\t\n    \"https://api.crealogix.com/brokerage/depository#read\",\n\t\"https://api.crealogix.com/deeplink/domains\",\n\t\"https://api.crealogix.com/deeplink/links\"\n  ],\n  \"loginName\": \"{{userId_security}}\",\n  \"exp\": 32479694642,\n  \"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\n  \"iat\": 1553855569\n}"
						},
						"url": {
							"raw": "{{env_security_testToken}}",
							"host": [
								"{{env_security_testToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAuthTestTokenK8S old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9e77f489-363b-4a53-9c9f-58be8e9678c8",
								"exec": [
									"console.log(\"Test Token url is: \" + pm.environment.get(\"env_security_testToken\"));",
									"console.log(\"Contract is: \" + pm.environment.get(\"userId_security\"));",
									"",
									"// Set up pre-conditions with Chai Assertion library. https://www.chaijs.com/api/bdd/",
									"/*",
									"pm.expect(pm.environment.get(\"env_securemail\")).to.be.a('string', \"The env_securemail is not defined\");",
									"pm.expect(pm.environment.get(\"env_security_testToken\")).to.be.a('string', \"The testTokenUrl is not defined\");",
									"pm.expect(pm.environment.get(\"tenantId_security\")).to.be.a('string', \"The tenantId is not defined\");",
									"pm.expect(pm.environment.get(\"tenantName_security\")).to.be.a('string', \"The tenantName is not defined\");",
									"pm.expect(pm.environment.get(\"userName_security\")).to.be.a('string', \"The userName is not defined\");",
									"pm.expect(pm.environment.get(\"contractNo_security\")).to.be.a('string', \"The contractNo is not defined\");",
									"pm.expect(pm.environment.get(\"bcNo_security\")).to.be.a('string', \"The bcNo is not defined\");",
									"pm.expect(pm.environment.get(\"userId_security\")).to.be.a('string', \"The userId is not defined\");",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "095f7911-c115-4798-9cc5-f06e06819ef3",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
									"    pm.response.to.not.be.error;",
									"    //pm.response.to.be.withBody;",
									"    let token = pm.response.text();",
									"    pm.environment.set(\"access_token\", token);",
									"    pm.environment.set(\"dltoken\", token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"tenant_id\": {{tenantId_security}},\r\n  \"acsKey\": \"i6PiNObtdp2rCNW7mlV51BDSY4zAliSvBCyVsuML1000203567\",\r\n  \"tenant_name\": \"{{tenantName_security}}\",\r\n  \"user_name\": \"{{userId_security}}\",\r\n  \"contractNo\": \"{{contractNo_security}}\",\r\n  \"languageCode\": \"en\",\r\n  \"bcNo\": \"{{bcNo_security}}\",\r\n  \"authorities\": [\"DBAN_ADMIN\", \"DBAN_USER\"],\r\n  \"client_id\": \"postman\",\r\n  \"user_id\": {{userId_security}},\r\n  \"scope\": [\r\n\t\"https://api.crealogix.com/dban\",\r\n\t\"read\",\r\n\t\"write\",\r\n\t\"https://api.crealogix.com/contracts/contract.advisor.readonly\",\r\n\t\"https://api.crealogix.com/contracts/contract.metadata.readonly\",\r\n\t\"https://api.crealogix.com/contracts/contract.person.readonly\",\r\n\t\"https://api.crealogix.com/payments/payment.initiate\",\r\n\t\"https://api.crealogix.com/payments/payment.read\",\r\n\t\"https://api.crealogix.com/payments/payment.write\",\r\n\t\"https://api.crealogix.com/assets/account#read\",\r\n\t\"https://api.crealogix.com/assets/account/read\",\r\n\t\"https://api.crealogix.com/assets/account.transaction#read\",\r\n\t\"https://api.crealogix.com/assets/account.name\",\r\n\t\"https://api.crealogix.com/assets/account.image\",\r\n\t\"https://api.crealogix.com/assets/cuac#read\",\r\n\t\"https://api.crealogix.com/assets/portfolio#read\",\r\n\t\"https://api.crealogix.com/messages/securemail.write\",\r\n\t\"https://api.crealogix.com/messages/securemail.read\",\r\n\t\"https://api.crealogix.com/messages/document.category.read\",\r\n\t\"https://api.crealogix.com/messages/document.category.write\",\r\n\t\"https://api.crealogix.com/messages/document.write\",\r\n\t\"https://api.crealogix.com/messages/document.read\",\r\n\t\"https://api.crealogix.com/brokerage/order\",\r\n    \"https://api.crealogix.com/brokerage/order#read\",\t\r\n\t\"https://api.crealogix.com/brokerage/security#read\",\r\n    \"https://api.crealogix.com/brokerage/tradingplace#read\",\t\r\n    \"https://api.crealogix.com/brokerage/depository#read\",\r\n\t\"https://api.crealogix.com/deeplink/domains\",\r\n\t\"https://api.crealogix.com/deeplink/links\"\r\n  ],\r\n  \"loginName\": \"{{userId_security}}\",\r\n  \"exp\": 32479694642,\r\n  \"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\r\n  \"iat\": 1553855569\r\n}"
						},
						"url": {
							"raw": "{{env_security_testToken}}",
							"host": [
								"{{env_security_testToken}}"
							]
						},
						"description": "Retrieve the test token"
					},
					"response": []
				},
				{
					"name": "getAuthTestTokenK8S",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "60eb57dd-3145-4cfa-91a0-cebdfdb7f912",
								"exec": [
									"console.log(\"Test Token url is: \" + pm.environment.get(\"env_security_testToken\"));",
									"console.log(\"Contract is: \" + pm.environment.get(\"userId_security\"));",
									"",
									"let now = Math.round(new Date().getTime() / 1000); // now in seconds",
									"let day = 86400; // one day in seconds",
									"let claims = {",
									"    \"bcNo\": \"12312\",",
									"    \"contractNo\": \"{{userName_security}}\",",
									"    \"loginName\": \"{{userId_security}}\",",
									"    \"language\": \"en-US\",",
									"    \"nonce\": \"{{$guid}}\",",
									"    \"jti\": \"AT.2.UT.{{$guid}}\",",
									"    \"iat\": now,",
									"    \"exp\": now + day",
									"};",
									"Object.keys(claims).forEach(key => postman.setEnvironmentVariable(key, claims[key]));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0b32731f-6381-4abc-ab5c-6b6b6d7cb4ce",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
									"    pm.response.to.not.be.error;",
									"    //pm.response.to.be.withBody;",
									"    let token = pm.response.text();",
									"    pm.environment.set(\"access_token\", token);",
									"    pm.environment.set(\"dltoken\", token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"tenant_id\": {{tenantId_security}},\r\n  \"acsKey\": \"i6PiNObtdp2rCNW7mlV51BDSY4zAliSvBCyVsuML1000203567\",\r\n  \"tenant_name\": \"{{tenantName_security}}\",\r\n  \"user_name\": \"{{userId_security}}\",\r\n  \"contractNo\": \"{{contractNo_security}}\",\r\n  \"loginName\": \"{{userId_security}}\",  \r\n  \"sub\": \"{{bcNo}}:{{contractNo}}\",\r\n  \"preferred_user_name\": \"{{loginName}}\",\r\n  \"language\": \"{{language}}\",  \r\n  \"bcNo\": \"{{bcNo_security}}\",\r\n  \"nonce\": \"{{nonce}}\",\r\n  \"jti\": \"{{jti}}\",\r\n  \"iat\": {{iat}},\r\n  \"exp\": {{exp}},  \r\n  \"authorities\": [\"DBAN_ADMIN\", \"DBAN_USER\"],\r\n  \"aud\": [\"dban\"],\r\n  \"client_id\": \"postman\",\r\n  \"user_id\": {{userId_security}},\r\n  \"scope\": [\r\n\t\"https://api.crealogix.com/dban\",\r\n\t\"read\",\r\n\t\"write\",\r\n\t\"https://api.crealogix.com/contracts/contract.advisor.readonly\",\r\n\t\"https://api.crealogix.com/contracts/contract.metadata.readonly\",\r\n\t\"https://api.crealogix.com/contracts/contract.person.readonly\",\r\n\t\"https://api.crealogix.com/payments/payment.initiate\",\r\n\t\"https://api.crealogix.com/payments/payment.read\",\r\n\t\"https://api.crealogix.com/payments/payment.write\",\r\n\t\"https://api.crealogix.com/assets/account#read\",\r\n\t\"https://api.crealogix.com/assets/account/read\",\r\n\t\"https://api.crealogix.com/assets/account.transaction#read\",\r\n\t\"https://api.crealogix.com/assets/account.name\",\r\n\t\"https://api.crealogix.com/assets/account.image\",\r\n\t\"https://api.crealogix.com/assets/cuac#read\",\r\n\t\"https://api.crealogix.com/assets/portfolio#read\",\r\n\t\"https://api.crealogix.com/messages/securemail.write\",\r\n\t\"https://api.crealogix.com/messages/securemail.read\",\r\n\t\"https://api.crealogix.com/messages/document.category.read\",\r\n\t\"https://api.crealogix.com/messages/document.category.write\",\r\n\t\"https://api.crealogix.com/messages/document.write\",\r\n\t\"https://api.crealogix.com/messages/document.read\",\r\n\t\"https://api.crealogix.com/brokerage/order\",\r\n    \"https://api.crealogix.com/brokerage/order#read\",\t\r\n\t\"https://api.crealogix.com/brokerage/security#read\",\r\n    \"https://api.crealogix.com/brokerage/tradingplace#read\",\t\r\n    \"https://api.crealogix.com/brokerage/depository#read\",\r\n\t\"https://api.crealogix.com/deeplink/domains\",\r\n\t\"https://api.crealogix.com/deeplink/links\"\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{env_security_testToken}}",
							"host": [
								"{{env_security_testToken}}"
							]
						},
						"description": "Retrieve the test token"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c965b63b-029c-48cf-9494-4e37e2127db6",
						"type": "text/javascript",
						"exec": [
							"eval(globals.sessionNavigate)();",
							"pm.globals.unset(\"_tr_\" + request.name);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e62f3264-5234-4570-92c4-0036d16168de",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "cc52a1da-bedb-499b-9889-bd5c4a2f665c",
				"type": "text/javascript",
				"exec": [
					"//************************************************************************************************",
					"// variable initialization************************************************************************",
					"//************************************************************************************************",
					"var test = pm.environment.get(\"testRailTestsInRun\");",
					"if( !test) {",
					"    pm.environment.set(\"testRailTestsInRun\",\"\");",
					"}",
					"",
					"//************************************************************************************************",
					"// connect to TestRail ***************************************************************************",
					"//************************************************************************************************",
					"pm.globals.set(\"TESTRAIL_DOMAIN\",\"testrail.ebs.crealogix.net\");",
					"pm.globals.set(\"TESTRAIL_USERNAME\",\"milan.karadeglic@crealogix.com\"); ",
					"pm.globals.set(\"TESTRAIL_APIKEY\",\"Q4MlDw1e70Kxh1g1YPq9-Dg0abDWer.pSWcVWcxO4\");",
					"pm.globals.set(\"TESTRAIL_PROJECTID\",8); ",
					"pm.globals.set(\"TESTRAIL_TITLE\",\"Postman API Tests\");",
					"",
					"//************************************************************************************************",
					"// Schema for 'Custody accounts'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const cuacsSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"cuacs\"",
					"      ],",
					"      \"properties\": {",
					"        \"cuacs\": {",
					"          \"$id\": \"#/properties/_embedded/properties/cuacs\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Cuacs Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/cuacs/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"id\",",
					"              \"custodyAccountNumber\",",
					"              \"lastChangeAt\",",
					"              \"valueCustodyCurrency\",",
					"              \"valueCustomerCurrency\",",
					"              \"valuePortfolioCurrency\",",
					"              \"yearEndValue\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__35695a31497042534976574d443565538b03820c945d6ab2c410438ef238fdba2c7e\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"custodyAccountNumber\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/custodyAccountNumber\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Custodyaccountnumber Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"771000061502\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"lastChangeAt\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/lastChangeAt\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Lastchangeat Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"2013-06-25T17:16:49\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"valueCustodyCurrency\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustodyCurrency\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Valuecustodycurrency Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustodyCurrency/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustodyCurrency/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      24558.32",
					"                    ]",
					"                  }",
					"                }",
					"              },",
					"              \"valueCustomerCurrency\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustomerCurrency\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Valuecustomercurrency Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustomerCurrency/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustomerCurrency/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      24558.32",
					"                    ]",
					"                  }",
					"                }",
					"              },",
					"              \"valuePortfolioCurrency\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valuePortfolioCurrency\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Valueportfoliocurrency Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valuePortfolioCurrency/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valuePortfolioCurrency/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      24558.32",
					"                    ]",
					"                  }",
					"                }",
					"              },",
					"              \"yearEndValue\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/yearEndValue\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Yearendvalue Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/yearEndValue/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/yearEndValue/properties/value\",",
					"                    \"type\": \"null\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": null,",
					"                    \"examples\": [",
					"                      null",
					"                    ]",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            3",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"};",
					"pm.environment.set(\"cuacsSchema\", cuacsSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'Assets details'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const assetsDetails = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/example.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"checked\",",
					"    \"dimensions\",",
					"    \"id\",",
					"    \"name\",",
					"    \"price\",",
					"    \"tags\"",
					"  ],",
					"  \"properties\": {",
					"    \"checked\": {",
					"      \"$id\": \"/properties/checked\",",
					"      \"type\": \"boolean\",",
					"      \"title\": \"The Checked Schema\",",
					"      \"default\": false,",
					"      \"examples\": [",
					"        false",
					"      ]",
					"    },",
					"    \"dimensions\": {",
					"      \"$id\": \"/properties/dimensions\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Dimensions Schema\",",
					"      \"required\": [",
					"        \"width\",",
					"        \"height\"",
					"      ],",
					"      \"properties\": {",
					"        \"width\": {",
					"          \"$id\": \"/properties/dimensions/properties/width\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Width Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            5",
					"          ]",
					"        },",
					"        \"height\": {",
					"          \"$id\": \"/properties/dimensions/properties/height\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Height Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"id\": {",
					"      \"$id\": \"/properties/id\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        1",
					"      ]",
					"    },",
					"    \"name\": {",
					"      \"$id\": \"/properties/name\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Name Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"A green door\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"price\": {",
					"      \"$id\": \"/properties/price\",",
					"      \"type\": \"number\",",
					"      \"title\": \"The Price Schema\",",
					"      \"default\": 0.0,",
					"      \"examples\": [",
					"        12.5",
					"      ]",
					"    },",
					"    \"tags\": {",
					"      \"$id\": \"/properties/tags\",",
					"      \"type\": \"array\",",
					"      \"title\": \"The Tags Schema\",",
					"      \"items\": {",
					"        \"$id\": \"/properties/tags/items\",",
					"        \"type\": \"string\",",
					"        \"title\": \"The 0 Schema\",",
					"        \"default\": \"\",",
					"        \"examples\": [",
					"          \"home\",",
					"          \"green\"",
					"        ],",
					"        \"pattern\": \"^(.*)$\"",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"assetsDetails\", assetsDetails);",
					"//************************************************************************************************",
					"// Schema for 'DetailAssets'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const DetailAssets = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"assets\"",
					"      ],",
					"      \"properties\": {",
					"        \"assets\": {",
					"          \"$id\": \"#/properties/_embedded/properties/assets\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Assets Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/assets/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"id\",",
					"              \"assetNumber\",",
					"              \"assetType\",",
					"              \"amount\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__4b3261526f43483250734f78384c3965cf43b264b6ab4c579325cbffc35ebda4ee4eae\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"assetNumber\": {",
					"                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/assetNumber\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Assetnumber Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"1000001704\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"assetType\": {",
					"                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/assetType\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Assettype Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"ACCOUNT\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"amount\": {",
					"                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Amount Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"USD\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      123493.65",
					"                    ]",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            20",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"DetailAssets\", DetailAssets);",
					"",
					"//************************************************************************************************",
					"// Schema for 'cuacs detail Schema' *************************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const cuacsDetSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"custodyAccountNumber\",",
					"    \"lastChangeAt\",",
					"    \"valueCustodyCurrency\",",
					"    \"valueCustomerCurrency\",",
					"    \"valuePortfolioCurrency\",",
					"    \"yearEndValue\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d443565538a54737638399ab0eef3b93ecb4eec4c5f\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"custodyAccountNumber\": {",
					"      \"$id\": \"#/properties/custodyAccountNumber\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Custodyaccountnumber Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"771000061502\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"lastChangeAt\": {",
					"      \"$id\": \"#/properties/lastChangeAt\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Lastchangeat Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2013-06-25T17:16:49\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"valueCustodyCurrency\": {",
					"      \"$id\": \"#/properties/valueCustodyCurrency\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Valuecustodycurrency Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/valueCustodyCurrency/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/valueCustodyCurrency/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0.0,",
					"          \"examples\": [",
					"            24558.32",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"valueCustomerCurrency\": {",
					"      \"$id\": \"#/properties/valueCustomerCurrency\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Valuecustomercurrency Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/valueCustomerCurrency/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/valueCustomerCurrency/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0.0,",
					"          \"examples\": [",
					"            24558.32",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"valuePortfolioCurrency\": {",
					"      \"$id\": \"#/properties/valuePortfolioCurrency\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Valueportfoliocurrency Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/valuePortfolioCurrency/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/valuePortfolioCurrency/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0.0,",
					"          \"examples\": [",
					"            24558.32",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"yearEndValue\": {",
					"      \"$id\": \"#/properties/yearEndValue\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Yearendvalue Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/yearEndValue/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/yearEndValue/properties/value\",",
					"          \"type\": \"null\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": null,",
					"          \"examples\": [",
					"            null",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"cuacsDetSchema\", cuacsDetSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'custody account positions' ********************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const cuacsPositionSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"positions\"",
					"      ],",
					"      \"properties\": {",
					"        \"positions\": {",
					"          \"$id\": \"#/properties/_embedded/properties/positions\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Positions Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/positions/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"id\",",
					"              \"amount\",",
					"              \"calculationFrom\",",
					"              \"exportTime\",",
					"              \"maturityDate\",",
					"              \"salePermitted\",",
					"              \"timeToMaturity\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__35695a31497042534976574d443565538a54737638399ab0eef3b93ecb4eec4c5f\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"amount\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/amount\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Amount Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"calculationFrom\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/calculationFrom\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Calculationfrom Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"exportTime\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/exportTime\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Exporttime Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"2019-11-04T23:11:08\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"maturityDate\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/maturityDate\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Maturitydate Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"salePermitted\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/salePermitted\",",
					"                \"type\": \"boolean\",",
					"                \"title\": \"The Salepermitted Schema\",",
					"                \"default\": false,",
					"                \"examples\": [",
					"                  false",
					"                ]",
					"              },",
					"              \"timeToMaturity\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/timeToMaturity\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Timetomaturity Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            8",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"cuacsPositionSchema\", cuacsPositionSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'accountSearch' ********************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const accountSearchSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"accountList\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"accountList\": {",
					"      \"$id\": \"#/properties/accountList\",",
					"      \"type\": \"array\",",
					"      \"title\": \"The Accountlist Schema\",",
					"      \"items\": {",
					"        \"$id\": \"#/properties/accountList/items\",",
					"        \"type\": \"object\",",
					"        \"title\": \"The Items Schema\",",
					"        \"required\": [",
					"          \"accountName\",",
					"          \"accountType\",",
					"          \"accountNumber\",",
					"          \"advisorId\",",
					"          \"bank\",",
					"          \"balances\",",
					"          \"contractId\",",
					"          \"creditInterest\",",
					"          \"currencyIsoCode\",",
					"          \"customerName\",",
					"          \"debtInterest\",",
					"          \"defaultDebtAccount\",",
					"          \"description\",",
					"          \"formattedAccountNumber\",",
					"          \"iban\",",
					"          \"id\",",
					"          \"overdraftInterest\",",
					"          \"overdraftLimit\",",
					"          \"portfolioId\",",
					"          \"permissions\"",
					"        ],",
					"        \"properties\": {",
					"          \"accountName\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/accountName\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accountname Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"1704 USD\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"accountType\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/accountType\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accounttype Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"CURRENT\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"accountNumber\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/accountNumber\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accountnumber Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"1000001704\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"advisorId\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/advisorId\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Advisorid Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"bank\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/bank\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Bank Schema\",",
					"            \"required\": [",
					"              \"bic\",",
					"              \"institutionId\",",
					"              \"name\"",
					"            ],",
					"            \"properties\": {",
					"              \"bic\": {",
					"                \"$id\": \"#/properties/accountList/items/properties/bank/properties/bic\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Bic Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"CLXNCHZZMDB\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"institutionId\": {",
					"                \"$id\": \"#/properties/accountList/items/properties/bank/properties/institutionId\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Institutionid Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"12312\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"name\": {",
					"                \"$id\": \"#/properties/accountList/items/properties/bank/properties/name\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Name Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"CLX EBS\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              }",
					"            }",
					"          },",
					"          \"balances\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/balances\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Balances Schema\",",
					"            \"required\": [",
					"              \"availableAmount\",",
					"              \"balance\"",
					"            ],",
					"            \"properties\": {",
					"              \"availableAmount\": {",
					"                \"$id\": \"#/properties/accountList/items/properties/balances/properties/availableAmount\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Availableamount Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/accountList/items/properties/balances/properties/availableAmount/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"USD\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/accountList/items/properties/balances/properties/availableAmount/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      123493.65",
					"                    ]",
					"                  }",
					"                }",
					"              },",
					"              \"balance\": {",
					"                \"$id\": \"#/properties/accountList/items/properties/balances/properties/balance\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Balance Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/accountList/items/properties/balances/properties/balance/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"USD\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/accountList/items/properties/balances/properties/balance/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      123493.65",
					"                    ]",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          },",
					"          \"contractId\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/contractId\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Contractid Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"creditInterest\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/creditInterest\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Creditinterest Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"currencyIsoCode\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/currencyIsoCode\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Currencyisocode Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"USD\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"customerName\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/customerName\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Customername Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"Harry Hasler\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"debtInterest\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/debtInterest\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Debtinterest Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"defaultDebtAccount\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/defaultDebtAccount\",",
					"            \"type\": \"boolean\",",
					"            \"title\": \"The Defaultdebtaccount Schema\",",
					"            \"default\": false,",
					"            \"examples\": [",
					"              false",
					"            ]",
					"          },",
					"          \"description\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/description\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Description Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"Foreign Currency Account\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"formattedAccountNumber\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/formattedAccountNumber\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Formattedaccountnumber Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"CH0212312001000001704\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"iban\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/iban\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Iban Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"CH0212312001000001704\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"id\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/id\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Id Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"__ID__4b3261526f43483250734f78384c3965cc48b362e94b60cd080a60990c2efce58ee3e0\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"overdraftInterest\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/overdraftInterest\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Overdraftinterest Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"overdraftLimit\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/overdraftLimit\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Overdraftlimit Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"portfolioId\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/portfolioId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Portfolioid Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"__ID__4b3261526f43483250734f78384c3965ca49b8b0f88c4c4ed50ead239f733eaef42f42\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"permissions\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/permissions\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The Permissions Schema\",",
					"            \"items\": {",
					"              \"$id\": \"#/properties/accountList/items/properties/permissions/items\",",
					"              \"type\": \"object\",",
					"              \"title\": \"The Items Schema\",",
					"              \"required\": [",
					"                \"accountId\",",
					"                \"contractId\",",
					"                \"permissions\"",
					"              ],",
					"              \"properties\": {",
					"                \"accountId\": {",
					"                  \"$id\": \"#/properties/accountList/items/properties/permissions/items/properties/accountId\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Accountid Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"__ID__4b3261526f43483250734f78384c3965cc48b362e94b60cd080a60990c2efce58ee3e0\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"contractId\": {",
					"                  \"$id\": \"#/properties/accountList/items/properties/permissions/items/properties/contractId\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Contractid Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"__ID__4b3261526f43483250734f78384c3965cf4fbd0c52c6f98e68435eec4a20241839a18c\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"permissions\": {",
					"                  \"$id\": \"#/properties/accountList/items/properties/permissions/items/properties/permissions\",",
					"                  \"type\": \"array\",",
					"                  \"title\": \"The Permissions Schema\",",
					"                  \"items\": {",
					"                    \"$id\": \"#/properties/accountList/items/properties/permissions/items/properties/permissions/items\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Items Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"PAYM_STN_ODR_INI\",",
					"                      \"PAYM_DOM_INI\",",
					"                      \"PAYM_INTL_INI\",",
					"                      \"PAYM_TRANSFER_INI\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            30",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            17",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"accountSearchSchema\", accountSearchSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'positionId details' ***************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const positionIdSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"amount\",",
					"    \"calculationFrom\",",
					"    \"exportTime\",",
					"    \"maturityDate\",",
					"    \"salePermitted\",",
					"    \"timeToMaturity\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d443565538a54737638399ab0eef3b93ecb4eec4c5f\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"amount\": {",
					"      \"$id\": \"#/properties/amount\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Amount Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"calculationFrom\": {",
					"      \"$id\": \"#/properties/calculationFrom\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Calculationfrom Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"exportTime\": {",
					"      \"$id\": \"#/properties/exportTime\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Exporttime Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2019-11-04T23:11:08\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"maturityDate\": {",
					"      \"$id\": \"#/properties/maturityDate\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Maturitydate Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"salePermitted\": {",
					"      \"$id\": \"#/properties/salePermitted\",",
					"      \"type\": \"boolean\",",
					"      \"title\": \"The Salepermitted Schema\",",
					"      \"default\": false,",
					"      \"examples\": [",
					"        false",
					"      ]",
					"    },",
					"    \"timeToMaturity\": {",
					"      \"$id\": \"#/properties/timeToMaturity\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Timetomaturity Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"positionIdSchema\", positionIdSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'transactionsId list' **************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const transactionsIdSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"transactions\"",
					"      ],",
					"      \"properties\": {",
					"        \"transactions\": {",
					"          \"$id\": \"#/properties/_embedded/properties/transactions\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Transactions Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/transactions/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"id\",",
					"              \"amount\",",
					"              \"bookedAt\",",
					"              \"bookingText\",",
					"              \"debitCreditCode\",",
					"              \"narrative\",",
					"              \"narrativeTextType\",",
					"              \"transactionKey\",",
					"              \"transactionNumber\",",
					"              \"valueDate\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__35695a31497042534976574d443565538509674406aa950ce346395913df5663780586\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"amount\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/amount\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Amount Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/amount/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/amount/properties/value\",",
					"                    \"type\": \"integer\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0,",
					"                    \"examples\": [",
					"                      200",
					"                    ]",
					"                  }",
					"                }",
					"              },",
					"              \"bookedAt\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/bookedAt\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Bookedat Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"2019-09-26\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"bookingText\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/bookingText\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Bookingtext Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"Split\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"debitCreditCode\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/debitCreditCode\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Debitcreditcode Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"DEBIT\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"narrative\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/narrative\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Narrative Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"narrativeTextType\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/narrativeTextType\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Narrativetexttype Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"transactionKey\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/transactionKey\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Transactionkey Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"900.100006.990028402\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"transactionNumber\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/transactionNumber\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Transactionnumber Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"16\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"valueDate\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/valueDate\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Valuedate Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"2019-09-26\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            3",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"transactionsIdSchema\", transactionsIdSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'transactionsId details' ***********************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const transactionsIdDetailsSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"amount\",",
					"    \"bookedAt\",",
					"    \"bookingText\",",
					"    \"debitCreditCode\",",
					"    \"narrative\",",
					"    \"narrativeTextType\",",
					"    \"transactionKey\",",
					"    \"transactionNumber\",",
					"    \"valueDate\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d4435655385046899cd9b77906150fee2f5be2c36f32c38\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"amount\": {",
					"      \"$id\": \"#/properties/amount\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Amount Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/amount/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/amount/properties/value\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            200",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"bookedAt\": {",
					"      \"$id\": \"#/properties/bookedAt\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Bookedat Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2019-09-26\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"bookingText\": {",
					"      \"$id\": \"#/properties/bookingText\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Bookingtext Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"Split\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"debitCreditCode\": {",
					"      \"$id\": \"#/properties/debitCreditCode\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Debitcreditcode Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"DEBIT\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"narrative\": {",
					"      \"$id\": \"#/properties/narrative\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Narrative Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"narrativeTextType\": {",
					"      \"$id\": \"#/properties/narrativeTextType\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Narrativetexttype Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"transactionKey\": {",
					"      \"$id\": \"#/properties/transactionKey\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Transactionkey Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"900.100006.990028402\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"transactionNumber\": {",
					"      \"$id\": \"#/properties/transactionNumber\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Transactionnumber Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"16\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"valueDate\": {",
					"      \"$id\": \"#/properties/valueDate\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Valuedate Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2019-09-26\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"transactionsIdDetailsSchema\", transactionsIdDetailsSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'portfolio schema' *****************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const portfolioSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"portfolios\"",
					"      ],",
					"      \"properties\": {",
					"        \"portfolios\": {",
					"          \"$id\": \"#/properties/_embedded/properties/portfolios\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Portfolios Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/portfolios/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"id\",",
					"              \"customerId\",",
					"              \"name\",",
					"              \"amount\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__35695a31497042534976574d443565538c1bf563cdd82c8db3cff41a82f5047a4b\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"customerId\": {",
					"                \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/customerId\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Customerid Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__35695a31497042534976574d44356553850438747409aafd55561799f639493d1665\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"name\": {",
					"                \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/name\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Name Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"77_1502 / Freddy Hinz 01\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"amount\": {",
					"                \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/amount\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Amount Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/amount/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/amount/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      259730.59",
					"                    ]",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            5",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"portfolioSchema\", portfolioSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'portfolio details schema' *****************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const portfolioDetailsSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"customerId\",",
					"    \"name\",",
					"    \"amount\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d443565538c1bf563cdd82c8db3cff41a82f5047a4b\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"customerId\": {",
					"      \"$id\": \"#/properties/customerId\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Customerid Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d44356553850438747409aafd55561799f639493d1665\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"name\": {",
					"      \"$id\": \"#/properties/name\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Name Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"77_1502 / Freddy Hinz 01\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"amount\": {",
					"      \"$id\": \"#/properties/amount\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Amount Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/amount/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/amount/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0.0,",
					"          \"examples\": [",
					"            259730.59",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"portfolioDetailsSchema\", portfolioDetailsSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'portfolio performance schema' *****************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const portfolioPerformanceSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"performancePeriod\",",
					"    \"accruedInterestBalance\",",
					"    \"accruedInterestChange\",",
					"    \"netIncome\",",
					"    \"tax\",",
					"    \"startDate\",",
					"    \"endDate\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d443565538c0365390f45bc8e11a4f9f29a255617de9b4244\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"performancePeriod\": {",
					"      \"$id\": \"#/properties/performancePeriod\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Performanceperiod Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"YTD\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"accruedInterestBalance\": {",
					"      \"$id\": \"#/properties/accruedInterestBalance\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Accruedinterestbalance Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        40",
					"      ]",
					"    },",
					"    \"accruedInterestChange\": {",
					"      \"$id\": \"#/properties/accruedInterestChange\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Accruedinterestchange Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        40",
					"      ]",
					"    },",
					"    \"netIncome\": {",
					"      \"$id\": \"#/properties/netIncome\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Netincome Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        141",
					"      ]",
					"    },",
					"    \"tax\": {",
					"      \"$id\": \"#/properties/tax\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Tax Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        47",
					"      ]",
					"    },",
					"    \"startDate\": {",
					"      \"$id\": \"#/properties/startDate\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Startdate Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2019-01-01\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"endDate\": {",
					"      \"$id\": \"#/properties/endDate\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Enddate Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2019-12-06\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"portfolioPerformanceSchema\", portfolioPerformanceSchema);",
					"",
					"",
					"//************************************************************************************************",
					"// Schema for 'transaction list schema' *****************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const transactionsListSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"transactionGroups\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"transactionGroups\": {",
					"      \"$id\": \"#/properties/transactionGroups\",",
					"      \"type\": \"array\",",
					"      \"title\": \"The Transactiongroups Schema\",",
					"      \"items\": {",
					"        \"$id\": \"#/properties/transactionGroups/items\",",
					"        \"type\": \"object\",",
					"        \"title\": \"The Items Schema\",",
					"        \"required\": [",
					"          \"balance\",",
					"          \"date\",",
					"          \"transactions\"",
					"        ],",
					"        \"properties\": {",
					"          \"balance\": {",
					"            \"$id\": \"#/properties/transactionGroups/items/properties/balance\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Balance Schema\",",
					"            \"required\": [",
					"              \"currencyIsoCode\",",
					"              \"value\"",
					"            ],",
					"            \"properties\": {",
					"              \"currencyIsoCode\": {",
					"                \"$id\": \"#/properties/transactionGroups/items/properties/balance/properties/currencyIsoCode\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Currencyisocode Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"CHF\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"value\": {",
					"                \"$id\": \"#/properties/transactionGroups/items/properties/balance/properties/value\",",
					"                \"type\": \"number\",",
					"                \"title\": \"The Value Schema\",",
					"                \"default\": 0.0,",
					"                \"examples\": [",
					"                  5451805.25",
					"                ]",
					"              }",
					"            }",
					"          },",
					"          \"date\": {",
					"            \"$id\": \"#/properties/transactionGroups/items/properties/date\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Date Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"2019-11-29\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"transactions\": {",
					"            \"$id\": \"#/properties/transactionGroups/items/properties/transactions\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The Transactions Schema\",",
					"            \"items\": {",
					"              \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items\",",
					"              \"type\": \"object\",",
					"              \"title\": \"The Items Schema\",",
					"              \"required\": [",
					"                \"id\",",
					"                \"accountId\",",
					"                \"valutaDate\",",
					"                \"bookingDate\",",
					"                \"booked\",",
					"                \"amount\",",
					"                \"creditorAccount\",",
					"                \"debtorAccount\",",
					"                \"end2endID\",",
					"                \"referenceNumber\",",
					"                \"bookingText\",",
					"                \"referenceText\"",
					"              ],",
					"              \"properties\": {",
					"                \"id\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/id\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Id Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"__ID__4b3261526f43483250734f78384c3965cc49b2e4f7cbe47097468e80074831cef8013b46\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"accountId\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/accountId\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Accountid Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"__ID__4b3261526f43483250734f78384c3965cf4aba2d610eb44b9e8acefccdfc6fdeabe3a6\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"valutaDate\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/valutaDate\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Valutadate Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"2019-11-29\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"bookingDate\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/bookingDate\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Bookingdate Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"2019-11-29\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"booked\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/booked\",",
					"                  \"type\": \"boolean\",",
					"                  \"title\": \"The Booked Schema\",",
					"                  \"default\": false,",
					"                  \"examples\": [",
					"                    true",
					"                  ]",
					"                },",
					"                \"amount\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/amount\",",
					"                  \"type\": \"object\",",
					"                  \"title\": \"The Amount Schema\",",
					"                  \"required\": [",
					"                    \"currencyIsoCode\",",
					"                    \"value\"",
					"                  ],",
					"                  \"properties\": {",
					"                    \"currencyIsoCode\": {",
					"                      \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/amount/properties/currencyIsoCode\",",
					"                      \"type\": \"string\",",
					"                      \"title\": \"The Currencyisocode Schema\",",
					"                      \"default\": \"\",",
					"                      \"examples\": [",
					"                        \"CHF\"",
					"                      ],",
					"                      \"pattern\": \"^(.*)$\"",
					"                    },",
					"                    \"value\": {",
					"                      \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/amount/properties/value\",",
					"                      \"type\": \"integer\",",
					"                      \"title\": \"The Value Schema\",",
					"                      \"default\": 0,",
					"                      \"examples\": [",
					"                        929012",
					"                      ]",
					"                    }",
					"                  }",
					"                },",
					"                \"creditorAccount\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/creditorAccount\",",
					"                  \"type\": \"null\",",
					"                  \"title\": \"The Creditoraccount Schema\",",
					"                  \"default\": null,",
					"                  \"examples\": [",
					"                    null",
					"                  ]",
					"                },",
					"                \"debtorAccount\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/debtorAccount\",",
					"                  \"type\": \"null\",",
					"                  \"title\": \"The Debtoraccount Schema\",",
					"                  \"default\": null,",
					"                  \"examples\": [",
					"                    null",
					"                  ]",
					"                },",
					"                \"end2endID\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/end2endID\",",
					"                  \"type\": \"null\",",
					"                  \"title\": \"The End2endid Schema\",",
					"                  \"default\": null,",
					"                  \"examples\": [",
					"                    null",
					"                  ]",
					"                },",
					"                \"referenceNumber\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/referenceNumber\",",
					"                  \"type\": \"null\",",
					"                  \"title\": \"The Referencenumber Schema\",",
					"                  \"default\": null,",
					"                  \"examples\": [",
					"                    null",
					"                  ]",
					"                },",
					"                \"bookingText\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/bookingText\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Bookingtext Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"ESR Payment Entry  10000019\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"referenceText\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/referenceText\",",
					"                  \"type\": \"null\",",
					"                  \"title\": \"The Referencetext Schema\",",
					"                  \"default\": null,",
					"                  \"examples\": [",
					"                    null",
					"                  ]",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            189",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            19",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"transactionsListSchema\", transactionsListSchema);",
					"",
					"",
					"",
					"//************************************************************************************************",
					"//global function to determine next day/next working day *****************************************",
					"//************************************************************************************************",
					"var moment = require('moment');",
					"let nextDay = moment().add(\"days\",1).format(\"YYYY-MM-DD\"); //next day in specified format",
					"switch (moment().add(\"days\",1).format(\"dddd\")){",
					"    case \"Sunday\":",
					"        var nextWorkingDay = moment().add(\"days\",2).format(\"YYYY-MM-DD\");",
					"        break;",
					"    case \"Saturday\":",
					"        var nextWorkingDay = moment().add(\"days\",3).format(\"YYYY-MM-DD\");",
					"        break;",
					"    default:",
					"        var nextWorkingDay = moment().add(\"days\",1).format(\"YYYY-MM-DD\");",
					"}",
					"pm.globals.set('PrS:nextDay', JSON.stringify(nextDay));",
					"pm.globals.set('PrS:nextWorkingDay', JSON.stringify(nextWorkingDay));",
					"",
					"/*",
					"// Define test data, setup configuration per environment",
					"var env = pm.environment.get(\"envName\");",
					"if (env === \"MDB-R191-TEST\") {",
					"//    var contractNumber = \"{{contractNumber}}\";",
					"//    var debtorAccountNo = \"{{debtorAccountNo}}\";",
					"//    var debtorAccountName = \"{{debtorAccountName}}\";",
					"//    var creditorAccountNo = \"{{creditorAccountNo}}\";",
					"    } else if (env === \"MDB-R191-LAT\") {",
					"} else {",
					"    throw new Error(\"Wrong environment selected, requests are skipped!\")",
					"}",
					"//pm.globals.set('PrS:contractNumber', JSON.stringify(contractNumber));",
					"//pm.globals.set('PrS:debtorAccountNo', JSON.stringify(debtorAccountNo));",
					"//pm.globals.set('PrS:debtorAccountName', JSON.stringify(debtorAccountName));",
					"//pm.globals.set('PrS:creditorAccountNo', JSON.stringify(creditorAccountNo));",
					"*/",
					"",
					"// Save the object as a variable.",
					"// JSON.stringify will serialize the object so that Postman can save it",
					"",
					"//pm.globals.set('PrS:tags', JSON.stringify(tags));",
					"//pm.environment.set(\"testGroup\",\"Patient Zero\") //set environment variable if/when needed",
					"",
					"                //pm.response.to.be.ok;         - Status code must be 200",
					"                //pm.response.to.be.error       - Checks 4XX or 5XX",
					"                //pm.response.to.be.serverError - Checks 5XX",
					"                //pm.response.to.be.clientError - Checks 4XX status code",
					"",
					"// Save common tests in a global variable",
					"postman.setGlobalVariable(\"commonTests\", () => {",
					"    pm.test(\"Response must be valid with/with out a body and with proper status code\", function () {",
					"        if ([\"GET\",\"POST\",\"PUT\"].indexOf(request.method) > -1) {",
					"            pm.response.to.not.be.error;",
					"            pm.response.to.be.withBody;",
					"            pm.response.to.be.json;",
					"            pm.response.to.have.jsonBody();",
					"            pm.response.to.not.have.jsonBody('error');",
					"            pm.response.to.have.header('Content-Type', 'application/hal+json;charset=UTF-8');",
					"        } else {",
					"            pm.response.to.not.be.withBody;",
					"        }",
					"        switch(request.method){",
					"            case \"POST\":",
					"                pm.response.to.have.status(201);",
					"                break;",
					"            case \"PUT\":",
					"                pm.response.to.have.status(200);",
					"                break;",
					"            case \"GET\":",
					"                pm.response.to.have.status(200);",
					"                break;",
					"            case \"DELETE\":",
					"                pm.response.to.have.status(204);",
					"                break;",
					"        }        ",
					"    });",
					"    //pm.test(\"Response time is below 1000ms\", function () {",
					"    //    pm.expect(pm.response.responseTime).to.be.below(1000);",
					"    //});",
					"});",
					"",
					"postman.setGlobalVariable(\"assertValidCreditorAgent\", () => {",
					"    pm.expect(address).to.be.an('object').with.keys('name1', 'name2', 'street', 'city', 'country');",
					"    pm.expect(address.name1).to.be.a('string').and.not.empty;",
					"    pm.expect(address.name2).to.be.a('string').and.not.empty;",
					"    pm.expect(address.street).to.be.a('string').and.not.empty;",
					"    pm.expect(address.city).to.be.a('string').and.not.empty;",
					"    pm.expect(address.country).to.be.a('string').with.lengthOf(2).and.match(/[A-Z]+/);",
					"});",
					"",
					"postman.setGlobalVariable(\"sessionInit\", (testSession, sessionName) => {",
					"    //session init section",
					"    console.log(request.name + \", initialization: \" + testSession + \", global var: \" + sessionName);",
					"    console.log(request.name + \", executing: \" + testSession[0]);",
					"    ",
					"    // Select first test from session to be executed",
					"    postman.setNextRequest(testSession[0]); ",
					"    testSession.shift();",
					"    if (testSession.length === 0) {",
					"        console.log(request.name + \", test session is empty, unset \" + sessionName);",
					"        pm.globals.unset(sessionName);",
					"        console.log(request.name + \", terminate tests execution list\");",
					"    } else {",
					"        pm.globals.set(sessionName, testSession);",
					"        console.log(request.name + \" for \" + sessionName + \", updated list of tests to be executed: \" + testSession);",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"sessionNavigate\", () => {",
					"    console.log(request.name + \", entering ...\");",
					"    if (pm.globals.get(\"requestsToRun\") === undefined){",
					"        console.log(request.name + \", requestsToRun is undefined\");",
					"        pm.globals.set(\"testRailTestCases\",\"\");",
					"        console.log(request.name + \", reset global var: testRailTestCases\");    ",
					"        if (pm.globals.get(\"testSession\") === undefined){",
					"            console.log(request.name + \", testSession is undefined\");",
					"            //here >> export list of tests executed",
					"            var tests = pm.environment.get(\"testRailTestsInRun\");",
					"            tests = tests.replace(/C/g, \"\");",
					"            tests = tests.replace(/ /g, \", \");",
					"            tests = tests.replace(/,,/g, \",\");",
					"            console.log(\"TestRail tests executed executed in this run: \" + tests);",
					"            console.log(\"The end\");",
					"            postman.setNextRequest(null);",
					"        } else {",
					"        var testSession = pm.globals.get(\"testSession\");",
					"        console.log(request.name + \", checking what to run: \" + testSession[0]);",
					"        postman.setNextRequest(testSession[0]); // Run: GET SWIFT payment",
					"        testSession.shift();",
					"        if (testSession.length === 0) {",
					"            pm.globals.unset(\"testSession\");",
					"            console.log(request.name + \", terminate execution list\");",
					"        } else {",
					"            pm.globals.set(\"testSession\", testSession);",
					"            console.log(request.name + \", updated list of tests to be executed: \" + testSession);",
					"        }}",
					"    } else {",
					"    var requestsToRun = pm.globals.get(\"requestsToRun\");",
					"    console.log(request.name + \", checking what to run: \" + requestsToRun[0]);",
					"    postman.setNextRequest(requestsToRun[0]); ",
					"    requestsToRun.shift();",
					"    if (requestsToRun.length === 0) {",
					"        pm.globals.unset(\"requestsToRun\");",
					"        console.log(request.name + \", terminate requests execution list\");",
					"    } else {",
					"        pm.globals.set(\"requestsToRun\", requestsToRun);",
					"        console.log(request.name + \", updated list of requests to be executed: \" + requestsToRun);",
					"    }}",
					"});",
					"",
					"postman.setGlobalVariable(\"cleanup\", () => {",
					"    const clean = [\"requestsToRun\", \"testSession\"];",
					"    for(let i = 0; i < clean.length; ++i){",
					"        pm.globals.unset(clean[i]);",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"testsExecuted\", (listOfExecutedTests) => {",
					"    let tests =  pm.environment.get(\"testRailTestsInRun\");",
					"    //console.log(\"TestRail tests stored in 'testRailTestsInRun': \" + tests);",
					"    if (tests.length > 0) {",
					"        tests = tests + \" \"",
					"    }",
					"    tests = tests + listOfExecutedTests;",
					"    //console.log(\"TestRail tests to be stored to 'testRailTestsInRun': \" + tests);",
					"    pm.environment.set(\"testRailTestsInRun\",tests);",
					"    //console.log(\"TestRail tests executed so far: \" + tests);",
					"});",
					"",
					"postman.setGlobalVariable(\"extractTestCaseIDFromRequestName\", () => {",
					"    let n = request.name.lastIndexOf(\"(\");",
					"    return request.name.substr(n + 1, request.name.length - n - 2);",
					"});",
					"",
					"postman.setGlobalVariable(\"schemaValidator\", (schema, jsonData) => {",
					"    //old, deprecated schema validationimplementation",
					"    //pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;",
					"    ",
					"    //new schema validation implementation",
					"    ",
					"    var schemaValidationPassed = true;",
					"    var serviceSchema = pm.environment.get(schema);",
					"    //var jsonData = JSON.parse(pm.responseBody);",
					"",
					"    var validationResult = tv4.validateMultiple(jsonData, serviceSchema, true, true);",
					"    for(var i =0; i<validationResult.errors.length;i++){",
					"        console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  ",
					"        //Skipping all \"Invalid type\" errors as they are expected with current service implementations",
					"        schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);",
					"        //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);",
					"    }    ",
					"    return schemaValidationPassed;",
					"}); "
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7e7d41ba-50b0-48b0-bc52-53d4e572706a",
				"type": "text/javascript",
				"exec": [
					"// check if test is executed",
					"pm.test(\"'\" + request.name +\"' is initiated\", function () {",
					"    //pm.response.to.have.status(200);",
					"    pm.response.to.be.success;",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"id": "4a30ca50-da6f-4c4d-9010-9ff24336e736",
			"key": "EPIC",
			"value": "PRODUCT-6323",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}