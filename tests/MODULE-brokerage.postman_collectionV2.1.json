{
	"info": {
		"_postman_id": "44be9e51-4a30-4766-965a-7e9589098b84",
		"name": "MODULE: Brokerage (wip)",
		"description": "Brokerage API:\n\n- Brokerage order API\n- Brokerage security API\n- \nGlobal functions:\n- sessionGet // retrive session for access token (called in Tests folder Pre-request Script)\n- generateAccessToken //generate access token\n- listSecurities //list securities, stores {{_tmp_securityId}}, {{_tmp_securityNumber}}, {{_tmp_isin}}\n- listListings //list listings, stores {{tmp_listing_ID}}\n- listSecurityTypes //list security types, stores {{_tmp_typeId}}\n- listTradingPlaces //list trading places, stores {{tmp_tradingPlaceId}}\n- listOrders // list orders {{_tmp_accountId}}, {{_tmp_custodyAccountId}}, {{_tmp_custodyAccountPositionId}}, {{_tmp_securityId}}, {{_tmp_orderId}}, {{_tmp_postEnteredById}} - C43995758\n\nTests to verify (see comments):\nList securities by title (C43995804)\nDisplay listings by security ID (C43995813)\nDisplay security by security type ID (C43995787)\nList orders (C43995758)\nList orders by orderAction, limitType and orderStatus (C43995819)\nCreate new order (C43995799)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Config",
			"item": [
				{
					"name": "_Test session",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae074d28-7184-41f6-93b7-3718e4ebea65",
								"exec": [
									"//reset global variables for controling execution flow",
									"eval(globals.cleanup)();",
									"//clear list of executed TestRail tests",
									"pm.environment.set(\"testRailTestsInRun\",\"\");   ",
									"",
									"var contractNumber = data.contractNumber;",
									"if (contractNumber){ ",
									"    pm.environment.set(\"contract\",JSON.parse(data.contractNumber));",
									"    console.log(\"dataFile/contractNumber: \" + contractNumber);",
									"}",
									"",
									"var tenantId_security = data.tenantId_security;",
									"if (tenantId_security){ ",
									"    pm.environment.set(\"tenantId_security\",data.tenantId_security);",
									"    console.log(\"dataFile/tenantId_security: \" + tenantId_security);",
									"}",
									"",
									"var tenantName_security = data.tenantName_security;",
									"if (tenantName_security){ ",
									"    pm.environment.set(\"tenantName_security\",data.tenantName_security);",
									"    console.log(\"dataFile/tenantName_security: \" + tenantName_security);",
									"}",
									"",
									"var userName_security = data.userName_security;",
									"if (userName_security){ ",
									"    pm.environment.set(\"userName_security\",data.userName_security);",
									"    console.log(\"dataFile/userName_security: \" + userName_security);",
									"}",
									"",
									"var contractNo_security = data.contractNo_security;",
									"if (contractNo_security){ ",
									"    pm.environment.set(\"contractNo_security\",data.contractNo_security);",
									"    console.log(\"dataFile/contractNo_security: \" + contractNo_security);",
									"}",
									"",
									"var bcNo_security = data.bcNo_security;",
									"if (bcNo_security){ ",
									"    pm.environment.set(\"bcNo_security\",data.bcNo_security);",
									"    console.log(\"dataFile/bcNo_security: \" + bcNo_security);",
									"}",
									"",
									"var userId_security = data.userId_security;",
									"if (userId_security){ ",
									"    pm.environment.set(\"userId_security\",data.userId_security);",
									"    console.log(\"dataFile/userId_security: \" + userId_security);",
									"}",
									"",
									"var order_action = data.order_action;",
									"if (order_action){ ",
									"    pm.environment.set(\"order_action\",data.order_action);",
									"    console.log(\"dataFile/userId_security: \" + order_action);",
									"}",
									"",
									"var limit_type = data.limit_type;",
									"if (limit_type){ ",
									"    pm.environment.set(\"limit_type\",data.limit_type);",
									"    console.log(\"dataFile/userId_security: \" + limit_type);",
									"}",
									"",
									"var order_status = data.order_status;",
									"if (order_status){ ",
									"    pm.environment.set(\"order_status\",data.order_status);",
									"    console.log(\"dataFile/userId_security: \" + order_status);",
									"}",
									"",
									"",
									"//specify list of tests to be executed in exact order",
									"//const testsScope = \"Full\"; [Full|Core|Full+TestRail]",
									"let testsScope = data.testsScope;",
									"//console.log(testsScope); ",
									"",
									"switch(testsScope) {",
									"    case \"Full\":",
									"        var testSession = [",
									"            \"_Generate access token (C41673950)\",",
									"            \"List securities (C43995762)\",",
									"            \"List securities by ISIN (C43995802)\",",
									"            \"List securities by title (C43995804)\",",
									"            \"(WiP) List securities having limited permissions (C43995837)\",",
									"            \"Display security by ID (C43995806)\",",
									"            \"Display security by securityNumber (C43995801)\",",
									"            \"Display security using bad url (C43995832)\",",
									"            \"Display security using broken url (C43995836)\",",
									"            \"List listings (C43995811)\",",
									"            \"List listings using bad listing ID (C43995844)\",",
									"            \"List listings using broken url (C43995845)\",",
									"            \"(WiP) List listings having limited permissions (C43995846)\",",
									"            \"Display listing by listing ID (C43995816)\",",
									"            \"List trading places (C43995818)\",",
									"            \"Display trading place by tradingPlaceId (C43995821)\",",
									"            \"List security types (C43995825)\",",
									"            \"Display security type by ID (C43995831)\",",
									"            \"Display security by security type ID (C43995787)\",",
									"            \"Display listings by security ID (C43995813)\",",
									"            \"Display securities using bad version (C43995842)\"",
									"            ]; ",
									"        break;",
									"    case \"Core\":",
									"        var testSession = [",
									"            //Securities",
									"            \"List securities (C43995762)\",",
									"            \"List securities by ISIN (C43995802)\",",
									"            //\"List securities by title (C43995804)\", -- to verify",
									"            \"Display security by ID (C43995806)\",",
									"            \"Display security by securityNumber (C43995801)\",",
									"            \"Display security using bad url (C43995832)\",",
									"            \"Display security using broken url (C43995836)\",",
									"            \"Display securities using bad version (C43995842)\",",
									"            //Listings",
									"            \"List listings (C43995811)\",",
									"            \"List listings using bad listing ID (C43995844)\",",
									"            \"List listings using broken url (C43995845)\",",
									"            \"Display listing by listing ID (C43995816)\",",
									"            \"Display listings by security ID (C43995813)\",",
									"            //Security Types ",
									"            \"List security types (C43995825)\",",
									"            \"Display security type by ID (C43995831)\",        ",
									"            \"Display security by security type ID (C43995787)\", ",
									"            //Trading Places",
									"            \"List trading places (C43995818)\",",
									"            \"Display trading place by tradingPlaceId (C43995821)\",",
									"            //Orders",
									"            \"List orders (C43995758)\",",
									"            \"List orders by orderId (C43995800)\",",
									"            \"List orders by accountId (C43995760)\",",
									"            \"List orders by custodyAccountId (C43995761)\",",
									"            \"List orders by custodyAccountPositionId (C43995763)\",",
									"            //\"List orders by orderAction, limitType and orderStatus (C43995819)\",",
									"            \"List orders by orderActionBuy (C76800770)\",",
									"            \"List orders by orderActionSell (C76800771)\",",
									"            \"List orders by orderActionRedemption (C76800772)\",",
									"            \"List orders by orderActionSubscription (C76800773)\",",
									"            \"List orders by limitTypeAtMarket (C76800775)\",",
									"            \"List orders by limitTypeLIMITED (C76800776)\",",
									"            \"List orders by limitTypeStopLoss (C76800777)\",",
									"            \"List orders by orderStatusEntered (C76800778)\",",
									"            \"List orders by orderStatusRejected (C76800779)\",",
									"            \"List orders by orderStatusAccepted (C76800780)\",",
									"            \"List orders by orderStatusExecuted (C76800781)\",",
									"            \"List orders by securityId (C43995790)\",",
									"            \"List orders by startDate (C43995792)\",",
									"            \"List orders using bad url 404 notFound (C43995827)\",",
									"            \"List orders by order id using bad url 404 notFound (C43995834)\",",
									"            //\"Create new order (C43995799)\", -- to verify,",
									"            \"List orders using bad url (C43995822)\"",
									"            //\"(WiP) List securities having limited permissions (C43995837)\",",
									"",
									"            //\"(WiP) List listings having limited permissions (C43995846)\",",
									"            //\"List orders by orderAction (C43995764)\", - refactored in 4 tests",
									"            //\"List orders by limitType (C43995780)\", - refactored in 3 tests",
									"            //\"List orders by orderStatus (C43995782)\", - refactored in 4 tests",
									"            ",
									"            ]; ",
									"        break;",
									"    case \"Core.old\":",
									"        var testSession = [",
									"            \"_Generate access token (C41673950)\",",
									"            \"List securities (C43995762)\",",
									"            \"List securities by ISIN (C43995802)\",",
									"            //\"(WiP) List securities having limited permissions (C43995837)\",",
									"            \"Display securities using bad version (C43995842)\",",
									"            \"Display security by ID (C43995806)\",",
									"            \"Display security by securityNumber (C43995801)\",",
									"            \"Display security using bad url (C43995832)\",",
									"            \"List listings (C43995811)\",",
									"            \"List listings using broken url (C43995845)\",",
									"            \"List listings using bad listing ID (C43995844)\",",
									"            //\"(WiP) List listings having limited permissions (C43995846)\",",
									"            \"Display listing by listing ID (C43995816)\",",
									"            \"List security types (C43995825)\",",
									"            \"Display security type by ID (C43995831)\",",
									"            \"Display security by security type ID (C43995787)\",",
									"            \"List trading places (C43995818)\",",
									"            \"Display trading place by tradingPlaceId (C43995821)\",",
									"            \"List orders (C43995758)\",",
									"            \"List orders by orderId (C43995800)\",",
									"            \"List orders by accountId (C43995760)\",",
									"            \"List orders by custodyAccountId (C43995761)\",",
									"            \"List orders by custodyAccountPositionId (C43995763)\",",
									"            \"List orders by orderAction, limitType and orderStatus (C43995819)\",",
									"            \"List orders by orderAction (C43995764)\",",
									"            \"List orders by limitType (C43995780)\",",
									"            \"List orders by orderStatus (C43995782)\",",
									"            \"List orders by securityId (C43995790)\",",
									"            \"List orders by startDate (C43995792)\",",
									"            \"Create new order (C43995799)\",",
									"            \"List orders using bad url (C43995827)\",",
									"            \"List orders by order id using bad url (C43995834)\",",
									"            \"List orders using bad url (C43995822)\"",
									"            ]; ",
									"        break;",
									"    case \"TestRailClean\":        ",
									"        var testSession = [",
									"            \"_Test session close\"",
									"            ]; ",
									"        break;",
									"    default:",
									"        throw new Error(\"No tests selected for execution!\")",
									"}        ",
									"    ",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(testSession, \"testSession\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tests.v2",
			"item": [
				{
					"name": "Security Tests",
					"item": [
						{
							"name": "List securities (C43995762)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f3f74d1-0ba4-47b7-9e2a-5acd40468663",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of securities is retrieved and response schema is validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"securitiesSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"securitiesSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    for (var i=0;i<jsonData.securities.length; i++){\r",
											"        if ((jsonData.securities[i].id !== null)&&(jsonData.securities[i].securityNumber !== null)&&(jsonData.securities[i].isin !== null)){\r",
											"            pm.environment.set(\"_tmp_securityId\",jsonData.securities[i].id);\r",
											"            pm.environment.set(\"_tmp_securityNumber\",jsonData.securities[i].securityNumber);\r",
											"            pm.environment.set(\"_tmp_isin\",jsonData.securities[i].isin);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_securityId\");\r",
											"    pm.environment.unset(\"_tmp_securityNumber\");\r",
											"    pm.environment.unset(\"_tmp_isin\");\r",
											"    //pm.environment.unset(\"_tmp_shortDescription\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7f2f42bd-4b39-4f73-9579-e2afe4f4c15c",
										"exec": [
											"eval(globals.generateAccessToken)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/securities",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"securities"
									]
								}
							},
							"response": []
						},
						{
							"name": "List securities by ISIN (C43995802)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d55fd2db-aed2-4363-b560-db75d4f766df",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of securities by ISIN is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let isin = pm.environment.get(\"_tmp_isin\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"securitiesSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    for(var x = 0;x<jsonData.securities.length;x++) {\r",
											"        //console.log(\"Iteration: \"+ x+1 +\" is: \"+jsonData.securities[x].isin);\r",
											"        result = result && (jsonData.securities[x].isin === isin);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e4c91c8b-4b5c-4682-b72a-d6b02e7a4b9d",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.listSecurities)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/securities?isin={{_tmp_isin}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"securities"
									],
									"query": [
										{
											"key": "isin",
											"value": "{{_tmp_isin}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List securities by title (C43995804)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bdce5cef-1cf9-4bdd-a1b3-3b85bff76123",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.securities === undefined || jsonData.securities.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of securities by title is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let shortDescription = pm.environment.get(\"_tmp_shortDescription\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"securitiesSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    for(var x = 0;x<jsonData.securities.length;x++) {\r",
											"        //console.log(\"Iteration: \"+ x+1 +\" is: \"+jsonData.securities[x].descriptions[0].shortDescription);\r",
											"        result = result && (jsonData.securities[x].descriptions[0].shortDescription === shortDescription);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fd78f226-5516-467c-a5d0-3311cf74be3d",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.listSecurities)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/securities?title={{_tmp_shortDescription}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"securities"
									],
									"query": [
										{
											"key": "title",
											"value": "{{_tmp_shortDescription}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Display security by ID (C43995806)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2795fa1-dac6-4f89-9f0e-23508eef9db8",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Security by ID is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let id = pm.environment.get(\"_tmp_securityId\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"securityByIdSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    pm.expect(jsonData.id).to.be.eql(id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "44cbb674-3c2d-4850-91a2-ef9c72a918ab",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.listSecurities)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/securities/{{_tmp_securityId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"securities",
										"{{_tmp_securityId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Display security by securityNumber (C43995801)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e54f47ab-6ab8-40a1-b8af-f4b66ee14cca",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Security is retrieved by securityNumber and response schema i validated\", function (){\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitySchema = pm.environment.get(\"securitySchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var jsonDataEmbed = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"securitiesSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);        \r",
											"\r",
											"    pm.expect(jsonDataEmbed.securities.length).to.be.eql(1) &&\r",
											"    pm.expect(jsonDataEmbed.securities[0].securityNumber).to.be.eql(pm.environment.get(\"_tmp_securityNumber\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ce2a737-600a-442a-a04b-6c981ca86c47",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.listSecurities)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/securities?securityNumber={{_tmp_securityNumber}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"securities"
									],
									"query": [
										{
											"key": "securityNumber",
											"value": "{{_tmp_securityNumber}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Display security using bad url (C43995832)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f02e0c3b-5119-4b1a-84fc-b26b2c2dd07e",
										"exec": [
											"const response = pm.response.json();\r",
											"const category = response._messages[0].category;\r",
											"const code = response._messages[0].code;\r",
											"const text = response._messages[0].text;\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Display security fails if bad url is used\", function () {\r",
											"\r",
											"    //Request fails and error message is correct\r",
											"    pm.expect(category).to.eql(\"ERROR\");\r",
											"    pm.expect(code).to.eql(\"ERROR_ARGUMENT_MISMATCH\");\r",
											"    pm.expect(text).to.include(\"Argument mismatch\");\r",
											"    pm.response.to.have.status(400);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "26ad0d40-1f26-4537-8551-da878b7bc66f",
										"exec": [
											"const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
											"pm.environment.set(\"_tmp_randomString\", Array.from({length:6}, _ => c[Math.floor(Math.random()*c.length)]).join(''));\r",
											"\r",
											"eval(globals.generateAccessToken)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/securities/{{_tmp_randomString}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"securities",
										"{{_tmp_randomString}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Display security using broken url (C43995836)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2842084d-2138-42b8-8ae9-03e9294aca28",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Display securities fails if wrong version is provided in url\", function () {\r",
											"\r",
											"    let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "67fceb79-679d-424e-a5b0-f8a4046cb941",
										"exec": [
											"eval(globals.generateAccessToken)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/securitiesTest",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"securitiesTest"
									]
								}
							},
							"response": []
						},
						{
							"name": "Display securities using bad version (C43995842)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2842084d-2138-42b8-8ae9-03e9294aca28",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Display securities fails if wrong version is provided in url\", function () {\r",
											"\r",
											"    let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    pm.response.to.have.status(404);\r",
											"\r",
											"    pm.expect(jsonData.error).to.be.eql(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "67fceb79-679d-424e-a5b0-f8a4046cb941",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.listSecurities)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v1/{{tenantId_brokerage}}/securities/{{_tmp_securityId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v1",
										"{{tenantId_brokerage}}",
										"securities",
										"{{_tmp_securityId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List listings (C43995811)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cabe988c-2492-413b-bf88-8bcc37d282c3",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Listings are returned and all assertions passed\", function (){",
											"",
											"    var listingsSchema = pm.environment.get(\"listingsSchema\");",
											"    pm.response.to.have.status(200);",
											"",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"listingsSchema\",jsonData);",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);",
											"});",
											"",
											"if (pm.response.code === 200) {",
											"    pm.environment.set(\"tmp_listing_ID\",jsonData.listings[0].id);",
											"} else {",
											"    pm.environment.unset(\"tmp_listing_ID\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "826a2e6a-ff5c-4cae-a3a3-09528f513b9a",
										"exec": [
											"eval(globals.generateAccessToken)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/listings",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"listings"
									]
								}
							},
							"response": []
						},
						{
							"name": "List listings using bad listing ID (C43995844)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f02e0c3b-5119-4b1a-84fc-b26b2c2dd07e",
										"exec": [
											"const response = pm.response.json();\r",
											"const category = response._messages[0].category;\r",
											"const code = response._messages[0].code;\r",
											"const text = response._messages[0].text;\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Display listings fails if bad url is used\", function () {\r",
											"\r",
											"    //Request fails and error message is correct\r",
											"    pm.expect(category).to.eql(\"ERROR\");\r",
											"    pm.expect(code).to.eql(\"ERROR_ARGUMENT_MISMATCH\");\r",
											"    pm.expect(text).to.include(\"Argument mismatch\");\r",
											"    pm.response.to.have.status(400);\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "26ad0d40-1f26-4537-8551-da878b7bc66f",
										"exec": [
											"const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
											"pm.environment.set(\"_tmp_randomString\", Array.from({length:6}, _ => c[Math.floor(Math.random()*c.length)]).join(''));\r",
											"\r",
											"eval(globals.generateAccessToken)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/listings/{{_tmp_randomString}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"listings",
										"{{_tmp_randomString}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List listings using broken url (C43995845)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f35146b-4ca7-42e2-9871-af9baa186704",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List listings fails if url is completely broken\", function () {\r",
											"\r",
											"    let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(jsonData.status).to.be.eql(404);\r",
											"    pm.expect(jsonData.error).to.be.eql(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "84b0ad5b-2412-4ded-8d55-49761d831cab",
										"exec": [
											"const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
											"pm.environment.set(\"_tmp_randomString\", Array.from({length:6}, _ => c[Math.floor(Math.random()*c.length)]).join(''));\r",
											"\r",
											"eval(globals.generateAccessToken)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/listings{{_tmp_randomString}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"listings{{_tmp_randomString}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Display listing by listing ID (C43995816)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3ac7b3d4-4df2-4d23-a9be-ba1c30d1093f",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Listings are returned and all assertions passed\", function (){",
											"",
											"    var listingsSchema = pm.environment.get(\"listingsIDSchema\");",
											"    pm.response.to.have.status(200);",
											"",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"listingsIDSchema\",jsonData);",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "82385af8-f274-4740-9da0-a69593718a5e",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.listListings)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/listings/{{tmp_listing_ID}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"listings",
										"{{tmp_listing_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Display listings by security ID (C43995813)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e3ee9cd-f334-4eb2-9afe-a85f67ad14a1",
										"exec": [
											"pm.environment.unset(\"_tmp_postSecurityListingId\");",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"let noData = (jsonData.listings === undefined || jsonData.listings.length === 0);",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" Listings are returned and all assertions passed\", function (){",
											"",
											"    var listingsSchema = pm.environment.get(\"listingsSchema\");",
											"    pm.response.to.have.status(200);",
											"",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"listingsSchema\",jsonData);",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);",
											"",
											"    if (pm.response.code === 200) {",
											"        var jsonData = JSON.parse(responseBody);",
											"        pm.environment.set(\"_tmp_postSecurityListingId\",jsonData.listings[0].id);",
											"    }    ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a551c710-e415-43f6-b7ce-2031e9f4a2b6",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.listSecurities)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/listings?securityId={{_tmp_securityId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"listings"
									],
									"query": [
										{
											"key": "securityId",
											"value": "{{_tmp_securityId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List security types (C43995825)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "42041493-8719-4348-83f9-e09408e76cac",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Security types are retrieved and response schema is validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var securityTypesSchema = pm.environment.get(\"securityTypesSchema\");\r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"securityTypesSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);        \r",
											"});\r",
											"\r",
											"if (pm.response.code === 200) {\r",
											"    pm.environment.set(\"_tmp_typeId\",jsonData.securityTypes[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_typeId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bb25496c-dd73-4599-b58f-8c05baed4f0e",
										"exec": [
											"eval(globals.generateAccessToken)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/types",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Display security type by ID (C43995831)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c692d0dc-68ea-418a-a55c-6380ef656f12",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Security type is retrieved by its' ID and response schema is validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var securityTypesSchema = pm.environment.get(\"securityTypeSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let typeId = pm.environment.get(\"_tmp_typeId\");\r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"securityTypeSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);        \r",
											"\r",
											"    pm.expect(jsonData.id).to.eql(typeId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "89687d44-ad17-438d-bf7e-38579def55eb",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.listSecurityTypes)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/types/{{_tmp_typeId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"types",
										"{{_tmp_typeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Display security by security type ID (C43995787)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7dcc4285-5381-4ea4-9656-919f65faaa65",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Security is retrieved by security type ID and response schema is validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var securityTypesSchema = pm.environment.get(\"securitiesSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"securitiesSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);        \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c60e23c8-9608-458a-825a-5e82d9831c9c",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.listSecurityTypes)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/securities?securityTypeId={{_tmp_typeId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"securities"
									],
									"query": [
										{
											"key": "securityTypeId",
											"value": "{{_tmp_typeId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List trading places (C43995818)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e68afe1-1498-46fc-bbbd-5fa6b59c9c03",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of trading places is retrieved and response schema is validated\", function () {\r",
											"\r",
											"    var tradingPlacesSchema = pm.environment.get(\"tradingPlacesSchema\");\r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"tradingPlacesSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"// store tradingPlaceId as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    pm.environment.set(\"_tmp_tradingPlaceId\",jsonData.tradingPlaces[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_tradingPlaceId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6f67cc4c-5eea-41b8-a660-951f80bc37b4",
										"exec": [
											"eval(globals.generateAccessToken)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/tradingplaces",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"tradingplaces"
									]
								}
							},
							"response": []
						},
						{
							"name": "Display trading place by tradingPlaceId (C43995821)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf648aa9-cc23-4525-a7cf-e725315c11b8",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Trading place is retrieved by tradingPlaceId and response schema is validated\", function () {\r",
											"\r",
											"    var tradingPlaceSchema = pm.environment.get(\"tradingPlaceSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"tradingPlaceSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true); \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a53ea4fa-aefe-4e17-a622-0beeec1a07fc",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.listTradingPlaces)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/tradingplaces/{{_tmp_tradingPlaceId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"tradingplaces",
										"{{_tmp_tradingPlaceId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Orders Tests",
					"item": [
						{
							"name": "List orders (C43995758)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a0a9601-1c59-4276-82e9-2f97027d8187",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders is retrieved and response schema is validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.orders[0].orderReferences.accountId);\r",
											"    pm.environment.set(\"_tmp_custodyAccountId\",jsonData.orders[0].orderReferences.custodyAccountId);\r",
											"    for (var i=0; i<jsonData.orders.length; i++){\r",
											"        if (jsonData.orders[i].orderReferences.custodyAccountPositionId !== null){\r",
											"            pm.environment.set(\"_tmp_custodyAccountPositionId\",jsonData.orders[i].orderReferences.custodyAccountPositionId);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    pm.environment.set(\"_tmp_securityId\",jsonData.orders[0].orderReferences.securityId);\r",
											"    pm.environment.set(\"_tmp_orderId\",jsonData.orders[0].id);\r",
											"    pm.environment.set(\"_tmp_postEnteredById\",jsonData.orders[0].orderReferences.enteredBy);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"    pm.environment.unset(\"_tmp_custodyAccountId\");\r",
											"    pm.environment.unset(\"_tmp_custodyAccountPositionId\");\r",
											"    pm.environment.unset(\"_tmp_securityId\");\r",
											"    pm.environment.unset(\"_tmp_orderId\");\r",
											"    pm.environment.unset(\"_tmp_postEnteredById\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a655a687-ba32-4786-b86c-278b0ef552bb",
										"exec": [
											"eval(globals.generateAccessToken)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/orders",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "List orders by orderId (C43995800)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be2451b3-bb25-4419-9aa5-5713ae732cc7",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by orderId is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let orderId = pm.environment.get(\"_tmp_orderId\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"orderDetailsSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    result = result && (jsonData.id === orderId);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1de4a06e-82ad-4e9f-8e37-55fff5aac2c0",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.listOrders)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/orders/{{_tmp_orderId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"orders",
										"{{_tmp_orderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List orders by accountId (C43995760)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1bb7be7-c50f-4c36-bbb2-f7624acf83d5",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by AccountId is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accountId = pm.environment.get(\"_tmp_accountId\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    for(var x = 0;x<jsonData.orders.length;x++) {\r",
											"        result = result && (jsonData.orders[x].orderReferences.accountId === accountId);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "00880565-e552-441f-aae0-9b7b2ff6c0b8",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.listOrders)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/orders?accountId={{_tmp_accountId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"orders"
									],
									"query": [
										{
											"key": "accountId",
											"value": "{{_tmp_accountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List orders by custodyAccountId (C43995761)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e84ff379-9d87-45f5-a099-8698cd18d125",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by custodyAccountId is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let custodyAccountId = pm.environment.get(\"_tmp_custodyAccountId\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    for(var x = 0;x<jsonData.orders.length;x++) {\r",
											"            result = result && (jsonData.orders[x].orderReferences.custodyAccountId === custodyAccountId);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b31aea59-9a52-4251-aa96-88add30d7787",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.listOrders)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/orders?custodyAccountId={{_tmp_custodyAccountId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"orders"
									],
									"query": [
										{
											"key": "custodyAccountId",
											"value": "{{_tmp_custodyAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List orders by custodyAccountPositionId (C43995763)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "234e47cb-317e-4224-a80c-b5349fce4b85",
										"exec": [
											"(responseBody.length == 0 ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by custodyAccountPositionId is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let custodyAccountPositionId = pm.environment.get(\"_tmp_custodyAccountPositionId\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    for(var x = 0;x<jsonData.orders.length;x++) {\r",
											"        result = result && (jsonData.orders[x].orderReferences.custodyAccountPositionId === custodyAccountPositionId);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "17f0cefb-0845-440f-9f16-54b99f533601",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.listOrders)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/orders?custodyAccountPositionId={{_tmp_custodyAccountPositionId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"orders"
									],
									"query": [
										{
											"key": "custodyAccountPositionId",
											"value": "{{_tmp_custodyAccountPositionId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List orders by orderAction, limitType and orderStatus (C43995819)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d00fbae-b5db-40e2-976a-b3452f67c240",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by orderAction, orderLimitType and orderStatus is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let orderAction = pm.environment.get(\"order_action\");\r",
											"    let orderLimitType = pm.environment.get(\"limit_type\");\r",
											"    let orderStatus = pm.environment.get(\"order_status\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"    for(var x = 0;x<jsonData.orders.length;x++) {\r",
											"        result = result && (jsonData.orders[x].orderAction === orderAction);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"    \r",
											"    for(var x = 0;x<jsonData.orders.length;x++) {\r",
											"        result = result && (jsonData.orders[x].limitType === orderLimitType);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"    \r",
											"    for(var x = 0;x<jsonData.orders.length;x++) {\r",
											"        result = result && (jsonData.orders[x].orderStatus === orderStatus);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8e2c8ad0-25a8-41c1-b9a7-7baf09927097",
										"exec": [
											"eval(globals.generateAccessToken)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/orders?orderAction={{order_action}}&orderLimitType={{limit_type}}&orderStatus={{order_status}}&page=0&size=10",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"orders"
									],
									"query": [
										{
											"key": "orderAction",
											"value": "{{order_action}}"
										},
										{
											"key": "orderLimitType",
											"value": "{{limit_type}}"
										},
										{
											"key": "orderStatus",
											"value": "{{order_status}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List orders by orderAction (C43995764) - refactored",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79b2be3a-bc93-4417-81ed-dadc45c23900",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by orderActionBuy is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let orderAction = \"BUY\";\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    for(var x = 0;x<jsonData.orders.length;x++) {\r",
											"        result = result && (jsonData.orders[x].orderAction === orderAction);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2a6cd7f8-ed78-4a83-b3d7-b6c74b2c9775",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.listOrders)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/orders?orderAction=BUY",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"orders"
									],
									"query": [
										{
											"key": "orderAction",
											"value": "BUY"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List orders by orderActionBuy (C76800770)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79b2be3a-bc93-4417-81ed-dadc45c23900",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by orderActionBuy is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let orderAction = \"BUY\";\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    for(var x = 0;x<jsonData.orders.length;x++) {\r",
											"        result = result && (jsonData.orders[x].orderAction === orderAction);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2a6cd7f8-ed78-4a83-b3d7-b6c74b2c9775",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"//setTimeout(function(){eval(globals.listOrders)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/orders?orderAction=BUY",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"orders"
									],
									"query": [
										{
											"key": "orderAction",
											"value": "BUY"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List orders by orderActionSell (C76800771)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79c210c8-c8c9-43c1-a121-353ba5b53a0a",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by orderActionSell is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let orderAction = \"SELL\";\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    for(var x = 0;x<jsonData.orders.length;x++) {\r",
											"        result = result && (jsonData.orders[x].orderAction === orderAction);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bf6dc945-ac53-437a-b5e4-1d96e53cebd6",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"//setTimeout(function(){eval(globals.listOrders)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/orders?orderAction=SELL",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"orders"
									],
									"query": [
										{
											"key": "orderAction",
											"value": "SELL"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List orders by orderActionRedemption (C76800772)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c496f570-c320-480d-a320-68aa21f186b1",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by orderActionRedemption is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let orderAction = \"REDEMPTION\";\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    for(var x = 0;x<jsonData.orders.length;x++) {\r",
											"        result = result && (jsonData.orders[x].orderAction === orderAction);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "70338b4c-b84a-4d69-a1a7-8ac900f76a80",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"//setTimeout(function(){eval(globals.listOrders)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/orders?orderAction=REDEMPTION",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"orders"
									],
									"query": [
										{
											"key": "orderAction",
											"value": "REDEMPTION"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List orders by orderActionSubscription (C76800773)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ba10121-a66c-4456-9a72-5914b8504a2d",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by orderActionSubscription is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let orderAction = \"SUBSCRIPTION\";\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    for(var x = 0;x<jsonData.orders.length;x++) {\r",
											"        result = result && (jsonData.orders[x].orderAction === orderAction);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b9729cfc-6eef-4783-aeef-4ef61300c4a1",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"//setTimeout(function(){eval(globals.listOrders)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/orders?orderAction=SUBSCRIPTION",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"orders"
									],
									"query": [
										{
											"key": "orderAction",
											"value": "SUBSCRIPTION"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List orders by limitTypeAtMarket (C76800775)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0980d85d-7fc9-44fe-a1d2-5e564eaf7016",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by limitType AT_MARKET is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let limitType = \"AT_MARKET\";\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    for(var x = 0;x<jsonData.orders.length;x++) {\r",
											"        result = result && (jsonData.orders[x].limitType === limitType);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b7930811-49af-457a-a2e5-3ab1747ed192",
										"exec": [
											"eval(globals.generateAccessToken)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/orders?orderLimitType=AT_MARKET",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"orders"
									],
									"query": [
										{
											"key": "orderLimitType",
											"value": "AT_MARKET"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List orders by limitTypeLIMITED (C76800776)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19620bb8-128f-4937-b37c-c8809028ca92",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by limitType LIMITED is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let limitType = \"LIMITED\";\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    for(var x = 0;x<jsonData.orders.length;x++) {\r",
											"        result = result && (jsonData.orders[x].limitType === limitType);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0540b8e4-cfbf-41f1-bdfb-fa4407d9ef81",
										"exec": [
											"eval(globals.generateAccessToken)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/orders?orderLimitType=LIMITED",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"orders"
									],
									"query": [
										{
											"key": "orderLimitType",
											"value": "LIMITED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List orders by limitTypeStopLoss (C76800777)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf9f99a9-5ad2-4d94-8612-d1384e21ed83",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by limitType STOP_LOSS is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let limitType = \"STOP_LOSS\";\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    for(var x = 0;x<jsonData.orders.length;x++) {\r",
											"        result = result && (jsonData.orders[x].limitType === limitType);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d8d1a07c-77e8-4473-ace5-131de5d15514",
										"exec": [
											"eval(globals.generateAccessToken)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/orders?orderLimitType=STOP_LOSS",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"orders"
									],
									"query": [
										{
											"key": "orderLimitType",
											"value": "STOP_LOSS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List orders by orderStatusEntered (C76800778)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2dec9664-e3d3-4aa0-950c-fa5289997023",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by orderStatus ENTERED is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let orderStatus = \"ENTERED\";\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    for(var x = 0;x<jsonData.orders.length;x++) {\r",
											"        result = result && (jsonData.orders[x].orderStatus === orderStatus);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9765c32d-f2f7-4ff6-ac48-809f9fb56703",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"//setTimeout(function(){eval(globals.listOrders)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/orders?orderStatus=ENTERED",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"orders"
									],
									"query": [
										{
											"key": "orderStatus",
											"value": "ENTERED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List orders by orderStatusRejected (C76800779)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eafc47cb-ea61-4860-b0ba-ca8b1aec130a",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by orderStatus REJECTED is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let orderStatus = \"REJECTED\";\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    for(var x = 0;x<jsonData.orders.length;x++) {\r",
											"        result = result && (jsonData.orders[x].orderStatus === orderStatus);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "40447565-b152-4332-bb2e-7536e4f4fe64",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"//setTimeout(function(){eval(globals.listOrders)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/orders?orderStatus=REJECTED",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"orders"
									],
									"query": [
										{
											"key": "orderStatus",
											"value": "REJECTED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List orders by orderStatusAccepted (C76800780)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2ed0878-d51b-4875-85a6-0ff41f2eb23d",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by orderStatus ACCEPTED is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let orderStatus = \"ACCEPTED\";\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    for(var x = 0;x<jsonData.orders.length;x++) {\r",
											"        result = result && (jsonData.orders[x].orderStatus === orderStatus);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ba62bb92-0b73-454c-8bf6-69672ddd846d",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"//setTimeout(function(){eval(globals.listOrders)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/orders?orderStatus=ACCEPTED",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"orders"
									],
									"query": [
										{
											"key": "orderStatus",
											"value": "ACCEPTED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List orders by orderStatusExecuted (C76800781)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f45d76fd-2966-4e69-87c6-a9fc6dadca40",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by orderStatus EXECUTED is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let orderStatus = \"EXECUTED\";\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    for(var x = 0;x<jsonData.orders.length;x++) {\r",
											"        result = result && (jsonData.orders[x].orderStatus === orderStatus);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ff87ac77-2290-4821-8d39-fb0ad825a42f",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"//setTimeout(function(){eval(globals.listOrders)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/orders?orderStatus=EXECUTED",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"orders"
									],
									"query": [
										{
											"key": "orderStatus",
											"value": "EXECUTED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List orders by securityId (C43995790)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7db7428-6080-4210-9e8f-98dd70588316",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by securityId is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let securityId = pm.environment.get(\"_tmp_securityId\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    for(var x = 0;x<jsonData.orders.length;x++) {\r",
											"        result = result && (jsonData.orders[x].orderReferences.securityId === securityId);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "59f3af6b-dadd-40f7-b630-2e6aec4233cf",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.listOrders)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/orders?securityId={{_tmp_securityId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"orders"
									],
									"query": [
										{
											"key": "securityId",
											"value": "{{_tmp_securityId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List orders by startDate (C43995792)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d812e9f-4bca-4f38-9126-0fda7cfd6ab8",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by startDate 2019-01-01 is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var orderDate = new Date(\"2019-01-01\");\r",
											"    var convertedOrderDate = orderDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    for(var x = 0;x<jsonData.orders.length;x++) {\r",
											"        var placedAtTime = new Date(jsonData.orders[x].orderTimeConstraints.placedAt);\r",
											"        var convertedTime = placedAtTime.getTime();\r",
											"        result = result && (convertedOrderDate < convertedTime);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7ab62409-bb87-4b72-a18f-523744a66c1b",
										"exec": [
											"eval(globals.generateAccessToken)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/orders?startDate=2019-01-01",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"orders"
									],
									"query": [
										{
											"key": "startDate",
											"value": "2019-01-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List orders using bad url 404 notFound (C43995827)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6451b305-6cbc-4701-aaec-014f7af224ae",
										"exec": [
											"const response = pm.response.json();\r",
											"const error = response.error;\r",
											"const message = response.message;\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Display orders fails if wrong version is provided in url\", function () {\r",
											"\r",
											"    //Request fails and error message is correct\r",
											"    pm.expect(error).to.eql(\"Not Found\");\r",
											"    pm.expect(message).to.eql(\"No message available\");\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8121cba6-abe1-4d49-bdfc-ac6292674548",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"//setTimeout(function(){eval(globals.listOrders)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v0/{{tenantId_brokerage}}/orders",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v0",
										"{{tenantId_brokerage}}",
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "List orders by order id using bad url 404 notFound (C43995834)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1f3f6d4-e92a-4edf-b36f-c1bd39d822a7",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Display orders by order id fails if wrong version is provided in url\", function () {\r",
											"\r",
											"    let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    pm.response.to.have.status(404);\r",
											"\r",
											"    pm.expect(jsonData.error).to.be.eql(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "088b792d-6eba-4903-a809-6eef8a4efa82",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"//setTimeout(function(){eval(globals.listOrders)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/orders/v2/{{tenantId_brokerage}}/orders/qwerty",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"orders",
										"v2",
										"{{tenantId_brokerage}}",
										"orders",
										"qwerty"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new order (C43995799)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32aa4ff0-737b-4b6d-8a85-00f5578a91b3",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.status === 400);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" New order has been created and order id is displayed\", function () {\r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    pm.response.to.have.property(\"id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "58ac6324-29a7-458f-9a5c-9b9bf17d73fe",
										"exec": [
											"//pm.environment.set(\"_tmp_postEnteredById\",\"__ID__386c4161416544634138766a39493768efa6b074064fb0247ca0b4f39c466cec9911a3e60595ff36\");",
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.listOrders)();}, 1000);",
											"setTimeout(function(){eval(globals.listSecurities)();}, 5000);",
											"setTimeout(function(){eval(globals.listListings)();}, 10000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountId\":\"{{_tmp_accountId}}\",\n    \"custodyAccountId\":\"{{_tmp_custodyAccountId}}\",\n    \"securityId\":\"{{_tmp_securityId}}\",\n    \"securityListingId\":\"{{tmp_listing_ID}}\",\n    \"orderAction\":\"BUY\",\n    \"orderExecutionType\":\"MARKET\",\n    \"amount\":{\n    \t\"currencyIsoCode\":\"CHF\",\n    \t\"value\":1.00\n    },\n    \"validUntil\": {{PrS:nextWorkingDay}},\n    \"enteredBy\":\"{{_tmp_postEnteredById}}\",\n    \"placedBy\":\"{{_tmp_postEnteredById}}\"\n}"
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/api/v2/{{tenantId_brokerage}}/orders",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"api",
										"v2",
										"{{tenantId_brokerage}}",
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "List orders using bad url (C43995822)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "040aa3ea-674a-423a-973e-580a3097296e",
										"exec": [
											"const response = pm.response.json();\r",
											"const error = response.error;\r",
											"const message = response.message;\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Display order fails if bad url is used\", function () {\r",
											"\r",
											"    //Request fails and error message is correct\r",
											"    pm.expect(error).to.eql(\"Not Found\");\r",
											"    pm.expect(message).to.eql(\"No message available\");\r",
											"    pm.response.to.have.status(404);\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3c0b458c-ffed-478c-854b-74eccb5216ae",
										"exec": [
											"eval(globals.generateAccessToken)();\r",
											"setTimeout(function(){eval(globals.listOrders)();}, 1000);\r",
											"\r",
											"const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
											"pm.environment.set(\"_tmp_randomString\", Array.from({length:6}, _ => c[Math.floor(Math.random()*c.length)]).join(''));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/orders/v2/{{tenantId_brokerage}}/orders/{{_tmp_randomString}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"orders",
										"v2",
										"{{tenantId_brokerage}}",
										"orders",
										"{{_tmp_randomString}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0e3bb1fe-3bde-4869-9d37-408c1dad4211",
						"type": "text/javascript",
						"exec": [
							"/*determine test case ID from request name*/",
							"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
							"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
							"",
							"/*add current test case ID to list of already executed tests*/",
							"eval(globals.testsExecuted)(testRailTestCases);",
							"pm.globals.set(\"testRailTestCases\", testRailTestCases);",
							"",
							"//store test case ID of current request for linking with Test Rail",
							"pm.globals.set(\"_tr_\" + request.name, testRailTestCases);",
							"",
							"//get session for access token",
							"eval(globals.sessionGet)();"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2ae5a932-db0c-41c3-b550-ca9abc046f0f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tests.v1",
			"item": [
				{
					"name": "List securities (C43995762).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "df468669-9d1d-4076-b94e-d42c7dae384b",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getSecurities\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getSecurities\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "92265ee7-77e0-4c5d-98c0-a5c23b48972d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10196"
					},
					"response": []
				},
				{
					"name": "List securities by ISIN (C43995802).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e9c05386-24f9-40b7-8c90-12d0349d5f55",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getSecurities\",",
									"        \"getSecuritiesByISIN\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getSecurities\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getSecuritiesByISIN\",testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "13d094b0-2edd-4984-b335-44e2cbca5497",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10199"
					},
					"response": []
				},
				{
					"name": "List securities by title (C43995804).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a66931a9-132e-4e3f-8e61-5ed2af22d4ad",
								"exec": [
									"//testRailTestCases = \"C43995821\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getSecurities\",",
									"        \"getSecuritiesByTitle\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getSecurities\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getSecuritiesByTitle\", testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a193ec55-151b-4b6a-b30f-ca0cb2fe881b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10201"
					},
					"response": []
				},
				{
					"name": "Display security by ID (C43995806).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "51d48916-2fdc-4229-8c44-85dd31be8a27",
								"exec": [
									"//testRailTestCases = \"C43995801\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getSecurities\",",
									"        \"getSecurityById\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getSecurities\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getSecurityById\", testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "98a07ac0-67da-4f2d-adb4-0be34ff461ed",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10202"
					},
					"response": []
				},
				{
					"name": "Display security by securityNumber (C43995801).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cfb00ae0-7bb5-4f95-b611-45822c404f2c",
								"exec": [
									"//testRailTestCases = \"C43995801\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getSecurities\",",
									"        \"getSecurityBySecurityNumber\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getSecurities\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getSecurityBySecurityNumber\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aa08ce90-547c-4a10-adf4-9d7980a35be2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10197"
					},
					"response": []
				},
				{
					"name": "Display security using bad url (C43995832).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7f386243-1208-4ac7-a8df-32946c432111",
								"exec": [
									"//testRailTestCases = \"C43995801\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getSecurityErrorBadRequest\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getSecurityErrorBadRequest\", testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f5b88ff2-7bb2-4ff0-a6f8-63bd90397dc5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10212"
					},
					"response": []
				},
				{
					"name": "Display security using broken url (C43995836).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "84f58819-2117-40cc-8649-b7d2138ccb0e",
								"exec": [
									"//testRailTestCases = \"C43995801\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getSecurityErrorNotFound\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getSecurityErrorNotFound\", testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "707a6472-bb88-4c62-8450-d25cbabd66df",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10213"
					},
					"response": []
				},
				{
					"name": "List listings (C43995811).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6d79a35c-98c2-4f58-908f-938166270741",
								"exec": [
									"//var testRailTestCases = \"C43995811\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getListings\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getListings\",testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10204"
					},
					"response": []
				},
				{
					"name": "List listings using bad url (C43995844).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "75c44288-a1e9-4d9e-b747-99a1bf0b0b52",
								"exec": [
									"//testRailTestCases = \"C43995801\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getListingsErrorBadRequest\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getListingsErrorBadRequest\", testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3dfcc602-ec98-475c-a79a-65f110985666",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10218"
					},
					"response": []
				},
				{
					"name": "List listings using broken url (C43995845).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6e53678e-15a6-4ef2-8097-877d37e0174d",
								"exec": [
									"//testRailTestCases = \"C43995801\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getListingsErrorNotFound\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getListingsErrorNotFound\", testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "88f86e40-f743-49c1-b54d-ad4d094fa65e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10219"
					},
					"response": []
				},
				{
					"name": "(WiP) List listings having limited permissions (C43995846)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dd12b810-6a41-415b-905b-51a6d4dee198",
								"exec": [
									"//testRailTestCases = \"C43995821\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestTokenK8SNoAssetsPermissions\",",
									"        \"getListingsErrorForbidden\",",
									"        \"getAuthTestTokenK8S\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getAuthTestTokenK8SNoAssetsPermissions\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getListingsErrorForbidden\", testRailTestCases);",
									"    pm.globals.set(\"_tr_getAuthTestTokenK8S\",\"[postCondition]\");",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "12d850d9-26d4-4b75-9b07-43b56cab1fee",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10220"
					},
					"response": []
				},
				{
					"name": "Display listing by listing ID (C43995816).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ff0e331e-c7c5-471b-b357-b2bb7da5ca93",
								"exec": [
									"//testRailTestCases = \"C43995816\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getListings\",",
									"        \"getListingByListingId\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getListings\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getListingByListingId\", testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10207"
					},
					"response": []
				},
				{
					"name": "List trading places (C43995818).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6921bb3f-7794-4acd-8dc7-a64e009fb4b6",
								"exec": [
									"//var testRailTestCases = \"C43995818\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getTradingPlaces\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getTradingPlaces\",testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2b1ab64e-4b89-4101-9383-afb8d1995038",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10208"
					},
					"response": []
				},
				{
					"name": "Display trading place by tradingPlaceId (C43995821).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8f8c9d67-962d-4bc0-98c2-74612c6fd933",
								"exec": [
									"//testRailTestCases = \"C43995821\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getTradingPlaces\",",
									"        \"getTradingPlaceByTradingPlaceId\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getTradingPlaces\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getTradingPlaceByTradingPlaceId\", testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d141c0c3-04ee-43f8-bbd7-6faef57260cf",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10209"
					},
					"response": []
				},
				{
					"name": "List security types (C43995825).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cec85d4e-2235-438b-9eea-1a376282c7b9",
								"exec": [
									"//testRailTestCases = \"C43995825\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getSecurityTypes\"",
									"    ];",
									"    pm.globals.set(\"_tr_getSecurityTypes\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8fe72f98-0801-4952-9321-b5b6ad02ee70",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-12064"
					},
					"response": []
				},
				{
					"name": "Display security type by ID (C43995831).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bb5bffc4-e9df-4279-af46-780fe64f029a",
								"exec": [
									"//testRailTestCases = \"C43995825\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getSecurityTypes\",",
									"        \"getSecurityTypeById\"",
									"    ];",
									"    pm.globals.set(\"_tr_getSecurityTypes\", \"[preCondition]\");",
									"    pm.globals.set(\"_tr_getSecurityTypeById\", testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "47d99a41-168f-4bb3-892a-48169f3a380f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-12064"
					},
					"response": []
				},
				{
					"name": "Display security by security type ID (C43995787).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7ef67399-33a3-422a-b6d8-61f32e0ef80c",
								"exec": [
									"//testRailTestCases = \"C43995787\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getSecurityTypes\",",
									"        \"getSecurityBySecurityTypeId\"",
									"    ];",
									"    pm.globals.set(\"_tr_getSecurityTypes\", \"[preCondition]\");",
									"    pm.globals.set(\"_tr_getSecurityBySecurityTypeId\", testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "045f462d-0398-4e77-8851-a5b4a5b034f0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-12064"
					},
					"response": []
				},
				{
					"name": "Display listings by security ID (C43995813).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d6ad7268-9474-4239-9592-5aac444267c4",
								"exec": [
									"//testRailTestCases = \"C43995813\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getSecurities\",",
									"        \"getListingBySecurityId\"",
									"    ];",
									"    pm.globals.set(\"_tr_getSecurities\", \"[preCondition]\");",
									"    pm.globals.set(\"_tr_getListingBySecurityId\", testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7742bc63-df63-4e41-bdd7-be641247c798",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10205"
					},
					"response": []
				},
				{
					"name": "Display securities using bad version (C43995842).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9a0e4a75-8004-4a37-8d3d-f5c8a996fe33",
								"exec": [
									"//testRailTestCases = \"C43995842\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getSecuritiesErrorNotFound\"",
									"    ];",
									"    pm.globals.set(\"_tr_getSecuritiesErrorNotFound\", testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5fc5a26c-ef37-44ba-85a2-1df68e6d8627",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10216"
					},
					"response": []
				},
				{
					"name": "List orders (C43995758).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "15769cdb-4d08-457a-9ae6-cc7fe3c0b8c2",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getOrders\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getOrders\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "List orders by orderId (C43995800).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1a0d6317-3a1d-4c71-9463-051e05eb3d33",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getOrders\",",
									"        \"getOrdersByOrderId\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getOrders\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getOrdersByOrderId\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "List orders by accountId (C43995760).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d4dc47c0-dbcb-4ed9-b84d-78746a01f833",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getOrders\",",
									"        \"getOrdersByAccountId\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getOrders\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getOrdersByAccountId\",testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b3353b40-a187-4d8d-a65d-7850a3c0dced",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10199"
					},
					"response": []
				},
				{
					"name": "List orders by custodyAccountId (C43995761).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f8793f31-a599-4b2d-b784-b0e9a78ad3e3",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getOrders\",",
									"        \"getOrdersByCustodyAccountId\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getOrders\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getOrdersByCustodyAccountId\",testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c44bcb65-d287-49eb-9c99-ad016f3ea6c9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10199"
					},
					"response": []
				},
				{
					"name": "List orders by custodyAccountPositionId (C43995763).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "42d13c81-88e3-4069-b070-d9e3cc03397a",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getOrders\",",
									"        \"getOrdersByCustodyAccountPositionId\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getOrders\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getOrdersByCustodyAccountPositionId\",testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dfa01899-4c1c-4ac7-9106-47c82a8c434e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10199"
					},
					"response": []
				},
				{
					"name": "List orders by orderAction, limitType and orderStatus (C43995819).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "50727f7c-cb5d-4b3a-a1f7-6f69212896ff",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getOrdersByOrderActionByLimitTypeByOrderStatus\",",
									"    ]; ",
									"    pm.globals.set(\"_tr_getOrdersByOrderActionByLimitTypeByOrderStatus\",testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "66be537d-3948-41ed-8e71-7751b0edcf0d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10199"
					},
					"response": []
				},
				{
					"name": "List orders by orderAction (C43995764).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fcf45e63-3487-494c-98e8-025efce2daa3",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getOrdersByOrderActionBuy\",",
									"        \"getOrdersByOrderActionSell\",",
									"        \"getOrdersByOrderActionRedemption\",",
									"        \"getOrdersByOrderActionSubscription\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getOrdersByOrderActionBuy\",testRailTestCases);",
									"    pm.globals.set(\"_tr_getOrdersByOrderActionSell\",testRailTestCases);",
									"    pm.globals.set(\"_tr_getOrdersByOrderActionRedemption\",testRailTestCases);",
									"    pm.globals.set(\"_tr_getOrdersByOrderActionSubscription\",testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f17efde0-f3fd-4364-b924-d630f1709414",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10199"
					},
					"response": []
				},
				{
					"name": "List orders by limitType (C43995780).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5f431b62-8d24-4137-a323-60998acae4d6",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getOrdersByLimitTypeAtMarket\",",
									"        \"getOrdersByLimitTypeLimited\",",
									"        \"getOrdersByLimitTypeStopLoss\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getOrdersByLimitTypeAtMarket\",testRailTestCases);",
									"    pm.globals.set(\"_tr_getOrdersByLimitTypeLimited\",testRailTestCases);",
									"    pm.globals.set(\"_tr_getOrdersByLimitTypeStopLoss\",testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ebb1c76b-a6cc-42ac-9eb4-05384a5c7cd5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10199"
					},
					"response": []
				},
				{
					"name": "List orders by orderStatus (C43995782).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "60c96c7d-4927-4551-b3d8-5928327228d0",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getOrdersByOrderStatusEntered\",",
									"        \"getOrdersByOrderStatusRejected\",",
									"        \"getOrdersByOrderStatusAccepted\",",
									"        \"getOrdersByOrderStatusExecuted\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getOrdersByOrderStatusEntered\",testRailTestCases);",
									"    pm.globals.set(\"_tr_getOrdersByOrderStatusRejected\",testRailTestCases);",
									"    pm.globals.set(\"_tr_getOrdersByOrderStatusAccepted\",testRailTestCases);",
									"    pm.globals.set(\"_tr_getOrdersByOrderStatusExecuted\",testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "80438c42-fcb3-4509-9f69-ea1a42ee4f3c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10199"
					},
					"response": []
				},
				{
					"name": "List orders by securityId (C43995790).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8864c432-b434-442a-9235-93908249a5fb",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getOrders\",",
									"        \"getOrdersBySecurityId\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getOrders\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getOrdersBySecurityId\",testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e2d54dbe-4dc8-4664-9321-b2984d7ee7ed",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10199"
					},
					"response": []
				},
				{
					"name": "List orders by startDate (C43995792).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "812e1e01-ceda-49e6-a94d-e691ec57a1a9",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getOrdersByStartDate\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getOrdersByStartDate\",testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5d00bcd6-5e0c-4389-960c-135d7c632295",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10199"
					},
					"response": []
				},
				{
					"name": "Create new order (C43995799).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "afbd9678-a6e3-447a-b4f2-d513e5c30a6f",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getSecuritiesByISINNestle\",",
									"        \"getListingBySecurityId\",",
									"        \"getOrders\",",
									"        \"postCreateNewOrder\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getSecuritiesByISINNestle\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_getListingBySecurityId\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_getOrders\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_postCreateNewOrder\",testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d2256877-b3ad-4537-bbd7-b77ab57c13f3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10199"
					},
					"response": []
				},
				{
					"name": "List orders using bad url (C43995827).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c8b48688-f20f-409a-9307-d29a667c5b4e",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getOrdersErrorNotFound\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getOrdersErrorNotFound\",testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9aeeac27-507a-4eb5-9ba8-8f6d509fb023",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10199"
					},
					"response": []
				},
				{
					"name": "List orders by order id using bad url (C43995834).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e93ef435-eb53-4a27-9c52-9a428b677ce8",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getOrdersByOrderIdErrorNotFound\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getOrdersByOrderIdErrorNotFound\",testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "39d9345d-2ad8-4e38-953e-525ef5cc0561",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10199"
					},
					"response": []
				},
				{
					"name": "List orders using bad url (C43995822).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3f857da3-7fe5-4781-85a5-9f10bb556118",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getOrdersErrorBadRequest\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getOrdersErrorBadRequest\",testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "54081670-9dbd-4b3d-9447-4c58f260ebb2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10199"
					},
					"response": []
				},
				{
					"name": "(WiP) List securities having limited permissions (C43995837)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7bd83c9e-3cc0-4328-b81e-5fa576814e7f",
								"exec": [
									"//testRailTestCases = \"C43995821\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestTokenK8SNoAssetsPermissions\",",
									"        \"getSecuritiesErrorForbidden\",",
									"        \"getAuthTestTokenK8S\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getAuthTestTokenK8SNoAssetsPermissions\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getSecuritiesErrorForbidden\", testRailTestCases);",
									"    pm.globals.set(\"_tr_getAuthTestTokenK8S\",\"[postCondition]\");",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "69b110eb-9f9c-4b1e-9a9d-cffe8360e292",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10214"
					},
					"response": []
				},
				{
					"name": "_Generate access token (C41673950)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8a582184-4166-4142-8c00-4836e69979b3",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestTokenK8S\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getAuthTestToken\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "_Test session close",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "faeb4cb4-de71-4e0f-8cfe-5aea4e5496d2",
								"exec": [
									"var requestsToRun = ",
									"    [",
									"        \"Clean TestRail Run\"",
									"    ]; ",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a2818057-e41e-4ccd-a92c-2682fba919f3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Requests",
			"item": [
				{
					"name": "Order Tests",
					"item": [
						{
							"name": "getOrders",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a0a9601-1c59-4276-82e9-2f97027d8187",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders is retrieved and response schema is validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.orders[0].orderReferences.accountId);\r",
											"    pm.environment.set(\"_tmp_custodyAccountId\",jsonData.orders[0].orderReferences.custodyAccountId);\r",
											"    for (var i=0; i<jsonData.orders.length; i++){\r",
											"        if (jsonData.orders[i].orderReferences.custodyAccountPositionId !== null){\r",
											"            pm.environment.set(\"_tmp_custodyAccountPositionId\",jsonData.orders[i].orderReferences.custodyAccountPositionId);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    pm.environment.set(\"_tmp_securityId\",jsonData.orders[0].orderReferences.securityId);\r",
											"    pm.environment.set(\"_tmp_orderId\",jsonData.orders[0].id);\r",
											"    pm.environment.set(\"_tmp_postEnteredById\",jsonData.orders[0].orderReferences.enteredBy);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"    pm.environment.unset(\"_tmp_custodyAccountId\");\r",
											"    pm.environment.unset(\"_tmp_custodyAccountPositionId\");\r",
											"    pm.environment.unset(\"_tmp_securityId\");\r",
											"    pm.environment.unset(\"_tmp_orderId\");\r",
											"    pm.environment.unset(\"_tmp_postEnteredById\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/orders/{{tenantId_brokerage}}/v1/orders",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"orders",
										"{{tenantId_brokerage}}",
										"v1",
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrdersByOrderId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be2451b3-bb25-4419-9aa5-5713ae732cc7",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by orderId is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let orderId = pm.environment.get(\"_tmp_orderId\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"orderDetailsSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    pm.test(\"Returned orders match to specified orderId\", () => {\r",
											"        result = result && (jsonData.id === orderId);\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/orders/{{tenantId_brokerage}}/v1/orders/{{_tmp_orderId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"orders",
										"{{tenantId_brokerage}}",
										"v1",
										"orders",
										"{{_tmp_orderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrdersByAccountId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1bb7be7-c50f-4c36-bbb2-f7624acf83d5",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by AccountId is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accountId = pm.environment.get(\"_tmp_accountId\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    pm.test(\"Returned orders match to specified AccountId\", () => {\r",
											"        for(var x = 0;x<jsonData._embedded.orders.length;x++) {\r",
											"            result = result && (jsonData._embedded.orders[x].orderReferences.accountId === accountId);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/orders/{{tenantId_brokerage}}/v1/orders?accountId={{_tmp_accountId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"orders",
										"{{tenantId_brokerage}}",
										"v1",
										"orders"
									],
									"query": [
										{
											"key": "accountId",
											"value": "{{_tmp_accountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrdersByCustodyAccountId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e84ff379-9d87-45f5-a099-8698cd18d125",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by custodyAccountId is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let custodyAccountId = pm.environment.get(\"_tmp_custodyAccountId\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    pm.test(\"Returned orders match to specified CustodyAccountId\", () => {\r",
											"        for(var x = 0;x<jsonData._embedded.orders.length;x++) {\r",
											"            result = result && (jsonData._embedded.orders[x].orderReferences.custodyAccountId === custodyAccountId);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/orders/{{tenantId_brokerage}}/v1/orders?custodyAccountId={{_tmp_custodyAccountId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"orders",
										"{{tenantId_brokerage}}",
										"v1",
										"orders"
									],
									"query": [
										{
											"key": "custodyAccountId",
											"value": "{{_tmp_custodyAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrdersByCustodyAccountPositionId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "234e47cb-317e-4224-a80c-b5349fce4b85",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"(responseBody.length == 0 ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by custodyAccountPositionId is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let custodyAccountPositionId = pm.environment.get(\"_tmp_custodyAccountPositionId\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    pm.test(\"Returned orders match to specified CustodyAccountPositionId\", () => {\r",
											"        for(var x = 0;x<jsonData._embedded.orders.length;x++) {\r",
											"            result = result && (jsonData._embedded.orders[x].orderReferences.custodyAccountPositionId === custodyAccountPositionId);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/orders/{{tenantId_brokerage}}/v1/orders?custodyAccountPositionId={{_tmp_custodyAccountPositionId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"orders",
										"{{tenantId_brokerage}}",
										"v1",
										"orders"
									],
									"query": [
										{
											"key": "custodyAccountPositionId",
											"value": "{{_tmp_custodyAccountPositionId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrdersByOrderActionByLimitTypeByOrderStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d00fbae-b5db-40e2-976a-b3452f67c240",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by orderAction, orderLimitType and orderStatus is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let orderAction = pm.environment.get(\"order_action\");\r",
											"    let orderLimitType = pm.environment.get(\"limit_type\");\r",
											"    let orderStatus = pm.environment.get(\"order_status\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned orders match to specified orderAction\", () => {\r",
											"        for(var x = 0;x<jsonData._embedded.orders.length;x++) {\r",
											"            result = result && (jsonData._embedded.orders[x].orderAction === orderAction);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned orders match to specified limitType\", () => {\r",
											"        for(var x = 0;x<jsonData._embedded.orders.length;x++) {\r",
											"            result = result && (jsonData._embedded.orders[x].limitType === orderLimitType);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned orders match to specified orderStatus\", () => {\r",
											"        for(var x = 0;x<jsonData._embedded.orders.length;x++) {\r",
											"            result = result && (jsonData._embedded.orders[x].orderStatus === orderStatus);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/orders/{{tenantId_brokerage}}/v1/orders?orderAction={{order_action}}&orderLimitType={{limit_type}}&orderStatus={{order_status}}&page=0&size=10",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"orders",
										"{{tenantId_brokerage}}",
										"v1",
										"orders"
									],
									"query": [
										{
											"key": "orderAction",
											"value": "{{order_action}}"
										},
										{
											"key": "orderLimitType",
											"value": "{{limit_type}}"
										},
										{
											"key": "orderStatus",
											"value": "{{order_status}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrdersByOrderActionBuy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79b2be3a-bc93-4417-81ed-dadc45c23900",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by orderActionBuy is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let orderAction = \"BUY\";\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    pm.test(\"Returned orders match to specified orderActionBuy\", () => {\r",
											"        for(var x = 0;x<jsonData._embedded.orders.length;x++) {\r",
											"            result = result && (jsonData._embedded.orders[x].orderAction === orderAction);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/orders/{{tenantId_brokerage}}/v1/orders?orderAction=BUY",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"orders",
										"{{tenantId_brokerage}}",
										"v1",
										"orders"
									],
									"query": [
										{
											"key": "orderAction",
											"value": "BUY"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrdersByOrderActionSell",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79c210c8-c8c9-43c1-a121-353ba5b53a0a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by orderActionSell is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let orderAction = \"SELL\";\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    pm.test(\"Returned orders match to specified orderActionSell\", () => {\r",
											"        for(var x = 0;x<jsonData._embedded.orders.length;x++) {\r",
											"            result = result && (jsonData._embedded.orders[x].orderAction === orderAction);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/orders/{{tenantId_brokerage}}/v1/orders?orderAction=SELL",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"orders",
										"{{tenantId_brokerage}}",
										"v1",
										"orders"
									],
									"query": [
										{
											"key": "orderAction",
											"value": "SELL"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrdersByOrderActionRedemption",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c496f570-c320-480d-a320-68aa21f186b1",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by orderActionSell is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let orderAction = \"REDEMPTION\";\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    pm.test(\"Returned orders match to specified orderActionRedemption\", () => {\r",
											"        for(var x = 0;x<jsonData._embedded.orders.length;x++) {\r",
											"            result = result && (jsonData._embedded.orders[x].orderAction === orderAction);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/orders/{{tenantId_brokerage}}/v1/orders?orderAction=REDEMPTION",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"orders",
										"{{tenantId_brokerage}}",
										"v1",
										"orders"
									],
									"query": [
										{
											"key": "orderAction",
											"value": "REDEMPTION"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrdersByOrderActionSubscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ba10121-a66c-4456-9a72-5914b8504a2d",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by orderActionSell is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let orderAction = \"SUBSCRIPTION\";\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    pm.test(\"Returned orders match to specified orderActionSubscription\", () => {\r",
											"        for(var x = 0;x<jsonData._embedded.orders.length;x++) {\r",
											"            result = result && (jsonData._embedded.orders[x].orderAction === orderAction);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/orders/{{tenantId_brokerage}}/v1/orders?orderAction=SUBSCRIPTION",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"orders",
										"{{tenantId_brokerage}}",
										"v1",
										"orders"
									],
									"query": [
										{
											"key": "orderAction",
											"value": "SUBSCRIPTION"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrdersByLimitTypeAtMarket",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0980d85d-7fc9-44fe-a1d2-5e564eaf7016",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by limitType AT_MARKET is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let limitType = \"AT_MARKET\";\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    pm.test(\"Returned orders match to specified limitType AT_MARKET\", () => {\r",
											"        for(var x = 0;x<jsonData._embedded.orders.length;x++) {\r",
											"            result = result && (jsonData._embedded.orders[x].limitType === limitType);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/orders/{{tenantId_brokerage}}/v1/orders?orderLimitType=AT_MARKET",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"orders",
										"{{tenantId_brokerage}}",
										"v1",
										"orders"
									],
									"query": [
										{
											"key": "orderLimitType",
											"value": "AT_MARKET"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrdersByLimitTypeLimited",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19620bb8-128f-4937-b37c-c8809028ca92",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by limitType LIMITED is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let limitType = \"LIMITED\";\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    pm.test(\"Returned orders match to specified limitType LIMITED\", () => {\r",
											"        for(var x = 0;x<jsonData._embedded.orders.length;x++) {\r",
											"            result = result && (jsonData._embedded.orders[x].limitType === limitType);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/orders/{{tenantId_brokerage}}/v1/orders?orderLimitType=LIMITED",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"orders",
										"{{tenantId_brokerage}}",
										"v1",
										"orders"
									],
									"query": [
										{
											"key": "orderLimitType",
											"value": "LIMITED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrdersByLimitTypeStopLoss",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf9f99a9-5ad2-4d94-8612-d1384e21ed83",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by limitType STOP_LOSS is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let limitType = \"STOP_LOSS\";\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    pm.test(\"Returned orders match to specified limitType STOP_LOSS\", () => {\r",
											"        for(var x = 0;x<jsonData._embedded.orders.length;x++) {\r",
											"            result = result && (jsonData._embedded.orders[x].limitType === limitType);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/orders/{{tenantId_brokerage}}/v1/orders?orderLimitType=STOP_LOSS",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"orders",
										"{{tenantId_brokerage}}",
										"v1",
										"orders"
									],
									"query": [
										{
											"key": "orderLimitType",
											"value": "STOP_LOSS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrdersByOrderStatusEntered",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2dec9664-e3d3-4aa0-950c-fa5289997023",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by orderStatus ENTERED is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let orderStatus = \"ENTERED\";\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    pm.test(\"Returned orders match to specified orderStatus ENTERED\", () => {\r",
											"        for(var x = 0;x<jsonData._embedded.orders.length;x++) {\r",
											"            result = result && (jsonData._embedded.orders[x].orderStatus === orderStatus);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/orders/{{tenantId_brokerage}}/v1/orders?orderStatus=ENTERED",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"orders",
										"{{tenantId_brokerage}}",
										"v1",
										"orders"
									],
									"query": [
										{
											"key": "orderStatus",
											"value": "ENTERED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrdersByOrderStatusRejected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eafc47cb-ea61-4860-b0ba-ca8b1aec130a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by orderStatus REJECTED is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let orderStatus = \"REJECTED\";\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    pm.test(\"Returned orders match to specified orderStatus REJECTED\", () => {\r",
											"        for(var x = 0;x<jsonData._embedded.orders.length;x++) {\r",
											"            result = result && (jsonData._embedded.orders[x].orderStatus === orderStatus);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/orders/{{tenantId_brokerage}}/v1/orders?orderStatus=REJECTED",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"orders",
										"{{tenantId_brokerage}}",
										"v1",
										"orders"
									],
									"query": [
										{
											"key": "orderStatus",
											"value": "REJECTED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrdersByOrderStatusAccepted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2ed0878-d51b-4875-85a6-0ff41f2eb23d",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by orderStatus ACCEPTED is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let orderStatus = \"ACCEPTED\";\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    pm.test(\"Returned orders match to specified orderStatus ACCEPTED\", () => {\r",
											"        for(var x = 0;x<jsonData._embedded.orders.length;x++) {\r",
											"            result = result && (jsonData._embedded.orders[x].orderStatus === orderStatus);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/orders/{{tenantId_brokerage}}/v1/orders?orderStatus=ACCEPTED",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"orders",
										"{{tenantId_brokerage}}",
										"v1",
										"orders"
									],
									"query": [
										{
											"key": "orderStatus",
											"value": "ACCEPTED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrdersByOrderStatusExecuted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f45d76fd-2966-4e69-87c6-a9fc6dadca40",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by orderStatus EXECUTED is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let orderStatus = \"EXECUTED\";\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    pm.test(\"Returned orders match to specified orderStatus EXECUTED\", () => {\r",
											"        for(var x = 0;x<jsonData._embedded.orders.length;x++) {\r",
											"            result = result && (jsonData._embedded.orders[x].orderStatus === orderStatus);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/orders/{{tenantId_brokerage}}/v1/orders?orderStatus=EXECUTED",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"orders",
										"{{tenantId_brokerage}}",
										"v1",
										"orders"
									],
									"query": [
										{
											"key": "orderStatus",
											"value": "EXECUTED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrdersBySecurityId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7db7428-6080-4210-9e8f-98dd70588316",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by securityId is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let securityId = pm.environment.get(\"_tmp_securityId\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    pm.test(\"Returned orders match to specified securityId\", () => {\r",
											"        for(var x = 0;x<jsonData._embedded.orders.length;x++) {\r",
											"            result = result && (jsonData._embedded.orders[x].orderReferences.securityId === securityId);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/orders/{{tenantId_brokerage}}/v1/orders?securityId={{_tmp_securityId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"orders",
										"{{tenantId_brokerage}}",
										"v1",
										"orders"
									],
									"query": [
										{
											"key": "securityId",
											"value": "{{_tmp_securityId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrdersByStartDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d812e9f-4bca-4f38-9126-0fda7cfd6ab8",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of orders by startDate 2019-01-01 is retrieved and response schema is validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var orderDate = new Date(\"2019-01-01\");\r",
											"    var convertedOrderDate = orderDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"ordersSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    pm.test(\"Returned orders match to specified orderStatus startDate 2019-01-01 and after\", () => {\r",
											"        for(var x = 0;x<jsonData._embedded.orders.length;x++) {\r",
											"            var placedAtTime = new Date(jsonData._embedded.orders[x].orderTimeConstraints.placedAt);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (convertedOrderDate < convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/orders/{{tenantId_brokerage}}/v1/orders?startDate=2019-01-01",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"orders",
										"{{tenantId_brokerage}}",
										"v1",
										"orders"
									],
									"query": [
										{
											"key": "startDate",
											"value": "2019-01-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrdersErrorNotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6451b305-6cbc-4701-aaec-014f7af224ae",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Display orders fails if wrong version is provided in url\", function () {\r",
											"\r",
											"    let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    pm.test(\"Status 404 Not Found is displayed\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response contains proper error type and code\", function () {\r",
											"        pm.expect(jsonData.status).to.be.eql(404) &&\r",
											"        pm.expect(jsonData.error).to.be.eql(\"Not Found\");\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(404) &&\r",
											"    pm.expect(jsonData.status).to.be.eql(404) &&\r",
											"    pm.expect(jsonData.error).to.be.eql(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/orders/{{tenantId_brokerage}}/v2/orders",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"orders",
										"{{tenantId_brokerage}}",
										"v2",
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrdersByOrderIdErrorNotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1f3f6d4-e92a-4edf-b36f-c1bd39d822a7",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Display orders by order id fails if wrong version is provided in url\", function () {\r",
											"\r",
											"    let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    pm.test(\"Status 404 Not Found is displayed\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response contains proper error type and code\", function () {\r",
											"        pm.expect(jsonData.status).to.be.eql(404) &&\r",
											"        pm.expect(jsonData.error).to.be.eql(\"Not Found\");\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(404) &&\r",
											"    pm.expect(jsonData.status).to.be.eql(404) &&\r",
											"    pm.expect(jsonData.error).to.be.eql(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/orders/{{tenantId_brokerage}}/v2/orders/qwerty",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"orders",
										"{{tenantId_brokerage}}",
										"v2",
										"orders",
										"qwerty"
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrdersErrorBadRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "040aa3ea-674a-423a-973e-580a3097296e",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Display order fails if bad url is used\", function () {\r",
											"\r",
											"    pm.test(\"Status 400 Bad Request is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response is without body\", function () {\r",
											"        pm.response.to.not.be.withBody;\r",
											"    });\r",
											"\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3c0b458c-ffed-478c-854b-74eccb5216ae",
										"exec": [
											"const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\r",
											"pm.environment.set(\"_tmp_randomString\", Array.from({length:6}, _ => c[Math.floor(Math.random()*c.length)]).join(''))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/orders/{{tenantId_brokerage}}/v1/orders/{{_tmp_randomString}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"orders",
										"{{tenantId_brokerage}}",
										"v1",
										"orders",
										"{{_tmp_randomString}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "postCreateNewOrder",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32aa4ff0-737b-4b6d-8a85-00f5578a91b3",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \"New order has been created and order id is displayed\", function () {\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"New order id is displayed\", function () {\r",
											"        pm.response.to.have.property(\"id\");\r",
											"    });\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "58ac6324-29a7-458f-9a5c-9b9bf17d73fe",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountId\":\"{{_tmp_accountId}}\",\n    \"custodyAccountId\":\"{{_tmp_custodyAccountId}}\",\n    \"securityId\":\"{{_tmp_securityId}}\",\n    \"securityListingId\":\"{{tmp_listing_ID}}\",\n    \"orderAction\":\"BUY\",\n    \"orderExecutionType\":\"MARKET\",\n    \"amount\":{\n    \t\"currencyIsoCode\":\"CHF\",\n    \t\"value\":1.00\n    },\n    \"validUntil\": {{PrS:nextWorkingDay}},\n    \"enteredBy\":\"{{_tmp_postEnteredById}}\",\n    \"placedBy\":\"{{_tmp_postEnteredById}}\"\n}\n"
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/orders/{{tenantId_brokerage}}/v1/orders",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"orders",
										"{{tenantId_brokerage}}",
										"v1",
										"orders"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Security Tests",
					"item": [
						{
							"name": "listSecurities",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f3f74d1-0ba4-47b7-9e2a-5acd40468663",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of securities is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"securitiesSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"securitiesSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    for (var i=0;i<jsonData.securities.length; i++){\r",
											"        if ((jsonData.securities[i].id !== null)&&(jsonData.securities[i].securityNumber !== null)&&(jsonData.securities[i].isin !== null)){\r",
											"            pm.environment.set(\"_tmp_securityId\",jsonData.securities[i].id);\r",
											"            pm.environment.set(\"_tmp_securityNumber\",jsonData.securities[i].securityNumber);\r",
											"            pm.environment.set(\"_tmp_isin\",jsonData.securities[i].isin);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_securityId\");\r",
											"    pm.environment.unset(\"_tmp_securityNumber\");\r",
											"    pm.environment.unset(\"_tmp_isin\");\r",
											"    //pm.environment.unset(\"_tmp_shortDescription\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7f2f42bd-4b39-4f73-9579-e2afe4f4c15c",
										"exec": [
											"eval(globals.generateAccessToken)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/securities",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"securities"
									]
								}
							},
							"response": []
						},
						{
							"name": "getSecuritiesByISIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d55fd2db-aed2-4363-b560-db75d4f766df",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of securities by ISIN is retrieved and response schema i validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let isin = pm.environment.get(\"_tmp_isin\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"securitiesSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    pm.test(\"Returned securities match to specified ISIN\", () => {\r",
											"        for(var x = 0;x<jsonData._embedded.securities.length;x++) {\r",
											"            //console.log(\"Iteration: \"+ x+1 +\" is: \"+jsonData._embedded.securities[x].isin);\r",
											"            result = result && (jsonData._embedded.securities[x].isin === isin);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e4c91c8b-4b5c-4682-b72a-d6b02e7a4b9d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/securities?isin={{_tmp_isin}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"securities"
									],
									"query": [
										{
											"key": "isin",
											"value": "{{_tmp_isin}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getSecuritiesByISINNestle",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cec0e878-1fdc-484e-9510-3fe70828bb56",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of securities by ISIN is retrieved and response schema i validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let isin = pm.environment.get(\"_tmp_isin\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"securitiesSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_securityId\",jsonData.securities[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_securityId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "23591ac1-7413-4786-acf6-3022a848e9bb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/securities?isin=CH9938863350",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"securities"
									],
									"query": [
										{
											"key": "isin",
											"value": "CH9938863350"
										}
									]
								},
								"description": "Pre-requisite for POST Create New Order\n"
							},
							"response": []
						},
						{
							"name": "getSecuritiesByTitle",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bdce5cef-1cf9-4bdd-a1b3-3b85bff76123",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of securities by ISIN is retrieved and response schema i validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let shortDescription = pm.environment.get(\"_tmp_shortDescription\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"securitiesSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    pm.test(\"Returned securities match to specified short description\", () => {\r",
											"        for(var x = 0;x<jsonData._embedded.securities.length;x++) {\r",
											"            //console.log(\"Iteration: \"+ x+1 +\" is: \"+jsonData._embedded.securities[x].descriptions[0].shortDescription);\r",
											"            result = result && (jsonData._embedded.securities[x].descriptions[0].shortDescription === shortDescription);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fd78f226-5516-467c-a5d0-3311cf74be3d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/securities?title={{_tmp_shortDescription}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"securities"
									],
									"query": [
										{
											"key": "title",
											"value": "{{_tmp_shortDescription}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getSecuritiesErrorForbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8cf03fc-ad93-45fb-a385-29d36f911a08",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List securities fail if access token is generated without needed scope\", function () {\r",
											"\r",
											"    let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    pm.test(\"Status 403 Forbidden is displayed\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response contains proper category, code and text\", function () {\r",
											"        pm.expect(jsonData._messages[0].category).to.be.eql(\"ERROR\") &&\r",
											"        pm.expect(jsonData._messages[0].code).to.be.eql(\"ERROR_ACCESS_DENIED\");\r",
											"        pm.expect(jsonData._messages[0].text).to.be.eql(\"Access Denied (Scope): Access is denied\");\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(403) &&\r",
											"    pm.expect(jsonData._messages[0].category).to.be.eql(\"ERROR\") &&\r",
											"    pm.expect(jsonData._messages[0].code).to.be.eql(\"ERROR_ACCESS_DENIED\");\r",
											"    pm.expect(jsonData._messages[0].text).to.be.eql(\"Access Denied (Scope): Access is denied\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "260d32a3-6e9e-48fd-abc9-c00d93baf2d5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/securities",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"securities"
									]
								}
							},
							"response": []
						},
						{
							"name": "getSecuritiesErrorNotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2842084d-2138-42b8-8ae9-03e9294aca28",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Display securities fails if wrong version is provided in url\", function () {\r",
											"\r",
											"    let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    pm.test(\"Status 404 Not Found is displayed\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response contains proper error type and code\", function () {\r",
											"        pm.expect(jsonData.status).to.be.eql(404) &&\r",
											"        pm.expect(jsonData.error).to.be.eql(\"Not Found\");\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(404) &&\r",
											"    pm.expect(jsonData.status).to.be.eql(404) &&\r",
											"    pm.expect(jsonData.error).to.be.eql(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "67fceb79-679d-424e-a5b0-f8a4046cb941",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v2/securities/{{_tmp_securityId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v2",
										"securities",
										"{{_tmp_securityId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getSecurityById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2795fa1-dac6-4f89-9f0e-23508eef9db8",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Security by ID is retrieved and response schema i validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let id = pm.environment.get(\"_tmp_securityId\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"securityByIdSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    pm.test(\"Returned security matches to specified ID\", () => {\r",
											"        pm.expect(jsonData.id).to.be.eql(id);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"    pm.expect(jsonData.id).to.be.eql(id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "44cbb674-3c2d-4850-91a2-ef9c72a918ab",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/securities/{{_tmp_securityId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"securities",
										"{{_tmp_securityId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getSecurityBySecurityNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e54f47ab-6ab8-40a1-b8af-f4b66ee14cca",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Security is retrieved by securityNumber and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitySchema = pm.environment.get(\"securitySchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var jsonDataEmbed = JSON.parse(responseBody)._embedded;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"securitySchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);        \r",
											"    });\r",
											"    \r",
											"    pm.test(\"Single security matched with securityNumber is in response\", function () {\r",
											"        pm.expect(jsonDataEmbed.securities.length).to.be.eql(1) &&\r",
											"        pm.expect(jsonDataEmbed.securities[0].securityNumber).to.be.eql(pm.environment.get(\"_tmp_securityNumber\"));\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true)   //pm.expect(tv4.validate(jsonData, securitySchema)).to.be.true\r",
											"    && pm.expect(jsonDataEmbed.securities.length).to.be.eql(1)\r",
											"    && pm.expect(jsonDataEmbed.securities[0].securityNumber).to.be.eql(pm.environment.get(\"_tmp_securityNumber\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ce2a737-600a-442a-a04b-6c981ca86c47",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/securities?securityNumber={{_tmp_securityNumber}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"securities"
									],
									"query": [
										{
											"key": "securityNumber",
											"value": "{{_tmp_securityNumber}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getSecurityErrorBadRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f02e0c3b-5119-4b1a-84fc-b26b2c2dd07e",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Display security fails if bad url is used\", function () {\r",
											"\r",
											"    pm.test(\"Status 400 Bad Request is displayed\", function () {\r",
											"        pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response is without body\", function () {\r",
											"        pm.response.to.not.be.withBody;\r",
											"    });\r",
											"\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "26ad0d40-1f26-4537-8551-da878b7bc66f",
										"exec": [
											"const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\r",
											"pm.environment.set(\"_tmp_randomString\", Array.from({length:6}, _ => c[Math.floor(Math.random()*c.length)]).join(''))"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/securities/{{_tmp_randomString}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"securities",
										"{{_tmp_randomString}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getSecurityErrorNotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3b4e364-0634-483c-abbf-7f1416df8caf",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Display security fails if url is completely broken\", function () {\r",
											"\r",
											"    let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    pm.test(\"Status 404 Not Found is displayed\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response contains proper error type and code\", function () {\r",
											"        pm.expect(jsonData.status).to.be.eql(404) &&\r",
											"        pm.expect(jsonData.error).to.be.eql(\"Not Found\");\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(404) &&\r",
											"    pm.expect(jsonData.status).to.be.eql(404) &&\r",
											"    pm.expect(jsonData.error).to.be.eql(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6668d738-0aac-49e0-bf81-a5e6bb66fbd9",
										"exec": [
											"const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\r",
											"pm.environment.set(\"_tmp_randomString\", Array.from({length:6}, _ => c[Math.floor(Math.random()*c.length)]).join(''))"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/securities{{_tmp_randomString}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"securities{{_tmp_randomString}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getSecurityByIdErrorForbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46d224f0-9470-4616-bb42-b0750e1e98b5",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Display security fails if access token is generated without needed scope\", function () {\r",
											"\r",
											"    let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    pm.test(\"Status 403 Forbidden is displayed\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response contains proper category, code and text\", function () {\r",
											"        pm.expect(jsonData._messages[0].category).to.be.eql(\"ERROR\") &&\r",
											"        pm.expect(jsonData._messages[0].code).to.be.eql(\"ERROR_ACCESS_DENIED\");\r",
											"        pm.expect(jsonData._messages[0].text).to.be.eql(\"Access Denied (Scope): Access is denied\");\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(403) &&\r",
											"    pm.expect(jsonData._messages[0].category).to.be.eql(\"ERROR\") &&\r",
											"    pm.expect(jsonData._messages[0].code).to.be.eql(\"ERROR_ACCESS_DENIED\");\r",
											"    pm.expect(jsonData._messages[0].text).to.be.eql(\"Access Denied (Scope): Access is denied\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "596b5fd4-5f88-427f-ac75-1c1a6d6a8868",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/securities/{{_tmp_securityId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"securities",
										"{{_tmp_securityId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getSecurityTypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "42041493-8719-4348-83f9-e09408e76cac",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Security types are retrieved and response schema is validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var securityTypesSchema = pm.environment.get(\"securityTypesSchema\");\r",
											"    var jsonDataEmbed = JSON.parse(responseBody)._embedded;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"securityTypesSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);        \r",
											"    });\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"if (pm.response.code === 200) {\r",
											"    pm.environment.set(\"_tmp_typeId\",jsonData._embedded.securityTypes[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_typeId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bb25496c-dd73-4599-b58f-8c05baed4f0e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/types",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"types"
									]
								}
							},
							"response": []
						},
						{
							"name": "getSecurityTypeById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c692d0dc-68ea-418a-a55c-6380ef656f12",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Security type is retrieved by its' ID and response schema is validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var securityTypesSchema = pm.environment.get(\"securityTypeSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let typeId = pm.environment.get(\"_tmp_typeId\");\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"securityTypeSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);        \r",
											"    });\r",
											"\r",
											"    pm.test(\"Expected security type is displayed\", function () {\r",
											"        pm.expect(jsonData.id).to.eql(typeId);\r",
											"    });\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"    pm.expect(jsonData.id).to.eql(typeId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "89687d44-ad17-438d-bf7e-38579def55eb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/types/{{_tmp_typeId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"types",
										"{{_tmp_typeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getSecurityBySecurityTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7dcc4285-5381-4ea4-9656-919f65faaa65",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Security is retrieved by security type ID and response schema is validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var securityTypesSchema = pm.environment.get(\"securitiesSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"securitiesSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);        \r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c60e23c8-9608-458a-825a-5e82d9831c9c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/securities?securityTypeId={{_tmp_typeId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"securities"
									],
									"query": [
										{
											"key": "securityTypeId",
											"value": "{{_tmp_typeId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getListings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cabe988c-2492-413b-bf88-8bcc37d282c3",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Listings are returned and all assertions passed\", function (){",
											"",
											"    var listingsSchema = pm.environment.get(\"listingsSchema\");",
											"    pm.test(\"Status 200 OK is displayed\", function () {",
											"    pm.response.to.have.status(200);",
											"    });",
											"    ",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"listingsSchema\",jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    }); ",
											"    ",
											"    pm.response.to.have.status(200)",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);   ",
											"    ",
											"",
											"});",
											"",
											"/*pm.test(\"get listing ID\", () => {",
											"    var ticker=\"ROG-T5\";",
											"    jsonData._embedded.listings.forEach(function(obj){",
											"       if(obj.ticker===ticker){",
											"            pm.globals.set('listing_ID', obj.id);",
											"       }",
											"   });   ",
											"});*/",
											"",
											"if (pm.response.code === 200) {",
											"    pm.environment.set(\"tmp_listing_ID\",jsonData._embedded.listings[0].id);",
											"} else {",
											"    pm.environment.unset(\"tmp_listing_ID\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/listings",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"listings"
									]
								}
							},
							"response": []
						},
						{
							"name": "getListingsErrorNotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f35146b-4ca7-42e2-9871-af9baa186704",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List listings fails if url is completely broken\", function () {\r",
											"\r",
											"    let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    pm.test(\"Status 404 Not Found is displayed\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response contains proper error type and code\", function () {\r",
											"        pm.expect(jsonData.status).to.be.eql(404) &&\r",
											"        pm.expect(jsonData.error).to.be.eql(\"Not Found\");\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(404) &&\r",
											"    pm.expect(jsonData.status).to.be.eql(404) &&\r",
											"    pm.expect(jsonData.error).to.be.eql(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "84b0ad5b-2412-4ded-8d55-49761d831cab",
										"exec": [
											"const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\r",
											"pm.environment.set(\"_tmp_randomString\", Array.from({length:6}, _ => c[Math.floor(Math.random()*c.length)]).join(''))"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/listings{{_tmp_randomString}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"listings{{_tmp_randomString}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getListingsErrorBadRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a8d60b9-d8a9-4f6e-804f-2ed8857c8204",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Display listings fails if bad url is used\", function (){",
											"",
											"    pm.test(\"Status 400 Bad Request is displayed\", function () {",
											"        pm.response.to.have.status(400);",
											"    });",
											"",
											"    pm.test(\"Response is without body\", function () {",
											"        pm.response.to.not.be.withBody;",
											"    });",
											"",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fc5a2959-4659-4f58-b108-1502bbe084a5",
										"exec": [
											"const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\r",
											"pm.environment.set(\"_tmp_randomString\", Array.from({length:6}, _ => c[Math.floor(Math.random()*c.length)]).join(''))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/listings/{{_tmp_randomString}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"listings",
										"{{_tmp_randomString}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getListingsErrorForbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1dd079af-95c9-4aee-8569-a1b22b407cf1",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List listings fail if access token is generated without needed scope\", function () {\r",
											"\r",
											"    let jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    pm.test(\"Status 403 Forbidden is displayed\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response contains proper error code and category\", function () {\r",
											"        pm.expect(jsonData._messages[0].category).to.be.eql(\"ERROR\") &&\r",
											"        pm.expect(jsonData._messages[0].code).to.be.eql(\"ERROR_ACCESS_DENIED\");\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(403) &&\r",
											"    pm.expect(jsonData._messages[0].category).to.be.eql(\"ERROR\") &&\r",
											"    pm.expect(jsonData._messages[0].code).to.be.eql(\"ERROR_ACCESS_DENIED\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0fb919e5-26b2-4e72-ba7f-5f1d68ae6b1d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/listings",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"listings"
									]
								}
							},
							"response": []
						},
						{
							"name": "getListingByListingId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3ac7b3d4-4df2-4d23-a9be-ba1c30d1093f",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Listings are returns and all assertions passed\", function (){",
											"    pm.test(\"Main elements are present\", () => {",
											"        pm.expect(jsonData).to.have.property(\"id\");",
											"        pm.expect(jsonData).to.have.property(\"ticker\");",
											"        pm.expect(jsonData).to.have.property(\"rate\");",
											"        pm.expect(jsonData).to.have.property(\"fixAt\");",
											"        pm.expect(jsonData).to.have.property(\"roundLot\");",
											"    });",
											"",
											"    pm.test(\"ID is correct\", () => {",
											"        pm.expect(jsonData.id).to.be.eql(pm.environment.get(\"tmp_listing_ID\"));",
											"    });",
											" ",
											"    pm.expect(jsonData).to.have.property(\"id\")&&",
											"    pm.expect(jsonData).to.have.property(\"ticker\")&&",
											"    pm.expect(jsonData).to.have.property(\"rate\")&&",
											"    pm.expect(jsonData).to.have.property(\"fixAt\")&&",
											"    pm.expect(jsonData).to.have.property(\"roundLot\")&&",
											"    pm.expect(jsonData.id).to.be.eql(pm.environment.get(\"tmp_listing_ID\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/listings/{{tmp_listing_ID}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"listings",
										"{{tmp_listing_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getListingBySecurityId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e3ee9cd-f334-4eb2-9afe-a85f67ad14a1",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Listings are returns for provided security ID and all assertions passed\", function (){",
											"",
											"    pm.test(\"Main elements are present\", function() {",
											"        jsonData._embedded.listings.forEach(function(listings) {",
											"            pm.expect(listings).to.have.property(\"id\");",
											"            pm.expect(listings).to.have.property(\"ticker\");",
											"            pm.expect(listings).to.have.property(\"rate\");",
											"            pm.expect(listings).to.have.property(\"fixAt\");",
											"            pm.expect(listings).to.have.property(\"roundLot\");",
											"        });",
											"    });",
											"    ",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    ",
											"    jsonData._embedded.listings.forEach(function(listings) {",
											"        pm.expect(listings).to.have.property(\"id\");",
											"        pm.expect(listings).to.have.property(\"ticker\");",
											"        pm.expect(listings).to.have.property(\"rate\");",
											"        pm.expect(listings).to.have.property(\"fixAt\");",
											"        pm.expect(listings).to.have.property(\"roundLot\");",
											"        })&&",
											"    pm.response.to.have.status(200);",
											" ",
											"});",
											"",
											"if (pm.response.code === 200) {",
											"    var jsonData = JSON.parse(responseBody)._embedded;",
											"    pm.environment.set(\"_tmp_postSecurityListingId\",jsonData.listings[0].id);",
											"} else {",
											"    pm.environment.unset(\"_tmp_postSecurityListingId\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/listings?securityId={{_tmp_securityId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"listings"
									],
									"query": [
										{
											"key": "securityId",
											"value": "{{_tmp_securityId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getTradingPlaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e68afe1-1498-46fc-bbbd-5fa6b59c9c03",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of trading places is retrieved and response schema is validated\", function () {\r",
											"\r",
											"    var tradingPlacesSchema = pm.environment.get(\"tradingPlacesSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"tradingPlacesSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"// store tradingPlaceId as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_tradingPlaceId\",jsonData.tradingPlaces[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_tradingPlaceId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6f67cc4c-5eea-41b8-a660-951f80bc37b4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/tradingplaces",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"tradingplaces"
									]
								}
							},
							"response": []
						},
						{
							"name": "getTradingPlaceByTradingPlaceId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf648aa9-cc23-4525-a7cf-e725315c11b8",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Trading place is retrieved by tradingPlaceId and response schema is validated\", function () {\r",
											"\r",
											"    var tradingPlaceSchema = pm.environment.get(\"tradingPlaceSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"tradingPlaceSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true); \r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"    && pm.expect(jsonData.id).to.be.eql(pm.environment.get(\"_tmp_tradingPlaceId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a53ea4fa-aefe-4e17-a622-0beeec1a07fc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/tradingplaces/{{_tmp_tradingPlaceId}}",
									"host": [
										"{{env_brokerage}}"
									],
									"path": [
										"brokerage",
										"securities",
										"{{tenantId_brokerage}}",
										"v1",
										"tradingplaces",
										"{{_tmp_tradingPlaceId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "17f02780-5410-490f-80d7-e2fb9e79afb0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d8d07111-9c28-427f-ab44-702ce5e77e5f",
						"type": "text/javascript",
						"exec": [
							"eval(globals.sessionNavigate)();",
							"pm.globals.unset(\"_tr_\" + request.name);"
						]
					}
				}
			]
		},
		{
			"name": "Deprecated",
			"item": [
				{
					"name": "(WiP) List securities by tradingPlaceId (C43995803)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b591d0df-bb8b-4770-80aa-a355721ae32f",
								"exec": [
									"//testRailTestCases = \"C43995821\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getTradingPlaces\",",
									"        \"getSecuritiesByTradingPlaceId\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getTradingPlaces\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getSecuritiesByTradingPlaceId\", testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4303db6a-ffee-4871-b2c4-434b7ce0f49f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10200, BUG: PRODUCT-10633"
					},
					"response": []
				},
				{
					"name": "(WIP) List listings by tradingPlaceId (C43995815)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5f315d48-f9ed-435d-8f9e-12c13c50f5d5",
								"exec": [
									"//testRailTestCases = \"C43995815\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getTradingPlaces\",",
									"        \"getListingsByTradingPlaceId\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getTradingPlaces\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getListingsByTradingPlaceId\", testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f88bfb21-6836-4444-86c9-51e4ca14945d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10200, BUG: PRODUCT-10633"
					},
					"response": []
				},
				{
					"name": "getSecuritiesByTradingPlaceId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "75ffc146-2bd6-4723-943f-225053f65a85",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Securities are retrieved by tradingPlaceId and response schema is validated\", function () {\r",
									"\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									"    \r",
									"    pm.test(\"Status 200 OK is displayed\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response schema is correct\", () => {\r",
									"        schemaValidationPassed = eval(globals.schemaValidator)(\"securitiesSchema\",jsonData);\r",
									"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
									"    });\r",
									"\r",
									"    pm.response.to.have.status(200)\r",
									"    && pm.expect(schemaValidationPassed).to.be.eql(true)\r",
									"    && pm.expect(jsonData.id).to.be.eql(pm.environment.get(\"_tmp_tradingPlaceId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d2ec97fb-a71c-4055-ac2b-a72da5ce9a13",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json; charset=UTF-8"
							},
							{
								"key": "accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/securities?tradingPlaceId={{_tmp_tradingPlaceId}}",
							"host": [
								"{{env_brokerage}}"
							],
							"path": [
								"brokerage",
								"securities",
								"{{tenantId_brokerage}}",
								"v1",
								"securities"
							],
							"query": [
								{
									"key": "tradingPlaceId",
									"value": "{{_tmp_tradingPlaceId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getListingsByTradingPlaceId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec7d2a01-5d97-446c-b58f-e73ca073022a",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Listings are returned and all assertions passed\", function () {\r",
									"\r",
									"    pm.test(\"Status 200 OK is displayed\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response schema is correct\", () => {\r",
									"        schemaValidationPassed = eval(globals.schemaValidator)(\"listingsSchema\",jsonData);\r",
									"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
									"    });\r",
									"\r",
									"    pm.response.to.have.status(200)\r",
									"    && pm.expect(schemaValidationPassed).to.be.eql(true)\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a5b1ea55-186f-40c8-abe4-fd9376ecde31",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json; charset=UTF-8"
							},
							{
								"key": "accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{env_brokerage}}/brokerage/securities/{{tenantId_brokerage}}/v1/listings?tradingPlaceId={{_tmp_tradingPlaceId}}",
							"host": [
								"{{env_brokerage}}"
							],
							"path": [
								"brokerage",
								"securities",
								"{{tenantId_brokerage}}",
								"v1",
								"listings"
							],
							"query": [
								{
									"key": "tradingPlaceId",
									"value": "{{_tmp_tradingPlaceId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "(WiP) Display security having limited permissions (C43995843)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5d2d029b-6992-42b4-8437-b684bb9be084",
								"exec": [
									"//testRailTestCases = \"C43995821\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getSecurities\",",
									"        \"getAuthTestTokenK8SNoAssetsPermissions\",",
									"        \"getSecurityByIdErrorForbidden\",",
									"        \"getAuthTestTokenK8S\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getSecurities\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getAuthTestTokenK8SNoAssetsPermissions\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getSecurityByIdErrorForbidden\", testRailTestCases);",
									"    pm.globals.set(\"_tr_getAuthTestTokenK8S\",\"[postCondition]\");",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0224907f-ee65-4585-9134-526ee486af93",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10214"
					},
					"response": []
				}
			]
		},
		{
			"name": "Clean TestRail Run",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7eb021c5-6cd1-4dcc-967d-4b2db34fc2a5",
						"exec": [
							"// Prepare list of TestRail tests for 'Clean TestRail Run' request",
							"//var execTests = pm.globals.get(\"testRailTestsInRun\");",
							"var execTests = data.executedTests;",
							"console.log(\"TestRail, tests executed in last run: \" + execTests);",
							"execTests = execTests.replace(/C/g, \"\");",
							"//console.log(\"TestRail, first cleanup: \" + execTests);",
							"execTests = execTests.replace(/ /g, \", \");",
							"//console.log(\"TestRail, second cleanup: \" + execTests);",
							"execTests = execTests.replace(/,,/g, \",\");",
							"pm.globals.set(\"testRailTestsInRun\", execTests); ",
							"",
							"var array = JSON.parse(\"[\" + execTests + \"]\"); //convert string to array",
							"for(let i = 0; i < 10; i++){",
							"    let runId = JSON.parse(responseBody)[i].id;",
							"    let runName = JSON.parse(responseBody)[i].name;",
							"    let runSuiteId = JSON.parse(responseBody)[i].suite_id;",
							"    if (runName === \"MODULE-brokerage\") { //determine proper run",
							"        //console.log(runId);   ",
							"        console.log(\"TestRail run '\" + runId + \"' updating for tests: \" + execTests);",
							"        pm.sendRequest({",
							"            url: \"https://testrail.ebs.crealogix.net/index.php?/api/v2/update_run/\" + runId,",
							"            method: \"POST\",",
							"            header: {",
							"                \"Authorization\": \"Basic bWlsYW4ua2FyYWRlZ2xpY0BjcmVhbG9naXguY29tOlNTQ25hcG9saTEyMzQ1Njc4OQ==\",",
							"                \"Content-Type\": \"application/json\"",
							"            },",
							"            body: {",
							"                mode: 'raw',",
							"                raw: JSON.stringify({ include_all: false, case_ids: array })",
							"        \t}",
							"        });",
							"        break;",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0af662f9-abd2-4768-892a-dafd9bbc73e2",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "SSCnapoli123456789",
							"type": "string"
						},
						{
							"key": "username",
							"value": "milan.karadeglic@crealogix.com",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "content-type",
						"value": "application/json; charset=UTF-8"
					},
					{
						"key": "accept",
						"value": "application/json, application/hal+json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{token}}",
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://testrail.ebs.crealogix.net/index.php?/api/v2/get_runs/8=",
					"protocol": "https",
					"host": [
						"testrail",
						"ebs",
						"crealogix",
						"net"
					],
					"path": [
						"index.php"
					],
					"query": [
						{
							"key": "/api/v2/get_runs/8",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getAuthTestToken",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7cff2e91-2097-41b9-871f-2177fa68e510",
						"exec": [
							"console.log(\"Test Token url is: \" + pm.environment.get(\"env_security_testToken\"));",
							"",
							"// Set up pre-conditions with Chai Assertion library. https://www.chaijs.com/api/bdd/",
							"pm.expect(pm.environment.get(\"env_securemail\")).to.be.a('string', \"The env_securemail is not defined\");",
							"pm.expect(pm.environment.get(\"env_security_testToken\")).to.be.a('string', \"The testTokenUrl is not defined\");",
							"pm.expect(pm.environment.get(\"tenantId_security\")).to.be.a('string', \"The tenantId is not defined\");",
							"pm.expect(pm.environment.get(\"tenantName_security\")).to.be.a('string', \"The tenantName is not defined\");",
							"pm.expect(pm.environment.get(\"userName_security\")).to.be.a('string', \"The userName is not defined\");",
							"pm.expect(pm.environment.get(\"contractNo_security\")).to.be.a('string', \"The contractNo is not defined\");",
							"pm.expect(pm.environment.get(\"bcNo_security\")).to.be.a('string', \"The bcNo is not defined\");",
							"pm.expect(pm.environment.get(\"userId_security\")).to.be.a('string', \"The userId is not defined\");",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "87b56aa1-1a26-4e23-bee5-d8853b856f1c",
						"exec": [
							"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.environment.set(\"access_token\", pm.response.text());",
							"});",
							"",
							"",
							"// Session navigate from PrS using eval()",
							"eval(globals.sessionNavigate)();",
							"",
							"// Reset reference to TR test cases",
							"pm.globals.unset(\"_tr_\" + request.name);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"tenant_id\": {{tenantId_security}},\r\n  \"acsKey\": \"i6PiNObtdp2rCNW7mlV51BDSY4zAliSvBCyVsuML1000203567\",\r\n  \"tenant_name\": \"{{tenantName_security}}\",\r\n  \"user_name\": \"{{userId_security}}\",\r\n  \"contractNo\": \"{{contractNo_security}}\",\r\n  \"languageCode\": \"en\",\r\n  \"bcNo\": \"{{bcNo_security}}\",\r\n  \"authorities\": [],\r\n  \"client_id\": \"postman\",\r\n  \"user_id\": {{userId_security}},\r\n  \"scope\": [\r\n    \"https://api.crealogix.com/dban\",\r\n    \"read\",\r\n    \"https://api.crealogix.com/contracts/contract.advisor.readonly\",\r\n    \"https://api.crealogix.com/assets/account.balance.readonly\",\r\n    \"https://api.crealogix.com/contracts/contract.metadata.readonly\",\r\n    \"https://api.crealogix.com/contracts/contract.person.readonly\",\r\n    \"https://api.crealogix.com/payments/payment.initiate\",\r\n    \"https://api.crealogix.com/assets/account.transaction.readonly\",\r\n    \"https://api.crealogix.com/assets/account.permission.readonly\",\r\n    \"write\",\r\n    \"https://api.crealogix.com/assets/account.metadata.readonly\",\r\n    \"https://api.crealogix.com/messages/securemail.write\",\r\n    \"https://api.crealogix.com/messages/securemail.read\",\r\n    \"https://api.crealogix.com/payments/payment.read\",\r\n    \"https://api.crealogix.com/payments/payment.write\",\r\n    \"https://api.crealogix.com/brokerage/security.readonly\",\r\n    \"https://api.crealogix.com/brokerage/tradingplace.readonly\",\r\n    \"https://api.crealogix.com/brokerage/depository.readonly\",\r\n    \"https://api.crealogix.com/brokerage/order.readonly\",\r\n\t\"https://api.crealogix.com/brokerage/order.write\"\r\n  ],\r\n  \"loginName\": \"{{userId_security}}\",\r\n  \"exp\": 32479694642,\r\n  \"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\r\n  \"iat\": 1553855569\r\n}"
				},
				"url": {
					"raw": "{{env_security_testToken}}",
					"host": [
						"{{env_security_testToken}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "getAuthTestTokenK8S",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "56ce6cc5-cf1c-4499-987d-39a440fa0467",
						"exec": [
							"console.log(\"Test Token url is: \" + pm.environment.get(\"env_security_testToken\"));",
							"",
							"// Set up pre-conditions with Chai Assertion library. https://www.chaijs.com/api/bdd/",
							"/*",
							"pm.expect(pm.environment.get(\"env_securemail\")).to.be.a('string', \"The env_securemail is not defined\");",
							"pm.expect(pm.environment.get(\"env_security_testToken\")).to.be.a('string', \"The testTokenUrl is not defined\");",
							"pm.expect(pm.environment.get(\"tenantId_security\")).to.be.a('string', \"The tenantId is not defined\");",
							"pm.expect(pm.environment.get(\"tenantName_security\")).to.be.a('string', \"The tenantName is not defined\");",
							"pm.expect(pm.environment.get(\"userName_security\")).to.be.a('string', \"The userName is not defined\");",
							"pm.expect(pm.environment.get(\"contractNo_security\")).to.be.a('string', \"The contractNo is not defined\");",
							"pm.expect(pm.environment.get(\"bcNo_security\")).to.be.a('string', \"The bcNo is not defined\");",
							"pm.expect(pm.environment.get(\"userId_security\")).to.be.a('string', \"The userId is not defined\");",
							"*/"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "28a52af5-e18b-4653-9632-7da6554d392e",
						"exec": [
							"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
							"    pm.response.to.not.be.error;",
							"    //pm.response.to.be.withBody;",
							"    pm.environment.set(\"access_token\", pm.response.text());",
							"});",
							"",
							"",
							"// Session navigate from PrS using eval()",
							"eval(globals.sessionNavigate)();",
							"",
							"// Reset reference to TR test cases",
							"pm.globals.unset(\"_tr_\" + request.name);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"tenant_id\": {{tenantId_security}},\r\n  \"acsKey\": \"i6PiNObtdp2rCNW7mlV51BDSY4zAliSvBCyVsuML1000203567\",\r\n  \"tenant_name\": \"{{tenantName_security}}\",\r\n  \"sub\": \"{{bcNo_security}}:{{userId_security}}\",\r\n  \"user_name\": \"{{userId_security}}\",\r\n  \"contractNo\": \"{{contractNo_security}}\",\r\n  \"languageCode\": \"en\",\r\n  \"bcNo\": \"{{bcNo_security}}\",\r\n  \"aud\": [\"dban\"],\r\n  \"authorities\": [\"DBAN_ADMIN\", \"DBAN_USER\"],\r\n  \"client_id\": \"postman\",\r\n  \"user_id\": {{userId_security}},\r\n  \"nonce\": \"{{nonce}}\",\r\n  \"scope\": [\r\n\t\"https://api.crealogix.com/dban\",\r\n\t\"read\",\r\n\t\"write\",\r\n\t\"https://api.crealogix.com/contracts/contract.advisor.readonly\",\r\n\t\"https://api.crealogix.com/contracts/contract.metadata.readonly\",\r\n\t\"https://api.crealogix.com/contracts/contract.person.readonly\",\r\n\t\"https://api.crealogix.com/payments/payment.initiate\",\r\n\t\"https://api.crealogix.com/payments/payment.read\",\r\n\t\"https://api.crealogix.com/payments/payment.write\",\r\n\t\"https://api.crealogix.com/assets/account#read\",\r\n\t\"https://api.crealogix.com/assets/account/read\",\r\n\t\"https://api.crealogix.com/assets/account.transaction#read\",\r\n\t\"https://api.crealogix.com/assets/account.name\",\r\n\t\"https://api.crealogix.com/assets/account.image\",\r\n\t\"https://api.crealogix.com/assets/cuac#read\",\r\n\t\"https://api.crealogix.com/assets/portfolio#read\",\r\n\t\"https://api.crealogix.com/messages/securemail.write\",\r\n\t\"https://api.crealogix.com/messages/securemail.read\",\r\n\t\"https://api.crealogix.com/messages/document.category.read\",\r\n\t\"https://api.crealogix.com/messages/document.category.write\",\r\n\t\"https://api.crealogix.com/messages/document.write\",\r\n\t\"https://api.crealogix.com/messages/document.read\",\r\n\t\"https://api.crealogix.com/brokerage/order\",\r\n    \"https://api.crealogix.com/brokerage/order#read\",\t\r\n\t\"https://api.crealogix.com/brokerage/security#read\",\r\n    \"https://api.crealogix.com/brokerage/tradingplace#read\",\t\r\n    \"https://api.crealogix.com/brokerage/depository#read\",\r\n\t\"https://api.crealogix.com/deeplink/domains\",\r\n\t\"https://api.crealogix.com/deeplink/links\"\r\n  ],\r\n  \"loginName\": \"{{userId_security}}\",\r\n  \"exp\": 32479694642,\r\n  \"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\r\n  \"iat\": 1553855569\r\n}"
				},
				"url": {
					"raw": "{{env_security_testToken}}",
					"host": [
						"{{env_security_testToken}}"
					]
				},
				"description": "Retrieve the test token"
			},
			"response": []
		},
		{
			"name": "getAuthTestTokenK8Sv2 (C41673950)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "41428587-2d51-4af8-9e5c-4fb5ed8ed715",
						"exec": [
							"/*determine test case ID from request name*/",
							"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
							"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
							"",
							"/*add current test case ID to list of already executed tests*/",
							"eval(globals.testsExecuted)(testRailTestCases);",
							"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
							"",
							"//store test case ID of current request for linking with Test Rail",
							"pm.globals.set(\"_tr_\" + request.name, testRailTestCases);",
							"",
							"//call global function to generate access token",
							"eval(globals.generateAccessToken)();"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6234ad5e-380a-4e48-820f-2671a269562a",
						"exec": [
							"/*",
							"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
							"    pm.response.to.not.be.error;",
							"    //pm.response.to.be.withBody;",
							"    pm.environment.set(\"access_token\", pm.response.text());",
							"});",
							"*/",
							"",
							"// Session navigate from PrS using eval()",
							"eval(globals.sessionNavigate)();",
							"",
							"// Reset reference to TR test cases",
							"pm.globals.unset(\"_tr_\" + request.name);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "HEAD",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "httpbin.org/uuid",
					"host": [
						"httpbin",
						"org"
					],
					"path": [
						"uuid"
					]
				},
				"description": "Retrieve the test token"
			},
			"response": []
		},
		{
			"name": "getAuthTestTokenNoAssetsPermissions",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c98cd15e-7ed2-4d11-9f6d-9c31c189d00b",
						"exec": [
							"// This is only required if there are multiple \"getToken\" requests and some need to be skipped",
							"//postman.setNextRequest(\"getAllTopics (C41673954)\");",
							"",
							"console.log(\"Test Token url is: \" + pm.environment.get(\"env_security_testToken\"));",
							"",
							"// Set up pre-conditions with Chai Assertion library. https://www.chaijs.com/api/bdd/",
							"//pm.expect(pm.environment.get(\"env_securemail\")).to.be.a('string', \"The env_securemail is not defined\");",
							"//pm.expect(pm.environment.get(\"env_security_testToken\")).to.be.a('string', \"The testTokenUrl is not defined\");",
							"//pm.expect(pm.environment.get(\"tenantId_security\")).to.be.a('string', \"The tenantId is not defined\");",
							"//pm.expect(pm.environment.get(\"tenantName_security\")).to.be.a('string', \"The tenantName is not defined\");",
							"//pm.expect(pm.environment.get(\"userName_security\")).to.be.a('string', \"The userName is not defined\");",
							"//pm.expect(pm.environment.get(\"contractNo_security\")).to.be.a('string', \"The contractNo is not defined\");",
							"//pm.expect(pm.environment.get(\"bcNo_security\")).to.be.a('string', \"The bcNo is not defined\");",
							"//pm.expect(pm.environment.get(\"userId_security\")).to.be.a('string', \"The userId is not defined\");",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e9eec690-3319-4d8f-bea1-8700869e1232",
						"exec": [
							"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
							"    pm.response.to.not.be.error;",
							"    //pm.response.to.be.withBody;",
							"    pm.environment.set(\"access_token\", pm.response.text());",
							"});",
							"",
							"",
							"// Session navigate from PrS using eval()",
							"eval(globals.sessionNavigate)();",
							"",
							"// Reset reference to TR test cases",
							"pm.globals.unset(\"_tr_\" + request.name);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"tenant_id\": {{tenantId_security}},\r\n  \"acsKey\": \"i6PiNObtdp2rCNW7mlV51BDSY4zAliSvBCyVsuML1000203567\",\r\n  \"tenant_name\": \"{{tenantName_security}}\",\r\n  \"user_name\": \"{{userId_security}}\",\r\n  \"contractNo\": \"{{contractNo_security}}\",\r\n  \"languageCode\": \"en\",\r\n  \"bcNo\": \"{{bcNo_security}}\",\r\n  \"aud\": [\"dban\"],\r\n  \"authorities\": [\"DBAN_ADMIN\", \"DBAN_USER\"],\r\n  \"client_id\": \"postman\",\r\n  \"user_id\": {{userId_security}},\r\n  \"scope\": [\r\n\t\"https://api.crealogix.com/payments/payment.initiate\",\r\n\t\"https://api.crealogix.com/contracts/contract.metadata.readonly\",\r\n\t\"https://api.crealogix.com/contracts/contract.person.readonly\",\r\n\t\"https://api.crealogix.com/contracts/contract.advisor.readonly\",\r\n\t\"https://api.crealogix.com/messages/document.metadata.readonly\",\r\n\t\"https://api.crealogix.com/messages/document.content.readonly\"\r\n  ],\r\n  \"loginName\": \"{{userId_security}}\",\r\n  \"exp\": 32479694642,\r\n  \"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\r\n  \"iat\": 1553855569\r\n}"
				},
				"url": {
					"raw": "{{env_security_testToken}}",
					"host": [
						"{{env_security_testToken}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "getAuthTestTokenK8SNoAssetsPermissions",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d65ee4ee-7310-4bfc-aa35-8cd7259d76eb",
						"exec": [
							"// This is only required if there are multiple \"getToken\" requests and some need to be skipped",
							"//postman.setNextRequest(\"getAllTopics (C41673954)\");",
							"",
							"console.log(\"Test Token url is: \" + pm.environment.get(\"env_security_testToken\"));",
							"",
							"// Set up pre-conditions with Chai Assertion library. https://www.chaijs.com/api/bdd/",
							"//pm.expect(pm.environment.get(\"env_securemail\")).to.be.a('string', \"The env_securemail is not defined\");",
							"//pm.expect(pm.environment.get(\"env_security_testToken\")).to.be.a('string', \"The testTokenUrl is not defined\");",
							"//pm.expect(pm.environment.get(\"tenantId_security\")).to.be.a('string', \"The tenantId is not defined\");",
							"//pm.expect(pm.environment.get(\"tenantName_security\")).to.be.a('string', \"The tenantName is not defined\");",
							"//pm.expect(pm.environment.get(\"userName_security\")).to.be.a('string', \"The userName is not defined\");",
							"//pm.expect(pm.environment.get(\"contractNo_security\")).to.be.a('string', \"The contractNo is not defined\");",
							"//pm.expect(pm.environment.get(\"bcNo_security\")).to.be.a('string', \"The bcNo is not defined\");",
							"//pm.expect(pm.environment.get(\"userId_security\")).to.be.a('string', \"The userId is not defined\");",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d19cb445-6323-4e37-96e7-577098bf03b0",
						"exec": [
							"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
							"    pm.response.to.not.be.error;",
							"    //pm.response.to.be.withBody;",
							"    pm.environment.set(\"access_token\", pm.response.text());",
							"});",
							"",
							"",
							"// Session navigate from PrS using eval()",
							"eval(globals.sessionNavigate)();",
							"",
							"// Reset reference to TR test cases",
							"pm.globals.unset(\"_tr_\" + request.name);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"tenant_id\": {{tenantId_soba}},\r\n  \"acsKey\": \"i6PiNObtdp2rCNW7mlV51BDSY4zAliSvBCyVsuML1000203567\",\r\n  \"tenant_name\": \"{{tenantName_security}}\",\r\n  \"user_name\": \"{{userId_security}}\",\r\n  \"contractNo\": \"{{contractNo_security}}\",\r\n  \"languageCode\": \"en\",\r\n  \"bcNo\": \"{{bcNo_security}}\",\r\n  \"aud\": [\"dban\"],\r\n  \"authorities\": [\"DBAN_ADMIN\", \"DBAN_USER\"],\r\n  \"client_id\": \"postman\",\r\n  \"user_id\": {{userId_soba}},\r\n  \"scope\": [\r\n\t\"https://api.crealogix.com/payments/payment.initiate\",\r\n\t\"https://api.crealogix.com/contracts/contract.metadata.readonly\",\r\n\t\"https://api.crealogix.com/contracts/contract.person.readonly\",\r\n\t\"https://api.crealogix.com/contracts/contract.advisor.readonly\",\r\n\t\"https://api.crealogix.com/messages/document.metadata.readonly\",\r\n\t\"https://api.crealogix.com/messages/document.content.readonly\"\r\n  ],\r\n  \"loginName\": \"{{userId_security}}\",\r\n  \"exp\": 32479694642,\r\n  \"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\r\n  \"iat\": 1553855569\r\n}"
				},
				"url": {
					"raw": "{{env_security_testToken}}",
					"host": [
						"{{env_security_testToken}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e071dba7-8b5f-429b-bb5f-0b9fa3a0d012",
				"type": "text/javascript",
				"exec": [
					"//************************************************************************************************",
					"// variable initialization************************************************************************",
					"//************************************************************************************************",
					"var test = pm.environment.get(\"testRailTestsInRun\");",
					"if( !test) {",
					"    pm.environment.set(\"testRailTestsInRun\",\"\");",
					"}",
					"",
					"//************************************************************************************************",
					"// connect to TestRail ***************************************************************************",
					"//************************************************************************************************",
					"pm.globals.set(\"TESTRAIL_DOMAIN\",\"testrail.ebs.crealogix.net\");",
					"pm.globals.set(\"TESTRAIL_USERNAME\",\"milan.karadeglic@crealogix.com\"); ",
					"pm.globals.set(\"TESTRAIL_APIKEY\",\"Q4MlDw1e70Kxh1g1YPq9-Dg0abDWer.pSWcVWcxO4\");",
					"pm.globals.set(\"TESTRAIL_PROJECTID\",8); ",
					"pm.globals.set(\"TESTRAIL_TITLE\",\"Postman API Tests\");",
					"",
					"//************************************************************************************************",
					"// Schema for 'securities' ***********************************************************************",
					"// manually generated ***********************************************************",
					"//************************************************************************************************",
					"const securitiesSchema = {",
					"    \"type\": \"object\",",
					"    \"required\": [",
					"        \"securities\", ",
					"        \"page\"\t\t\t\t",
					"    ],",
					"    \"properties\": {",
					"        \"securities\": {",
					"\t\t\"type\": \"array\",",
					"            \"items\": {",
					"                \"type\": \"object\",",
					"                \"required\": [",
					"\t\t\t\t\t\"currencyIsoCode\",",
					"\t\t\t\t\t\"descriptions\",",
					"\t\t\t\t\t\"id\",",
					"\t\t\t\t\t\"isin\",",
					"\t\t\t\t\t\"interestFrequency\",",
					"\t\t\t\t\t\"maturityDate\",",
					"\t\t\t\t\t\"maturityRate\",",
					"\t\t\t\t\t\"modifiedDuration\",",
					"\t\t\t\t\t\"optionType\",",
					"\t\t\t\t\t\"orderType\",",
					"\t\t\t\t\t\"rating\",",
					"                    \"ratingSource\", ",
					"                    \"riskCurrencyIsoCode\", ",
					"                    \"securityNumber\",",
					"\t\t\t\t\t\"securityValue\",",
					"\t\t\t\t\t\"status\",",
					"\t\t\t\t\t\"strikePrice\",",
					"\t\t\t\t\t\"timeToMaturity\",",
					"\t\t\t\t\t\"tradable\",",
					"\t\t\t\t\t\"tradeUnit\",",
					"\t\t\t\t\t\"tradingRestrictions\",",
					"                    \"usAsset\", ",
					"                    \"withdrawalInterseRate\", ",
					"                    \"withdrawalInterestPeriod\",",
					"\t\t\t\t\t\"yieldToMaturity\"",
					"                ],",
					"                \"properties\": {",
					"                    \"currencyIsoCode\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"\t\t\t\t\t\"descriptions\": {",
					"                        \"type\": \"array\",",
					"\t\t\t\t\t\t\"required\":[",
					"\t\t\t\t\t\t\t\"language\",",
					"\t\t\t\t\t\t\t\"description\",",
					"\t\t\t\t\t\t\t\"shortDescription\"",
					"\t\t\t\t\t\t\t],",
					"\t\t\t\t\t\t\"properties\": {",
					"\t\t\t\t\t\t\t\"language\": {",
					"\t\t\t\t\t\t\t\t\"type\": \"string\"",
					"\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\"description\": {",
					"\t\t\t\t\t\t\t\t\"type\": \"string\"",
					"\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\"shortDescription\": {",
					"\t\t\t\t\t\t\t\t\"type\": \"string\"",
					"\t\t\t\t\t\t\t}",
					"\t\t\t\t\t\t}",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\"id\": {",
					"                        \"type\": \"string\",",
					"                    },",
					"\t\t\t\t\t\"isin\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"\t\t\t\t\t\"interestFrequency\": {",
					"                        \"type\": [\"string\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"maturityDate\": {",
					"                        \"type\": [\"string\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"maturityRate\": {",
					"                        \"type\": [\"number\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"modifiedDuration\": {",
					"                        \"type\": [\"number\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"optionType\": {",
					"                        \"type\":  [\"string\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"orderType\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"\t\t\t\t\t\"rating\": {",
					"                        \"type\": [\"string\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"ratingSource\": {",
					"                        \"type\": [\"string\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"riskCurrencyIsoCode\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"\t\t\t\t\t\"securityNumber\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"\t\t\t\t\t",
					"                    \"securityValue\": {",
					"                        \"type\": \"object\",",
					"                        \"required\": [",
					"                            \"data\",",
					"\t\t\t\t\t\t\t\"type\"",
					"                        ],",
					"                        \"properties\": {",
					"                            \"data\": {",
					"                                \"type\": \"number\"",
					"                            },",
					"                            \"type\": {",
					"                                \"type\": \"string\"",
					"                            }",
					"                        }",
					"                    },",
					"\t\t\t\t\t\"status\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"\t\t\t\t\t\"strikePrice\": {",
					"                        \"type\": \"object\",",
					"                        \"required\": [",
					"                            \"currencyIsoCode\",",
					"\t\t\t\t\t\t\t\"value\"",
					"                        ],",
					"                        \"properties\": {",
					"                            \"currencyIsoCode\": {",
					"                                \"type\": \"string\"",
					"                            },",
					"                            \"value\": {",
					"                                \"type\": \"number\"",
					"                            }",
					"                        }",
					"                    },",
					"\t\t\t\t\t\"timeToMaturity\": {",
					"                        \"type\": [\"number\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"tradable\": {",
					"                        \"type\": \"boolean\"",
					"                    },",
					"\t\t\t\t\t\"tradeUnit\": {",
					"                        \"type\": \"number\"",
					"                    },",
					"\t\t\t\t\t\"tradingRestrictions\": {",
					"                        \"type\": [\"string\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"withdrawalInterestPeriod\": {",
					"                        \"type\": [\"number\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"usAsset\": {",
					"                        \"type\": \"boolean\"",
					"                    },",
					"\t\t\t\t\t\"withdrawalInterseRate\": {",
					"                        \"type\": [\"number\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"yieldToMaturity\": {",
					"                        \"type\": [\"number\",\"null\"],",
					"                    }",
					"                }",
					"            }",
					"        },",
					"        \"page\": {",
					"            \"type\": \"object\",",
					"            \"required\": [",
					"                \"number\", ",
					"                \"numberOfElements\",",
					"                \"size\",",
					"                \"totalElements\",",
					"                \"totalPages\"",
					"            ],                ",
					"            \"properties\": {",
					"                \"number\": {",
					"                    \"type\": \"number\"",
					"                },",
					"                \"numberOfElements\": {",
					"                    \"type\": \"number\"",
					"                },",
					"                \"size\": {",
					"                    \"type\": \"number\"",
					"                },",
					"                \"totalElements\": {",
					"                    \"type\": \"number\"",
					"                    },",
					"                \"totalPages\": {",
					"                    \"type\": \"number\"",
					"                }",
					"            }",
					"        }",
					"    }",
					"};",
					"pm.environment.set(\"securitiesSchema\", securitiesSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'trading places' *******************************************************************",
					"// manualy created ***********************************************************",
					"//************************************************************************************************",
					"const tradingPlacesSchema = {",
					"    \"type\": \"object\",",
					"    \"required\": [",
					"        \"tradingPlaces\", ",
					"        \"page\"\t\t\t\t",
					"    ],",
					"    \"properties\": {",
					"        \"tradingPlaces\": {",
					"\t\t\"type\": \"array\",",
					"            \"items\": {",
					"                \"type\": \"object\",",
					"                \"required\": [",
					"\t\t\t\t\t\"closingTime\",",
					"\t\t\t\t\t\"code\",",
					"\t\t\t\t\t\"country\",",
					"\t\t\t\t\t\"executionDeadLine\",",
					"\t\t\t\t\t\"descriptions\",",
					"\t\t\t\t\t\"id\",",
					"\t\t\t\t\t\"lunchTimeEnd\",",
					"\t\t\t\t\t\"lunchTimeStart\",",
					"\t\t\t\t\t\"onlineTradeAllowed\",",
					"\t\t\t\t\t\"openingTime\",",
					"\t\t\t\t\t\"tradingAllowed\"",
					"                ],",
					"                \"properties\": {",
					"                    \"closingTime\": {",
					"                        \"type\": [\"string\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"descriptions\": {",
					"                        \"type\": \"array\",",
					"\t\t\t\t\t\t\"required\":[",
					"\t\t\t\t\t\t\t\"fullDescription\",",
					"\t\t\t\t\t\t\t\"language\",",
					"\t\t\t\t\t\t\t\"shortDescription\"",
					"\t\t\t\t\t\t\t],",
					"\t\t\t\t\t\t\"properties\": {",
					"\t\t\t\t\t\t\t\"language\": {",
					"\t\t\t\t\t\t\t\t\"type\": \"string\"",
					"\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\"fullDescription\": {",
					"\t\t\t\t\t\t\t\t\"type\": \"string\"",
					"\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\"shortDescription\": {",
					"\t\t\t\t\t\t\t\t\"type\": \"string\"",
					"\t\t\t\t\t\t\t}",
					"\t\t\t\t\t\t}",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\"code\": {",
					"                        \"type\": \"string\",",
					"                    },",
					"\t\t\t\t\t\"country\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"\t\t\t\t\t\"executionDeadLine\": {",
					"                        \"type\": [\"string\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"id\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"\t\t\t\t\t\"lunchTimeEnd\": {",
					"                        \"type\": [\"string\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"lunchTimeStart\": {",
					"                        \"type\": [\"string\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"onlineTradeAllowed\": {",
					"                        \"type\": \"boolean\"",
					"                    },",
					"\t\t\t\t\t\"openingTime\": {",
					"                        \"type\":  [\"string\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"tradingAllowed\": {",
					"                        \"type\": \"boolean\"",
					"                    }",
					"                }",
					"            }",
					"        },",
					"        \"page\": {",
					"            \"type\": \"object\",",
					"            \"required\": [",
					"                \"number\", ",
					"                \"numberOfElements\",",
					"                \"size\",",
					"                \"totalElements\",",
					"                \"totalPages\"",
					"            ],                ",
					"            \"properties\": {",
					"                \"number\": {",
					"                    \"type\": \"number\"",
					"                },",
					"                \"numberOfElements\": {",
					"                    \"type\": \"number\"",
					"                },",
					"                \"size\": {",
					"                    \"type\": \"number\"",
					"                },",
					"                \"totalElements\": {",
					"                    \"type\": \"number\"",
					"                    },",
					"                \"totalPages\": {",
					"                    \"type\": \"number\"",
					"                }",
					"            }",
					"        }",
					"    }",
					"};",
					"pm.environment.set(\"tradingPlacesSchema\", tradingPlacesSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'trading place' ********************************************************************",
					"// manualy created***********************************************************",
					"//************************************************************************************************",
					"const tradingPlaceSchema = {",
					"    \"type\": \"object\",",
					"    \"required\": [",
					"\t\t\t\t\t\"closingTime\",",
					"\t\t\t\t\t\"code\",",
					"\t\t\t\t\t\"country\",",
					"\t\t\t\t\t\"executionDeadLine\",",
					"\t\t\t\t\t\"descriptions\",",
					"\t\t\t\t\t\"id\",",
					"\t\t\t\t\t\"lunchTimeEnd\",",
					"\t\t\t\t\t\"lunchTimeStart\",",
					"\t\t\t\t\t\"onlineTradeAllowed\",",
					"\t\t\t\t\t\"openingTime\",",
					"\t\t\t\t\t\"tradingAllowed\"",
					"                ],",
					"                \"properties\": {",
					"                    \"closingTime\": {",
					"                        \"type\": [\"string\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"descriptions\": {",
					"                        \"type\": \"array\",",
					"\t\t\t\t\t\t\"required\":[",
					"\t\t\t\t\t\t\t\"fullDescription\",",
					"\t\t\t\t\t\t\t\"language\",",
					"\t\t\t\t\t\t\t\"shortDescription\"",
					"\t\t\t\t\t\t\t],",
					"\t\t\t\t\t\t\"properties\": {",
					"\t\t\t\t\t\t\t\"language\": {",
					"\t\t\t\t\t\t\t\t\"type\": \"string\"",
					"\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\"fullDescription\": {",
					"\t\t\t\t\t\t\t\t\"type\": \"string\"",
					"\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\"shortDescription\": {",
					"\t\t\t\t\t\t\t\t\"type\": \"string\"",
					"\t\t\t\t\t\t\t}",
					"\t\t\t\t\t\t}",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\"code\": {",
					"                        \"type\": \"string\",",
					"                    },",
					"\t\t\t\t\t\"country\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"\t\t\t\t\t\"executionDeadLine\": {",
					"                        \"type\": [\"string\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"id\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"\t\t\t\t\t\"lunchTimeEnd\": {",
					"                        \"type\": [\"string\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"lunchTimeStart\": {",
					"                        \"type\": [\"string\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"onlineTradeAllowed\": {",
					"                        \"type\": \"boolean\"",
					"                    },",
					"\t\t\t\t\t\"openingTime\": {",
					"                        \"type\":  [\"string\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"tradingAllowed\": {",
					"                        \"type\": \"boolean\"",
					"                    }",
					"                }",
					"            ",
					"        ",
					"          ",
					"};",
					"pm.environment.set(\"tradingPlacesSchema\", tradingPlacesSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'listings' *************************************************************************",
					"//manualy generated ***********************************************************",
					"//************************************************************************************************",
					"const listingsSchema = ",
					"{",
					"  \"type\": \"object\",",
					"  \"required\": [",
					"    \"listings\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"listings\": {",
					"      \"type\": \"array\",",
					"      \"items\": {",
					"        \"type\": \"object\",",
					"        \"required\": [",
					"          \"fixAt\",",
					"          \"id\",",
					"          \"rate\",",
					"          \"roundLot\",",
					"          \"ticker\"",
					"        ],",
					"        \"properties\": {",
					"          \"fixAt\": {",
					"            \"type\": \"string\",",
					"          },",
					"          \"id\": {",
					"            \"type\": \"string\",",
					"          },",
					"          \"rate\": {",
					"            \"type\": \"number\",",
					"          },",
					"          \"roundLot\": {",
					"            \"type\": \"number\",",
					"          },",
					"          \"ticker\": {",
					"            \"type\":  \"string\",",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"type\": \"object\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"\t\t\"numberOfElements\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"type\": \"integer\",",
					"        },",
					"        \"size\": {",
					"          \"type\": \"integer\",",
					"        },",
					"\t\t\"numberOfElements\": {",
					"          \"type\": \"integer\",",
					"        },",
					"        \"totalElements\": {",
					"          \"type\": \"integer\",",
					"        },",
					"        \"totalPages\": {",
					"          \"type\": \"integer\",",
					"        }",
					"      }",
					"    }",
					"  }",
					"};",
					"pm.environment.set(\"listingsSchema\", listingsSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'listingsIdSchema' *************************************************************************",
					"//manualy generated ***********************************************************",
					"//************************************************************************************************",
					"const listingsIDSchema = ",
					"{",
					"    \"type\": \"object\",",
					"    \"required\": [",
					"          \"fixAt\",",
					"          \"id\",",
					"          \"rate\",",
					"          \"roundLot\",",
					"          \"ticker\"",
					"        ],",
					"        \"properties\": {",
					"          \"fixAt\": {",
					"            \"type\": \"string\",",
					"          },",
					"          \"id\": {",
					"            \"type\": \"string\",",
					"          },",
					"          \"rate\": {",
					"            \"type\": \"number\",",
					"          },",
					"          \"roundLot\": {",
					"            \"type\": \"number\",",
					"          },",
					"          \"ticker\": {",
					"            \"type\":  \"string\",",
					"          }",
					"        }",
					"};",
					"pm.environment.set(\"listingsIDSchema\", listingsIDSchema);",
					"//************************************************************************************************",
					"// Schema for 'security types'********************************************************************",
					"// manualy created ***********************************************************",
					"//************************************************************************************************",
					"const securityTypesSchema = ",
					"{",
					"  \"type\": \"object\",",
					"  \"required\": [",
					"    \"securityTypes\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"securityTypes\": {",
					"      \"type\": \"array\",",
					"      \"items\": {",
					"        \"type\": \"object\",",
					"        \"required\": [",
					"          \"id\",",
					"          \"code\",",
					"          \"descriptions\"",
					"        ],",
					"        \"properties\": {",
					"          \"id\": {",
					"            \"type\": \"string\",",
					"          },",
					"          \"code\": {",
					"            \"type\": \"string\",",
					"          },",
					"\t\t  \"descriptions\": {",
					"                        \"type\": \"object\",",
					"                        \"required\": [",
					"                            \"language \",",
					"\t\t\t\t\t\t\t\"descriptions\"",
					"                        ],",
					"                        \"properties\": {",
					"                            \"language\": {",
					"                                \"type\": \"string\"",
					"                            },",
					"                            \"descriptions\": {",
					"                                \"type\": \"string\"",
					"                            }",
					"                        }",
					"                    },",
					"         ",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"type\": \"object\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"\t\t\"numberOfElements\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"type\": \"integer\",",
					"        },",
					"        \"size\": {",
					"          \"type\": \"integer\",",
					"        },",
					"\t\t\"numberOfElements\": {",
					"          \"type\": \"integer\",",
					"        },",
					"        \"totalElements\": {",
					"          \"type\": \"integer\",",
					"        },",
					"        \"totalPages\": {",
					"          \"type\": \"integer\",",
					"        }",
					"      }",
					"    }",
					"  }",
					"};",
					"pm.environment.set(\"securityTypesSchema\", securityTypesSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'security type details' ********************************************************************",
					"// manualy created ***********************************************************",
					"//************************************************************************************************",
					"const securityTypesSchemaDet = ",
					"{",
					"    \"type\": \"object\",",
					"    \"required\": [",
					"          \"id\",",
					"          \"code\",",
					"          \"descriptions\"",
					"        ],",
					"        \"properties\": {",
					"          \"id\": {",
					"            \"type\": \"string\",",
					"          },",
					"          \"code\": {",
					"            \"type\": \"string\",",
					"          },",
					"\t\t  \"descriptions\": {",
					"                        \"type\": \"object\",",
					"                        \"required\": [",
					"                            \"language \",",
					"\t\t\t\t\t\t\t\"descriptions\"",
					"                        ],",
					"                        \"properties\": {",
					"                            \"language\": {",
					"                                \"type\": \"string\"",
					"                            },",
					"                            \"descriptions\": {",
					"                                \"type\": \"string\"",
					"                            }",
					"                        }",
					"                    },",
					"        }",
					"};",
					"pm.environment.set(\"securityTypesSchemaDet\", securityTypesSchemaDet);",
					"",
					"//************************************************************************************************",
					"// Schema for 'security by ID'********************************************************************",
					"//manualy generated ***********************************************************",
					"//************************************************************************************************",
					"const securityByIdSchema =",
					"{",
					"                \"type\": \"object\",",
					"                \"required\": [",
					"\t\t\t\t\t\"currencyIsoCode\",",
					"\t\t\t\t\t\"descriptions\",",
					"\t\t\t\t\t\"id\",",
					"\t\t\t\t\t\"isin\",",
					"\t\t\t\t\t\"interestFrequency\",",
					"\t\t\t\t\t\"maturityDate\",",
					"\t\t\t\t\t\"maturityRate\",",
					"\t\t\t\t\t\"modifiedDuration\",",
					"\t\t\t\t\t\"optionType\",",
					"\t\t\t\t\t\"orderType\",",
					"\t\t\t\t\t\"rating\",",
					"                    \"ratingSource\", ",
					"                    \"riskCurrencyIsoCode\", ",
					"                    \"securityNumber\",",
					"\t\t\t\t\t\"securityValue\",",
					"\t\t\t\t\t\"status\",",
					"\t\t\t\t\t\"strikePrice\",",
					"\t\t\t\t\t\"timeToMaturity\",",
					"\t\t\t\t\t\"tradable\",",
					"\t\t\t\t\t\"tradeUnit\",",
					"\t\t\t\t\t\"tradingRestrictions\",",
					"                    \"usAsset\", ",
					"                    \"withdrawalInterseRate\", ",
					"                    \"withdrawalInterestPeriod\",",
					"\t\t\t\t\t\"yieldToMaturity\"",
					"                ],",
					"                \"properties\": {",
					"                    \"currencyIsoCode\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"\t\t\t\t\t\"descriptions\": {",
					"                        \"type\": \"array\",",
					"\t\t\t\t\t\t\"required\":[",
					"\t\t\t\t\t\t\t\"language\",",
					"\t\t\t\t\t\t\t\"description\",",
					"\t\t\t\t\t\t\t\"shortDescription\"",
					"\t\t\t\t\t\t\t],",
					"\t\t\t\t\t\t\"properties\": {",
					"\t\t\t\t\t\t\t\"language\": {",
					"\t\t\t\t\t\t\t\t\"type\": \"string\"",
					"\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\"description\": {",
					"\t\t\t\t\t\t\t\t\"type\": \"string\"",
					"\t\t\t\t\t\t\t},",
					"\t\t\t\t\t\t\t\"shortDescription\": {",
					"\t\t\t\t\t\t\t\t\"type\": \"string\"",
					"\t\t\t\t\t\t\t}",
					"\t\t\t\t\t\t}",
					"\t\t\t\t\t\t},",
					"\t\t\t\t\t\"id\": {",
					"                        \"type\": \"string\",",
					"                    },",
					"\t\t\t\t\t\"isin\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"\t\t\t\t\t\"interestFrequency\": {",
					"                        \"type\": [\"string\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"maturityDate\": {",
					"                        \"type\": [\"string\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"maturityRate\": {",
					"                        \"type\": [\"number\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"modifiedDuration\": {",
					"                        \"type\": [\"number\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"optionType\": {",
					"                        \"type\":  [\"string\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"orderType\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"\t\t\t\t\t\"rating\": {",
					"                        \"type\": [\"string\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"ratingSource\": {",
					"                        \"type\": [\"string\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"riskCurrencyIsoCode\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"\t\t\t\t\t\"securityNumber\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"\t\t\t\t\t",
					"                    \"securityValue\": {",
					"                        \"type\": \"object\",",
					"                        \"required\": [",
					"                            \"data\",",
					"\t\t\t\t\t\t\t\"type\"",
					"                        ],",
					"                        \"properties\": {",
					"                            \"data\": {",
					"                                \"type\": \"number\"",
					"                            },",
					"                            \"type\": {",
					"                                \"type\": \"string\"",
					"                            }",
					"                        }",
					"                    },",
					"\t\t\t\t\t\"status\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"\t\t\t\t\t\"strikePrice\": {",
					"                        \"type\": \"object\",",
					"                        \"required\": [",
					"                            \"currencyIsoCode\",",
					"\t\t\t\t\t\t\t\"value\"",
					"                        ],",
					"                        \"properties\": {",
					"                            \"currencyIsoCode\": {",
					"                                \"type\": \"string\"",
					"                            },",
					"                            \"value\": {",
					"                                \"type\": \"number\"",
					"                            }",
					"                        }",
					"                    },",
					"\t\t\t\t\t\"timeToMaturity\": {",
					"                        \"type\": [\"number\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"tradable\": {",
					"                        \"type\": \"boolean\"",
					"                    },",
					"\t\t\t\t\t\"tradeUnit\": {",
					"                        \"type\": \"number\"",
					"                    },",
					"\t\t\t\t\t\"tradingRestrictions\": {",
					"                        \"type\": [\"string\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"withdrawalInterestPeriod\": {",
					"                        \"type\": [\"number\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"usAsset\": {",
					"                        \"type\": \"boolean\"",
					"                    },",
					"\t\t\t\t\t\"withdrawalInterseRate\": {",
					"                        \"type\": [\"number\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"yieldToMaturity\": {",
					"                        \"type\": [\"number\",\"null\"],",
					"                    }",
					"                }",
					"            }",
					"pm.environment.set(\"securityByIdSchema\", securityByIdSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'orders' ***********************************************************************",
					"// manually created ***********************************************************",
					"//************************************************************************************************",
					"const ordersSchema = {",
					"    \"type\": \"object\",",
					"    \"required\": [",
					"        \"orders\", ",
					"        \"page\"\t\t\t\t",
					"    ],",
					"    \"properties\": {",
					"        \"orders\": {",
					"\t\t\"type\": \"array\",",
					"            \"items\": {",
					"                \"type\": \"object\",",
					"                \"required\": [",
					"\t\t\t\t\t\"id\", ",
					"\t\t\t\t\t\"amount\",",
					"\t\t\t\t\t\"amountExecuted\",",
					"\t\t\t\t\t\"commission\",",
					"\t\t\t\t\t\"fee\",",
					"\t\t\t\t\t\"currencyIsoCode\",",
					"\t\t\t\t\t\"limit\",",
					"\t\t\t\t\t\"limitType\",",
					"\t\t\t\t\t\"orderAction\",",
					"\t\t\t\t\t\"orderReferences\", ",
					"\t\t\t\t\t\"orderStatus\",",
					"\t\t\t\t\t\"orderTimeConstraints\",",
					"\t\t\t\t\t\"shareRegisterCode\",",
					"\t\t\t\t\t\"ticker\",",
					"\t\t\t\t\t\"transactionKey\"",
					"                ],",
					"                \"properties\": {",
					"                    \"amount\": {",
					"                        \"type\": \"number\"",
					"                    },",
					"\t\t\t\t\t\"amountExecuted\": {",
					"                        \"type\": \"number\"",
					"                    },",
					"\t\t\t\t\t\"commission\": {",
					"                        \"type\": [\"number\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"currencyIsoCode\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"\t\t\t\t\t\"limit\": {",
					"                        \"type\": \"number\"",
					"                    },",
					"\t\t\t\t\t\"limitType\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"\t\t\t\t\t\"orderAction\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"\t\t\t\t\t\"orderStatus\": {",
					"                        \"type\": [\"string\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"shareRegisterCode\": {",
					"                        \"type\":  [\"string\",\"null\"],",
					"                    },",
					"\t\t\t\t\t\"ticker\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"\t\t\t\t\t\"transactionKey\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"\t\t\t\t\t\"id\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"                    \"orderReferences\": {",
					"                        \"type\": [\"object\",\"null\"],",
					"                        \"required\": [",
					"                            \"accountId\",",
					"\t\t\t\t\t\t\t\"brokerId\",",
					"\t\t\t\t\t\t\t\"cancelledById\",",
					"                            \"custodyAccountId\",",
					"\t\t\t\t\t\t\t\"custodyAccountPositionId\",",
					"\t\t\t\t\t\t\t\"enteredById\",",
					"\t\t\t\t\t\t\t\"placedById\",",
					"\t\t\t\t\t\t\t\"securityId\"",
					"                        ],",
					"                        \"properties\": {",
					"                            \"accountId\": {",
					"                                \"type\": \"string\"",
					"                            },",
					"                            \"brokerId\": {",
					"                                \"type\": [\"string\",\"null\"],",
					"                            },",
					"\t\t\t\t\t\t\t\"cancelledById\": {",
					"                                \"type\": [\"string\",\"null\"],",
					"                            },",
					"\t\t\t\t\t\t\t\"custodyAccountId\": {",
					"                                \"type\": \"string\"",
					"                            },",
					"\t\t\t\t\t\t\t\"custodyAccountPositionId\": {",
					"                                \"type\": [\"string\",\"null\"],",
					"                            },",
					"\t\t\t\t\t\t\t\"enteredById\": {",
					"                                \"type\": [\"string\",\"null\"],",
					"                            },",
					"\t\t\t\t\t\t\t\"placedById\": {",
					"                                \"type\": [\"string\",\"null\"],",
					"                            },",
					"\t\t\t\t\t\t\t\"securityId\": {",
					"                                \"type\": \"string\"",
					"                            }",
					"                        }",
					"                    },",
					"                    \"orderTimeConstraints\": {",
					"                        \"type\": \"object\",",
					"                        \"required\": [",
					"                            \"cancelledAt\",",
					"                            \"executedAt\",",
					"\t\t\t\t\t\t\t\"placedAt\",",
					"\t\t\t\t\t\t\t\"validFrom\",",
					"\t\t\t\t\t\t\t\"validUntil\"",
					"                        ],",
					"                        \"properties\": {",
					"                            \"cancelledAt\": {",
					"                                \"type\": [\"string\",\"null\"],",
					"                            },",
					"                            \"executedAt\": {",
					"                                \"type\": [\"string\",\"null\"],",
					"                            },",
					"\t\t\t\t\t\t\t\"placedAt\": {",
					"                                \"type\": \"string\"",
					"                            },",
					"\t\t\t\t\t\t\t\"validFrom\": {",
					"                                \"type\": [\"string\",\"null\"],",
					"                            },",
					"\t\t\t\t\t\t\t\"validUntil\": {",
					"                                \"type\": \"string\"",
					"                            }",
					"                        }",
					"                    },",
					"                    \"fee\": {",
					"                        \"type\": [\"object\",\"null\"],",
					"                        \"required\": [",
					"                            \"amount\",",
					"                            \"description\",",
					"\t\t\t\t\t\t\t\"price\",",
					"\t\t\t\t\t\t\t\"priceType\"",
					"                        ],",
					"                        \"properties\": {",
					"                            \"amount\": {",
					"                                \"type\": [\"number\",\"null\"],",
					"                            },",
					"                            \"description\": {",
					"                                \"type\": [\"string\",\"null\"],",
					"                            },",
					"\t\t\t\t\t\t\t\"price\": {",
					"                                \"type\": [\"string\",\"null\"],",
					"                            },",
					"\t\t\t\t\t\t\t\"priceType\": {",
					"                                \"type\": [\"string\",\"null\"],",
					"                            }",
					"                        }",
					"                    }",
					"                }",
					"            }",
					"        },",
					"        \"page\": {",
					"            \"type\": \"object\",",
					"            \"required\": [",
					"                \"number\", ",
					"                \"numberOfElements\",",
					"                \"size\",",
					"                \"totalElements\",",
					"                \"totalPages\"",
					"            ],                ",
					"            \"properties\": {",
					"                \"number\": {",
					"                    \"type\": \"number\"",
					"                },",
					"                \"numberOfElements\": {",
					"                    \"type\": \"number\"",
					"                },",
					"                \"size\": {",
					"                    \"type\": \"number\"",
					"                },",
					"                \"totalElements\": {",
					"                    \"type\": \"number\"",
					"                    },",
					"                \"totalPages\": {",
					"                    \"type\": \"number\"",
					"                }",
					"            }",
					"        }",
					"    }",
					"};",
					"pm.environment.set(\"ordersSchema\", ordersSchema);",
					"",
					"",
					"",
					"",
					"",
					"//************************************************************************************************",
					"// Schema for 'order details' ********************************************************************",
					"//manualy created ***********************************************************",
					"//************************************************************************************************",
					"const orderDetailsSchema = ",
					"{",
					"    \"type\": \"object\",",
					"    \"required\": [",
					"\t    \"amount\",",
					"\t\t\"amountExecuted\",",
					"\t\t\"commission\",",
					"\t\t\"currencyIsoCode\",",
					"\t\t\"limit\",",
					"\t\t\"limitType\",",
					"\t\t\"orderAction\",",
					"\t\t\"orderStatus\",",
					"\t\t\"shareRegisterCode\",",
					"\t\t\"ticker\",",
					"\t\t\"transactionKey\",",
					"        \"id\", ",
					"        \"orderReferences\", ",
					"        \"orderTimeConstraints\",",
					"\t\t\"fee\"",
					"    ],",
					"    \"properties\": {",
					"        \"amount\": {",
					"            \"type\": \"number\"",
					"        },",
					"\t\t\"amountExecuted\": {",
					"            \"type\": \"number\"",
					"        },",
					"\t\t\"commission\": {",
					"            \"type\": [\"number\",\"null\"],",
					"        },",
					"\t\t\"currencyIsoCode\": {",
					"            \"type\": \"string\"",
					"        },",
					"\t\t\"limit\": {",
					"            \"type\": \"number\"",
					"        },",
					"\t\t\"limitType\": {",
					"            \"type\": \"string\"",
					"        },",
					"\t\t\"orderAction\": {",
					"            \"type\": \"string\"",
					"        },",
					"\t\t\"orderStatus\": {",
					"            \"type\": \"string\"",
					"        },",
					"\t\t\"shareRegisterCode\": {",
					"            \"type\": [\"string\",\"null\"],",
					"        },",
					"\t\t\"ticker\": {",
					"            \"type\": \"string\"",
					"        },",
					"\t\t\"transactionKey\": {",
					"            \"type\": \"string\"",
					"        },",
					"\t\t\"id\": {",
					"            \"type\": \"string\"",
					"        },",
					"        \"orderReferences\": {",
					"            \"type\": \"object\",",
					"            \"required\": [",
					"                \"accountId\",",
					"\t\t\t\t\"brokerId\",",
					"\t\t\t\t\"cancelledById\",",
					"                \"custodyAccountId\",",
					"\t\t\t\t\"custodyAccountPositionId\",",
					"\t\t\t\t\"enteredById\",",
					"\t\t\t\t\"placedById\",",
					"\t\t\t\t\"securityId\"",
					"            ],",
					"            \"properties\": {",
					"                \"accountId\": {",
					"                    \"type\": \"string\"",
					"                },",
					"                \"brokerId\": {",
					"                    \"type\": [\"string\",\"null\"],",
					"                },",
					"\t\t\t\t\"cancelledById\": {",
					"                    \"type\": [\"string\",\"null\"],",
					"                },",
					"\t\t\t\t\"custodyAccountId\": {",
					"                    \"type\": \"string\"",
					"                },",
					"\t\t\t\t\"custodyAccountPositionId\": {",
					"                    \"type\": [\"string\",\"null\"],",
					"                },",
					"\t\t\t\t\"enteredById\": {",
					"                    \"type\": [\"string\",\"null\"],",
					"                },",
					"\t\t\t\t\"placedById\": {",
					"                    \"type\": [\"string\",\"null\"],",
					"                },",
					"\t\t\t\t\"securityId\": {",
					"                    \"type\": \"string\"",
					"                }",
					"            }",
					"        },",
					"        \"orderTimeConstraints\": {",
					"            \"type\": \"object\",",
					"            \"required\": [",
					"                \"cancelledAt\",",
					"                \"executedAt\",",
					"\t\t\t\t\"placedAt\",",
					"\t\t\t\t\"validFrom\",",
					"\t\t\t\t\"validUntil\"",
					"            ],",
					"            \"properties\": {",
					"                \"cancelledAt\": {",
					"                    \"type\": [\"string\",\"null\"],",
					"                },",
					"                \"executedAt\": {",
					"                    \"type\": [\"string\",\"null\"],",
					"                },",
					"\t\t\t\t\"placedAt\": {",
					"                    \"type\": \"string\"",
					"                },",
					"\t\t\t\t\"validFrom\": {",
					"                    \"type\": [\"string\",\"null\"],",
					"                },",
					"\t\t\t\t\"validUntil\": {",
					"                    \"type\": \"string\"",
					"                }",
					"            }",
					"        },",
					"        \"fee\": {",
					"            \"type\": [\"object\",\"null\"],",
					"            \"required\": [",
					"                \"amount\",",
					"                \"description\",",
					"\t\t\t\t\"price\",",
					"\t\t\t\t\"priceType\"",
					"            ],",
					"            \"properties\": {",
					"                \"amount\": {",
					"                    \"type\": [\"number\",\"null\"],",
					"                },",
					"                \"description\": {",
					"                    \"type\": [\"string\",\"null\"],",
					"                },",
					"\t\t\t\t\"price\": {",
					"                    \"type\": [\"string\",\"null\"],",
					"                },",
					"\t\t\t\t\"priceType\": {",
					"                    \"type\": [\"string\",\"null\"],",
					"                }",
					"            }",
					"        }",
					"    }",
					"};",
					"pm.environment.set(\"orderDetailsSchema\", orderDetailsSchema);",
					"",
					"//************************************************************************************************",
					"//global function to determine next day/next working day *****************************************",
					"//************************************************************************************************",
					"var moment = require('moment');",
					"let nextDay = moment().add(\"days\",1).format(\"YYYY-MM-DD\"); //next day in specified format",
					"switch (moment().add(\"days\",1).format(\"dddd\")){",
					"    case \"Sunday\":",
					"        var nextWorkingDay = moment().add(\"days\",2).format(\"YYYY-MM-DD\");",
					"        break;",
					"    case \"Saturday\":",
					"        var nextWorkingDay = moment().add(\"days\",3).format(\"YYYY-MM-DD\");",
					"        break;",
					"    default:",
					"        var nextWorkingDay = moment().add(\"days\",1).format(\"YYYY-MM-DD\");",
					"}",
					"pm.globals.set('PrS:nextDay', JSON.stringify(nextDay));",
					"pm.globals.set('PrS:nextWorkingDay', JSON.stringify(nextWorkingDay));",
					"",
					"/*",
					"// Define test data, setup configuration per environment",
					"var env = pm.environment.get(\"envName\");",
					"if (env === \"MDB-R191-TEST\") {",
					"//    var contractNumber = \"{{contractNumber}}\";",
					"//    var debtorAccountNo = \"{{debtorAccountNo}}\";",
					"//    var debtorAccountName = \"{{debtorAccountName}}\";",
					"//    var creditorAccountNo = \"{{creditorAccountNo}}\";",
					"    } else if (env === \"MDB-R191-LAT\") {",
					"} else {",
					"    throw new Error(\"Wrong environment selected, requests are skipped!\")",
					"}",
					"//pm.globals.set('PrS:contractNumber', JSON.stringify(contractNumber));",
					"//pm.globals.set('PrS:debtorAccountNo', JSON.stringify(debtorAccountNo));",
					"//pm.globals.set('PrS:debtorAccountName', JSON.stringify(debtorAccountName));",
					"//pm.globals.set('PrS:creditorAccountNo', JSON.stringify(creditorAccountNo));",
					"*/",
					"",
					"// Save the object as a variable.",
					"// JSON.stringify will serialize the object so that Postman can save it",
					"",
					"//pm.globals.set('PrS:tags', JSON.stringify(tags));",
					"//pm.environment.set(\"testGroup\",\"Patient Zero\") //set environment variable if/when needed",
					"",
					"                //pm.response.to.be.ok;         - Status code must be 200",
					"                //pm.response.to.be.error       - Checks 4XX or 5XX",
					"                //pm.response.to.be.serverError - Checks 5XX",
					"                //pm.response.to.be.clientError - Checks 4XX status code",
					"",
					"// Save common tests in a global variable",
					"postman.setGlobalVariable(\"commonTests\", () => {",
					"    pm.test(\"Response must be valid with/with out a body and with proper status code\", function () {",
					"        if ([\"GET\",\"POST\",\"PUT\"].indexOf(request.method) > -1) {",
					"            pm.response.to.not.be.error;",
					"            pm.response.to.be.withBody;",
					"            pm.response.to.be.json;",
					"            pm.response.to.have.jsonBody();",
					"            pm.response.to.not.have.jsonBody('error');",
					"            pm.response.to.have.header('Content-Type', 'application/hal+json;charset=UTF-8');",
					"        } else {",
					"            pm.response.to.not.be.withBody;",
					"        }",
					"        switch(request.method){",
					"            case \"POST\":",
					"                pm.response.to.have.status(200);",
					"                break;",
					"            case \"PUT\":",
					"                pm.response.to.have.status(200);",
					"                break;",
					"            case \"GET\":",
					"                pm.response.to.have.status(200);",
					"                break;",
					"            case \"DELETE\":",
					"                pm.response.to.have.status(204);",
					"                break;",
					"        }        ",
					"    });",
					"    //pm.test(\"Response time is below 1000ms\", function () {",
					"    //    pm.expect(pm.response.responseTime).to.be.below(1000);",
					"    //});",
					"});",
					"",
					"postman.setGlobalVariable(\"assertValidCreditorAgent\", () => {",
					"    pm.expect(address).to.be.an('object').with.keys('name1', 'name2', 'street', 'city', 'country');",
					"    pm.expect(address.name1).to.be.a('string').and.not.empty;",
					"    pm.expect(address.name2).to.be.a('string').and.not.empty;",
					"    pm.expect(address.street).to.be.a('string').and.not.empty;",
					"    pm.expect(address.city).to.be.a('string').and.not.empty;",
					"    pm.expect(address.country).to.be.a('string').with.lengthOf(2).and.match(/[A-Z]+/);",
					"});",
					"",
					"postman.setGlobalVariable(\"sessionInit\", (testSession, sessionName) => {",
					"    //session init section",
					"    console.log(request.name + \", initialization: \" + testSession + \", global var: \" + sessionName);",
					"    console.log(request.name + \", executing: \" + testSession[0]);",
					"    ",
					"    // Select first test from session to be executed",
					"    postman.setNextRequest(testSession[0]); ",
					"    testSession.shift();",
					"    if (testSession.length === 0) {",
					"        console.log(request.name + \", test session is empty, unset \" + sessionName);",
					"        pm.globals.unset(sessionName);",
					"        console.log(request.name + \", terminate tests execution list\");",
					"    } else {",
					"        pm.globals.set(sessionName, testSession);",
					"        console.log(request.name + \" for \" + sessionName + \", updated list of tests to be executed: \" + testSession);",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"sessionNavigate\", () => {",
					"    console.log(request.name + \", entering ...\");",
					"    if (pm.globals.get(\"requestsToRun\") === undefined){",
					"        console.log(request.name + \", requestsToRun is undefined\");",
					"        pm.globals.set(\"testRailTestCases\",\"\");",
					"        console.log(request.name + \", reset global var: testRailTestCases\");    ",
					"        if (pm.globals.get(\"testSession\") === undefined){",
					"            console.log(request.name + \", testSession is undefined\");",
					"            //here >> export list of tests executed",
					"            var tests = pm.environment.get(\"testRailTestsInRun\");",
					"            tests = tests.replace(/C/g, \"\");",
					"            tests = tests.replace(/ /g, \", \");",
					"            tests = tests.replace(/,,/g, \",\");",
					"            console.log(\"TestRail tests executed in this run: \" + tests);",
					"            console.log(\"The end\");",
					"            postman.setNextRequest(null);",
					"        } else {",
					"        var testSession = pm.globals.get(\"testSession\");",
					"        console.log(request.name + \", checking what to run: \" + testSession[0]);",
					"        postman.setNextRequest(testSession[0]); // Run: GET SWIFT payment",
					"        testSession.shift();",
					"        if (testSession.length === 0) {",
					"            pm.globals.unset(\"testSession\");",
					"            console.log(request.name + \", terminate execution list\");",
					"        } else {",
					"            pm.globals.set(\"testSession\", testSession);",
					"            console.log(request.name + \", updated list of tests to be executed: \" + testSession);",
					"        }}",
					"    } else {",
					"    var requestsToRun = pm.globals.get(\"requestsToRun\");",
					"    console.log(request.name + \", checking what to run: \" + requestsToRun[0]);",
					"    postman.setNextRequest(requestsToRun[0]); ",
					"    requestsToRun.shift();",
					"    if (requestsToRun.length === 0) {",
					"        pm.globals.unset(\"requestsToRun\");",
					"        console.log(request.name + \", terminate requests execution list\");",
					"    } else {",
					"        pm.globals.set(\"requestsToRun\", requestsToRun);",
					"        console.log(request.name + \", updated list of requests to be executed: \" + requestsToRun);",
					"    }}",
					"});",
					"",
					"postman.setGlobalVariable(\"cleanup\", () => {",
					"    const clean = [\"requestsToRun\", \"testSession\"];",
					"    for(let i = 0; i < clean.length; ++i){",
					"        pm.globals.unset(clean[i]);",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"testsExecuted\", (listOfExecutedTests) => {",
					"    let tests =  pm.environment.get(\"testRailTestsInRun\");",
					"    //console.log(\"TestRail tests stored in 'testRailTestsInRun': \" + tests);",
					"    if (!tests.includes(listOfExecutedTests)){",
					"        if (tests.length > 0 && listOfExecutedTests.length > 0) {",
					"            tests = tests + \" \"",
					"        }",
					"        tests = tests + listOfExecutedTests;",
					"        //console.log(\"TestRail tests to be stored to 'testRailTestsInRun': \" + tests);",
					"        pm.environment.set(\"testRailTestsInRun\",tests);",
					"        //console.log(\"TestRail tests executed so far: \" + tests);",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"extractTestCaseIDFromRequestName\", () => {",
					"    let n = request.name.lastIndexOf(\"(\");",
					"    return request.name.substr(n + 1, request.name.length - n - 2);",
					"});",
					"",
					"postman.setGlobalVariable(\"schemaValidator\", (schema, jsonData) => {",
					"    //old, deprecated schema validationimplementation",
					"    //pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;",
					"    ",
					"    //new schema validation implementation",
					"    ",
					"    var schemaValidationPassed = true;",
					"    var serviceSchema = pm.environment.get(schema);",
					"    //var jsonData = JSON.parse(pm.responseBody);",
					"",
					"    var validationResult = tv4.validateMultiple(jsonData, serviceSchema, true, true);",
					"    for(var i =0; i<validationResult.errors.length;i++){",
					"        console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  ",
					"        //Skipping all \"Invalid type\" errors as they are expected with current service implementations",
					"        schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);",
					"        //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);",
					"    }    ",
					"    return schemaValidationPassed;",
					"}); ",
					"",
					"/* function for session retrieve*/",
					"postman.setGlobalVariable(\"sessionGet\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"test_session_url\")}?userId=${pm.environment.get(\"userId_secure_mail\")}&tenantId=${pm.environment.get(\"tenantId_security\")}`,",
					"        method: \"GET\",",
					"        header: {",
					"          'Content-Type': 'application/json',",
					"        },",
					"        body: {",
					"          mode: 'raw',",
					"          raw: JSON.stringify({})",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err);",
					"        } else {",
					"            pm.environment.set(\"nonce\",  res.text());",
					"            console.log(\"New session: \" + pm.environment.get(\"nonce\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"",
					"postman.setGlobalVariable(\"generateAccessToken\", () => {",
					"    const getAccessTokenRequest = {",
					"        url: pm.environment.get(\"env_security_testToken\"),",
					"        method: \"POST\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json'",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"                tenant_id: pm.environment.get(\"tenantId_security\"), ",
					"                acsKey: \"i6PiNObtdp2rCNW7mlV51BDSY4zAliSvBCyVsuML1000203567\",",
					"                tenant_name: pm.environment.get(\"tenantName_security\"),",
					"                user_name: `${pm.environment.get(\"userId_security\")}`,",
					"                contractNo: pm.environment.get(\"contractNo_security\"),",
					"                loginName: `${pm.environment.get(\"userId_security\")}`,",
					"                sub: `${pm.environment.get(\"bcNo\")}:${pm.environment.get(\"userId_security\")}`,",
					"                preferred_user_name: `${pm.environment.get(\"userId_security\")}`,",
					"                language: pm.environment.get(\"language\"),",
					"                bcNo: pm.environment.get(\"bcNo_security\"),",
					"                authorities: [\"DBAN_ADMIN\", \"DBAN_USER\"],",
					"                aud: [\"dban\"],",
					"                client_id: \"postman\",",
					"                user_id: `${pm.environment.get(\"userId_security\")}`,",
					"                nonce: `${pm.environment.get(\"nonce\")}`,",
					"                scope: [",
					"                \t\"https://api.crealogix.com/dban\",",
					"                \t\"read\",",
					"                \t\"write\",",
					"                \t\"https://api.crealogix.com/contracts/contract.advisor.readonly\",",
					"                \t\"https://api.crealogix.com/contracts/contract.metadata.readonly\",",
					"                \t\"https://api.crealogix.com/contracts/contract.person.readonly\",",
					"                \t\"https://api.crealogix.com/payments/payment.initiate\",",
					"                \t\"https://api.crealogix.com/payments/payment.read\",",
					"                \t\"https://api.crealogix.com/payments/payment.write\",",
					"                \t\"https://api.crealogix.com/assets/account#read\",",
					"                \t\"https://api.crealogix.com/assets/account/read\",",
					"                \t\"https://api.crealogix.com/assets/account.transaction#read\",",
					"                \t\"https://api.crealogix.com/assets/account.name\",",
					"                \t\"https://api.crealogix.com/assets/account.image\",",
					"                \t\"https://api.crealogix.com/assets/cuac#read\",",
					"                \t\"https://api.crealogix.com/assets/portfolio#read\",",
					"                \t\"https://api.crealogix.com/messages/securemail.write\",",
					"                \t\"https://api.crealogix.com/messages/securemail.read\",",
					"                \t\"https://api.crealogix.com/messages/document.category.read\",",
					"                \t\"https://api.crealogix.com/messages/document.category.write\",",
					"                \t\"https://api.crealogix.com/messages/document.write\",",
					"                \t\"https://api.crealogix.com/messages/document.read\",",
					"                \t\"https://api.crealogix.com/brokerage/order\",",
					"                    \"https://api.crealogix.com/brokerage/order#read\",\t",
					"                \t\"https://api.crealogix.com/brokerage/security#read\",",
					"                    \"https://api.crealogix.com/brokerage/tradingplace#read\",\t",
					"                    \"https://api.crealogix.com/brokerage/depository#read\",",
					"                \t\"https://api.crealogix.com/deeplink/domains\",",
					"                \t\"https://api.crealogix.com/deeplink/links\"",
					"                ]",
					"            })",
					"        }",
					"    };",
					"    pm.environment.set(\"request\", JSON.stringify(getAccessTokenRequest));",
					"    ",
					"    pm.sendRequest(getAccessTokenRequest, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"access_token\", res.text());",
					"        }         ",
					"    });",
					"});",
					"",
					"/* function for listing securities*/",
					"postman.setGlobalVariable(\"listSecurities\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_brokerage\")}/brokerage/api/v2/${pm.environment.get(\"tenantId_brokerage\")}/securities`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json; charset=UTF-8',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({})",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"            pm.environment.unset(\"_tmp_securityId\");",
					"            pm.environment.unset(\"_tmp_securityNumber\");",
					"            pm.environment.unset(\"_tmp_isin\");            ",
					"        } else {",
					"            var jsonData = res.json();",
					"",
					"            for (var i=0;i<jsonData.securities.length; i++){",
					"                if ((jsonData.securities[i].id !== null)&&(jsonData.securities[i].securityNumber !== null)&&(jsonData.securities[i].isin !== null)){",
					"                    pm.environment.set(\"_tmp_securityId\",jsonData.securities[i].id);",
					"                    pm.environment.set(\"_tmp_securityNumber\",jsonData.securities[i].securityNumber);",
					"                    pm.environment.set(\"_tmp_isin\",jsonData.securities[i].isin);",
					"                    break;",
					"                }",
					"            }",
					"        }",
					"    });",
					"});",
					"",
					"/* function for list listings*/",
					"postman.setGlobalVariable(\"listListings\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_brokerage\")}/brokerage/api/v2/${pm.environment.get(\"tenantId_brokerage\")}/listings`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json; charset=UTF-8',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({})",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"            pm.environment.unset(\"tmp_listing_ID\");          ",
					"        } else {",
					"            pm.environment.set(\"tmp_listing_ID\",res.json().listings[0].id);",
					"        }",
					"    });",
					"});",
					"",
					"/* function for listing trading places*/",
					"postman.setGlobalVariable(\"listTradingPlaces\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_brokerage\")}/brokerage/api/v2/${pm.environment.get(\"tenantId_brokerage\")}/tradingplaces`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json; charset=UTF-8',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({})",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"            pm.environment.unset(\"_tmp_tradingPlaceId\");          ",
					"        } else {",
					"            pm.environment.set(\"_tmp_tradingPlaceId\",res.json().tradingPlaces[0].id);",
					"        }",
					"    });",
					"});",
					"",
					"/* function for list orders*/",
					"postman.setGlobalVariable(\"listOrders\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_brokerage\")}/brokerage/api/v2/${pm.environment.get(\"tenantId_brokerage\")}/orders`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json; charset=UTF-8',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({})",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"            pm.environment.unset(\"_tmp_accountId\");",
					"            pm.environment.unset(\"_tmp_custodyAccountId\");",
					"            pm.environment.unset(\"_tmp_custodyAccountPositionId\");",
					"            pm.environment.unset(\"_tmp_securityId\");",
					"            pm.environment.unset(\"_tmp_orderId\");",
					"            pm.environment.unset(\"_tmp_postEnteredById\");           ",
					"        } else {",
					"            var jsonData = res.json();",
					"",
					"            pm.environment.set(\"_tmp_accountId\",jsonData.orders[0].orderReferences.accountId);",
					"            pm.environment.set(\"_tmp_custodyAccountId\",jsonData.orders[0].orderReferences.custodyAccountId);",
					"            for (var i=0; i<jsonData.orders.length; i++){",
					"                if (jsonData.orders[i].orderReferences.custodyAccountPositionId !== null){",
					"                    pm.environment.set(\"_tmp_custodyAccountPositionId\",jsonData.orders[i].orderReferences.custodyAccountPositionId);",
					"                    break;",
					"                }",
					"            }",
					"            pm.environment.set(\"_tmp_securityId\",jsonData.orders[0].orderReferences.securityId);",
					"            pm.environment.set(\"_tmp_orderId\",jsonData.orders[0].id);",
					"            pm.environment.set(\"_tmp_postEnteredById\",jsonData.orders[0].orderReferences.enteredById);",
					"            /*",
					"            if (jsonData.orders[0].orderReferences.enteredBy === undefined || jsonData.orders[0].orderReferences.enteredBy === null) {",
					"                pm.environment.set(\"_tmp_postEnteredById\",\"__ID__386c4161416544634138766a39493768efa6b074064fb0247ca0b4f39c466cec9911a3e60595ff36\");",
					"            }",
					"            */",
					"        }",
					"    });",
					"});",
					"",
					"/* function for list security types*/",
					"postman.setGlobalVariable(\"listSecurityTypes\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_brokerage\")}/brokerage/api/v2/${pm.environment.get(\"tenantId_brokerage\")}/types`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json; charset=UTF-8',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({})",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"            pm.environment.unset(\"_tmp_typeId\");          ",
					"        } else {",
					"            pm.environment.set(\"_tmp_typeId\",res.json().securityTypes[0].id);",
					"        }",
					"    });",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "dcd7db22-3b11-4b68-9c4d-6fa0a2f6c846",
				"type": "text/javascript",
				"exec": [
					"eval(globals.sessionNavigate)();"
				]
			}
		}
	]
}