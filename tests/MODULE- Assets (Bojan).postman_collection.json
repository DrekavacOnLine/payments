{
	"info": {
		"_postman_id": "891e2858-4bce-4934-9a4c-a814850b513f",
		"name": "MODULE: Assets (orig, Sasa)",
		"description": "Asset API:\n\n- Custody account API\n- Assets account\n- Portfolio API\n \nGlobal functions:\n- generateAccessToken //generate access token\n- portfolioRequest //lists portfolios, stores {{_tmp_customerId}} and {{_tmp_portfolioId}}\n- getCustodyAccounts //list custody accounts, stores {{_tmp_cuacsId}}\n- getPositionsByCustodyAccount //list positions for custody account, stores {{_tmp_positionsId}}\n- getTransactionsByCustodyAccount //list transactions for custody account, stores {{_tmp_transactionsId}}\n- getAssetsList // lisls assets for portfolio, stores {{_tmp_assetsId}}",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Tests",
			"item": [
				{
					"name": "Portfolios",
					"item": [
						{
							"name": "Get Portfolio List (C43024137)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a116a499-2d7f-4362-b256-0100b2794041",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a8cfed44-8127-4afb-8478-23c8066f1478",
										"exec": [
											"//Validate results\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of portfolios and response schema is validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    var schemaValidationPassed = true;\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"    \r",
											"    if (pm.response.code === 200) {\r",
											"        var jsonData = JSON.parse(responseBody)._embedded;\r",
											"        pm.environment.set(\"_tmp_portfolioId\", jsonData.portfolios[1].id);\r",
											"        pm.environment.set(\"_tmp_customerId\", jsonData.portfolios[1].customerId);\r",
											"    \r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_portfolioId\");\r",
											"        pm.environment.unset(\"_tmp_customerId\");\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Portfolio Details List (C43034139)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b4027fe9-1aee-4c15-ae04-3104c156ab5c",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6dedc69f-787f-482e-8b6b-8472fc78a1c3",
										"exec": [
											"//Validate results\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of portfolio details and response schema is validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioDetailsSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"    //Validate that the orders belong to the appropriate customer\r",
											"    let portId = pm.environment.get(\"_tmp_portfolioId\");\r",
											"    jsonData.id === portId\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Assets List (C43181622)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "62d6d9ca-af63-43da-a3e8-070d77359435",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0cf20faf-0b6b-4b42-ae10-913e91e7a4b2",
										"exec": [
											"//Validate results\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"assetsList\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"    if (pm.response.code === 200) {\r",
											"        pm.environment.set(\"_tmp_assetsId\", jsonData._embedded.assets[0].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_assetsId\");\r",
											"    }\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/assets",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"assets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Assets List Details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "23bd11b8-67aa-4ab9-9e89-c96ed93566df",
										"exec": [
											"eval(globals.portfolioRequest)();",
											"setTimeout(function(){eval(globals.getAssetsList)();}, 2000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b7a2b817-1cef-423b-bba0-a91f231a40b3",
										"exec": [
											"//Validate results\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"assetsListDetails\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/assets/{{_tmp_assetsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"assets",
										"{{_tmp_assetsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Maturity  List (C43181624)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "07488953-21b4-4798-b722-9a0108b8208d",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d290bfc9-9f4d-46d4-9ba5-927f65097280",
										"exec": [
											"//Validate results\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData._embedded.maturities === undefined || jsonData._embedded.maturities.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    var schemaValidationPassed = true;\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioDetailsSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/maturities",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"maturities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Performance Details (C43181629)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ea1e7515-da98-407b-90a3-e7adcb053b08",
										"exec": [
											"eval(globals.portfolioRequest)(); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "714b8a63-3f2e-4990-9fde-e9ce85d83e9c",
										"exec": [
											"//Validate results\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioPerformanceSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/performance",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"performance"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Custody accounts",
					"item": [
						{
							"name": "List of custody accounts (C41736189)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "98cceb6a-49f9-4735-ada8-e71761865b5c",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsSchema = pm.environment.get(\"cuacsSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Save custody account id as environment variable\r",
											"    if (pm.response.code === 200) {\r",
											"        pm.environment.set(\"_tmp_cuacsId\",jsonData._embedded.cuacs[0].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_cuacsId\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "559d81af-e7d7-431a-9931-83072ce82e23",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Custody account position list (C41853583)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d97bf55-ea68-4c58-8d25-ced1e0c61392",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Position details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsPositionSchema = pm.environment.get(\"cuacsPositionSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsPositionSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"   \r",
											"    //Save position id as environment variable\r",
											"    if (pm.response.code === 200) {\r",
											"        pm.environment.set(\"_tmp_positionsId\",jsonData._embedded.positions[0].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_positionsId\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "95d083ef-de12-4a3f-af97-f62d3005e9ff",
										"exec": [
											"eval(globals.getCustodyAccounts)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/positions",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Custody account position details (C42065196)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "088814e8-2cf1-4550-9159-c6f1a83b64ae",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Position details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var positionIdSchema = pm.environment.get(\"positionIdSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"positionIdSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"    \r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4b1d2eec-b76b-4c1b-9a0a-696af4cf5f75",
										"exec": [
											"eval(globals.getCustodyAccounts)();",
											"setTimeout(function(){eval(globals.getPositionsByCustodyAccount)();}, 2000);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/positions/{{_tmp_positionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"positions",
										"{{_tmp_positionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get transactions for cuacsId (C42065197)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6fbaac95-0fb7-40ca-a84f-c02cae13e197",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Transactions details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsPositionSchema = pm.environment.get(\"cuacsPositionSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"   \r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsIdSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"   \r",
											"    //Save transaction id as environament variable\r",
											"    if (pm.response.code === 200) {\r",
											"        pm.environment.set(\"_tmp_transactionsId\",jsonData._embedded.transactions[0].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_transactionsId\");\r",
											"    }\r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a1b94224-c125-4c03-ba94-1d7d6c016526",
										"exec": [
											"eval(globals.getCustodyAccounts)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/transactions/",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"transactions",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Custody account details (C41853582)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a2841ef-21a1-4f1b-84a1-5f1f659c2003",
										"exec": [
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"    let cuacsId = pm.environment.get(\"_tmp_cuacsId\");",
											"    let result = true;",
											"    ",
											"    //Validate if execution status is correct",
											"    pm.response.to.have.status(200);",
											"    ",
											"    //Validate if response schema is correct",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsDetSchema\", jsonData);",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    ",
											"    //Validate if custody account is correct in the response",
											"    result = result && (jsonData.id === cuacsId);",
											"    pm.expect(result).to.be.eql(true);",
											"});",
											"",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "235f3b8d-0a76-464d-b31c-f4ddd3ba53b8",
										"exec": [
											"eval(globals.getCustodyAccounts)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Custody account transactions details (C43024136)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63b362ed-f9b4-44d6-87ca-c106077996a6",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Transactions details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var positionIdSchema = pm.environment.get(\"positionIdSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsIdDetailsSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2b5f3bd6-54f3-4fca-a05c-c9d862e577ad",
										"exec": [
											"eval(globals.getCustodyAccounts)();",
											"setTimeout(function(){eval(globals.getTransactionsByCustodyAccount)();}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/transactions/{{_tmp_transactionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"transactions",
										"{{_tmp_transactionsId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3d9da8f3-f965-45bf-86ab-c97f54ffe7bd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "89ddb355-dd77-41ee-a862-0b15385e5ff9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Assets",
					"item": [
						{
							"name": "AccountId Transaction Search (C37972704)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad13e320-8802-4eff-8caa-3ddd40fd355f",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Status is ok\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    var schemaValidationPassed = true;\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"    if (pm.response.code === 200) {\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"        pm.environment.set(\"_tmp_transactionsId\",jsonData.transactionGroups[0].transactions[0].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_transactionsId\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e964d049-2e0e-4f28-827a-291639adf86e",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2020-06-01\"\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId Transaction Search Overview",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4fc634cc-ddd9-4901-82bd-1bbc2b4da225",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"  \r",
											"    //Validate the response code \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "61cec6ad-2197-445c-941c-cd4a635739a9",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2020-01-01\",\n\"endDate\": \"2020-06-01\",\n\"transactionFlow\": \"OUTGOING\",\n\"transactionType\": \"BOTH\",\n\"amountFrom\": \"999.00\",\n\"amountTo\": \"51001.01\"\n\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "566c36fc-6597-48c9-839c-aab2cd638c67",
						"type": "text/javascript",
						"exec": [
							"/*determine test case ID from request name*/",
							"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
							"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
							"",
							"/*add current test case ID to list of already executed tests*/",
							"eval(globals.testsExecuted)(testRailTestCases);",
							"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
							"",
							"//store test case ID of current request for linking with Test Rail",
							"pm.globals.set(\"_tr_\" + request.name, testRailTestCases);",
							"",
							"//call global function to generate access token",
							"eval(globals.generateAccessToken)();"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "13a9cad8-6a0b-4c72-b00f-b53522616467",
						"type": "text/javascript",
						"exec": [
							"//eval(globals.sessionNavigate)();"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Requests",
			"item": [
				{
					"name": "portfolio request",
					"item": [
						{
							"name": "Get_portfolios_list (C43024137)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7218317a-a40d-4785-a3c7-ee0d2e2d13f5",
										"exec": [
											"\r",
											"\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of portfolios and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let portId = pm.environment.get(\"_tmp_portfolioId\");\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioSchema\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_portfolioId\",jsonData.portfolios[1].id);\r",
											"    pm.environment.set(\"_tmp_customerId\",jsonData.portfolios[1].customerId);\r",
											"\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_portfolioId\");\r",
											"    pm.environment.unset(\"_tmp_customerId\");\r",
											"\r",
											"}\r",
											"});\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "05455ae8-c7b4-4402-940b-e227f6362512",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_portfolios_details_list (C43024139)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d5bdd9f4-8b48-4b2f-821f-6747312f8c10",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "290dd9a5-28a4-4cb2-9bef-71b5e1835b77",
										"exec": [
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let portId = pm.environment.get(\"_tmp_portfolioId\");\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioDetailsSchema\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returned orders match to specified cuacsId\", () => {\r",
											"  \r",
											"        result = result && (jsonData.id === portId);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"});\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_assets_list (C43181622)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "361e7d4f-7815-4304-8dc0-a81dda8bd850",
										"exec": [
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"assetsList\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    \r",
											"    if (pm.response.code === 200) {\r",
											"    pm.environment.set(\"_tmp_assetsId\",jsonData._embedded.assets[0].id);\r",
											"    \r",
											"\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_assetsId\");\r",
											"    \r",
											"}\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9996d93b-ed40-4580-8ded-0155eae3cd81",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/assets",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"assets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_assets_list_details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a284b8c-4994-4cff-b988-981370e9dbad",
										"exec": [
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"assetsListDetails\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"});\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b0219fca-30bc-422b-a43e-3be1f76d9ff3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/assets/{{_tmp_assetsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"assets",
										"{{_tmp_assetsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_maturity_list (C43181624)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2988a728-7a7d-4799-b766-6d878bd36f55",
										"exec": [
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"  \r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioDetailsSchema\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"});\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e530d075-2060-41c8-8218-634d59c02c51",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/maturities",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"maturities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_performance_details (C43181629)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65c40998-e947-41f0-a688-d6a470ef40c9",
										"exec": [
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let assetNo = pm.environment.get(\"_tmp_portfolioId\");\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioPerformanceSchema\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"});\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "12608612-8116-42b8-9d10-a0f9d9c2a77e",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/performance",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"performance"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Custody accounts",
					"item": [
						{
							"name": "Get custody accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "965147f9-c53d-475d-9f77-d3b059711fc4",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsSchema = pm.environment.get(\"cuacsSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_cuacsId\",jsonData.cuacs[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_cuacsId\");\r",
											"}\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1917595c-2a19-4f86-b6b1-0d4fff204bfc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get positons for cuacsId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af741483-73aa-4521-bcc6-465217c6b610",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Position details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsPositionSchema = pm.environment.get(\"cuacsPositionSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsPositionSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"   }); \r",
											"   \r",
											" // store last securityNumber as environment variable\r",
											"    if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_positionsId\",jsonData.positions[0].id);\r",
											"    } else {\r",
											"    pm.environment.unset(\"_tmp_positionsId\");\r",
											"}\r",
											"\r",
											"    \r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "71406a46-8c22-49ab-872d-5be32da42d23",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/positions",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get custody account positions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "668ecf85-8a0d-452c-9239-939eee027c2b",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Position details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var positionIdSchema = pm.environment.get(\"positionIdSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"positionIdSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"   }); \r",
											"   \r",
											"\r",
											"    \r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "853df77b-67d6-47aa-8726-9dcf044614bb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/positions/{{_tmp_positionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"positions",
										"{{_tmp_positionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get transactions for cuacsId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b966ac8-e943-4b1d-80da-43fe0a9892db",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Transactions details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsPositionSchema = pm.environment.get(\"cuacsPositionSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsIdSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"   }); \r",
											"   \r",
											" // store last securityNumber as environment variable\r",
											"    if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_transactionsId\",jsonData.transactions[0].id);\r",
											"    } else {\r",
											"    pm.environment.unset(\"_tmp_transactionsId\");\r",
											"}\r",
											"\r",
											"    \r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "782bce6f-d6af-4949-9cfc-a869153047f7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/transactions/",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"transactions",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get custody account positions details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc27cb70-8bdc-4f5d-be1b-f521d3b7882b",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Position details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var positionIdSchema = pm.environment.get(\"positionIdSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"positionIdSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"   }); \r",
											"   \r",
											"\r",
											"    \r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "be80f846-a127-4808-9ade-c259e46b8f29",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/positions/{{_tmp_positionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"positions",
										"{{_tmp_positionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get custody account transactions details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "852d753e-354e-48a9-85ef-765bfc79a189",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Transactions details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var positionIdSchema = pm.environment.get(\"positionIdSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsIdDetailsSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"   }); \r",
											"   \r",
											"\r",
											"    \r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "526f194d-71af-4781-b8a1-18b3cfbe9679",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/transactions/{{_tmp_transactionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"transactions",
										"{{_tmp_transactionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_customer_info_by_his_ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9c5c08c2-3b77-479c-9031-b7c263223ae3",
										"exec": [
											"eval(globals.commonTests)();",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"    let cuacsId = pm.environment.get(\"_tmp_cuacsId\");",
											"    let result = true;",
											"",
											"    pm.test(\"Status 200 OK is displayed\", function() {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsDetSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"",
											"    pm.test(\"Returned orders match to specified cuacsId\", () => {",
											"  ",
											"        result = result && (jsonData.id === cuacsId);",
											"        ",
											"        pm.expect(result).to.be.eql(true);",
											"    });",
											"",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&",
											"        pm.expect(result).to.be.eql(true);",
											"});",
											"",
											"eval(globals.sessionNavigate)();",
											"pm.globals.unset(\"_tr_\" + request.name);",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c9608615-3201-4cb9-bcf3-1dd9418835d4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Assets",
					"item": [
						{
							"name": "Account_Search (C41736193)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa469ecd-b344-4172-bab2-9ba636b51516",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[jsonData.page.totalElements-1].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId2\",jsonData.accountList[1].id);\r",
											"    pm.environment.set(\"_tmp_accountIdAlias\",jsonData.accountList[2].id);\r",
											"    pm.environment.set(\"_tmp_accountNumber1\",jsonData.accountList[0].accountNumber);\r",
											"    pm.environment.set(\"_tmp_accountNumber2\",jsonData.accountList[1].accountNumber);\r",
											"    pm.environment.set(\"_tmp_iban1\",jsonData.accountList[0].iban);\r",
											"    pm.environment.set(\"_tmp_iban2\",jsonData.accountList[1].iban);\r",
											"    pm.environment.set(\"_tmp_id1\",jsonData.accountList[0].id);\r",
											"    pm.environment.set(\"_tmp_id2\",jsonData.accountList[1].id);\r",
											"    pm.environment.set(\"_tmp_contractId\",jsonData.accountList[0].permissions[0].contractId);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId2\");\r",
											"    pm.environment.unset(\"_tmp_accountIdAlias\");\r",
											"    pm.environment.unset(\"_tmp_accountNumber1\");\r",
											"    pm.environment.unset(\"_tmp_accountNumber2\");\r",
											"    pm.environment.unset(\"_tmp_iban1\");\r",
											"    pm.environment.unset(\"_tmp_iban2\");\r",
											"    pm.environment.unset(\"_tmp_id1\");\r",
											"    pm.environment.unset(\"_tmp_id2\");\r",
											"    pm.environment.unset(\"_tmp_contractId\");\r",
											"}\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b4f56702-b68e-4a87-924b-8521097934d8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=30",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "30"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple_criteria_iban_asc (C38950548)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b6426cf9-072b-45bb-84e3-00e8ff5166fa",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].iban < jsonData.accountList[1].iban);\r",
											"   \r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e2253658-e32a-4e4f-8181-1aa4a60f3170",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"orderBy\": [\r\n{\r\n\"field\": \"IBAN\",\r\n\"sortOrder\": \"ASC\"\r\n}\r\n],\r\n\"criteria\": {\r\n\"iban\": [\r\n\"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"\r\n]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple_criteria_iban_desc (C38950549)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "98f037a0-11cb-41c6-9f66-f3e4c2857bae",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account order\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].iban > jsonData.accountList[1].iban);\r",
											"   \r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4f89a752-7b8c-4828-bbbe-8f1249e9f071",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"orderBy\": [\r\n{\r\n\"field\": \"IBAN\",\r\n\"sortOrder\": \"DESC\"\r\n}\r\n],\r\n\"criteria\": {\r\n\"iban\": [\r\n\"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"\r\n]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_BIC (C41939550)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4645b6a-99ee-4251-9ffb-15e921c69178",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let bic = \"CLXNCHZZMDB\"\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].bank.bic === bic);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ff66e786-4c9f-4922-a821-e6eaee18a6d2",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=30",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "30"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Account number (C37972701)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd93b44e-0dca-43a1-ae98-5b434077ffe5",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accNumber = pm.environment.get(\"_tmp_accountNumber1\")\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountNumber=== accNumber);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ce949196-1e0d-4e06-bf9c-5a53e79512c5",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\n    \"accountNumber\": [\n      {{_tmp_accountNumber1}}\n    ]\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple names (C38950539)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e117b940-2a0a-4252-b7f4-080c107bc951",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accName = \"1704 USD\";\r",
											"    let accName1 = \"1501 CHF\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"       \r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"    pm.test(\"Returned proper account name\", () => {\r",
											"  \r",
											"    result = result && (jsonData.accountList[0].accountName === accName);\r",
											"    result = result && (jsonData.accountList[1].accountName === accName1);\r",
											"        \r",
											"    pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "aa204cac-0a7a-44c2-8eca-77760b261bf6",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountName\": [\r\n      \"1704 USD\",\"1501 CHF\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple_Account_number (C38950540)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf4967c2-fcac-4b2a-8e17-7178d3de0563",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accNumber1 = pm.environment.get(\"_tmp_accountNumber1\")\r",
											"    let accNumber2 = pm.environment.get(\"_tmp_accountNumber2\")\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountNumber=== accNumber1);\r",
											"        result = result && (jsonData.accountList[1].accountNumber=== accNumber2);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c13305fb-b450-42bb-bdd3-d97111e37286",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountNumber\": [\r\n      {{_tmp_accountNumber1}},{{_tmp_accountNumber2}}\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_Current (C38950541)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4313860e-6288-4a2c-9ce8-a89c5573127d",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType = \"CURRENT\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountType=== accType);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "07df03a6-87af-46e3-a56e-ee9d680ec888",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"CURRENT\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_SAVINGS (C38950542)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f7c263e-5cd6-416e-9850-c918d33183f5",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType = \"SAVINGS\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountType=== accType);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d2798844-2586-4661-b2d1-c5463cf2e3b3",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"SAVINGS\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Search_startDate&endDate (C379050538)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f7720118-1cc0-4ea6-9976-4f7fadf9b65e",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "984792f5-f12b-4ccc-9cf9-936b690a4df3",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_Multiple (C41083339)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5472d23c-ce4a-46a2-a2ba-61f24d16059f",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3b755931-9d53-46e4-b99e-da495cc711d3",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType1 = \"CURRENT\";\r",
											"    let accType2 = \"OTHER\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account type\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountType=== accType1);\r",
											"        result = result && (jsonData.accountList[3].accountType=== accType2);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"OTHER\",\"CURRENT\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_Other  (C41083337)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4579bd4a-145a-469d-90c8-da04be85d059",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType = \"OTHER\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountType=== accType);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "487940ec-31ac-4d6a-9a29-acd99472b916",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"OTHER\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_iban (C38950543)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a66ecb7-59f3-46f3-ac19-a14e7efa981c",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let iban = pm.environment.get(\"_tmp_iban1\")\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].iban === iban);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e2d62763-839f-4fee-bc38-310eac5fd47a",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"iban\": [\r\n      \"{{_tmp_iban1}}\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_multiple_iban (C38950544)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "308990e8-6eea-40f7-87b3-f92046027585",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let iban1 = pm.environment.get(\"_tmp_iban1\")\r",
											"    let iban2 = pm.environment.get(\"_tmp_iban2\")\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].iban === iban1);\r",
											"        result = result && (jsonData.accountList[1].iban === iban2);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e3dc1f-976c-4968-8447-ee365de68fd1",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"iban\": [\r\n      \"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"\r\n    ]\r\n\r\n}\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_ContractId (C38950547)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55acd50e-6540-4b63-a9d0-87530043a67a",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9b748f8e-40f2-44ff-98ae-9fc3a7447289",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"contractId\": [\r\n      \"{{_tmp_contractId}}\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_account_Name (C37949168)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c30c4cc0-e1ca-4c60-8364-73f0c076fe6a",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accName = \"1704 USD\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"    pm.test(\"Returned proper account name\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountName === accName);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"        \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "db9a38b6-8179-4877-a481-9b0f725ef7d3",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountName\": [\r\n      \"1704 USD\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_id (C38950545)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ffe50d1-8ffa-478b-9e8f-834cc5d51453",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a1641fac-6b4e-4d63-9c21-735a77fb1d73",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"iban\": [\r\n      \"{{_tmp_id2}}\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_validation 400 (C38763416)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3661f868-e768-4636-a17d-39578847cbd1",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 400 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"    \r",
											"    if (pm.response.code === 400) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_transactionsId\");\r",
											"\r",
											"}\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"error400\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(400)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1a43d889-8127-4845-83f9-c6f721b4845d",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2020-01-01\",\n\"endDate\": \"2020-06-01\",\n\"transactionFlow\": \"OUTGOING\",\n\"transactionType\": \"BOTH\",\n\"amountFrom\": \"999.00\",\n\"amountTo\": \"51001.01\"\n\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{oldAccountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{oldAccountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_transaction 401 validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d80ddfe5-8660-4654-9bee-2b53e9d5c4fd",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 401 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(401);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"    \r",
											"    if (pm.response.code === 401) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_transactionsId\");\r",
											"\r",
											"}\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"error400\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(401)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5aa69ffc-892b-42fa-ad70-8303394689df",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{insufficient_token_value}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2020-01-01\",\n\"endDate\": \"2020-06-01\",\n\"transactionFlow\": \"OUTGOING\",\n\"transactionType\": \"BOTH\",\n\"amountFrom\": \"999.00\",\n\"amountTo\": \"51001.01\"\n\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_multiple_criteria (C38763407)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7724cc84-82e3-4b10-867a-6dadf20c4d2a",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var transactionDate = new Date('2019-01-01').getTime();\r",
											"    var endDate = new Date('2019-04-18').getTime();\r",
											"    let amountFrom = pm.environment.get(\"100.01\");\r",
											"    let amountTo = pm.environment.get(\"5001.21\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Returned orders match to specified transactions startDate 2019-01-01 \", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (transactionDate < convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Returned orders match to specified transactions endDate 2019-04-18 and after\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (endDate > convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont from\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountFrom <= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont to\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountTo <= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "27268801-c9db-46af-88db-b399ceac708c",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-04-18\",\n\n\"amountFrom\": 100.01,\n\"amountTo\": 50001.21\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_desc  (C38719010)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5820898-268c-4f47-bd40-b412493e08a3",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e1c6f30e-c052-4e3d-8768-d4c97a8adac9",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_pagination (C47473070)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23ebfca4-08f1-4bda-837b-a467f3842e4e",
										"exec": [
											"\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let number = 25;\r",
											"    let size = 3;\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"  \r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper response size\", () => {\r",
											"        result = result && (jsonData.page.size === size);\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"        pm.test(\"Returned proper number\", () => {\r",
											"        result = result && (jsonData.page.number === number);\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7207c97d-614f-40f7-9c4e-2e8317133bcc",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": {{PrS:nextWorkingDay}}\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?page=25&size=3",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "25"
										},
										{
											"key": "size",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_size (C47473979)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c6d6203-da99-4d75-8a2c-6ed874751c34",
										"exec": [
											"\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let number = 10;\r",
											"    let size = 4;\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"  \r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper response size\", () => {\r",
											"        result = result && (jsonData.page.size === size);\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"        pm.test(\"Returned proper number\", () => {\r",
											"        result = result && (jsonData.page.number === number);\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a8259105-235c-4851-b075-4f59fa82a199",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": {{PrS:nextWorkingDay}}\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?page=10&size=4",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10"
										},
										{
											"key": "size",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_startDate (C37786354)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7420bae-d103-4116-a8b0-2585082583e6",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var transactionDate = new Date('2019-01-01').getTime();\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-01-01 and after\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (transactionDate < convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2c80ad-ec74-4099-9926-5a73bcfea6ab",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\"\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_Reference_Text (C37905050)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19f74338-560f-43bd-b07b-3bc6b53376f8",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var referenceText = null;\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"reference text is null\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var refText = new Date(jsonData.transactionGroups[0].transactions[0].referenceText[x].referenceText);\r",
											"            result = result && (referenceText === refText);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "da0fce1a-03ba-4b8b-974f-8ae51094ddb0",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"referenceText\":null\n\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_amountFrom (C37905040)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "264624b0-1140-43d2-a624-606712878a0c",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"       let amountFrom = pm.environment.get(\"1000.01\");\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont from\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountFrom <= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0aaf1067-c1f9-408a-8a32-5b5db073ae91",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"criteria\": {\r\n\"startDate\": \"2019-01-01\",\r\n\"amountFrom\":\"1000.01\"\r\n}\r\n}\r\n'date is set if contract don`t have transactions in last 30 days'",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "set_alias (C37905058)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "abb542b6-7c9c-4ab8-9a31-8edeaa992f06",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"aliasSet\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "67352b4a-24ff-4d2e-9ddf-5ab2afd88261",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"alias\": \"test\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountIdAlias}}/alias",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountIdAlias}}",
										"alias"
									]
								}
							},
							"response": []
						},
						{
							"name": "update alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6aac9b1-e088-4e4e-8277-ed06b78ac725",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"aliasSet\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b96fdae7-7f23-4510-ba57-e155efc6085e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"alias\": \"test2\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountIdAlias}}/alias",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountIdAlias}}",
										"alias"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78de7cc5-b642-421d-aa31-9ca66f6d8928",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"aliasSet\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c13842a1-439b-4ef8-a512-80ac8873f251",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountIdAlias}}/alias",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountIdAlias}}",
										"alias"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "514df617-f3ca-4648-ae33-879012adb2eb",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accName = \"test\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"    pm.test(\"Returned proper account name\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountName === accName);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"        \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5d5d1ebe-9aae-42be-963a-2b61f57ab36e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\n    \"accountName\": [\n      \"test\"\n    ]\n\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=20",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_updated_alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cbbe6f36-d232-4b8a-8ff8-2a214ba448ee",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accName = \"test2\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"    pm.test(\"Returned proper account name\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountName === accName);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"        \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "541c2dee-05ec-4d9b-8fe2-f967baca9445",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\n    \"accountName\": [\n      \"test2\"\n    ]\n\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=20",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_alias_Postconditions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "878dd914-6a6c-4611-909d-52f307ccc2cf",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accName = \"1704 USD\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"    pm.test(\"Returned proper account name\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountName === accName);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"        \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "77f6f5fa-cfd7-44b9-8048-c79a39af0b8b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\n    \"accountName\": null\n\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=20",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_amountTo (C37905041)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dad4ff0f-9310-411c-90f4-21e052a2d3f8",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5a93cf6b-185c-4546-903d-bb998f8cb7e7",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"       let amountTo = pm.environment.get(\"150000.01\");\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont from\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountTo >= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"criteria\": {\r\n\"startDate\": \"2019-01-01\",\r\n\"amountTo\":\"150000.01\"\r\n}\r\n}\r\n'date is set if contract don`t have transactions in last 30 days'",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_endDate (C62786800)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8e82e9c-5505-487a-ab54-d290f4cec52d",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var transactionDate = new Date(\"2019-12-32\");\r",
											"    var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions endDate 2019-12-31\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (convertedtransactionDate > convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "caf3ef89-3fde-424a-a321-3f189ec23739",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"endDate\": \"2019-12-31\"\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Search_endDate (C37786407)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa0f0bac-2f6b-4271-a724-9ef98bf4888e",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0c8c816a-d0c0-43b4-bbf7-cfc741e3ff22",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"endDate\": \"2019-12-31\"\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_multiple_amontFrom_amountTo (C37905042)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46ef3ac6-ffbd-4c51-b0cf-adcabb9c026a",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var transactionDate = new Date('2019-01-01').getTime();\r",
											"    var endDate = new Date('2019-04-18').getTime();\r",
											"    let amountFrom = pm.environment.get(\"100.01\");\r",
											"    let amountTo = pm.environment.get(\"1000.01\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"     pm.test(\"Check proper value for transactions amont from\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountFrom >= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont to\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountTo <= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "592bf95d-7456-4f1f-90d0-1043a162aee1",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"amountFrom\": 100.01,\n\"amountTo\": 1001.21\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_startDate&endDate (C37905042)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be377b67-c70f-441d-a905-260d2f8abbb1",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var startDate = new Date('2019-01-01').getTime();\r",
											"    var endDate = new Date('2019-10-29').getTime();\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-01-01\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (startDate <= convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-10-29\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (endDate >= convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    });\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9aa11bac-578a-4ff4-bd3c-2123b42897de",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": {{PrS:nextWorkingDay}}\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_single_transaction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1d7c183e-afff-42a0-b363-b05def38db63",
										"exec": [
											"//pm.environment.unset(\"_tmp_accountId\");",
											"",
											"eval(globals.assetsSearchFunction)(\"assetsTransactionSearchFunction\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ab3fdd93-21c2-47b5-b9ca-0ba2ff20db01",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"singleTransactions\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/transactions/{{_tmp_transactionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"transactions",
										"{{_tmp_transactionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5667580-d791-4b30-954f-e8fb15f31164",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var startDate = new Date('2019-01-01').getTime();\r",
											"    var endDate = new Date('2019-10-29').getTime();\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-01-01\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (startDate <= convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-10-29\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (endDate >= convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    });\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9a4a97be-284d-4c41-b971-9ba252a8e3cc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/permissions",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_permissions 400 validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f592dd6-4d3c-40c8-81a9-c49c8dff0dd0",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 400 Bad request is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"error400\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    pm.response.to.have.status(400)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e50af1f1-5527-4741-9b2f-4bf01271d3c6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{insufficient_token_value}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{oldAccountId}}/permissions",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{oldAccountId}}",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_permissions 401 validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c4f0b73-33d6-47f8-9058-7ae07c9ca172",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 403  is displayed\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"error400\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    pm.response.to.have.status(403)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "82b911bd-ff71-435d-909c-652a14ef68f3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{insufficient_token_value}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/permissions",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_details_get",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73da17cf-02d0-4c59-b3d0-19aca2d14449",
										"exec": [
											"\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of permissions is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountIdDetails\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d9abe324-adef-4209-9a61-080021120493",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-10-29\"\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03235563-b96d-43f5-9282-c6023a3d585f",
										"exec": [
											"\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of balance is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"balanceSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4232f747-d867-446f-a40d-46b3b3006af7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-10-29\"\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/balance",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"balance"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_balance 400 validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63aeb24b-97c3-4003-8459-e93348d9a244",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 400 Bad request is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"error400\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    pm.response.to.have.status(400)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0a18d755-18bb-46d0-a86d-1ac921565ec7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{oldAccountId}}/balance",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{oldAccountId}}",
										"balance"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_balance 401 validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1fc7ff32-9854-4142-9912-67fe5a546921",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 401  is displayed\", function () {\r",
											"        pm.response.to.have.status(401);\r",
											"    });\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"error400\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    pm.response.to.have.status(401)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b2fee2bd-6de6-4dc6-8671-e7116052b28b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{insufficient_token_value}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{oldAccountId}}/balance",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{oldAccountId}}",
										"balance"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_list_of_all_accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f042462-b729-4768-b35b-33023a1a978d",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of portfolios is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsSchema = pm.environment.get(\"portfolioSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, portfolioSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last portfolioId as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_portfolioId\",jsonData.portfolios[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_portfolioId\");\r",
											"}\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "58e39f4b-858f-4b70-831b-5c06b725c95e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Incoming transactions (C37905043)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13bd7b59-c684-4cc0-9b75-731888a0a559",
										"exec": [
											"\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"  \r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e1cfd951-b7b4-4857-8145-a52fd1f97d0f",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionFlow\":\"INCOMING\"\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BOTH transactions (C37905045)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24d76fb4-7f01-4390-afcb-b9f6849edf55",
										"exec": [
											"\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"  \r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8313e4c3-0b0b-4a32-a1ee-4d3c2e499ac6",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionFlow\":\"BOTH\"\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OUTGOING transactions (C37905044)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9caa226c-b429-44b5-ac2d-518399b98414",
										"exec": [
											"\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"  \r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0822bb5a-6a6c-405b-bfee-9ebd3f063c40",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionFlow\":\"OUTGOING\"\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "UNBOOKED transactions (C37905047)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b34511e-ce1f-483d-9186-28bdd91142db",
										"exec": [
											"\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"  \r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1682cd39-9927-47b5-af02-b6242e2812cb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionType\":\"UNBOOKED\"\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BOOKED transactions (C37905046)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "87c2f0cd-3fa5-4f3f-95e0-f4c6c99d2b92",
										"exec": [
											"\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"  \r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0c8d5b91-a5ac-402c-83ef-4e0339df1904",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionType\":\"BOOKED\"\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BOTH transactionsType (C37905048)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07dcc24f-9c8a-42f7-aa14-01e46de86b5c",
										"exec": [
											"\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"  \r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2370c4fc-c8f6-4ed0-9c9e-128480ad1b1a",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionType\":\"BOTH\"\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "camt",
					"item": [
						{
							"name": "(C39248710) camt053 download",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22f62c86-2422-44cf-bb7b-a4cf759507c6",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "07104234-72d7-476c-ad7f-7295a0324655",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT052",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT052"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248697) camt053 download with endDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bdcf4020-41cf-4a07-9f31-b30bd288a5ac",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(400)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "224bab30-3c5c-4e9e-9815-398b5fc863e9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT053&endDate=2019-12-01",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT053"
										},
										{
											"key": "endDate",
											"value": "2019-12-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248700) camt053 download with startDate and endDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90648ec0-18bd-4668-9ff4-adc2e06dc17d",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(400)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b681dfe9-d4e5-4dcd-ac5d-3a6bef5e0f6f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/__ID__4f784e474f5a6e44796f485532613845314188387337d58602a8f88557af9ab6fdc09e727eb0b3/transactions/camt?isoType=CAMT053&startDate=2019-12-01&endDate=2020-03-01",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"__ID__4f784e474f5a6e44796f485532613845314188387337d58602a8f88557af9ab6fdc09e727eb0b3",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT053"
										},
										{
											"key": "startDate",
											"value": "2019-12-01"
										},
										{
											"key": "endDate",
											"value": "2020-03-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248701) camt053 download WDETAIL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "40960e03-69ef-44a6-ac0a-0b776d72383b",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(400)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fc284e64-940a-4b1d-a1ea-578da838659b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT053&details=WDETAIL",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT053"
										},
										{
											"key": "details",
											"value": "WDETAIL"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248701) camt053 download WDETAIL Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ae554aa-69b5-4a91-89eb-0ffa7b774956",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(400)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2dc5d829-0598-42e7-b8bb-b182debfd047",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT053&details=WDETAIL",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT053"
										},
										{
											"key": "details",
											"value": "WDETAIL"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248702) camt052 download",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f77e1a5f-6048-46c5-ad91-3fe7c51977c5",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2794467e-126f-4c05-b3f7-3e4f15f65735",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/banking-api/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT053",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"banking-api",
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT053"
										},
										{
											"key": "startDate",
											"value": "2020-03-01",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248698) camt052 download with startDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85872e83-b6c4-488a-b634-8ff81b0e2a52",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ff155260-44ee-4fc3-949b-1a0acea7356b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/transactions/camt?isoType=CAMT052&startDate=2020-01-01",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT052"
										},
										{
											"key": "startDate",
											"value": "2020-01-01"
										},
										{
											"key": "endDate",
											"value": "2020-03-09",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248705) camt052 download with startDate and endDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "04c83099-e33b-4310-b066-1bb0d8f4ca08",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "98ff0739-c965-428e-a78f-e9fe97333830",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT053&startDate=2019-01-06&endDate=2020-03-09",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT053"
										},
										{
											"key": "startDate",
											"value": "2019-01-06"
										},
										{
											"key": "endDate",
											"value": "2020-03-09"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248706) camt054 download",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86dd43c1-b55b-4c10-847c-402981774445",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "833d1baa-2bea-4215-b3da-091d1096e511",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT054",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT054"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248706) camt054 download Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0197ecb2-7d99-4e37-8420-70ba3b507275",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5f7e33f3-e9c9-46f5-81fd-acd405c6674c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT054",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT054"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Generate token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c11a8b39-6ca1-416b-8bcf-68a25e0d7798",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "902b3e51-d2cd-44c6-93f1-84c8b679d479",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.environment.set(\"access_token\", pm.response.text());",
									"});",
									"",
									"",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"tenant_id\": 19901,\n\"acsKey\": \"i6PiNObtdp2rCNW7mlV51BDSY4zAliSvBCyVsuML1000203567\",\n\"tenant_name\": \"CLX EBS\",\n\"user_name\": \"1284991501\",\n\"contractNo\": \"15054\",\n\"languageCode\": \"en\",\n\"bcNo\": \"12312\",\n\"authorities\": [\"DBAN_ADMIN\", \"DBAN_USER\"],\n\"client_id\": \"postman\",\n\"user_id\": 1284991501,\n\"scope\": [\n\"https://api.crealogix.com/dban\",\n\"read\",\n\"write\",\n\"https://api.crealogix.com/contracts/contract.advisor.readonly\",\n\"https://api.crealogix.com/contracts/contract.metadata.readonly\",\n\"https://api.crealogix.com/contracts/contract.person.readonly\",\n\"https://api.crealogix.com/payments/payment.initiate\",\n\"https://api.crealogix.com/payments/payment.read\",\n\"https://api.crealogix.com/payments/payment.write\",\n\"https://api.crealogix.com/assets/account.balance.readonly\",\n\"https://api.crealogix.com/assets/account.transaction.readonly\",\n\"https://api.crealogix.com/assets/account.permission.readonly\",\n\"https://api.crealogix.com/assets/account.metadata.readonly\",\n\"https://api.crealogix.com/assets/account.accountname.write\",\n\"https://api.crealogix.com/assets/account.accountimage.write\",\n\"https://api.crealogix.com/assets/cuac.readonly\",\n\"https://api.crealogix.com/assets/portfolio.readonly\",\n\"https://api.crealogix.com/messages/securemail.write\",\n\"https://api.crealogix.com/messages/securemail.read\",\n\"https://api.crealogix.com/messages/document.category.read\",\n\"https://api.crealogix.com/messages/document.category.write\",\n\"https://api.crealogix.com/messages/document.write\",\n\"https://api.crealogix.com/messages/document.read\",\n\"https://api.crealogix.com/brokerage/security.readonly\",\n\"https://api.crealogix.com/brokerage/tradingplace.readonly\",\n\"https://api.crealogix.com/brokerage/depository.readonly\",\n\"https://api.crealogix.com/brokerage/order.readonly\",\n\"https://api.crealogix.com/brokerage/order.write\",\n\"https://api.crealogix.com/deeplink/domains\",\n\"https://api.crealogix.com/deeplink/links\"\n],\n\"loginName\": \"1284991501\",\n\"exp\": 32479694642,\n\"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\n\"iat\": 1553855569\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{env_security_testToken}}",
							"host": [
								"{{env_security_testToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter_account_by_customerId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ffda9c7-b0fc-4852-8401-1f7b2253ae5c",
								"exec": [
									"// Execute standard tests from PrS using eval()\r",
									"eval(globals.commonTests)();\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of portfolios is retrieved and response schema i validated\", function () {\r",
									"\r",
									"    var schemaValidationPassed = true;\r",
									"    //var cuacsSchema = pm.environment.get(\"portfolioSchema\");\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									"    \r",
									"    pm.test(\"Status 200 OK is displayed\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response schema is correct\", () => {\r",
									"\r",
									"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioSchema\",jsonData);\r",
									"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
									"    }); \r",
									"    \r",
									"    pm.response.to.have.status(200)\r",
									"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, portfolioSchema)).to.be.true;\r",
									"});\r",
									"\r",
									"// store last portfolioId as environment variable\r",
									"if (pm.response.code === 200) {\r",
									"    var jsonData = JSON.parse(responseBody)._embedded;\r",
									"    pm.environment.set(\"_tmp_portfolioId\",jsonData.portfolios[0].id);\r",
									"} else {\r",
									"    pm.environment.unset(\"_tmp_portfolioId\");\r",
									"}\r",
									"\r",
									"\r",
									"// Session navigate from PrS using eval()\r",
									"eval(globals.sessionNavigate)();\r",
									"\r",
									"// Reset reference to TR test cases\r",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "55382719-1abf-4204-ad85-70169542ee86",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json; charset=UTF-8"
							},
							{
								"key": "accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios",
							"host": [
								"{{env_assets}}"
							],
							"path": [
								"assets",
								"portfolios",
								"{{tenantId_assets}}",
								"v1",
								"portfolios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clean TestRail Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4affac6-83cc-47dd-aace-ae0b18f5ed0a",
								"exec": [
									"// Prepare list of TestRail tests for 'Clean TestRail Run' request",
									"//var execTests = pm.globals.get(\"testRailTestsInRun\");",
									"var execTests = data.executedTests;",
									"console.log(\"TestRail, tests executed in last run: \" + execTests);",
									"execTests = execTests.replace(/C/g, \"\");",
									"//console.log(\"TestRail, first cleanup: \" + execTests);",
									"execTests = execTests.replace(/ /g, \", \");",
									"//console.log(\"TestRail, second cleanup: \" + execTests);",
									"execTests = execTests.replace(/,,/g, \",\");",
									"pm.globals.set(\"testRailTestsInRun\", execTests); ",
									"",
									"var array = JSON.parse(\"[\" + execTests + \"]\"); //convert string to array",
									"for(let i = 0; i < 10; i++){",
									"    let runId = JSON.parse(responseBody)[i].id;",
									"    let runName = JSON.parse(responseBody)[i].name;",
									"    let runSuiteId = JSON.parse(responseBody)[i].suite_id;",
									"    if (runName === \"Postman API Tests\") { //determine proper run",
									"        //console.log(runId);   ",
									"        console.log(\"TestRail run '\" + runId + \"' updating for tests: \" + execTests);",
									"        pm.sendRequest({",
									"            url: \"https://testrail.ebs.crealogix.net/index.php?/api/v2/update_run/\" + runId,",
									"            method: \"POST\",",
									"            header: {",
									"                \"Authorization\": \"Basic bWlsYW4ua2FyYWRlZ2xpY0BjcmVhbG9naXguY29tOlNTQ25hcG9saTEyMzQ1Njc4OQ==\",",
									"                \"Content-Type\": \"application/json\"",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ include_all: false, case_ids: array })",
									"        \t}",
									"        });",
									"        break;",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "26b2b1db-75af-43a4-91da-caf3998c00da",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "SSCnapoli123456789",
									"type": "string"
								},
								{
									"key": "username",
									"value": "milan.karadeglic@crealogix.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json; charset=UTF-8"
							},
							{
								"key": "accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "https://testrail.ebs.crealogix.net/index.php?/api/v2/get_runs/8=",
							"protocol": "https",
							"host": [
								"testrail",
								"ebs",
								"crealogix",
								"net"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "/api/v2/get_runs/8",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getAuthTestTokenK8S",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "96349b53-1be6-42dc-ae0d-e094c5969653",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2bf5b608-1f13-45f9-9b40-7c8dd94e37d5",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.environment.set(\"access_token\", pm.response.text());",
									"});",
									"",
									"",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"tenant_id\": {{tenantId_security}},\n\"tenant_name\": \"CLX EBS\",\n\"user_name\": \"{{userId_security}}\",\n\"contractNo\": \"{{contractNo_security}}\",\n\"languageCode\": \"en\",\n\"bcNo\": \"{{bcNo_security}}\",\n\"authorities\": [\"DBAN_ADMIN\", \"DBAN_USER\"],\n\"client_id\": \"postman\",\n\"user_id\": {{userId_security}},\n\"scope\": [\n\"https://api.crealogix.com/dban\",\n\"read\",\n\"write\",\n\"https://api.crealogix.com/contracts/contract.advisor.readonly\",\n\"https://api.crealogix.com/contracts/contract.metadata.readonly\",\n\"https://api.crealogix.com/contracts/contract.person.readonly\",\n\"https://api.crealogix.com/payments/payment.initiate\",\n\"https://api.crealogix.com/payments/payment.read\",\n\"https://api.crealogix.com/payments/payment.write\",\n\"https://api.crealogix.com/assets/account/read\",\n\"https://api.crealogix.com/assets/account.transaction/read\",\n\"https://api.crealogix.com/assets/account.name\",\n\"https://api.crealogix.com/assets/account.image\",\n\"https://api.crealogix.com/assets/cuac/read\",\n\"https://api.crealogix.com/assets/portfolio/read\",\n\"https://api.crealogix.com/messages/securemail.write\",\n\"https://api.crealogix.com/messages/securemail.read\",\n\"https://api.crealogix.com/messages/document.category.read\",\n\"https://api.crealogix.com/messages/document.category.write\",\n\"https://api.crealogix.com/messages/document.write\",\n\"https://api.crealogix.com/messages/document.read\",\n\"https://api.crealogix.com/brokerage/security/read\",\n\"https://api.crealogix.com/brokerage/tradingplace/read\",\n\"https://api.crealogix.com/brokerage/depository/read\",\n\"https://api.crealogix.com/brokerage/order/read\",\n\"https://api.crealogix.com/brokerage/order\",\n\"https://api.crealogix.com/deeplink/domains\",\n\"https://api.crealogix.com/deeplink/links\"\n],\n\"loginName\": \"{{userId_security}}\",\n\"exp\": 32479694642,\n\"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\n\"iat\": 1553855569\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{env_security_testToken}}",
							"host": [
								"{{env_security_testToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAuthTestTokenK8S old&new scope",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4addad9b-5a24-46d7-900f-9f951d091e19",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "86d321b1-7949-4464-92ec-a46899dab652",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.environment.set(\"access_token\", pm.response.text());",
									"});",
									"",
									"",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"tenant_id\": {{tenantId_security}},\n\"tenant_name\": \"CLX EBS\",\n\"user_name\": \"{{userId_security}}\",\n\"contractNo\": \"{{contractNo_security}}\",\n\"languageCode\": \"en\",\n\"bcNo\": \"{{bcNo_security}}\",\n\"authorities\": [\"DBAN_ADMIN\", \"DBAN_USER\"],\n\"client_id\": \"postman\",\n\"user_id\": {{userId_security}},\n\"scope\": [\n\"https://api.crealogix.com/dban\",\n\"read\",\n\"write\",\n\"https://api.crealogix.com/contracts/contract.advisor.readonly\",\n\"https://api.crealogix.com/contracts/contract.metadata.readonly\",\n\"https://api.crealogix.com/contracts/contract.person.readonly\",\n\"https://api.crealogix.com/payments/payment.initiate\",\n\"https://api.crealogix.com/payments/payment.read\",\n\"https://api.crealogix.com/payments/payment.write\",\n\"https://api.crealogix.com/assets/account.balance.readonly\",\n\"https://api.crealogix.com/assets/account.transaction.readonly\",\n\"https://api.crealogix.com/assets/account.permission.readonly\",\n\"https://api.crealogix.com/assets/account.metadata.readonly\",\n\"https://api.crealogix.com/assets/account.accountname.write\",\n\"https://api.crealogix.com/assets/account.accountimage.write\",\n\"https://api.crealogix.com/assets/account/read\",\n\"https://api.crealogix.com/assets/account.transaction/read\",\n\"https://api.crealogix.com/assets/account.name\",\n\"https://api.crealogix.com/assets/account.image\",\n\"https://api.crealogix.com/assets/cuac/read\",\n\"https://api.crealogix.com/assets/portfolio/read\",\n\"https://api.crealogix.com/messages/securemail.write\",\n\"https://api.crealogix.com/messages/securemail.read\",\n\"https://api.crealogix.com/messages/document.category.read\",\n\"https://api.crealogix.com/messages/document.category.write\",\n\"https://api.crealogix.com/messages/document.write\",\n\"https://api.crealogix.com/messages/document.read\",\n\"https://api.crealogix.com/brokerage/security/read\",\n\"https://api.crealogix.com/brokerage/tradingplace/read\",\n\"https://api.crealogix.com/brokerage/depository/read\",\n\"https://api.crealogix.com/brokerage/order/read\",\n\"https://api.crealogix.com/brokerage/order\",\n\"https://api.crealogix.com/brokerage/security.readonly\",\n\"https://api.crealogix.com/brokerage/tradingplace.readonly\",\n\"https://api.crealogix.com/brokerage/depository.readonly\",\n\"https://api.crealogix.com/brokerage/order.readonly\",\n\"https://api.crealogix.com/brokerage/order.write\",\n\"https://api.crealogix.com/deeplink/domains\",\n\"https://api.crealogix.com/deeplink/links\"\n],\n\"loginName\": \"{{userId_security}}\",\n\"exp\": 32479694642,\n\"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\n\"iat\": 1553855569\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{env_security_testToken}}",
							"host": [
								"{{env_security_testToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAuthTestTokenK8S Oldscope",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ea40c1f9-883c-4494-a116-02e14e970d9b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e7324ec9-e727-418f-91a3-2dcfdc7dd37e",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.environment.set(\"access_token\", pm.response.text());",
									"});",
									"",
									"",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"tenant_id\": {{tenantId_security}},\n\"tenant_name\": \"CLX EBS\",\n\"user_name\": \"{{userId_security}}\",\n\"contractNo\": \"{{contractNo_security}}\",\n\"languageCode\": \"en\",\n\"bcNo\": \"{{bcNo_security}}\",\n\"authorities\": [\"DBAN_ADMIN\", \"DBAN_USER\"],\n\"client_id\": \"postman\",\n\"user_id\": {{userId_security}},\n\"scope\": [\n    \"https://api.crealogix.com/dban\",\n    \"read\",\n    \"https://api.crealogix.com/contracts/contract.advisor.readonly\",\n    \"https://api.crealogix.com/assets/account.balance.readonly\",\n    \"https://api.crealogix.com/contracts/contract.metadata.readonly\",\n    \"https://api.crealogix.com/contracts/contract.person.readonly\",\n    \"https://api.crealogix.com/payments/payment.initiate\",\n    \"https://api.crealogix.com/assets/account.transaction.readonly\",\n    \"https://api.crealogix.com/assets/account.permission.readonly\",\n    \"write\",\n    \"https://api.crealogix.com/assets/account.metadata.readonly\",\n    \"https://api.crealogix.com/referencedata/countries\",\n    \"https://api.crealogix.com/referencedata/currencies\",\n    \"https://api.crealogix.com/referencedata/organisation-units\"\n  ],\n\"loginName\": \"{{userId_security}}\",\n\"exp\": 32479694642,\n\"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\n\"iat\": 1553855569\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{env_security_testToken}}",
							"host": [
								"{{env_security_testToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAuthTestTokenK8S_insufficientToken",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c11af78e-23b5-4528-82e5-cd498d0cffca",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fc82bd04-62ea-49aa-be35-eaafa60e89e2",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.environment.set(\"access_token\", pm.response.text());",
									"});",
									"",
									"",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"tenant_id\": {{tenantId_security}},\n\"tenant_name\": \"CLX EBS\",\n\"user_name\": \"{{userId_security}}\",\n\"contractNo\": \"{{contractNo_security}}\",\n\"languageCode\": \"en\",\n\"bcNo\": \"{{bcNo_security}}\",\n\"authorities\": [\"DBAN_ADMIN\", \"DBAN_USER\"],\n\"client_id\": \"postman\",\n\"user_id\": {{userId_security}},\n\"scope\": [\n\"https://api.crealogix.com/dban\",\n\"read\",\n\"write\",\n\"https://api.crealogix.com/contracts/contract.advisor.readonly\",\n\"https://api.crealogix.com/contracts/contract.metadata.readonly\",\n\"https://api.crealogix.com/contracts/contract.person.readonly\",\n\"https://api.crealogix.com/payments/payment.initiate\",\n\"https://api.crealogix.com/payments/payment.read\",\n\"https://api.crealogix.com/payments/payment.write\",\n\"https://api.crealogix.com/assets/account.balance.readonly\",\n\"https://api.crealogix.com/assets/account.transaction.readonly\",\n\"https://api.crealogix.com/assets/account.permission.readonly\",\n\"https://api.crealogix.com/assets/account.metadata.readonly\",\n\"https://api.crealogix.com/assets/account.accountname.write\",\n\"https://api.crealogix.com/assets/account.accountimage.write\",\n\"https://api.crealogix.com/assets/cuac.readonly\",\n\"https://api.crealogix.com/assets/portfolio.readonly\",\n\"https://api.crealogix.com/messages/securemail.write\",\n\"https://api.crealogix.com/messages/securemail.read\",\n\"https://api.crealogix.com/messages/document.category.read\",\n\"https://api.crealogix.com/messages/document.category.write\",\n\"https://api.crealogix.com/messages/document.write\",\n\"https://api.crealogix.com/messages/document.read\",\n\"https://api.crealogix.com/brokerage/security.readonly\",\n\"https://api.crealogix.com/brokerage/tradingplace.readonly\",\n\"https://api.crealogix.com/brokerage/depository.readonly\",\n\"https://api.crealogix.com/brokerage/order.readonly\",\n\"https://api.crealogix.com/brokerage/order.write\",\n\"https://api.crealogix.com/deeplink/domains\",\n\"https://api.crealogix.com/deeplink/links\"\n],\n\"loginName\": \"{{userId_security}}\",\n\"exp\": 32479694642,\n\"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\n\"iat\": 1553855569\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{env_security_testToken}}",
							"host": [
								"{{env_security_testToken}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "14ad0d7c-386a-4c11-90b8-9822035d9a4d",
						"type": "text/javascript",
						"exec": [
							"///*determine test case ID from request name*/",
							"//var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
							"////console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
							"//",
							"///*add current test case ID to list of already executed tests*/",
							"//eval(globals.testsExecuted)(testRailTestCases);",
							"//pm.globals.set(\"testRailTestCases\",testRailTestCases);",
							"//",
							"////store test case ID of current request for linking with Test Rail",
							"//pm.globals.set(\"_tr_\" + request.name, testRailTestCases);",
							"//",
							"////call global function to generate access token",
							"//eval(globals.generateAccessToken)();"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a3d2dfa2-009e-4468-8af0-6d5126768608",
						"type": "text/javascript",
						"exec": [
							"//eval(globals.sessionNavigate)();"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tools",
			"item": [],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tests.old",
			"item": [
				{
					"name": "_Test session",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cb748a22-b124-47a0-97b2-54edeef1bef5",
								"exec": [
									"//reset global variables for controling execution flow",
									"eval(globals.cleanup)();",
									"//clear list of executed TestRail tests",
									"pm.environment.set(\"testRailTestsInRun\", \"\");",
									"",
									"//specify list of tests to be executed in exact order",
									"//const testsScope = \"Full\"; [Full|Core|Full+TestRail]",
									"let testsScope = data.testsScope;",
									"//console.log(testsScope); ",
									"",
									"switch (testsScope) {",
									"    case \"Core\":",
									"        var testSession = [",
									"            \"_Generate access token K8S\",",
									"            \"Accounts_Search (C41736193)\",",
									"            \"Accounts_Search_BIC (C41939550)\",",
									"            \"Accounts_Search_contract iban desc (C38950549)\",",
									"            \"Accounts_Search_contract iban asc (C38950548)\",",
									"            \"Accounts_Search_Account_Number (C37972701)\",",
									"            \"Accounts_Search_Multiple_Names (C38950539)\",",
									"            \"Accounts_Search_AccountType_Current (C38950541)\",",
									"            \"Accounts_Search_AccountType_SAVINGS (C38950542)\",",
									"            \"Accounts_Search_Multiple_Account_Number (C38950540)\",",
									"            \"Accounts_Search_AccountType_Multiple (C41083339)\",",
									"            \"Accounts_Search_AccountType_Other (C41083337)\",",
									"            \"Accounts_Search_iban (C38950543)\",",
									"            \"Accounts_Search_multiple_iban (C38950544)\",",
									"            \"Accounts_Search_contractId (C38950547)\",",
									"            \"List of custody accounts (C41736189)\",",
									"            \"List of portfolios (C43024137)\",",
									"            \"Portfolio details (C43024139)\",",
									"            \"Portfolio performance details (C43181629)\",",
									"            \"Portfolio assets details (C43181622)\",",
									"            \"Maturity details (C43181624)\",",
									"            \"Check proper custody account (C41853576)\",",
									"            \"Check proper custody account searched by PortfolioId (C41853577)\",",
									"            \"Custody account details (C41853582)\",",
									"            \"Search_by_startdate (C37786354)\",",
									"            \"Order_by_amount_asc (C37972704)\",",
									"            \"Order_by_amount_desc (C38719010)\",",
									"            \"Order_by_multiple_criteria (C38763407)\",",
									"            \"Transaction details search by amountForm (C37905040)\",",
									"            \"Transaction details search by amountTo (C37905041)\",",
									"            \"Transaction details search by amountTo-amountFrom (C37905042)\",",
									"            \"Individual transaction (C33706455)\",",
									"            \"Checking pagination (C47473979)\",",
									"            \"Transaction_search overview (C38763410)\",",
									"            \"AccountId Transactions 400 (C38763416)\",",
									"            \"AccountId Transactions 401 (C38763419)\",",
									"            \"set new alias (C37905058)\",",
									"            \"update alias (C37905064)\",",
									"            \"delete alias (C37905066)\",",
									"            \"AccountId Permissions (C36212106)\",",
									"            \"AccountId Permissions 400 (C38778991)\",",
									"            \"AccountId Permissions 401 (C38920771)\",",
									"            \"INCOMING transaction flow(C37905043)\",",
									"            \"OUTGOING transaction flow(C37905044)\",",
									"            \"BOTH transaction flow (C37905045)\",",
									"            \"BOTH transactionType (C37905048)\",",
									"            \"BOOKED transactionType (C37905046)\",",
									"            \"UNBOOKED transactionType (C37905047)\",",
									"            \"AccountId Balance (C35075337)\",",
									"            \"AccountId Balance 400 (C38920909)\",",
									"            \"AccountId Balance 401 (C38920911)\",",
									"            \"Search by accountName (C37949168)\",",
									"            \"List of custody accounts (C41736189)\",",
									"            \"List of portfolios (C43024137)\",",
									"            \"Portfolio details (C43024139)\",",
									"            \"Portfolio performance details (C43181629)\",",
									"            ",
									"            \"Check proper custody account (C41853576)\",",
									"            ",
									"            \"Custody account details (C41853582)\"",
									"            ];",
									"        break;",
									"    case \"ToDo\":",
									"        var testSession = [",
									"            \"Portfolio assets details (C43181622)\",",
									"            \"Maturity details (C43181624)\",",
									"            \"Check proper custody account searched by PortfolioId (C41853577)\"",
									"            ];",
									"        break;",
									"    case \"TestRailClean\":",
									"        var testSession = [",
									"            \"_Test session close\"",
									"        ];",
									"        break;",
									"    default:",
									"        throw new Error(\"No tests selected for execution!\")",
									"}",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(testSession, \"testSession\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "448a7634-d963-4339-9a92-a9d85ac645ef",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "_Generate access token K8S",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "12d1b2ad-b97f-4432-826c-11c90111f203",
								"exec": [
									"var requestsToRun = [",
									"        \"getAuthTestTokenK8S\"",
									"    ]; ",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0ef9b093-7497-441d-8a1c-224b68ef5b8a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search (C41736193)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a4b6c357-8204-4fe1-a7f2-b60605f61eb3",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search\"",
									"    ]; ",
									"    pm.environment.set(\"request_body\", ('{}'));",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9703f665-2f1c-4d59-a211-fce9c1a45816",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_BIC (C41939550)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e28a755f-01b7-4a69-a40c-e4aecd5fab2e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search\",",
									"        \"Account_Search_BIC\"",
									"    ]; ",
									"    pm.environment.set(\"request_body\", ('{}'));",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Account_Search_BIC\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "478c5524-ae0d-4e5d-b915-4a32daf60775",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_contract iban desc (C38950549)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f34879b5-ee97-4701-8263-62da0e331e73",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_Multiple_criteria_iban_desc\"",
									"    ]; ",
									"",
									"    pm.globals.set(\"_tr_Account_Search_Multiple_criteria_iban_desc\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "80f17898-65fb-4a79-90f5-4c191181544b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_contract iban asc (C38950548)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "26c8da2b-14eb-4abd-ba24-a75cc27fc14d",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_Multiple_criteria_iban_asc\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_Multiple_criteria_iban_asc\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7b921b75-6983-42ff-9ee3-cb84708ae962",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_Account_Number (C37972701)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3856b1a9-be53-42b6-8aa9-24b3b2878a47",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"Account_Search_Account number\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Account_Search_Account number\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a5a81ced-e19f-4aa2-9911-f06ba6bcf7de",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_Multiple_Names (C38950539)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1cdb06bf-1279-4dc9-acf3-b6d5c696b98f",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_Multiple names\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_Multiple names\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ed531f99-d4c1-4eb8-b6a1-afd741b90994",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_AccountType_Current (C38950541)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fdb0dd8e-8422-4523-bf00-985a280360a1",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_AccountType_Current\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_AccountType_Current\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "01b20c23-2ecf-4bb8-a122-444b4b317a3a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_AccountType_SAVINGS (C38950542)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5ec4f5c3-49bc-4a8f-bdd2-e667fa335f18",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_AccountType_SAVINGS\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_AccountType_SAVINGS\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b322c6b3-6266-43f8-b229-0ba3d8e09287",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_Multiple_Account_Number (C38950540)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e338e415-8950-425c-a068-58277a3a88b4",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"Account_Search_Multiple_Account_number\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Account_Search_Multiple_Account_number\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "61896958-b947-4350-ae83-be276628cf56",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_EndDate (C37786407)?????",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "015285be-217c-4862-a14a-b23e73989114",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"Account_Search_Multiple_Account_number\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Account_Search_Multiple_Account_number\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a34e5aaf-d7d6-4732-8470-60fe9e673ba8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_startDate&EndDate (C379050538)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e0b72cd4-85f1-4823-8216-ef846ab4f203",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_Search_startDate&endDate\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_AccountId_Search_startDate&endDate\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c8c9ed87-5784-4e9a-9979-4fbf1212a378",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_AccountType_Multiple (C41083339)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ca110b3a-01be-4d19-bc92-d9ecc8e04fef",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_AccountType_Multiple\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_AccountType_Multiple\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "217e4c4d-9bd5-4760-bdf2-5a40dd9d9f21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_AccountType_Other (C41083337)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0d56367c-d8e2-4364-a657-8abb7f0fb903",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_AccountType_Current\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_AccountType_Current\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "36a01640-f2c8-4c07-9bdc-41311fb8b778",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_iban (C38950543)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "95576fff-2ead-49b6-9480-e063198807a1",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"Account_Search_iban\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Account_Search_iban\",testRailTestCases);",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e412c796-2c87-458c-84ce-611d7fc2f1bc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_multiple_iban (C38950544)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f07e11cd-8079-4eae-bce2-b23d7670c8d9",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_multiple_iban\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_multiple_iban\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8f505cb6-47f0-46d6-a662-42006a9dc6be",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_contractId (C38950547)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "915159a7-53b3-438b-92a8-d5abcd44efe3",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"Account_Search_ContractId\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Account_Search_ContractId\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "38313be1-6328-4511-912a-89e2fc87f7cc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "transactions search pagination (C47473070)/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5234e3a5-6e0c-43f0-b72c-c474f246b8b0",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_Transaction_Search_pagination\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_AccountId_Search_startDate&endDate\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d48c4782-d41f-4e1b-aa82-b1900711f797",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search_by_startdate (C37786354)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e630fd31-987f-40da-ba86-e8890ec43081",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search_startDate\"",
									"    ]; ",
									"",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_startDate\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "80dcf94e-2043-4e90-bf1f-1b7b74e77ebc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order_by_amount_asc (C37972704)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "67fb8a4e-0cae-478d-b74e-9da2518bb632",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "70a0d182-bc76-4446-82e3-6b1d66612875",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order_by_amount_desc (C38719010)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "271ab59d-9f16-4ef3-acf4-6cd0de43596a",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search_desc\"",
									"    ]; ",
									"",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_desc\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8267eaa-907f-495b-9ac3-fd1eec98bc3f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "List of custody accounts (C41736189)///",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ad764888-41f6-4afa-8870-f31bd75dafd7",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get custody accounts\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get custody accounts\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ef5e1b4b-689c-46c6-901c-9f9914108372",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "List of portfolios (C43024137)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "79dd399a-af91-481b-a4f6-9a4ccdf756c9",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_portfolios_list\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_portfolios_list\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8658926b-7aea-427a-99d4-f7ea6b323eb9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Portfolio details (C43024139)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b3c0f55c-d5d2-4b42-bb24-68fd5aa8c623",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_portfolios_details_list\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_portfolios_details_list\",testRailTestCases);",
									"",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c2646e16-10a6-43cd-9527-3126e7685abe",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Portfolio performance details (C43181629)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "035ebc89-0940-4846-baaa-ca1c18dc0a48",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_portfolios_list\",",
									"        \"Get_performance_details\"",
									"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_portfolios_list\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Get_performance_details\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa7cb6a9-b5ec-42c5-adf3-677eaebd0a75",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Portfolio assets details (C43181622)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "defc47db-8cb4-4b6a-94a6-17a4d1f8031c",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_portfolios_list\",",
									"        \"Get_assets_list\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_portfolios_list\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Get_assets_list\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "18f0f6a6-6b5e-463d-9748-3ddd909481cf",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Maturity details (C43181624)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "79aad160-2645-4aa2-98e1-83861892d8b8",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_maturity_list\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_maturity_list\",testRailTestCases);",
									" ",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "52ca652b-c1ce-4c7d-99d8-960ac7e87a0d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check proper custody account (C41853576)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a565cd76-4ed2-4a6b-9f8e-1b465c00ddcf",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get custody accounts\",",
									"        \"Get_customer_info_by_his_ID\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get custody accounts\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Get_customer_info_by_his_ID\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "87b56970-d054-4ae8-9e2a-80eec067432c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check proper custody account searched by PortfolioId (C41853577)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "671d5dac-2602-4fae-b688-88eeab8aaa35",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get custody accounts\",",
									"        \"Get_customer_info_by_his_ID\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get custody accounts\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Get_customer_info_by_his_ID\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "347501ac-4deb-4335-9610-da1746f7b196",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Custody account details (C41853582)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c3002cce-86df-44bd-9d13-572e7e44fe56",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_customer_info_by_his_ID\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_customer_info_by_his_ID\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d674e206-4662-4b22-a622-3a1e2d6ba5b5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Individual transaction (C33706455)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "54ebde54-2aa6-4792-b594-cfe77950f210",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search\",",
									"        \"get_single_transaction\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_get_single_transaction\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5b4470f6-3372-4845-b2fe-707da6a04680",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Checking pagination (C47473979)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dc678b7c-6194-4eee-b9cd-983948a90488",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search_pagination\",",
									"        \"AccountId_Transaction_Search_size\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_pagination\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_size\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "756f4575-ccfd-40ca-bfed-b5b0a8bd569d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Transaction_search overview (C38763410)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "72295b30-41ae-4d91-bf03-8feb807aa8f5",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search\",",
									"        \"get_single_transaction\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_get_single_transaction\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2f6537c2-4ec1-4ede-8e13-aef53da7dc3d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Transactions 400 (C38763416)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "27658282-1850-467a-9ef6-fcecbdc92785",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_Transaction_Search_validation 400\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_validation 400\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d94e7589-a5ba-418c-a0ae-91d6122fa1ff",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Transactions 401 (C38763419)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c0e73c5f-72dc-40d8-b3b0-64cae6e6b76f",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestTokenK8S_insuficientToken\",",
									"        \"AccountId_transaction 401 validation\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_getAuthTestTokenK8S_insuficientToken\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_transaction 401 validation\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1eda7fd6-244f-4f19-9d0a-b1f1d7e9daf3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "set new alias (C37905058)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f8aa78ec-de95-4be8-ae6d-763e1c4dbdee",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"set_alias\",",
									"        \"Account_Search_alias\",",
									"        \"Account_Search_alias_Postconditions\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_set_alias\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Account_Search_alias\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Account_Search_alias_Postconditions\",testRailTestCases);",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f84f139c-9993-4773-8621-367d566e4068",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "update alias (C37905064)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e91c5869-f6d5-4614-938c-7f506a382f8b",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"set_alias\",",
									"        \"update alias\",",
									"        \"Account_Search_updated_alias\",",
									"        \"Account_Search_alias_Postconditions\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_set_alias\",testRailTestCases);",
									"    pm.globals.set(\"_tr_update alias\",testRailTestCases);",
									"",
									"    pm.globals.set(\"_tr_Account_Search_updated_alias\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Account_Search_alias_Postconditions\",testRailTestCases);",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "86892d2d-d9ae-4ffe-bfd4-f0b8aafc7f56",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete alias (C37905066)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9fa0be4e-330f-4c7f-96eb-9f559ac3b220",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"set_alias\",",
									"        \"delete alias\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_set_alias\",testRailTestCases);",
									"    pm.globals.set(\"_tr_delete alias\",testRailTestCases);",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5f8968f6-775d-4fd9-9688-0296dd2f2831",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Permissions (C36212106)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e9c4adc5-7c3d-46d2-8e96-ff68ab7c9aeb",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_permissions\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_permissions\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cdcbbb1f-53d9-45ca-8038-33e6e267d935",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Permissions 400 (C38778991)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90638e46-7279-4b21-8d7b-770accb25823",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_permissions 400 validation\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_permissions 400 validation\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "603fad5b-a42f-499d-a6aa-64c224464380",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Permissions 401 (C38920771)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d5431a6f-e1b5-45aa-9393-1fb3ecc3feaa",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestTokenK8S_insuficientToken\",",
									"        \"AccountId_permissions 401 validation\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_getAuthTestTokenK8S_insuficientToken\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_permissions 401 validation\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a5934cb4-0d6b-48d9-aa1e-dcd74040c2c9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "INCOMING transaction flow(C37905043)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bd8f0706-d97b-4de4-b215-c4bfbbdb63a3",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"Incoming transactions\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Incoming transactions\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f11ab117-4a3c-46d8-a443-2b5565c56c88",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "OUTGOING transaction flow(C37905044)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61954261-c414-4d23-ac82-dd6b3bfb2f62",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"OUTGOING transactions\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_OUTGOING transactions\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a219ac97-4875-4129-9807-e709638b3b34",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "BOTH transaction flow (C37905045)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "64fba61e-e05f-4a66-9250-1e377221201f",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"BOTH transactions\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_BOTH transactions\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ba4ba4e4-e20c-4515-8df1-259774368d3d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "BOTH transactionType (C37905048)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "60b12a0b-7879-4bbc-9aa4-0cf5f7d01388",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"BOTH transactionsType\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_BOTH transactionsType\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9b94fe26-fcab-47cb-bfa8-ca97cca0ed53",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "BOOKED transactionType (C37905046)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "06f662da-db2f-4b18-ac7b-68f81b83eece",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"BOOKED transactions\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_BOOKED transactions\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f08eb5e2-0bd0-4418-85ed-e3cad343939b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "UNBOOKED transactionType (C37905047)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d888156c-03e3-497e-960e-7f9228b3bd3f",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"UNBOOKED transactions\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_UNBOOKED transactions\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d889197a-db78-46ea-b440-d8d59185eb2f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Balance (C35075337)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "851291f8-ed54-4fd1-9bb2-f272c8e34139",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_balance\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_balance\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "be433637-1949-4585-8629-6890d1084a37",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Balance 400 (C38920909)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2d38f0c9-46e5-4f28-bfda-7c2e0113f685",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_balance 400 validation\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_balance 400 validation\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ceb426b5-086e-4b77-b11a-b8313553aba7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Balance 401 (C38920911)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f386d1cc-324e-42c7-a871-970f4222b127",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestTokenK8S_insuficientToken\",",
									"        \"AccountId_balance 401 validation\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_getAuthTestTokenK8S_insuficientToken\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_balance 401 validation\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "86828ff0-cc80-4774-afa8-e107d1eb9c32",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by accountName (C37949168)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a33bbfb1-965e-4c7d-bca7-22069d248edd",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_balance\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_balance\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "454ebb31-66a5-4e0e-8190-954cc772d13e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Transaction details search by reference text (C37905050)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e07f1c7d-3d14-465f-ab7d-c14383660137",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search_Reference_Text\"",
									"    ]; ",
									"",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_Reference_Text\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "be239f1f-d676-4f15-b5a2-90f226421219",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Custody account transactions details (C43024136)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9db58f90-95da-4253-bbd4-e301a996a7a2",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get custody account transactions details\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get custody account transactions details\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c3028d4a-e9ce-45e9-8779-57ddca49373b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Custody account position list (C41853583)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "24109f2e-5522-463c-a59b-89d185adfa3e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get positons for cuacsId\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get positons for cuacsId\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5d744935-9585-4bba-a5bc-ec1ca95ba42b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Custody account position details (C42065196)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "071428b1-312b-4958-83a2-44743400562e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get custody account positions\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get custody account positions\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1fb64c38-6a90-4199-af87-e2943fc34777",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Display listing by listing ID (C43995816)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5f47f22c-793a-4a27-b98f-4258d5b83889",
								"exec": [
									"//testRailTestCases = \"C43995816\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get listings\",",
									"        \"Get listing by listing ID\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get listings\",\"[precondition]\");",
									"    pm.globals.set(\"_tr_Get listing by listing ID\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Account transaction sorted by amount (C37972704)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dbe15ec8-af7d-4114-bda1-c01329182e29",
								"exec": [
									"//testRailTestCases = \"C43995816\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    \"Account_Searchs\",",
									"    \"AccountId_Transaction_Search\"",
									"];",
									"pm.globals.set(\"_tr_Account_Search\");",
									"pm.globals.set(\"_tr_AccountId_Transaction_Search\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\", testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "List trading places (C43995818)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae2009f1-d4d2-49df-8822-f937dfa5f945",
								"exec": [
									"//var testRailTestCases = \"C43995818\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get trading places\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get trading places\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bf6b114d-0226-4628-85d5-3c927201ff03",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Display trading place by tradingPlaceId (C43995821)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bba2b544-b9ef-4f0e-b047-b7f42d6ddc13",
								"exec": [
									"//testRailTestCases = \"C43995821\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get trading places\",",
									"        \"Get trading place by tradingPlaceId\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get trading places\",\"[precondition]\");",
									"    pm.globals.set(\"_tr_Get trading place by tradingPlaceId\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "30654622-6171-4649-b9cc-444e92a845dd",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "_Test session close",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a1cad2df-adc3-4b58-9c26-2a8547cf8c8b",
								"exec": [
									"var requestsToRun = ",
									"    [",
									"        \"Clean TestRail Run\"",
									"    ]; ",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cfae9b6a-889b-44d5-a486-f07209274f6b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "627e24cd-8510-4aa8-8364-a539c9fa89ab",
						"type": "text/javascript",
						"exec": [
							"/*determine test case ID from request name*/",
							"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
							"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
							"",
							"/*add current test case ID to list of already executed tests*/",
							"eval(globals.testsExecuted)(testRailTestCases);",
							"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
							"",
							"//store test case ID of current request for linking with Test Rail",
							"pm.globals.set(\"_tr_\" + request.name, testRailTestCases);",
							"",
							"//call global function to generate access token",
							"eval(globals.generateAccessToken)();"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e61ae13a-73d9-45b5-ba0b-4eeb485b6fbb",
						"type": "text/javascript",
						"exec": [
							"eval(globals.sessionNavigate)();"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "37d91d46-47f4-48c2-8478-c1141973bd7f",
				"type": "text/javascript",
				"exec": [
					"//************************************************************************************************",
					"// variable initialization************************************************************************",
					"//************************************************************************************************",
					"var test = pm.environment.get(\"testRailTestsInRun\");",
					"if( !test) {",
					"    pm.environment.set(\"testRailTestsInRun\",\"\");",
					"}",
					"",
					"//************************************************************************************************",
					"// connect to TestRail ***************************************************************************",
					"//************************************************************************************************",
					"pm.globals.set(\"TESTRAIL_DOMAIN\",\"testrail.ebs.crealogix.net\");",
					"pm.globals.set(\"TESTRAIL_USERNAME\",\"milan.karadeglic@crealogix.com\"); ",
					"pm.globals.set(\"TESTRAIL_APIKEY\",\"Q4MlDw1e70Kxh1g1YPq9-Dg0abDWer.pSWcVWcxO4\");",
					"pm.globals.set(\"TESTRAIL_PROJECTID\",8); ",
					"pm.globals.set(\"TESTRAIL_TITLE\",\"Postman API Tests\");",
					"",
					"",
					"",
					"//************************************************************************************************",
					"//global function to determine next day/next working day *****************************************",
					"//************************************************************************************************",
					"var moment = require('moment');",
					"let nextDay = moment().add(\"days\",1).format(\"YYYY-MM-DD\"); //next day in specified format",
					"switch (moment().add(\"days\",1).format(\"dddd\")){",
					"    case \"Sunday\":",
					"        var nextWorkingDay = moment().add(\"days\",2).format(\"YYYY-MM-DD\");",
					"        break;",
					"    case \"Saturday\":",
					"        var nextWorkingDay = moment().add(\"days\",3).format(\"YYYY-MM-DD\");",
					"        break;",
					"    default:",
					"        var nextWorkingDay = moment().add(\"days\",1).format(\"YYYY-MM-DD\");",
					"}",
					"pm.globals.set('PrS:nextDay', JSON.stringify(nextDay));",
					"pm.globals.set('PrS:nextWorkingDay', JSON.stringify(nextWorkingDay));",
					"",
					"",
					"/* function for making assets search*/",
					"postman.setGlobalVariable(\"assetsSearchFunction\", (NextPrecondition) => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/accounts/${pm.environment.get(\"tenantId_assets\")}/v4/accounts/search?size=30`,",
					"        method: \"POST\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"               ",
					"                       ",
					"            })",
					"        }",
					"    ",
					"}, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"_tmp_accountId\",res.json().accountList[res.json().page.totalElements-1].id);",
					"            console.log(\"New account ID: \" + pm.environment.get(\"_tmp_accountId\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_accountId2\",res.json().accountList[1].id);",
					"\t\t\tconsole.log(\"New account ID2: \" + pm.environment.get(\"_tmp_accountId2\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_accountIdAlias\",res.json().accountList[2].id);",
					"\t\t\tconsole.log(\"New account _tmp_accountIdAlias: \" + pm.environment.get(\"_tmp_accountIdAlias\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_accountNumber1\",res.json().accountList[0].accountNumber);",
					"\t\t\tconsole.log(\"New _tmp_accountNumber1: \" + pm.environment.get(\"_tmp_accountNumber1\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_accountNumber2\",res.json().accountList[1].accountNumber);",
					"\t\t\tconsole.log(\"New _tmp_accountNumber2: \" + pm.environment.get(\"_tmp_accountNumber2\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_iban1\",res.json().accountList[0].iban);",
					"\t\t\tconsole.log(\"New _tmp_iban1: \" + pm.environment.get(\"_tmp_iban1\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_iban2\",res.json().accountList[1].iban);",
					"\t\t\tconsole.log(\"New _tmp_iban2: \" + pm.environment.get(\"_tmp_iban2\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_id1\",res.json().accountList[0].id);",
					"\t\t\tconsole.log(\"New _tmp_id1: \" + pm.environment.get(\"_tmp_id1\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_id2\",res.json().accountList[1].id);",
					"\t\t\tconsole.log(\"New _tmp_id2: \" + pm.environment.get(\"_tmp_id2\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_contractId\",res.json().accountList[0].permissions[0].contractId);",
					"\t\t\tconsole.log(\"New _tmp_contractId: \" + pm.environment.get(\"_tmp_contractId\"));",
					"",
					"            switch (NextPrecondition){",
					"                case \"assetsTransactionSearchFunction\":",
					"                    eval(globals.assetsTransactionSearchFunction)();",
					"                    break;",
					"                default:",
					"            }",
					"        }                          ",
					"    });",
					"});",
					"",
					"/* function for making cuacs request*/",
					"postman.setGlobalVariable(\"cuacsRequest\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/cuacs/${pm.environment.get(\"tenantId_assets\")}/v1/cuacs`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"               ",
					"                       ",
					"            })",
					"        }",
					"    ",
					"}, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json()._embedded);",
					"            ",
					"        } else {",
					"            pm.environment.set(\"_tmp_cuacsId\",res.json.cuacs[0].id);",
					"            console.log(\"New custody account ID: \" + pm.environment.get(\"_tmp_cuacsId\"));",
					"\t\t\t",
					"\t\t\t",
					"\t\t\t",
					"        }                          ",
					"    });",
					"});",
					"",
					"/* function for making portfolio request*/",
					"postman.setGlobalVariable(\"portfolioRequest\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/portfolios/${pm.environment.get(\"tenantId_assets\")}/v1/portfolios`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"               ",
					"                       ",
					"            })",
					"        }",
					"    ",
					"}, function(err, res) {",
					"        if (err) {",
					"            //console.log(\"First:\");",
					"            //console.log(err);",
					"            //console.log(\"Second:\");",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"_tmp_portfolioId\",res.json()._embedded.portfolios[1].id);",
					"            console.log(\"New portfolio ID: \" + pm.environment.get(\"_tmp_portfolioId\"));",
					"\t\t\tpm.environment.set(\"_tmp_customerId\",res.json()._embedded.portfolios[1].customerId);",
					"            console.log(\"New customer ID: \" + pm.environment.get(\"_tmp_customerId\"));",
					"        }                          ",
					"    });",
					"});",
					"",
					"/* function for making assets transaction search*/",
					"postman.setGlobalVariable(\"assetsTransactionSearchFunction\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/accounts/${pm.environment.get(\"tenantId_assets\")}/v4/accounts/${pm.environment.get(\"_tmp_accountId\")}/transactions/search`,",
					"        method: \"POST\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw:JSON.stringify({ ",
					"\t    \torderBy: [",
					"\t\t\t\t{",
					"\t\t\t\t\tfield: \"AMOUNT\",",
					"\t\t\t\t\tsortOrder:\"ASC\"",
					"\t\t\t\t}]",
					"\t\t\t,",
					"\t\t\tcriteria: {",
					"\t\t\t\t\tstartDate:\"2019-01-01\",",
					"\t\t\t\t\tendDate:\"2020-06-01\"",
					"\t\t\t\t\t\t}         \t",
					"            })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"_tmp_transactionsId\",res.json.transactionGroups[0].transactions[0].id)",
					"            console.log(\"New transaction ID is set: \" + pm.environment.get(\"_tmp_transactionsId\"));",
					"        }              ",
					"    });",
					"});",
					"postman.setGlobalVariable(\"commonTests\", () => {",
					"    pm.test(\"Response must be valid with/with out a body and with proper status code\", function () {",
					"        if ([\"GET\",\"POST\",\"PUT\"].indexOf(request.method) > -1) {",
					"            pm.response.to.not.be.error;",
					"            pm.response.to.be.withBody;",
					"            pm.response.to.be.json;",
					"            pm.response.to.have.jsonBody();",
					"            pm.response.to.not.have.jsonBody('error');",
					"            pm.response.to.have.header('Content-Type', 'application/hal+json;charset=UTF-8');",
					"        } else {",
					"            pm.response.to.not.be.withBody;",
					"        }",
					"        switch(request.method){",
					"            case \"POST\":",
					"                pm.response.to.have.status(201);",
					"                break;",
					"            case \"PUT\":",
					"                pm.response.to.have.status(200);",
					"                break;",
					"            case \"GET\":",
					"                pm.response.to.have.status(200);",
					"                break;",
					"            case \"DELETE\":",
					"                pm.response.to.have.status(204);",
					"                break;",
					"        }        ",
					"    });",
					"    //pm.test(\"Response time is below 1000ms\", function () {",
					"    //    pm.expect(pm.response.responseTime).to.be.below(1000);",
					"    //});",
					"});",
					"",
					"postman.setGlobalVariable(\"assertValidCreditorAgent\", () => {",
					"    pm.expect(address).to.be.an('object').with.keys('name1', 'name2', 'street', 'city', 'country');",
					"    pm.expect(address.name1).to.be.a('string').and.not.empty;",
					"    pm.expect(address.name2).to.be.a('string').and.not.empty;",
					"    pm.expect(address.street).to.be.a('string').and.not.empty;",
					"    pm.expect(address.city).to.be.a('string').and.not.empty;",
					"    pm.expect(address.country).to.be.a('string').with.lengthOf(2).and.match(/[A-Z]+/);",
					"});",
					"",
					"",
					"",
					"postman.setGlobalVariable(\"sessionInit\", (testSession, sessionName) => {",
					"    //session init section",
					"    console.log(request.name + \", initialization: \" + testSession + \", global var: \" + sessionName);",
					"    console.log(request.name + \", executing: \" + testSession[0]);",
					"    ",
					"    // Select first test from session to be executed",
					"    postman.setNextRequest(testSession[0]); ",
					"    testSession.shift();",
					"    if (testSession.length === 0) {",
					"        console.log(request.name + \", test session is empty, unset \" + sessionName);",
					"        pm.globals.unset(sessionName);",
					"        console.log(request.name + \", terminate tests execution list\");",
					"    } else {",
					"        pm.globals.set(sessionName, testSession);",
					"        console.log(request.name + \" for \" + sessionName + \", updated list of tests to be executed: \" + testSession);",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"sessionNavigate\", () => {",
					"    console.log(request.name + \", entering ...\");",
					"    if (pm.globals.get(\"requestsToRun\") === undefined){",
					"        console.log(request.name + \", requestsToRun is undefined\");",
					"        pm.globals.set(\"testRailTestCases\",\"\");",
					"        console.log(request.name + \", reset global var: testRailTestCases\");    ",
					"        if (pm.globals.get(\"testSession\") === undefined){",
					"            console.log(request.name + \", testSession is undefined\");",
					"            //here >> export list of tests executed",
					"            var tests = pm.environment.get(\"testRailTestsInRun\");",
					"            tests = tests.replace(/C/g, \"\");",
					"            tests = tests.replace(/ /g, \", \");",
					"            tests = tests.replace(/,,/g, \",\");",
					"            console.log(\"TestRail tests executed executed in this run: \" + tests);",
					"            console.log(\"The end\");",
					"            postman.setNextRequest(null);",
					"        } else {",
					"        var testSession = pm.globals.get(\"testSession\");",
					"        console.log(request.name + \", checking what to run: \" + testSession[0]);",
					"        postman.setNextRequest(testSession[0]); // Run: GET SWIFT payment",
					"        testSession.shift();",
					"        if (testSession.length === 0) {",
					"            pm.globals.unset(\"testSession\");",
					"            console.log(request.name + \", terminate execution list\");",
					"        } else {",
					"            pm.globals.set(\"testSession\", testSession);",
					"            console.log(request.name + \", updated list of tests to be executed: \" + testSession);",
					"        }}",
					"    } else {",
					"    var requestsToRun = pm.globals.get(\"requestsToRun\");",
					"    console.log(request.name + \", checking what to run: \" + requestsToRun[0]);",
					"    postman.setNextRequest(requestsToRun[0]); ",
					"    requestsToRun.shift();",
					"    if (requestsToRun.length === 0) {",
					"        pm.globals.unset(\"requestsToRun\");",
					"        console.log(request.name + \", terminate requests execution list\");",
					"    } else {",
					"        pm.globals.set(\"requestsToRun\", requestsToRun);",
					"        console.log(request.name + \", updated list of requests to be executed: \" + requestsToRun);",
					"    }}",
					"});",
					"",
					"postman.setGlobalVariable(\"cleanup\", () => {",
					"    const clean = [\"requestsToRun\", \"testSession\"];",
					"    for(let i = 0; i < clean.length; ++i){",
					"        pm.globals.unset(clean[i]);",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"testsExecuted\", (listOfExecutedTests) => {",
					"    let tests =  pm.environment.get(\"testRailTestsInRun\");",
					"    //console.log(\"TestRail tests stored in 'testRailTestsInRun': \" + tests);",
					"    if (tests.length > 0) {",
					"        tests = tests + \" \"",
					"    }",
					"    tests = tests + listOfExecutedTests;",
					"    //console.log(\"TestRail tests to be stored to 'testRailTestsInRun': \" + tests);",
					"    pm.environment.set(\"testRailTestsInRun\",tests);",
					"    //console.log(\"TestRail tests executed so far: \" + tests);",
					"});",
					"",
					"postman.setGlobalVariable(\"extractTestCaseIDFromRequestName\", () => {",
					"    let n = request.name.lastIndexOf(\"(\");",
					"    return request.name.substr(n + 1, request.name.length - n - 2);",
					"});",
					"",
					"postman.setGlobalVariable(\"schemaValidator\", (schema, jsonData) => {",
					"    //old, deprecated schema validationimplementation",
					"    //pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;",
					"    ",
					"    //new schema validation implementation",
					"    ",
					"    var schemaValidationPassed = true;",
					"    var serviceSchema = pm.environment.get(schema);",
					"    //var jsonData = JSON.parse(pm.responseBody);",
					"",
					"    var validationResult = tv4.validateMultiple(jsonData, serviceSchema, true, true);",
					"    for(var i =0; i<validationResult.errors.length;i++){",
					"        console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  ",
					"        //Skipping all \"Invalid type\" errors as they are expected with current service implementations",
					"        schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);",
					"        //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);",
					"    }    ",
					"    return schemaValidationPassed;",
					"}); ",
					"",
					"postman.setGlobalVariable(\"isTest\", () => {",
					"    let reqPurpose = pm.globals.get(\"_tr_\" + request.name);",
					"    //console.log(request.name + \" has purpose: \" + reqPurpose);",
					"    if ([\"[cleanUp]\",\"[preCondition]\",\"[postCondition]\"].indexOf(reqPurpose) > -1) {",
					"        //console.log(\"Conclusion: NOT a test\");",
					"        return false;",
					"    } else {",
					"        //console.log(\"Conclusion: IS a test\");",
					"        return true;",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"getQueryParams\", (uri) => {",
					"  var vars = [];",
					"",
					"  // Get the start index of the query string",
					"  var qsi = uri.indexOf('?');",
					"  if (qsi == -1)",
					"    return vars;",
					"",
					"  // Get the query string",
					"  var qs = uri.slice(qsi + 1);",
					"",
					"  // Check if there is a subsection reference",
					"  sri = qs.indexOf('#');",
					"  if (sri >= 0)",
					"    qs = qs.slice(0, sri);",
					"",
					"  // Build the associative array",
					"  var hashes = qs.split('&');",
					"  for (var i = 0; i < hashes.length; i++) {",
					"    var sep = hashes[i].indexOf('=');",
					"    if (sep <= 0)",
					"      continue;",
					"    var key = decodeURIComponent(hashes[i].slice(0, sep));",
					"    var val = decodeURIComponent(hashes[i].slice(sep + 1));",
					"    vars[key] = val;",
					"  }",
					"  const jar = pm.cookies.jar();",
					"",
					"  jar.clear(pm.request.url, function (error) {",
					"  // error - <Error>",
					"  });",
					"",
					"  return vars;",
					"  ",
					"});",
					"",
					"postman.setGlobalVariable(\"randomizeVariables\", () => {",
					"    let newmanRun = pm.globals.get(\"newmanRun\");",
					"    if (newmanRun != 1) {",
					"        console.log(\"Randomizing variables ...\");",
					"        pm.environment.set(\"endToEndId\",JSON.stringify(pm.variables.replaceIn(\"{{$randomLoremSlug}}\")));",
					"        pm.environment.set(\"unstructured\",JSON.stringify(pm.variables.replaceIn(\"{{$guid}}\")));",
					"        pm.environment.set(\"instructionIdentification\",JSON.stringify(pm.variables.replaceIn(\"{{$randomBitcoin}}\")));",
					"        pm.environment.set(\"name\",JSON.stringify(pm.variables.replaceIn(\"{{$randomFullName}}\")));",
					"        pm.environment.set(\"adrLine1\",JSON.stringify(pm.variables.replaceIn(\"{{$randomStreetName}}\")));",
					"        pm.environment.set(\"adrLine2\",JSON.stringify(pm.variables.replaceIn(\"{{$randomStreetAddress}}\")));",
					"        pm.environment.set(\"streetName\",JSON.stringify(pm.variables.replaceIn(\"{{$randomStreetName}}\")));",
					"        pm.environment.set(\"townName\",JSON.stringify(pm.variables.replaceIn(\"{{$randomCity}}\")));",
					"        pm.environment.set(\"country\",JSON.stringify(pm.variables.replaceIn(\"{{$randomCountryCode}}\")));",
					"        pm.environment.set(\"buildingNm\",pm.variables.replaceIn('{{$randomInt}}'));",
					"        pm.environment.set(\"postalCode\",pm.variables.replaceIn('{{$randomInt}}'));",
					"        pm.environment.set(\"buildingNmStr\",JSON.stringify(pm.variables.replaceIn('{{$randomInt}}')));",
					"        pm.environment.set(\"postalCodeStr\",JSON.stringify(pm.variables.replaceIn('{{$randomInt}}')));",
					"        console.log(\"... randomize is finished\");",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"generateAccessToken\", () => {",
					"    const getAccessTokenRequest = {",
					"        url: pm.environment.get(\"env_security_testToken\"),",
					"        method: \"POST\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json'",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"                tenant_id: pm.environment.get(\"tenantId_security\"), ",
					"                acsKey: \"i6PiNObtdp2rCNW7mlV51BDSY4zAliSvBCyVsuML1000203567\",",
					"                tenant_name: pm.environment.get(\"tenantName_security\"),",
					"                user_name: pm.environment.get(\"userId_security\"),",
					"                contractNo: pm.environment.get(\"contractNo_security\"),",
					"                language: \"en\",",
					"                bcNo: pm.environment.get(\"bcNo_security\"),",
					"                authorities: [\"DBAN_ADMIN\", \"DBAN_USER\"],",
					"                client_id: \"postman\",",
					"                user_id: pm.environment.get(\"userId_security\"),",
					"                loginName: pm.environment.get(\"userId_security\"),",
					"                exp: 32479694642,   ",
					"                jti: \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\", ",
					"                iat: 1553855569,   ",
					"                scope: [",
					"                    \"https://api.crealogix.com/dban\",",
					"                    \"read\",",
					"                    \"write\",",
					"                    \"https://api.crealogix.com/contracts/contract.advisor.readonly\",",
					"                    \"https://api.crealogix.com/contracts/contract.metadata.readonly\",",
					"                    \"https://api.crealogix.com/contracts/contract.person.readonly\",",
					"                    \"https://api.crealogix.com/payments/payment.initiate\",",
					"                    \"https://api.crealogix.com/payments/payment.read\",",
					"                    \"https://api.crealogix.com/payments/payment.write\",",
					"                    \"https://api.crealogix.com/assets/account/read\",",
					"                    \"https://api.crealogix.com/assets/account.transaction/read\",",
					"                    \"https://api.crealogix.com/assets/account.name\",",
					"                    \"https://api.crealogix.com/assets/account.image\",",
					"                    \"https://api.crealogix.com/assets/cuac/read\",",
					"                    \"https://api.crealogix.com/assets/portfolio/read\",",
					"                    \"https://api.crealogix.com/messages/securemail.write\",",
					"                    \"https://api.crealogix.com/messages/securemail.read\",",
					"                    \"https://api.crealogix.com/messages/document.category.read\",",
					"                    \"https://api.crealogix.com/messages/document.category.write\",",
					"                    \"https://api.crealogix.com/messages/document.write\",",
					"                    \"https://api.crealogix.com/messages/document.read\",",
					"                    \"https://api.crealogix.com/brokerage/security/read\",",
					"                    \"https://api.crealogix.com/brokerage/tradingplace/read\",",
					"                    \"https://api.crealogix.com/brokerage/depository/read\",",
					"                    \"https://api.crealogix.com/brokerage/order/read\",",
					"                    \"https://api.crealogix.com/brokerage/order\",",
					"                    \"https://api.crealogix.com/deeplink/domains\",",
					"                    \"https://api.crealogix.com/deeplink/links\"",
					"                ]",
					"            })",
					"        }",
					"    };",
					"    pm.environment.set(\"request\", JSON.stringify(getAccessTokenRequest));",
					"    ",
					"    pm.sendRequest(getAccessTokenRequest, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"access_token\", res.text());",
					"        }         ",
					"        /*",
					"        pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
					"            pm.expect(err).to.not.be.ok;",
					"            pm.expect(res).to.have.property('code', 200);",
					"            pm.expect(res).to.have.property('status', 'OK');          ",
					"        });",
					"        */",
					"    });",
					"});",
					"",
					"",
					"",
					"/* function for creating Swift payment*/",
					"postman.setGlobalVariable(\"paymentSwiftCreate\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"environment\")}/banking-api/payment/swift/${pm.environment.get(\"tenant\")}/v2/credittransfer`,",
					"        method: \"POST\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"                storeOnly: false, ",
					"                locked: false,",
					"                categoryPurposeCode: \"SALA\",",
					"                paymentInformation: {",
					"                    endToEndId: JSON.parse(pm.environment.get(\"endToEndId\")),",
					"                    instructedAmount: {",
					"                        currency: {",
					"                            code: \"GBP\"",
					"                        },",
					"                        value: 1",
					"                    },",
					"                    remittanceInformation: {",
					"                        \"unstructured\": JSON.parse(pm.environment.get(\"unstructured\")),",
					"                        \"structured\": JSON.parse(pm.environment.get(\"structuredRemittanceRF\"))",
					"                    },",
					"                    instructionIdentification: JSON.parse(pm.environment.get(\"instructionIdentification\")),",
					"                    requestedExecutionDate: JSON.parse(pm.globals.get(\"PrS:nextWorkingDay\")),",
					"                    instructionPriority: \"NORMAL\",",
					"                    creditor: {",
					"                        \"name\": JSON.parse(pm.environment.get(\"name\")),",
					"                        \"address\": {",
					"                            \"adrLine1\": JSON.parse(pm.environment.get(\"adrLine1\")),",
					"                            \"adrLine2\": JSON.parse(pm.environment.get(\"adrLine2\")),",
					"                            \"streetName\": JSON.parse(pm.environment.get(\"streetName\")),",
					"                            \"buildingNm\": pm.environment.get(\"buildingNm\"),",
					"                            \"postalCode\": pm.environment.get(\"postalCode\"),",
					"                            \"townName\": JSON.parse(pm.environment.get(\"townName\")),",
					"                            \"country\": JSON.parse(pm.environment.get(\"country\"))",
					"                        }",
					"                    },",
					"                    creditorAccountNo: JSON.parse(pm.environment.get(\"creditorAccountNoSWIFT\")),",
					"                    creditorAgent: {",
					"                        bic: JSON.parse(pm.environment.get(\"creditorAgentBicSWIFT\"))",
					"                    },",
					"                    debtor: {",
					"                        name: JSON.parse(pm.environment.get(\"debtorAccountName\")),",
					"                        address: {",
					"                            streetName: JSON.parse(pm.environment.get(\"debtorStreetName\")),",
					"                            postalCode: JSON.parse(pm.environment.get(\"debtorPostalCode\")),",
					"                            townName: JSON.parse(pm.environment.get(\"debtorTownName\"))",
					"                        }",
					"                    },",
					"                    debtorAccountNo: JSON.parse( pm.environment.get(\"debtorAccountNo\"))",
					"                }         ",
					"            })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"newPaymentSwiftID\", res.json().paymentId);",
					"            console.log(\"New payment ID: \" + pm.environment.get(\"newPaymentSwiftID\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for deleting Swift payment*/",
					"postman.setGlobalVariable(\"paymentSwiftDelete\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"environment\")}/banking-api/payment/swift/${pm.environment.get(\"tenant\")}/v2/credittransfer/${pm.environment.get(\"newPaymentSwiftID\")}`,",
					"        method: \"DELETE\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.unset(\"newPaymentSwiftID\");",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for creating Sepa payment*/",
					"postman.setGlobalVariable(\"paymentSepaCreate\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"environment\")}/banking-api/payment/sepa/${pm.environment.get(\"tenant\")}/v2/credittransfer`,",
					"        method: \"POST\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"                storeOnly: false, ",
					"                locked: false,",
					"                categoryPurposeCode: \"SALA\",",
					"                paymentInformation: {",
					"                    endToEndId: JSON.parse(pm.environment.get(\"endToEndId\")),",
					"                    instructedAmount: {",
					"                        currency: {",
					"                            code: \"EUR\"",
					"                        },",
					"                        value: 312.00",
					"                    },",
					"                    remittanceInformation: {",
					"                        \"unstructured\": JSON.parse(pm.environment.get(\"unstructured\")),",
					"                        \"structured\": JSON.parse(pm.environment.get(\"structuredRemittanceRF\"))",
					"                    },",
					"                    instructionIdentification: JSON.parse(pm.environment.get(\"instructionIdentification\")),",
					"                    requestedExecutionDate: JSON.parse(pm.globals.get(\"PrS:nextWorkingDay\")),",
					"                    instructionPriority: \"NORMAL\",",
					"                    creditor: {",
					"                        \"name\": JSON.parse(pm.environment.get(\"name\")),",
					"                        \"address\": {",
					"                            \"adrLine1\": JSON.parse(pm.environment.get(\"adrLine1\")),",
					"                            \"adrLine2\": JSON.parse(pm.environment.get(\"adrLine2\")),",
					"                            \"streetName\": JSON.parse(pm.environment.get(\"streetName\")),",
					"                            \"buildingNm\": pm.environment.get(\"buildingNm\"),",
					"                            \"postalCode\": pm.environment.get(\"postalCode\"),",
					"                            \"townName\": JSON.parse(pm.environment.get(\"townName\")),",
					"                            \"country\": JSON.parse(pm.environment.get(\"country\"))",
					"                        }",
					"                    },",
					"                    creditorAccountNo: JSON.parse(pm.environment.get(\"creditorAccountNoSEPA\")),",
					"                    creditorAgent: {",
					"                        bic: JSON.parse(pm.environment.get(\"creditorAgentBicSEPA\"))",
					"                    },",
					"                    debtor: {",
					"                        name: JSON.parse(pm.environment.get(\"debtorAccountName\")),",
					"                        address: {",
					"                            streetName: JSON.parse(pm.environment.get(\"debtorStreetName\")),",
					"                            postalCode: JSON.parse(pm.environment.get(\"debtorPostalCode\")),",
					"                            townName: JSON.parse(pm.environment.get(\"debtorTownName\"))",
					"                        }",
					"                    },",
					"                    debtorAccountNo: JSON.parse( pm.environment.get(\"debtorAccountNo\"))",
					"                }         ",
					"            })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"newPaymentSepaID\", res.json().paymentId);",
					"            console.log(\"New payment ID: \" + pm.environment.get(\"newPaymentSepaID\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for creating Sepa (standing order) payment*/",
					"postman.setGlobalVariable(\"paymentSepaSoCreate\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"environment\")}/banking-api/payment/sepa/${pm.environment.get(\"tenant\")}/v2/credittransfer`,",
					"        method: \"POST\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"                storeOnly: false, ",
					"                locked: false,",
					"                categoryPurposeCode: \"SALA\",",
					"                paymentInformation: {",
					"                    instructedAmount: {",
					"                        currency: {",
					"                            code: \"EUR\"",
					"                        },",
					"                        value: 9.99",
					"                    },",
					"                    remittanceInformation: {",
					"                        \"unstructured\": JSON.parse(pm.environment.get(\"unstructured\")),",
					"                        \"structured\": JSON.parse(pm.environment.get(\"structuredRemittanceRF\"))",
					"                    },",
					"                    instructionIdentification: JSON.parse(pm.environment.get(\"instructionIdentification\")),",
					"                    requestedExecutionDate: JSON.parse(pm.globals.get(\"PrS:nextWorkingDay\")),",
					"                    instructionPriority: \"NORMAL\",",
					"                    creditor: {",
					"                        \"name\": JSON.parse(pm.environment.get(\"name\")),",
					"                        \"address\": {",
					"                            \"adrLine1\": JSON.parse(pm.environment.get(\"adrLine1\")),",
					"                            \"adrLine2\": JSON.parse(pm.environment.get(\"adrLine2\")),",
					"                            \"streetName\": JSON.parse(pm.environment.get(\"streetName\")),",
					"                            \"buildingNm\": pm.environment.get(\"buildingNm\"),",
					"                            \"postalCode\": pm.environment.get(\"postalCode\"),",
					"                            \"townName\": JSON.parse(pm.environment.get(\"townName\")),",
					"                            \"country\": JSON.parse(pm.environment.get(\"country\"))",
					"                        }",
					"                    },",
					"                    creditorAccountNo: JSON.parse(pm.environment.get(\"creditorAccountNoSEPA\")),",
					"                    creditorAgent: {",
					"                        bic: JSON.parse(pm.environment.get(\"creditorAgentBicSEPA\"))",
					"                    },",
					"                    debtor: {",
					"                        name: JSON.parse(pm.environment.get(\"debtorAccountName\")),",
					"                        address: {",
					"                            streetName: JSON.parse(pm.environment.get(\"debtorStreetName\")),",
					"                            postalCode: JSON.parse(pm.environment.get(\"debtorPostalCode\")),",
					"                            townName: JSON.parse(pm.environment.get(\"debtorTownName\"))",
					"                        }",
					"                    },",
					"                    debtorAccountNo: JSON.parse(pm.environment.get(\"debtorAccountNo\")),",
					"                    standingOrder: {",
					"                        firstOn: JSON.parse(pm.globals.get(\"PrS:futureWorkingDay\")),",
					"                        lastOn: JSON.parse(pm.globals.get(\"PrS:futurePlusWorkingDay\")),",
					"                        beforeHoliday: true,",
					"                        interval: \"WEEKLY\",",
					"                        active: true,",
					"                        ultimo: false",
					"                    }",
					"                }         ",
					"            })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"newPaymentSepaID\", res.json().paymentId);",
					"            console.log(\"New payment ID: \" + pm.environment.get(\"newPaymentSepaID\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for deleting Sepa payment*/",
					"postman.setGlobalVariable(\"paymentSepaDelete\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"environment\")}/banking-api/payment/sepa/${pm.environment.get(\"tenant\")}/v2/credittransfer/${pm.environment.get(\"newPaymentSepaID\")}`,",
					"        method: \"DELETE\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.unset(\"newPaymentSepaID\");",
					"        }              ",
					"    });",
					"});",
					"",
					"",
					"//************************************************************************************************",
					"// Schema for 'assetsListDetails'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const assetsListDetails = ",
					"{",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"    \"$id\": \"http://example.com/example.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The Root Schema\",",
					"    \"description\": \"The root schema comprises the entire JSON document.\",",
					"    \"required\": [",
					"        \"id\",",
					"        \"assetNumber\",",
					"        \"assetType\",",
					"        \"amount\"",
					"    ],",
					"    \"properties\": {",
					"        \"id\": {",
					"            \"$id\": \"#/properties/id\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Id Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"__ID__736666683854316a6b494f784436514f89eb3c7e757e6e6cce6ef081dbd7fd929f2dc9\"",
					"            ]",
					"        },",
					"        \"assetNumber\": {",
					"            \"$id\": \"#/properties/assetNumber\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Assetnumber Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"1000001704\"",
					"            ]",
					"        },",
					"        \"assetType\": {",
					"            \"$id\": \"#/properties/assetType\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Assettype Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"ACCOUNT\"",
					"            ]",
					"        },",
					"        \"amount\": {",
					"            \"$id\": \"#/properties/amount\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Amount Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"                {",
					"                    \"value\": 123493.65,",
					"                    \"currencyIsoCode\": \"USD\"",
					"                }",
					"            ],",
					"            \"required\": [",
					"                \"currencyIsoCode\",",
					"                \"value\"",
					"            ],",
					"            \"properties\": {",
					"                \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/amount/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"USD\"",
					"                    ]",
					"                },",
					"                \"value\": {",
					"                    \"$id\": \"#/properties/amount/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": 0,",
					"                    \"examples\": [",
					"                        123493.65",
					"                    ]",
					"                }",
					"            }",
					"        }",
					"    }",
					"}",
					"pm.environment.set(\"assetsListDetails\", assetsListDetails);",
					"",
					"",
					"//************************************************************************************************",
					"// Schema for 'assetsList'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const assetsList = ",
					"{",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"    \"$id\": \"http://example.com/example.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The Root Schema\",",
					"    \"description\": \"The root schema comprises the entire JSON document.\",",
					"    \"required\": [",
					"        \"_embedded\",",
					"        \"page\"",
					"    ],",
					"    \"properties\": {",
					"        \"_embedded\": {",
					"            \"$id\": \"#/properties/_embedded\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The _embedded Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"                {",
					"                    \"assets\": [",
					"                        {",
					"                            \"amount\": {",
					"                                \"currencyIsoCode\": \"GBP\",",
					"                                \"value\": 30308022.29",
					"                            },",
					"                            \"id\": \"__ID__306e513838756c61716c39766b6c3555bb32d1ccd955ff7aab9ac3e08bcea348da8e483186f4c4\",",
					"                            \"assetNumber\": \"1286841506\",",
					"                            \"assetType\": \"ACCOUNT\"",
					"                        },",
					"                        {",
					"                            \"amount\": {",
					"                                \"value\": 9959.94,",
					"                                \"currencyIsoCode\": \"USD\"",
					"                            },",
					"                            \"id\": \"__ID__306e513838756c61716c39766b6c3555bb32d1ccd955fd8b6a4035b48babb2e18a7b6cbb4beb0b\",",
					"                            \"assetNumber\": \"1286841517\",",
					"                            \"assetType\": \"ACCOUNT\"",
					"                        },",
					"                        {",
					"                            \"id\": \"__ID__306e513838756c61716c39766b6c3555bb33d5cddd5cfd2818088a0d01e714013dd045ffaaf1fa\",",
					"                            \"assetNumber\": \"771286841506\",",
					"                            \"assetType\": \"CUSTODY_ACCOUNT\",",
					"                            \"amount\": {",
					"                                \"value\": 7718.65,",
					"                                \"currencyIsoCode\": \"GBP\"",
					"                            }",
					"                        }",
					"                    ]",
					"                }",
					"            ],",
					"            \"required\": [",
					"                \"assets\"",
					"            ],",
					"            \"properties\": {",
					"                \"assets\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/assets\",",
					"                    \"type\": \"array\",",
					"                    \"title\": \"The Assets Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": [],",
					"                    \"items\": {",
					"                        \"$id\": \"#/properties/_embedded/properties/assets/items\",",
					"                        \"type\": \"object\",",
					"                        \"title\": \"The Items Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": {},",
					"                        \"examples\": [",
					"                            {",
					"                                \"id\": \"__ID__306e513838756c61716c39766b6c3555bb32d1ccd955ff7aab9ac3e08bcea348da8e483186f4c4\",",
					"                                \"assetNumber\": \"1286841506\",",
					"                                \"assetType\": \"ACCOUNT\",",
					"                                \"amount\": {",
					"                                    \"value\": 30308022.29,",
					"                                    \"currencyIsoCode\": \"GBP\"",
					"                                }",
					"                            },",
					"                            {",
					"                                \"assetType\": \"ACCOUNT\",",
					"                                \"amount\": {",
					"                                    \"value\": 9959.94,",
					"                                    \"currencyIsoCode\": \"USD\"",
					"                                },",
					"                                \"id\": \"__ID__306e513838756c61716c39766b6c3555bb32d1ccd955fd8b6a4035b48babb2e18a7b6cbb4beb0b\",",
					"                                \"assetNumber\": \"1286841517\"",
					"                            },",
					"                            {",
					"                                \"amount\": {",
					"                                    \"currencyIsoCode\": \"GBP\",",
					"                                    \"value\": 7718.65",
					"                                },",
					"                                \"id\": \"__ID__306e513838756c61716c39766b6c3555bb33d5cddd5cfd2818088a0d01e714013dd045ffaaf1fa\",",
					"                                \"assetNumber\": \"771286841506\",",
					"                                \"assetType\": \"CUSTODY_ACCOUNT\"",
					"                            }",
					"                        ],",
					"                        \"required\": [",
					"                            \"id\",",
					"                            \"assetNumber\",",
					"                            \"assetType\",",
					"                            \"amount\"",
					"                        ],",
					"                        \"properties\": {",
					"                            \"id\": {",
					"                                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/id\",",
					"                                \"type\": \"string\",",
					"                                \"title\": \"The Id Schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": \"\",",
					"                                \"examples\": [",
					"                                    \"__ID__306e513838756c61716c39766b6c3555bb32d1ccd955ff7aab9ac3e08bcea348da8e483186f4c4\"",
					"                                ]",
					"                            },",
					"                            \"assetNumber\": {",
					"                                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/assetNumber\",",
					"                                \"type\": \"string\",",
					"                                \"title\": \"The Assetnumber Schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": \"\",",
					"                                \"examples\": [",
					"                                    \"1286841506\"",
					"                                ]",
					"                            },",
					"                            \"assetType\": {",
					"                                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/assetType\",",
					"                                \"type\": \"string\",",
					"                                \"title\": \"The Assettype Schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": \"\",",
					"                                \"examples\": [",
					"                                    \"ACCOUNT\"",
					"                                ]",
					"                            },",
					"                            \"amount\": {",
					"                                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount\",",
					"                                \"type\": \"object\",",
					"                                \"title\": \"The Amount Schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": {},",
					"                                \"examples\": [",
					"                                    {",
					"                                        \"value\": 30308022.29,",
					"                                        \"currencyIsoCode\": \"GBP\"",
					"                                    }",
					"                                ],",
					"                                \"required\": [",
					"                                    \"currencyIsoCode\",",
					"                                    \"value\"",
					"                                ],",
					"                                \"properties\": {",
					"                                    \"currencyIsoCode\": {",
					"                                        \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount/properties/currencyIsoCode\",",
					"                                        \"type\": \"string\",",
					"                                        \"title\": \"The Currencyisocode Schema\",",
					"                                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                                        \"default\": \"\",",
					"                                        \"examples\": [",
					"                                            \"GBP\"",
					"                                        ]",
					"                                    },",
					"                                    \"value\": {",
					"                                        \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount/properties/value\",",
					"                                        \"type\": \"number\",",
					"                                        \"title\": \"The Value Schema\",",
					"                                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                                        \"default\": 0,",
					"                                        \"examples\": [",
					"                                            30308022.29",
					"                                        ]",
					"                                    }",
					"                                }",
					"                            }",
					"                        }",
					"                    }",
					"                }",
					"            }",
					"        },",
					"        \"page\": {",
					"            \"$id\": \"#/properties/page\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Page Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"                {",
					"                    \"number\": 0.0,",
					"                    \"totalPages\": 1.0,",
					"                    \"totalElements\": 3.0,",
					"                    \"size\": 20.0",
					"                }",
					"            ],",
					"            \"required\": [",
					"                \"number\",",
					"                \"size\",",
					"                \"totalElements\",",
					"                \"totalPages\"",
					"            ],",
					"            \"properties\": {",
					"                \"number\": {",
					"                    \"$id\": \"#/properties/page/properties/number\",",
					"                    \"type\": \"integer\",",
					"                    \"title\": \"The Number Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": 0,",
					"                    \"examples\": [",
					"                        0",
					"                    ]",
					"                },",
					"                \"size\": {",
					"                    \"$id\": \"#/properties/page/properties/size\",",
					"                    \"type\": \"integer\",",
					"                    \"title\": \"The Size Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": 0,",
					"                    \"examples\": [",
					"                        20",
					"                    ]",
					"                },",
					"                \"totalElements\": {",
					"                    \"$id\": \"#/properties/page/properties/totalElements\",",
					"                    \"type\": \"integer\",",
					"                    \"title\": \"The Totalelements Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": 0,",
					"                    \"examples\": [",
					"                        3",
					"                    ]",
					"                },",
					"                \"totalPages\": {",
					"                    \"$id\": \"#/properties/page/properties/totalPages\",",
					"                    \"type\": \"integer\",",
					"                    \"title\": \"The Totalpages Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": 0,",
					"                    \"examples\": [",
					"                        1",
					"                    ]",
					"                }",
					"            }",
					"        }",
					"    }",
					"}",
					"pm.environment.set(\"assetsList\", assetsList);",
					"",
					"",
					"//************************************************************************************************",
					"// Schema for 'singleTransactions'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const singleTransactions = ",
					"{",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"    \"$id\": \"http://example.com/example.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The Root Schema\",",
					"    \"description\": \"The root schema comprises the entire JSON document.\",",
					"    \"required\": [",
					"        \"id\",",
					"        \"accountId\",",
					"        \"valutaDate\",",
					"        \"bookingDate\",",
					"        \"booked\",",
					"        \"amount\",",
					"        \"creditorAccount\",",
					"        \"debtorAccount\",",
					"        \"end2endID\",",
					"        \"referenceNumber\",",
					"        \"bookingText\",",
					"        \"referenceText\"",
					"    ],",
					"    \"properties\": {",
					"        \"id\": {",
					"            \"$id\": \"#/properties/id\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Id Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"__ID__505237616d485741324e4339683554694ab1600a787e7c4213d74be5d7df5aa6720d6982bbcd73\"",
					"            ]",
					"        },",
					"        \"accountId\": {",
					"            \"$id\": \"#/properties/accountId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accountid Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"__ID__505237616d485741324e43396835546949b463067c737ed9bc3ddbe7d5ad67a4b38b0931b81881\"",
					"            ]",
					"        },",
					"        \"valutaDate\": {",
					"            \"$id\": \"#/properties/valutaDate\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Valutadate Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"2019-12-23\"",
					"            ]",
					"        },",
					"        \"bookingDate\": {",
					"            \"$id\": \"#/properties/bookingDate\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Bookingdate Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"2019-12-23\"",
					"            ]",
					"        },",
					"        \"booked\": {",
					"            \"$id\": \"#/properties/booked\",",
					"            \"type\": \"boolean\",",
					"            \"title\": \"The Booked Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": false,",
					"            \"examples\": [",
					"                true",
					"            ]",
					"        },",
					"        \"amount\": {",
					"            \"$id\": \"#/properties/amount\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Amount Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"                {",
					"                    \"value\": 2.0,",
					"                    \"currencyIsoCode\": \"CHF\"",
					"                }",
					"            ],",
					"            \"required\": [",
					"                \"currencyIsoCode\",",
					"                \"value\"",
					"            ],",
					"            \"properties\": {",
					"                \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/amount/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"CHF\"",
					"                    ]",
					"                },",
					"                \"value\": {",
					"                    \"$id\": \"#/properties/amount/properties/value\",",
					"                    \"type\": \"integer\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": 0,",
					"                    \"examples\": [",
					"                        2",
					"                    ]",
					"                }",
					"            }",
					"        },",
					"        \"creditorAccount\": {",
					"            \"$id\": \"#/properties/creditorAccount\",",
					"            \"title\": \"The Creditoraccount Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"debtorAccount\": {",
					"            \"$id\": \"#/properties/debtorAccount\",",
					"            \"title\": \"The Debtoraccount Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"end2endID\": {",
					"            \"$id\": \"#/properties/end2endID\",",
					"            \"title\": \"The End2endid Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"referenceNumber\": {",
					"            \"$id\": \"#/properties/referenceNumber\",",
					"            \"title\": \"The Referencenumber Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"bookingText\": {",
					"            \"$id\": \"#/properties/bookingText\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Bookingtext Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"Payment 2\"",
					"            ]",
					"        },",
					"        \"referenceText\": {",
					"            \"$id\": \"#/properties/referenceText\",",
					"            \"title\": \"The Referencetext Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        }",
					"    }",
					"}",
					"pm.environment.set(\"singleTransactions\", singleTransactions);",
					"",
					"//************************************************************************************************",
					"// Schema for '400 error'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const error400 = ",
					"{",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"    \"$id\": \"http://example.com/example.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The Root Schema\",",
					"    \"description\": \"The root schema comprises the entire JSON document.\",",
					"    \"required\": [",
					"        \"_status\",",
					"        \"_messages\",",
					"        \"_timestamp\"",
					"    ],",
					"    \"properties\": {",
					"        \"_status\": {",
					"            \"$id\": \"#/properties/_status\",",
					"            \"type\": \"boolean\",",
					"            \"title\": \"The _status Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": false,",
					"            \"examples\": [",
					"                false",
					"            ]",
					"        },",
					"        \"_messages\": {",
					"            \"$id\": \"#/properties/_messages\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The _messages Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": [],",
					"            \"items\": {",
					"                \"$id\": \"#/properties/_messages/items\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Items Schema\",",
					"                \"description\": \"An explanation about the purpose of this instance.\",",
					"                \"default\": {},",
					"                \"examples\": [",
					"                    {",
					"                        \"category\": \"ERROR\",",
					"                        \"code\": \"ERROR_ARGUMENT_MISMATCH\",",
					"                        \"text\": \"Argument mismatch: __ID__505237616d485741324e43396835546949b463067c71799107b8d02d69a0300452557cf19dd4f7\",",
					"                        \"path\": \"/assets/accounts/19901/v4/accounts/__ID__505237616d485741324e43396835546949b463067c71799107b8d02d69a0300452557cf19dd4f7/permissions\"",
					"                    }",
					"                ],",
					"                \"required\": [",
					"                    \"category\",",
					"                    \"code\",",
					"                    \"text\",",
					"                    \"path\"",
					"                ],",
					"                \"properties\": {",
					"                    \"category\": {",
					"                        \"$id\": \"#/properties/_messages/items/properties/category\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Category Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"ERROR\"",
					"                        ]",
					"                    },",
					"                    \"code\": {",
					"                        \"$id\": \"#/properties/_messages/items/properties/code\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Code Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"ERROR_ARGUMENT_MISMATCH\"",
					"                        ]",
					"                    },",
					"                    \"text\": {",
					"                        \"$id\": \"#/properties/_messages/items/properties/text\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Text Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"Argument mismatch: __ID__505237616d485741324e43396835546949b463067c71799107b8d02d69a0300452557cf19dd4f7\"",
					"                        ]",
					"                    },",
					"                    \"path\": {",
					"                        \"$id\": \"#/properties/_messages/items/properties/path\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Path Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"/assets/accounts/19901/v4/accounts/__ID__505237616d485741324e43396835546949b463067c71799107b8d02d69a0300452557cf19dd4f7/permissions\"",
					"                        ]",
					"                    }",
					"                }",
					"            }",
					"        },",
					"        \"_timestamp\": {",
					"            \"$id\": \"#/properties/_timestamp\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The _timestamp Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"2020-03-24T13:26:15.546+01:00\"",
					"            ]",
					"        }",
					"    }",
					"}",
					"pm.environment.set(\"error400\", error400);",
					"",
					"//************************************************************************************************",
					"// Schema for 'Alias set'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const aliasSet = ",
					"{",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"    \"$id\": \"http://example.com/example.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The Root Schema\",",
					"    \"description\": \"The root schema comprises the entire JSON document.\",",
					"    \"required\": [",
					"        \"_timestamp\",",
					"        \"_status\",",
					"        \"_messages\"",
					"    ],",
					"    \"properties\": {",
					"        \"_timestamp\": {",
					"            \"$id\": \"#/properties/_timestamp\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The _timestamp Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"2020-03-18T11:48:50.275\"",
					"            ]",
					"        },",
					"        \"_status\": {",
					"            \"$id\": \"#/properties/_status\",",
					"            \"type\": \"boolean\",",
					"            \"title\": \"The _status Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": false,",
					"            \"examples\": [",
					"                true",
					"            ]",
					"        },",
					"        \"_messages\": {",
					"            \"$id\": \"#/properties/_messages\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The _messages Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": [],",
					"            \"items\": {",
					"                \"$id\": \"#/properties/_messages/items\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Items Schema\",",
					"                \"description\": \"An explanation about the purpose of this instance.\",",
					"                \"default\": {},",
					"                \"examples\": [",
					"                    {",
					"                        \"text\": \"Account alias set\",",
					"                        \"path\": \"/assets/accounts/{tenantId}/v4/accounts/{accountId}/alias\",",
					"                        \"category\": \"NORMAL\",",
					"                        \"code\": \"200\"",
					"                    }",
					"                ],",
					"                \"required\": [",
					"                    \"code\",",
					"                    \"category\",",
					"                    \"text\",",
					"                    \"path\"",
					"                ],",
					"                \"properties\": {",
					"                    \"code\": {",
					"                        \"$id\": \"#/properties/_messages/items/properties/code\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Code Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"200\"",
					"                        ]",
					"                    },",
					"                    \"category\": {",
					"                        \"$id\": \"#/properties/_messages/items/properties/category\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Category Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"NORMAL\"",
					"                        ]",
					"                    },",
					"                    \"text\": {",
					"                        \"$id\": \"#/properties/_messages/items/properties/text\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Text Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"Account alias set\"",
					"                        ]",
					"                    },",
					"                    \"path\": {",
					"                        \"$id\": \"#/properties/_messages/items/properties/path\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Path Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"/assets/accounts/{tenantId}/v4/accounts/{accountId}/alias\"",
					"                        ]",
					"                    }",
					"                }",
					"            }",
					"        }",
					"    }",
					"}",
					"pm.environment.set(\"aliasSet\", aliasSet);",
					"",
					"",
					"//************************************************************************************************",
					"// Schema for 'Account ID get response'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const accountIdDetails = ",
					"{",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"    \"$id\": \"http://example.com/example.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The Root Schema\",",
					"    \"description\": \"The root schema comprises the entire JSON document.\",",
					"    \"required\": [",
					"        \"accountName\",",
					"        \"accountType\",",
					"        \"accountNumber\",",
					"        \"advisorId\",",
					"        \"bank\",",
					"        \"balances\",",
					"        \"contractId\",",
					"        \"creditInterest\",",
					"        \"currencyIsoCode\",",
					"        \"customerName\",",
					"        \"debtInterest\",",
					"        \"defaultDebtAccount\",",
					"        \"description\",",
					"        \"formattedAccountNumber\",",
					"        \"iban\",",
					"        \"id\",",
					"        \"overdraftInterest\",",
					"        \"overdraftLimit\",",
					"        \"portfolioId\",",
					"        \"permissions\"",
					"    ],",
					"    \"properties\": {",
					"        \"accountName\": {",
					"            \"$id\": \"#/properties/accountName\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accountname Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"1501 CHF\"",
					"            ]",
					"        },",
					"        \"accountType\": {",
					"            \"$id\": \"#/properties/accountType\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accounttype Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"CURRENT\"",
					"            ]",
					"        },",
					"        \"accountNumber\": {",
					"            \"$id\": \"#/properties/accountNumber\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accountnumber Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"1000001501\"",
					"            ]",
					"        },",
					"        \"advisorId\": {",
					"            \"$id\": \"#/properties/advisorId\",",
					"            \"title\": \"The Advisorid Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"bank\": {",
					"            \"$id\": \"#/properties/bank\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Bank Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"                {",
					"                    \"institutionId\": \"12312\",",
					"                    \"bic\": \"CLXNCHZZMDB\",",
					"                    \"name\": \"CLX EBS\"",
					"                }",
					"            ],",
					"            \"required\": [",
					"                \"bic\",",
					"                \"institutionId\",",
					"                \"name\"",
					"            ],",
					"            \"properties\": {",
					"                \"bic\": {",
					"                    \"$id\": \"#/properties/bank/properties/bic\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Bic Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"CLXNCHZZMDB\"",
					"                    ]",
					"                },",
					"                \"institutionId\": {",
					"                    \"$id\": \"#/properties/bank/properties/institutionId\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Institutionid Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"12312\"",
					"                    ]",
					"                },",
					"                \"name\": {",
					"                    \"$id\": \"#/properties/bank/properties/name\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Name Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"CLX EBS\"",
					"                    ]",
					"                }",
					"            }",
					"        },",
					"        \"balances\": {",
					"            \"$id\": \"#/properties/balances\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Balances Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"                {",
					"                    \"availableAmount\": {",
					"                        \"value\": 20365239.25,",
					"                        \"currencyIsoCode\": \"CHF\"",
					"                    },",
					"                    \"balance\": {",
					"                        \"value\": 20365239.25,",
					"                        \"currencyIsoCode\": \"CHF\"",
					"                    }",
					"                }",
					"            ],",
					"            \"required\": [",
					"                \"availableAmount\",",
					"                \"balance\"",
					"            ],",
					"            \"properties\": {",
					"                \"availableAmount\": {",
					"                    \"$id\": \"#/properties/balances/properties/availableAmount\",",
					"                    \"type\": \"object\",",
					"                    \"title\": \"The Availableamount Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": {},",
					"                    \"examples\": [",
					"                        {",
					"                            \"value\": 20365239.25,",
					"                            \"currencyIsoCode\": \"CHF\"",
					"                        }",
					"                    ],",
					"                    \"required\": [",
					"                        \"currencyIsoCode\",",
					"                        \"value\"",
					"                    ],",
					"                    \"properties\": {",
					"                        \"currencyIsoCode\": {",
					"                            \"$id\": \"#/properties/balances/properties/availableAmount/properties/currencyIsoCode\",",
					"                            \"type\": \"string\",",
					"                            \"title\": \"The Currencyisocode Schema\",",
					"                            \"description\": \"An explanation about the purpose of this instance.\",",
					"                            \"default\": \"\",",
					"                            \"examples\": [",
					"                                \"CHF\"",
					"                            ]",
					"                        },",
					"                        \"value\": {",
					"                            \"$id\": \"#/properties/balances/properties/availableAmount/properties/value\",",
					"                            \"type\": \"number\",",
					"                            \"title\": \"The Value Schema\",",
					"                            \"description\": \"An explanation about the purpose of this instance.\",",
					"                            \"default\": 0,",
					"                            \"examples\": [",
					"                                20365239.25",
					"                            ]",
					"                        }",
					"                    }",
					"                },",
					"                \"balance\": {",
					"                    \"$id\": \"#/properties/balances/properties/balance\",",
					"                    \"type\": \"object\",",
					"                    \"title\": \"The Balance Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": {},",
					"                    \"examples\": [",
					"                        {",
					"                            \"currencyIsoCode\": \"CHF\",",
					"                            \"value\": 20365239.25",
					"                        }",
					"                    ],",
					"                    \"required\": [",
					"                        \"currencyIsoCode\",",
					"                        \"value\"",
					"                    ],",
					"                    \"properties\": {",
					"                        \"currencyIsoCode\": {",
					"                            \"$id\": \"#/properties/balances/properties/balance/properties/currencyIsoCode\",",
					"                            \"type\": \"string\",",
					"                            \"title\": \"The Currencyisocode Schema\",",
					"                            \"description\": \"An explanation about the purpose of this instance.\",",
					"                            \"default\": \"\",",
					"                            \"examples\": [",
					"                                \"CHF\"",
					"                            ]",
					"                        },",
					"                        \"value\": {",
					"                            \"$id\": \"#/properties/balances/properties/balance/properties/value\",",
					"                            \"type\": \"number\",",
					"                            \"title\": \"The Value Schema\",",
					"                            \"description\": \"An explanation about the purpose of this instance.\",",
					"                            \"default\": 0,",
					"                            \"examples\": [",
					"                                20365239.25",
					"                            ]",
					"                        }",
					"                    }",
					"                }",
					"            }",
					"        },",
					"        \"contractId\": {",
					"            \"$id\": \"#/properties/contractId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Contractid Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"__ID__4b3261526f43483250734f78384c3965cf4fbd0c52c6f98e68435eec4a20241839a18c\"",
					"            ]",
					"        },",
					"        \"creditInterest\": {",
					"            \"$id\": \"#/properties/creditInterest\",",
					"            \"title\": \"The Creditinterest Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"currencyIsoCode\": {",
					"            \"$id\": \"#/properties/currencyIsoCode\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Currencyisocode Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"CHF\"",
					"            ]",
					"        },",
					"        \"customerName\": {",
					"            \"$id\": \"#/properties/customerName\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Customername Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"Freddy Hinz\"",
					"            ]",
					"        },",
					"        \"debtInterest\": {",
					"            \"$id\": \"#/properties/debtInterest\",",
					"            \"title\": \"The Debtinterest Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"defaultDebtAccount\": {",
					"            \"$id\": \"#/properties/defaultDebtAccount\",",
					"            \"type\": \"boolean\",",
					"            \"title\": \"The Defaultdebtaccount Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": false,",
					"            \"examples\": [",
					"                false",
					"            ]",
					"        },",
					"        \"description\": {",
					"            \"$id\": \"#/properties/description\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Description Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"Current account\"",
					"            ]",
					"        },",
					"        \"formattedAccountNumber\": {",
					"            \"$id\": \"#/properties/formattedAccountNumber\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Formattedaccountnumber Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"CH5112312001000001501\"",
					"            ]",
					"        },",
					"        \"iban\": {",
					"            \"$id\": \"#/properties/iban\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Iban Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"CH5112312001000001501\"",
					"            ]",
					"        },",
					"        \"id\": {",
					"            \"$id\": \"#/properties/id\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Id Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"__ID__4b3261526f43483250734f78384c3965cf4dbab1755ff09f5775670adce3198e17d1b1\"",
					"            ]",
					"        },",
					"        \"overdraftInterest\": {",
					"            \"$id\": \"#/properties/overdraftInterest\",",
					"            \"title\": \"The Overdraftinterest Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"overdraftLimit\": {",
					"            \"$id\": \"#/properties/overdraftLimit\",",
					"            \"title\": \"The Overdraftlimit Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"portfolioId\": {",
					"            \"$id\": \"#/properties/portfolioId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Portfolioid Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"__ID__4b3261526f43483250734f78384c3965cf48bc95bbfd7bf68b4908f97c8f3b59f5acfd\"",
					"            ]",
					"        },",
					"        \"permissions\": {",
					"            \"$id\": \"#/properties/permissions\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The Permissions Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": [],",
					"            \"items\": {",
					"                \"$id\": \"#/properties/permissions/items\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Items Schema\",",
					"                \"description\": \"An explanation about the purpose of this instance.\",",
					"                \"default\": {},",
					"                \"examples\": [",
					"                    {",
					"                        \"permissions\": [",
					"                            \"PAYM_DOM_INI\",",
					"                            \"PAYM_TRANSFER_INI\",",
					"                            \"PAYM_STN_ODR_INI\",",
					"                            \"PAYM_INTL_INI\"",
					"                        ],",
					"                        \"accountId\": \"__ID__4b3261526f43483250734f78384c3965cf4dbab1755ff09f5775670adce3198e17d1b1\",",
					"                        \"contractId\": \"__ID__4b3261526f43483250734f78384c3965cf4fbd0c52c6f98e68435eec4a20241839a18c\"",
					"                    }",
					"                ],",
					"                \"required\": [",
					"                    \"accountId\",",
					"                    \"contractId\",",
					"                    \"permissions\"",
					"                ],",
					"                \"properties\": {",
					"                    \"accountId\": {",
					"                        \"$id\": \"#/properties/permissions/items/properties/accountId\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Accountid Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"__ID__4b3261526f43483250734f78384c3965cf4dbab1755ff09f5775670adce3198e17d1b1\"",
					"                        ]",
					"                    },",
					"                    \"contractId\": {",
					"                        \"$id\": \"#/properties/permissions/items/properties/contractId\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Contractid Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"__ID__4b3261526f43483250734f78384c3965cf4fbd0c52c6f98e68435eec4a20241839a18c\"",
					"                        ]",
					"                    },",
					"                    \"permissions\": {",
					"                        \"$id\": \"#/properties/permissions/items/properties/permissions\",",
					"                        \"type\": \"array\",",
					"                        \"title\": \"The Permissions Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": [],",
					"                        \"items\": {",
					"                            \"$id\": \"#/properties/permissions/items/properties/permissions/items\",",
					"                            \"type\": \"string\",",
					"                            \"title\": \"The Items Schema\",",
					"                            \"description\": \"An explanation about the purpose of this instance.\",",
					"                            \"default\": \"\",",
					"                            \"examples\": [",
					"                                \"PAYM_DOM_INI\",",
					"                                \"PAYM_TRANSFER_INI\",",
					"                                \"PAYM_STN_ODR_INI\",",
					"                                \"PAYM_INTL_INI\"",
					"                            ]",
					"                        }",
					"                    }",
					"                }",
					"            }",
					"        }",
					"    }",
					"}",
					"pm.environment.set(\"accountIdDetails\", accountIdDetails);",
					"",
					"//************************************************************************************************",
					"// Schema for 'Balance scheme'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const balanceSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"availableAmount\",",
					"    \"balance\"",
					"  ],",
					"  \"properties\": {",
					"    \"availableAmount\": {",
					"      \"$id\": \"#/properties/availableAmount\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Availableamount Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/availableAmount/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/availableAmount/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0.0,",
					"          \"examples\": [",
					"            20365239.25",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"balance\": {",
					"      \"$id\": \"#/properties/balance\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Balance Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/balance/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/balance/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0.0,",
					"          \"examples\": [",
					"            20365239.25",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"balanceSchema\", balanceSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'Permission scheme'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const permissionSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"accountPermissions\"",
					"  ],",
					"  \"properties\": {",
					"    \"accountPermissions\": {",
					"      \"$id\": \"#/properties/accountPermissions\",",
					"      \"type\": \"array\",",
					"      \"title\": \"The Accountpermissions Schema\",",
					"      \"items\": {",
					"        \"$id\": \"#/properties/accountPermissions/items\",",
					"        \"type\": \"object\",",
					"        \"title\": \"The Items Schema\",",
					"        \"required\": [",
					"          \"accountId\",",
					"          \"contractId\",",
					"          \"permissions\"",
					"        ],",
					"        \"properties\": {",
					"          \"accountId\": {",
					"            \"$id\": \"#/properties/accountPermissions/items/properties/accountId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accountid Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"__ID__4b3261526f43483250734f78384c3965cf4eb38cdc28f72d342f4298166b0b84a7bfef\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"contractId\": {",
					"            \"$id\": \"#/properties/accountPermissions/items/properties/contractId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Contractid Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"__ID__4b3261526f43483250734f78384c3965cb4b99ac8b91244e464770e8894ac7b4c779\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"permissions\": {",
					"            \"$id\": \"#/properties/accountPermissions/items/properties/permissions\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The Permissions Schema\",",
					"            \"items\": {",
					"              \"$id\": \"#/properties/accountPermissions/items/properties/permissions/items\",",
					"              \"type\": \"string\",",
					"              \"title\": \"The Items Schema\",",
					"              \"default\": \"\",",
					"              \"examples\": [",
					"                \"PAYM_DOM_INI\",",
					"                \"PAYM_INTL_INI\",",
					"                \"PAYM_STN_ODR_INI\",",
					"                \"PAYM_TRANSFER_INI\"",
					"              ],",
					"              \"pattern\": \"^(.*)$\"",
					"            }",
					"          }",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"permissionSchema\", permissionSchema);",
					"",
					"",
					"//************************************************************************************************",
					"// Schema for 'Custody accounts'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const cuacsSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"cuacs\"",
					"      ],",
					"      \"properties\": {",
					"        \"cuacs\": {",
					"          \"$id\": \"#/properties/_embedded/properties/cuacs\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Cuacs Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/cuacs/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"id\",",
					"              \"custodyAccountNumber\",",
					"              \"lastChangeAt\",",
					"              \"valueCustodyCurrency\",",
					"              \"valueCustomerCurrency\",",
					"              \"valuePortfolioCurrency\",",
					"              \"yearEndValue\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__35695a31497042534976574d443565538b03820c945d6ab2c410438ef238fdba2c7e\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"custodyAccountNumber\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/custodyAccountNumber\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Custodyaccountnumber Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"771000061502\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"lastChangeAt\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/lastChangeAt\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Lastchangeat Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"2013-06-25T17:16:49\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"valueCustodyCurrency\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustodyCurrency\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Valuecustodycurrency Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustodyCurrency/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustodyCurrency/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      24558.32",
					"                    ]",
					"                  }",
					"                }",
					"              },",
					"              \"valueCustomerCurrency\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustomerCurrency\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Valuecustomercurrency Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustomerCurrency/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustomerCurrency/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      24558.32",
					"                    ]",
					"                  }",
					"                }",
					"              },",
					"              \"valuePortfolioCurrency\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valuePortfolioCurrency\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Valueportfoliocurrency Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valuePortfolioCurrency/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valuePortfolioCurrency/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      24558.32",
					"                    ]",
					"                  }",
					"                }",
					"              },",
					"              \"yearEndValue\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/yearEndValue\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Yearendvalue Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/yearEndValue/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/yearEndValue/properties/value\",",
					"                    \"type\": \"null\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": null,",
					"                    \"examples\": [",
					"                      null",
					"                    ]",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            3",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"};",
					"pm.environment.set(\"cuacsSchema\", cuacsSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'Assets details'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const assetsDetails = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/example.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"checked\",",
					"    \"dimensions\",",
					"    \"id\",",
					"    \"name\",",
					"    \"price\",",
					"    \"tags\"",
					"  ],",
					"  \"properties\": {",
					"    \"checked\": {",
					"      \"$id\": \"/properties/checked\",",
					"      \"type\": \"boolean\",",
					"      \"title\": \"The Checked Schema\",",
					"      \"default\": false,",
					"      \"examples\": [",
					"        false",
					"      ]",
					"    },",
					"    \"dimensions\": {",
					"      \"$id\": \"/properties/dimensions\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Dimensions Schema\",",
					"      \"required\": [",
					"        \"width\",",
					"        \"height\"",
					"      ],",
					"      \"properties\": {",
					"        \"width\": {",
					"          \"$id\": \"/properties/dimensions/properties/width\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Width Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            5",
					"          ]",
					"        },",
					"        \"height\": {",
					"          \"$id\": \"/properties/dimensions/properties/height\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Height Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"id\": {",
					"      \"$id\": \"/properties/id\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        1",
					"      ]",
					"    },",
					"    \"name\": {",
					"      \"$id\": \"/properties/name\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Name Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"A green door\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"price\": {",
					"      \"$id\": \"/properties/price\",",
					"      \"type\": \"number\",",
					"      \"title\": \"The Price Schema\",",
					"      \"default\": 0.0,",
					"      \"examples\": [",
					"        12.5",
					"      ]",
					"    },",
					"    \"tags\": {",
					"      \"$id\": \"/properties/tags\",",
					"      \"type\": \"array\",",
					"      \"title\": \"The Tags Schema\",",
					"      \"items\": {",
					"        \"$id\": \"/properties/tags/items\",",
					"        \"type\": \"string\",",
					"        \"title\": \"The 0 Schema\",",
					"        \"default\": \"\",",
					"        \"examples\": [",
					"          \"home\",",
					"          \"green\"",
					"        ],",
					"        \"pattern\": \"^(.*)$\"",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"assetsDetails\", assetsDetails);",
					"//************************************************************************************************",
					"// Schema for 'DetailAssets'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const DetailAssets = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"assets\"",
					"      ],",
					"      \"properties\": {",
					"        \"assets\": {",
					"          \"$id\": \"#/properties/_embedded/properties/assets\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Assets Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/assets/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"id\",",
					"              \"assetNumber\",",
					"              \"assetType\",",
					"              \"amount\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__4b3261526f43483250734f78384c3965cf43b264b6ab4c579325cbffc35ebda4ee4eae\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"assetNumber\": {",
					"                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/assetNumber\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Assetnumber Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"1000001704\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"assetType\": {",
					"                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/assetType\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Assettype Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"ACCOUNT\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"amount\": {",
					"                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Amount Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"USD\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      123493.65",
					"                    ]",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            20",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"DetailAssets\", DetailAssets);",
					"",
					"//************************************************************************************************",
					"// Schema for 'cuacs detail Schema' *************************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const cuacsDetSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"custodyAccountNumber\",",
					"    \"lastChangeAt\",",
					"    \"valueCustodyCurrency\",",
					"    \"valueCustomerCurrency\",",
					"    \"valuePortfolioCurrency\",",
					"    \"yearEndValue\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d443565538a54737638399ab0eef3b93ecb4eec4c5f\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"custodyAccountNumber\": {",
					"      \"$id\": \"#/properties/custodyAccountNumber\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Custodyaccountnumber Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"771000061502\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"lastChangeAt\": {",
					"      \"$id\": \"#/properties/lastChangeAt\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Lastchangeat Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2013-06-25T17:16:49\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"valueCustodyCurrency\": {",
					"      \"$id\": \"#/properties/valueCustodyCurrency\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Valuecustodycurrency Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/valueCustodyCurrency/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/valueCustodyCurrency/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0.0,",
					"          \"examples\": [",
					"            24558.32",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"valueCustomerCurrency\": {",
					"      \"$id\": \"#/properties/valueCustomerCurrency\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Valuecustomercurrency Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/valueCustomerCurrency/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/valueCustomerCurrency/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0.0,",
					"          \"examples\": [",
					"            24558.32",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"valuePortfolioCurrency\": {",
					"      \"$id\": \"#/properties/valuePortfolioCurrency\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Valueportfoliocurrency Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/valuePortfolioCurrency/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/valuePortfolioCurrency/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0.0,",
					"          \"examples\": [",
					"            24558.32",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"yearEndValue\": {",
					"      \"$id\": \"#/properties/yearEndValue\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Yearendvalue Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/yearEndValue/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/yearEndValue/properties/value\",",
					"          \"type\": \"null\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": null,",
					"          \"examples\": [",
					"            null",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"cuacsDetSchema\", cuacsDetSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'custody account positions' ********************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const cuacsPositionSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"positions\"",
					"      ],",
					"      \"properties\": {",
					"        \"positions\": {",
					"          \"$id\": \"#/properties/_embedded/properties/positions\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Positions Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/positions/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"id\",",
					"              \"amount\",",
					"              \"calculationFrom\",",
					"              \"exportTime\",",
					"              \"maturityDate\",",
					"              \"salePermitted\",",
					"              \"timeToMaturity\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__35695a31497042534976574d443565538a54737638399ab0eef3b93ecb4eec4c5f\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"amount\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/amount\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Amount Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"calculationFrom\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/calculationFrom\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Calculationfrom Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"exportTime\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/exportTime\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Exporttime Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"2019-11-04T23:11:08\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"maturityDate\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/maturityDate\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Maturitydate Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"salePermitted\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/salePermitted\",",
					"                \"type\": \"boolean\",",
					"                \"title\": \"The Salepermitted Schema\",",
					"                \"default\": false,",
					"                \"examples\": [",
					"                  false",
					"                ]",
					"              },",
					"              \"timeToMaturity\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/timeToMaturity\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Timetomaturity Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            8",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"cuacsPositionSchema\", cuacsPositionSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'accountSearch' ********************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const accountSearchSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"accountList\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"accountList\": {",
					"      \"$id\": \"#/properties/accountList\",",
					"      \"type\": \"array\",",
					"      \"title\": \"The Accountlist Schema\",",
					"      \"items\": {",
					"        \"$id\": \"#/properties/accountList/items\",",
					"        \"type\": \"object\",",
					"        \"title\": \"The Items Schema\",",
					"        \"required\": [",
					"          \"accountName\",",
					"          \"accountType\",",
					"          \"accountNumber\",",
					"          \"advisorId\",",
					"          \"bank\",",
					"          \"balances\",",
					"          \"contractId\",",
					"          \"creditInterest\",",
					"          \"currencyIsoCode\",",
					"          \"customerName\",",
					"          \"debtInterest\",",
					"          \"defaultDebtAccount\",",
					"          \"description\",",
					"          \"formattedAccountNumber\",",
					"          \"iban\",",
					"          \"id\",",
					"          \"overdraftInterest\",",
					"          \"overdraftLimit\",",
					"          \"portfolioId\",",
					"          \"permissions\"",
					"        ],",
					"        \"properties\": {",
					"          \"accountName\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/accountName\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accountname Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"1704 USD\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"accountType\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/accountType\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accounttype Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"CURRENT\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"accountNumber\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/accountNumber\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accountnumber Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"1000001704\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"advisorId\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/advisorId\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Advisorid Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"bank\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/bank\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Bank Schema\",",
					"            \"required\": [",
					"              \"bic\",",
					"              \"institutionId\",",
					"              \"name\"",
					"            ],",
					"            \"properties\": {",
					"              \"bic\": {",
					"                \"$id\": \"#/properties/accountList/items/properties/bank/properties/bic\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Bic Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"CLXNCHZZMDB\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"institutionId\": {",
					"                \"$id\": \"#/properties/accountList/items/properties/bank/properties/institutionId\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Institutionid Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"12312\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"name\": {",
					"                \"$id\": \"#/properties/accountList/items/properties/bank/properties/name\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Name Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"CLX EBS\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              }",
					"            }",
					"          },",
					"          \"balances\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/balances\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Balances Schema\",",
					"            \"required\": [",
					"              \"availableAmount\",",
					"              \"balance\"",
					"            ],",
					"            \"properties\": {",
					"              \"availableAmount\": {",
					"                \"$id\": \"#/properties/accountList/items/properties/balances/properties/availableAmount\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Availableamount Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/accountList/items/properties/balances/properties/availableAmount/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"USD\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/accountList/items/properties/balances/properties/availableAmount/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      123493.65",
					"                    ]",
					"                  }",
					"                }",
					"              },",
					"              \"balance\": {",
					"                \"$id\": \"#/properties/accountList/items/properties/balances/properties/balance\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Balance Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/accountList/items/properties/balances/properties/balance/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"USD\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/accountList/items/properties/balances/properties/balance/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      123493.65",
					"                    ]",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          },",
					"          \"contractId\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/contractId\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Contractid Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"creditInterest\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/creditInterest\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Creditinterest Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"currencyIsoCode\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/currencyIsoCode\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Currencyisocode Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"USD\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"customerName\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/customerName\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Customername Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"Harry Hasler\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"debtInterest\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/debtInterest\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Debtinterest Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"defaultDebtAccount\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/defaultDebtAccount\",",
					"            \"type\": \"boolean\",",
					"            \"title\": \"The Defaultdebtaccount Schema\",",
					"            \"default\": false,",
					"            \"examples\": [",
					"              false",
					"            ]",
					"          },",
					"          \"description\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/description\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Description Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"Foreign Currency Account\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"formattedAccountNumber\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/formattedAccountNumber\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Formattedaccountnumber Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"CH0212312001000001704\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"iban\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/iban\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Iban Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"CH0212312001000001704\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"id\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/id\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Id Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"__ID__4b3261526f43483250734f78384c3965cc48b362e94b60cd080a60990c2efce58ee3e0\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"overdraftInterest\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/overdraftInterest\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Overdraftinterest Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"overdraftLimit\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/overdraftLimit\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Overdraftlimit Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"portfolioId\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/portfolioId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Portfolioid Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"__ID__4b3261526f43483250734f78384c3965ca49b8b0f88c4c4ed50ead239f733eaef42f42\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"permissions\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/permissions\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The Permissions Schema\",",
					"            \"items\": {",
					"              \"$id\": \"#/properties/accountList/items/properties/permissions/items\",",
					"              \"type\": \"object\",",
					"              \"title\": \"The Items Schema\",",
					"              \"required\": [",
					"                \"accountId\",",
					"                \"contractId\",",
					"                \"permissions\"",
					"              ],",
					"              \"properties\": {",
					"                \"accountId\": {",
					"                  \"$id\": \"#/properties/accountList/items/properties/permissions/items/properties/accountId\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Accountid Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"__ID__4b3261526f43483250734f78384c3965cc48b362e94b60cd080a60990c2efce58ee3e0\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"contractId\": {",
					"                  \"$id\": \"#/properties/accountList/items/properties/permissions/items/properties/contractId\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Contractid Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"__ID__4b3261526f43483250734f78384c3965cf4fbd0c52c6f98e68435eec4a20241839a18c\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"permissions\": {",
					"                  \"$id\": \"#/properties/accountList/items/properties/permissions/items/properties/permissions\",",
					"                  \"type\": \"array\",",
					"                  \"title\": \"The Permissions Schema\",",
					"                  \"items\": {",
					"                    \"$id\": \"#/properties/accountList/items/properties/permissions/items/properties/permissions/items\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Items Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"PAYM_STN_ODR_INI\",",
					"                      \"PAYM_DOM_INI\",",
					"                      \"PAYM_INTL_INI\",",
					"                      \"PAYM_TRANSFER_INI\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            30",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            17",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"accountSearchSchema\", accountSearchSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'positionId details' ***************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const positionIdSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"amount\",",
					"    \"calculationFrom\",",
					"    \"exportTime\",",
					"    \"maturityDate\",",
					"    \"salePermitted\",",
					"    \"timeToMaturity\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d443565538a54737638399ab0eef3b93ecb4eec4c5f\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"amount\": {",
					"      \"$id\": \"#/properties/amount\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Amount Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"calculationFrom\": {",
					"      \"$id\": \"#/properties/calculationFrom\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Calculationfrom Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"exportTime\": {",
					"      \"$id\": \"#/properties/exportTime\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Exporttime Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2019-11-04T23:11:08\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"maturityDate\": {",
					"      \"$id\": \"#/properties/maturityDate\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Maturitydate Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"salePermitted\": {",
					"      \"$id\": \"#/properties/salePermitted\",",
					"      \"type\": \"boolean\",",
					"      \"title\": \"The Salepermitted Schema\",",
					"      \"default\": false,",
					"      \"examples\": [",
					"        false",
					"      ]",
					"    },",
					"    \"timeToMaturity\": {",
					"      \"$id\": \"#/properties/timeToMaturity\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Timetomaturity Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"positionIdSchema\", positionIdSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'transactionsId list' **************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const transactionsIdSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"transactions\"",
					"      ],",
					"      \"properties\": {",
					"        \"transactions\": {",
					"          \"$id\": \"#/properties/_embedded/properties/transactions\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Transactions Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/transactions/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"id\",",
					"              \"amount\",",
					"              \"bookedAt\",",
					"              \"bookingText\",",
					"              \"debitCreditCode\",",
					"              \"narrative\",",
					"              \"narrativeTextType\",",
					"              \"transactionKey\",",
					"              \"transactionNumber\",",
					"              \"valueDate\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__35695a31497042534976574d443565538509674406aa950ce346395913df5663780586\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"amount\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/amount\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Amount Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/amount/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/amount/properties/value\",",
					"                    \"type\": \"integer\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0,",
					"                    \"examples\": [",
					"                      200",
					"                    ]",
					"                  }",
					"                }",
					"              },",
					"              \"bookedAt\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/bookedAt\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Bookedat Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"2019-09-26\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"bookingText\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/bookingText\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Bookingtext Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"Split\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"debitCreditCode\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/debitCreditCode\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Debitcreditcode Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"DEBIT\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"narrative\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/narrative\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Narrative Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"narrativeTextType\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/narrativeTextType\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Narrativetexttype Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"transactionKey\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/transactionKey\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Transactionkey Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"900.100006.990028402\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"transactionNumber\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/transactionNumber\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Transactionnumber Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"16\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"valueDate\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/valueDate\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Valuedate Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"2019-09-26\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            3",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"transactionsIdSchema\", transactionsIdSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'transactionsId details' ***********************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const transactionsIdDetailsSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"amount\",",
					"    \"bookedAt\",",
					"    \"bookingText\",",
					"    \"debitCreditCode\",",
					"    \"narrative\",",
					"    \"narrativeTextType\",",
					"    \"transactionKey\",",
					"    \"transactionNumber\",",
					"    \"valueDate\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d4435655385046899cd9b77906150fee2f5be2c36f32c38\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"amount\": {",
					"      \"$id\": \"#/properties/amount\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Amount Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/amount/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/amount/properties/value\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            200",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"bookedAt\": {",
					"      \"$id\": \"#/properties/bookedAt\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Bookedat Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2019-09-26\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"bookingText\": {",
					"      \"$id\": \"#/properties/bookingText\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Bookingtext Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"Split\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"debitCreditCode\": {",
					"      \"$id\": \"#/properties/debitCreditCode\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Debitcreditcode Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"DEBIT\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"narrative\": {",
					"      \"$id\": \"#/properties/narrative\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Narrative Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"narrativeTextType\": {",
					"      \"$id\": \"#/properties/narrativeTextType\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Narrativetexttype Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"transactionKey\": {",
					"      \"$id\": \"#/properties/transactionKey\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Transactionkey Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"900.100006.990028402\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"transactionNumber\": {",
					"      \"$id\": \"#/properties/transactionNumber\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Transactionnumber Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"16\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"valueDate\": {",
					"      \"$id\": \"#/properties/valueDate\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Valuedate Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2019-09-26\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"transactionsIdDetailsSchema\", transactionsIdDetailsSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'portfolio schema' *****************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const portfolioSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"portfolios\"",
					"      ],",
					"      \"properties\": {",
					"        \"portfolios\": {",
					"          \"$id\": \"#/properties/_embedded/properties/portfolios\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Portfolios Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/portfolios/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"id\",",
					"              \"customerId\",",
					"              \"name\",",
					"              \"amount\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__35695a31497042534976574d443565538c1bf563cdd82c8db3cff41a82f5047a4b\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"customerId\": {",
					"                \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/customerId\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Customerid Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__35695a31497042534976574d44356553850438747409aafd55561799f639493d1665\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"name\": {",
					"                \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/name\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Name Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"77_1502 / Freddy Hinz 01\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"amount\": {",
					"                \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/amount\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Amount Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/amount/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/amount/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      259730.59",
					"                    ]",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            5",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"portfolioSchema\", portfolioSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'portfolio details schema' *****************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const portfolioDetailsSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"customerId\",",
					"    \"name\",",
					"    \"amount\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d443565538c1bf563cdd82c8db3cff41a82f5047a4b\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"customerId\": {",
					"      \"$id\": \"#/properties/customerId\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Customerid Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d44356553850438747409aafd55561799f639493d1665\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"name\": {",
					"      \"$id\": \"#/properties/name\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Name Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"77_1502 / Freddy Hinz 01\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"amount\": {",
					"      \"$id\": \"#/properties/amount\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Amount Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/amount/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/amount/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0.0,",
					"          \"examples\": [",
					"            259730.59",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"portfolioDetailsSchema\", portfolioDetailsSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'portfolio performance schema' *****************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const portfolioPerformanceSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"performancePeriod\",",
					"    \"accruedInterestBalance\",",
					"    \"accruedInterestChange\",",
					"    \"netIncome\",",
					"    \"tax\",",
					"    \"startDate\",",
					"    \"endDate\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d443565538c0365390f45bc8e11a4f9f29a255617de9b4244\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"performancePeriod\": {",
					"      \"$id\": \"#/properties/performancePeriod\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Performanceperiod Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"YTD\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"accruedInterestBalance\": {",
					"      \"$id\": \"#/properties/accruedInterestBalance\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Accruedinterestbalance Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        40",
					"      ]",
					"    },",
					"    \"accruedInterestChange\": {",
					"      \"$id\": \"#/properties/accruedInterestChange\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Accruedinterestchange Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        40",
					"      ]",
					"    },",
					"    \"netIncome\": {",
					"      \"$id\": \"#/properties/netIncome\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Netincome Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        141",
					"      ]",
					"    },",
					"    \"tax\": {",
					"      \"$id\": \"#/properties/tax\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Tax Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        47",
					"      ]",
					"    },",
					"    \"startDate\": {",
					"      \"$id\": \"#/properties/startDate\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Startdate Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2019-01-01\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"endDate\": {",
					"      \"$id\": \"#/properties/endDate\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Enddate Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2019-12-06\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"portfolioPerformanceSchema\", portfolioPerformanceSchema);",
					"",
					"",
					"//************************************************************************************************",
					"// Schema for 'transaction list schema' *****************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const transactionsListSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"transactionGroups\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"transactionGroups\": {",
					"      \"$id\": \"#/properties/transactionGroups\",",
					"      \"type\": \"array\",",
					"      \"title\": \"The Transactiongroups Schema\",",
					"      \"items\": {",
					"        \"$id\": \"#/properties/transactionGroups/items\",",
					"        \"type\": \"object\",",
					"        \"title\": \"The Items Schema\",",
					"        \"required\": [",
					"          \"balance\",",
					"          \"date\",",
					"          \"transactions\"",
					"        ],",
					"        \"properties\": {",
					"          \"balance\": {",
					"            \"$id\": \"#/properties/transactionGroups/items/properties/balance\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Balance Schema\",",
					"            \"required\": [",
					"              \"currencyIsoCode\",",
					"              \"value\"",
					"            ],",
					"            \"properties\": {",
					"              \"currencyIsoCode\": {",
					"                \"$id\": \"#/properties/transactionGroups/items/properties/balance/properties/currencyIsoCode\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Currencyisocode Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"CHF\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"value\": {",
					"                \"$id\": \"#/properties/transactionGroups/items/properties/balance/properties/value\",",
					"                \"type\": \"number\",",
					"                \"title\": \"The Value Schema\",",
					"                \"default\": 0.0,",
					"                \"examples\": [",
					"                  5451805.25",
					"                ]",
					"              }",
					"            }",
					"          },",
					"          \"date\": {",
					"            \"$id\": \"#/properties/transactionGroups/items/properties/date\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Date Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"2019-11-29\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"transactions\": {",
					"            \"$id\": \"#/properties/transactionGroups/items/properties/transactions\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The Transactions Schema\",",
					"            \"items\": {",
					"              \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items\",",
					"              \"type\": \"object\",",
					"              \"title\": \"The Items Schema\",",
					"              \"required\": [",
					"                \"id\",",
					"                \"accountId\",",
					"                \"valutaDate\",",
					"                \"bookingDate\",",
					"                \"booked\",",
					"                \"amount\",",
					"                \"creditorAccount\",",
					"                \"debtorAccount\",",
					"                \"end2endID\",",
					"                \"referenceNumber\",",
					"                \"bookingText\",",
					"                \"referenceText\"",
					"              ],",
					"              \"properties\": {",
					"                \"id\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/id\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Id Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"__ID__4b3261526f43483250734f78384c3965cc49b2e4f7cbe47097468e80074831cef8013b46\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"accountId\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/accountId\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Accountid Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"__ID__4b3261526f43483250734f78384c3965cf4aba2d610eb44b9e8acefccdfc6fdeabe3a6\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"valutaDate\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/valutaDate\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Valutadate Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"2019-11-29\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"bookingDate\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/bookingDate\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Bookingdate Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"2019-11-29\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"booked\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/booked\",",
					"                  \"type\": \"boolean\",",
					"                  \"title\": \"The Booked Schema\",",
					"                  \"default\": false,",
					"                  \"examples\": [",
					"                    true",
					"                  ]",
					"                },",
					"                \"amount\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/amount\",",
					"                  \"type\": \"object\",",
					"                  \"title\": \"The Amount Schema\",",
					"                  \"required\": [",
					"                    \"currencyIsoCode\",",
					"                    \"value\"",
					"                  ],",
					"                  \"properties\": {",
					"                    \"currencyIsoCode\": {",
					"                      \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/amount/properties/currencyIsoCode\",",
					"                      \"type\": \"string\",",
					"                      \"title\": \"The Currencyisocode Schema\",",
					"                      \"default\": \"\",",
					"                      \"examples\": [",
					"                        \"CHF\"",
					"                      ],",
					"                      \"pattern\": \"^(.*)$\"",
					"                    },",
					"                    \"value\": {",
					"                      \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/amount/properties/value\",",
					"                      \"type\": \"integer\",",
					"                      \"title\": \"The Value Schema\",",
					"                      \"default\": 0,",
					"                      \"examples\": [",
					"                        929012",
					"                      ]",
					"                    }",
					"                  }",
					"                },",
					"                \"creditorAccount\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/creditorAccount\",",
					"                  \"type\": \"null\",",
					"                  \"title\": \"The Creditoraccount Schema\",",
					"                  \"default\": null,",
					"                  \"examples\": [",
					"                    null",
					"                  ]",
					"                },",
					"                \"debtorAccount\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/debtorAccount\",",
					"                  \"type\": \"null\",",
					"                  \"title\": \"The Debtoraccount Schema\",",
					"                  \"default\": null,",
					"                  \"examples\": [",
					"                    null",
					"                  ]",
					"                },",
					"                \"end2endID\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/end2endID\",",
					"                  \"type\": \"null\",",
					"                  \"title\": \"The End2endid Schema\",",
					"                  \"default\": null,",
					"                  \"examples\": [",
					"                    null",
					"                  ]",
					"                },",
					"                \"referenceNumber\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/referenceNumber\",",
					"                  \"type\": \"null\",",
					"                  \"title\": \"The Referencenumber Schema\",",
					"                  \"default\": null,",
					"                  \"examples\": [",
					"                    null",
					"                  ]",
					"                },",
					"                \"bookingText\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/bookingText\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Bookingtext Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"ESR Payment Entry  10000019\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"referenceText\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/referenceText\",",
					"                  \"type\": \"null\",",
					"                  \"title\": \"The Referencetext Schema\",",
					"                  \"default\": null,",
					"                  \"examples\": [",
					"                    null",
					"                  ]",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            189",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            19",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"transactionsListSchema\", transactionsListSchema);",
					"",
					"",
					"/* function for getting custody accounts*/",
					"postman.setGlobalVariable(\"getCustodyAccounts\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/cuacs/${pm.environment.get(\"tenantId_assets\")}/v1/cuacs`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json; charset=UTF-8',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            console.log(res.json());",
					"            pm.environment.set(\"_tmp_cuacsId\", res.json()._embedded.cuacs[0].id);",
					"            console.log(\"Custody account ID: \" + pm.environment.get(\"_tmp_cuacsId\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"",
					"/* function for getting positions by custody account*/",
					"postman.setGlobalVariable(\"getPositionsByCustodyAccount\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/cuacs/${pm.environment.get(\"tenantId_assets\")}/v1/cuacs/${pm.environment.get(\"_tmp_cuacsId\")}/positions`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json; charset=UTF-8',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            console.log(res.json());",
					"            pm.environment.set(\"_tmp_positionsId\", res.json()._embedded.positions[0].id);",
					"            console.log(\"Position ID: \" + pm.environment.get(\"_tmp_positionsId\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"",
					"",
					"/* function for getting transactions by custody account*/",
					"postman.setGlobalVariable(\"getTransactionsByCustodyAccount\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/cuacs/${pm.environment.get(\"tenantId_assets\")}/v1/cuacs/${pm.environment.get(\"_tmp_cuacsId\")}/transactions`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json; charset=UTF-8',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            console.log(res.json());",
					"            pm.environment.set(\"_tmp_transactionsId\", res.json()._embedded.transactions[0].id);",
					"            console.log(\"Transaction ID: \" + pm.environment.get(\"_tmp_transactionsId\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for getting asset id from asset list request*/",
					"postman.setGlobalVariable(\"getAssetsList\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/portfolios/${pm.environment.get(\"tenantId_assets\")}/v1/portfolios/${pm.environment.get(\"_tmp_portfolioId\")}/assets`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"            })",
					"        }    ",
					"}, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            console.log(res.json());\t\t\t",
					"            pm.environment.set(\"_tmp_assetsId\", res.json()._embedded.assets[0].id);",
					"            console.log(\"New asset ID: \" + pm.environment.get(\"_tmp_assetsId\"));",
					"        }                          ",
					"    });",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "6b447815-28c4-44d5-9732-f0f06683758c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "206bcec8-8c22-442f-80cc-58e24afbb17b",
			"key": "EPIC",
			"value": "PRODUCT-6323",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}