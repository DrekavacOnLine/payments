{
	"info": {
		"_postman_id": "1a9c3302-aaed-4c3c-8db0-ff109815a7d0",
		"name": "MODULE: Payments (actual)",
		"description": "Integration of payment endpoints for SEPA and SWIFT payments against DBAN\r\n\r\nBased on clarification call from 24th of August 2018 efforts have been estimated to 140PD of development\r\n\r\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Tests",
			"item": [
				{
					"name": "#INIT",
					"item": [
						{
							"name": "_Test session init",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
										"exec": [
											"//reset global variables for controling execution flow",
											"eval(globals.cleanup)();",
											"//clear list of executed TestRail tests",
											"pm.environment.set(\"testRailTestsInRun\",\"\");   ",
											"",
											"//specify list of tests to be executed in exact order",
											"//const testsScope = \"Full\"; [Full|Core|Full+TestRail]",
											"let testsScope = data.testsScope;",
											"",
											"var newmanRun = data.newmanRun;",
											"if (newmanRun){ ",
											"    pm.globals.set(\"newmanRun\",data.newmanRun);",
											"    console.log(\"dataFile/newmanRun: \" + newmanRun);",
											"} else {",
											"    pm.globals.set(\"newmanRun\", 0);",
											"    console.log(\"newmanRun, default value: 0\");",
											"}",
											"",
											"var contractNumber = data.contractNumber;",
											"if (contractNumber){ ",
											"    pm.environment.set(\"contract\",JSON.parse(data.contractNumber));",
											"    console.log(\"dataFile/contractNumber: \" + contractNumber);",
											"}",
											"",
											"var paymentType = data.paymentType;",
											"if (paymentType){ ",
											"    pm.environment.set(\"paymentType\",data.paymentType);",
											"    console.log(\"dataFile/paymentType: \" + paymentType);",
											"}",
											"var beneficiaryAccount = data.beneficiaryAccountNo;",
											"if (beneficiaryAccount){ ",
											"    pm.environment.set(\"beneficiaryAccount\",data.beneficiaryAccountNo);",
											"    console.log(\"dataFile/beneficiaryAccount: \" + beneficiaryAccount);",
											"}",
											"var debtorAccountNo = data.debtorAccountNo;",
											"if (debtorAccountNo){ ",
											"    pm.environment.set(\"debtorAccountNo\",data.debtorAccountNo);",
											"    console.log(\"dataFile/debtorAccountNo: \" + debtorAccountNo);",
											"}",
											"var debtorAccountName = data.debtorAccountName;",
											"if (debtorAccountName){ ",
											"    pm.environment.set(\"debtorAccountName\",data.debtorAccountName);",
											"    console.log(\"dataFile/debtorAccountName: \" + debtorAccountName);",
											"}",
											"var debtorStreetName = data.debtorStreetName;",
											"if (debtorStreetName){ ",
											"    pm.environment.set(\"debtorStreetName\",data.debtorStreetName);",
											"    console.log(\"dataFile/debtorStreetName: \" + debtorStreetName);",
											"}",
											"var debtorPostalCode = data.debtorPostalCode;",
											"if (debtorPostalCode){ ",
											"    pm.environment.set(\"debtorPostalCode\",data.debtorPostalCode);",
											"    console.log(\"dataFile/debtorPostalCode: \" + debtorPostalCode);",
											"}",
											"var debtorTownName = data.debtorTownName;",
											"if (debtorTownName){ ",
											"    pm.environment.set(\"debtorTownName\",data.debtorTownName);",
											"    console.log(\"dataFile/debtorTownName: \" + debtorTownName);",
											"}",
											"var creditorAccountNo2 = data.creditorAccountNo2;",
											"if (creditorAccountNo2){ ",
											"    pm.environment.set(\"creditorAccountNo2\",data.creditorAccountNo2);",
											"    console.log(\"dataFile/creditorAccountNo2: \" + creditorAccountNo2);",
											"}",
											"var creditorAccountNo = data.creditorAccountNo;",
											"if (creditorAccountNo){ ",
											"    pm.environment.set(\"creditorAccountNo\",data.creditorAccountNo);",
											"    console.log(\"dataFile/creditorAccountNo: \" + creditorAccountNo);",
											"}",
											"var creditorAccountNoUK = data.creditorAccountNoUK;",
											"if (creditorAccountNoUK){ ",
											"    pm.environment.set(\"creditorAccountNoUK\",data.creditorAccountNoUK);",
											"    console.log(\"dataFile/creditorAccountNoUK: \" + creditorAccountNoUK);",
											"}",
											"var creditorAccountNoSwisDomestic = data.creditorAccountNoSwisDomestic;",
											"if (creditorAccountNoSwisDomestic){ ",
											"    pm.environment.set(\"creditorAccountNoSwisDomestic\",data.creditorAccountNoSwisDomestic);",
											"    console.log(\"dataFile/creditorAccountNoSwisDomestic: \" + creditorAccountNoSwisDomestic);",
											"}",
											"var creditorAccountNoBalanceAdjustment = data.creditorAccountNoBalanceAdjustment;",
											"if (creditorAccountNoBalanceAdjustment){ ",
											"    pm.environment.set(\"creditorAccountNoBalanceAdjustment\",data.creditorAccountNoBalanceAdjustment);",
											"    console.log(\"dataFile/creditorAccountNoBalanceAdjustment: \" + creditorAccountNoBalanceAdjustment);",
											"}",
											"var creditorAgentCountry = data.creditorAgentCountry;",
											"if (creditorAgentCountry){ ",
											"    pm.environment.set(\"creditorAgentCountry\",data.creditorAgentCountry);",
											"    console.log(\"dataFile/creditorAgentCountry: \" + creditorAgentCountry);",
											"}",
											"var currencyCode = data.currencyCode;",
											"if (currencyCode){ ",
											"    pm.environment.set(\"currencyCode\",data.currencyCode);",
											"    console.log(\"dataFile/currencyCode: \" + currencyCode);",
											"}",
											"var endToEndId = data.endToEndId;",
											"if (endToEndId){ ",
											"    pm.environment.set(\"endToEndId\",data.endToEndId);",
											"    console.log(\"dataFile/endToEndId: \" + endToEndId);",
											"}",
											"var postalAccountNo = data.postalAccountNo;",
											"if (postalAccountNo){ ",
											"    pm.environment.set(\"postalAccountNo\",data.postalAccountNo);",
											"    console.log(\"dataFile/postalAccountNo: \" + postalAccountNo);",
											"}",
											"var orangeAccountNo = data.orangeAccountNo;",
											"if (orangeAccountNo){ ",
											"    pm.environment.set(\"orangeAccountNo\",data.orangeAccountNo);",
											"    console.log(\"dataFile/orangeAccountNo: \" + orangeAccountNo);",
											"}",
											"var creditorAccountNoSWIFT = data.creditorAccountNoSWIFT;",
											"if (creditorAccountNoSWIFT){ ",
											"    pm.environment.set(\"creditorAccountNoSWIFT\",data.creditorAccountNoSWIFT);",
											"    console.log(\"dataFile/creditorAccountNoSWIFT: \" + creditorAccountNoSWIFT);",
											"}",
											"var creditorAccountNoSEPA = data.creditorAccountNoSEPA;",
											"if (creditorAccountNoSEPA){ ",
											"    pm.environment.set(\"creditorAccountNoSEPA\",data.creditorAccountNoSEPA);",
											"    console.log(\"dataFile/creditorAccountNoSEPA: \" + creditorAccountNoSEPA);",
											"}",
											"var creditorAgentBicSWIFT = data.creditorAgentBicSWIFT;",
											"if (creditorAgentBicSWIFT){ ",
											"    pm.environment.set(\"creditorAgentBicSWIFT\",data.creditorAgentBicSWIFT);",
											"    console.log(\"dataFile/creditorAgentBicSWIFT: \" + creditorAgentBicSWIFT);",
											"}",
											"var creditorAgentBankCodeSWIFT = data.creditorAgentBankCodeSWIFT;",
											"if (creditorAgentBankCodeSWIFT){ ",
											"    pm.environment.set(\"creditorAgentBankCodeSWIFT\",data.creditorAgentBankCodeSWIFT);",
											"    console.log(\"dataFile/creditorAgentBankCodeSWIFT: \" + creditorAgentBankCodeSWIFT);",
											"}",
											"var creditorAgentBicSEPA = data.creditorAgentBicSEPA;",
											"if (creditorAgentBicSEPA){ ",
											"    pm.environment.set(\"creditorAgentBicSEPA\",data.creditorAgentBicSEPA);",
											"    console.log(\"dataFile/creditorAgentBicSEPA: \" + creditorAgentBicSEPA);",
											"}",
											"var structuredRemittanceRF = data.structuredRemittanceRF;",
											"if (structuredRemittanceRF){ ",
											"    pm.environment.set(\"structuredRemittanceRF\",data.structuredRemittanceRF);",
											"    console.log(\"dataFile/structuredRemittanceRF: \" + structuredRemittanceRF);",
											"}",
											"var creditorAccountNoSWIFTBankAcco = data.creditorAccountNoSWIFTBankAcco;",
											"if (creditorAccountNoSWIFTBankAcco){ ",
											"    pm.environment.set(\"creditorAccountNoSWIFTBankAcco\",data.creditorAccountNoSWIFTBankAcco);",
											"    console.log(\"dataFile/creditorAccountNoSWIFTBankAcco: \" + creditorAccountNoSWIFTBankAcco);",
											"}",
											"var creditorAgentName1SWIFT = data.creditorAgentName1SWIFT;",
											"if (creditorAgentName1SWIFT){ ",
											"    pm.environment.set(\"creditorAgentName1SWIFT\",data.creditorAgentName1SWIFT);",
											"    console.log(\"dataFile/creditorAgentName1SWIFT: \" + creditorAgentName1SWIFT);",
											"}",
											"var creditorAgentName2SWIFT = data.creditorAgentName2SWIFT;",
											"if (creditorAgentName2SWIFT){ ",
											"    pm.environment.set(\"creditorAgentName2SWIFT\",data.creditorAgentName2SWIFT);",
											"    console.log(\"dataFile/creditorAgentName2SWIFT: \" + creditorAgentName2SWIFT);",
											"}",
											"var creditorAgentStreetSWIFT = data.creditorAgentStreetSWIFT;",
											"if (creditorAgentStreetSWIFT){ ",
											"    pm.environment.set(\"creditorAgentStreetSWIFT\",data.creditorAgentStreetSWIFT);",
											"    console.log(\"dataFile/creditorAgentStreetSWIFT: \" + creditorAgentStreetSWIFT);",
											"}",
											"var creditorAgentCitySWIFT = data.creditorAgentCitySWIFT;",
											"if (creditorAgentCitySWIFT){ ",
											"    pm.environment.set(\"creditorAgentCitySWIFT\",data.creditorAgentCitySWIFT);",
											"    console.log(\"dataFile/creditorAgentCitySWIFT: \" + creditorAgentCitySWIFT);",
											"}",
											"var creditorAgentCountrySWIFT = data.creditorAgentCountrySWIFT;",
											"if (creditorAgentCountrySWIFT){ ",
											"    pm.environment.set(\"creditorAgentCountrySWIFT\",data.creditorAgentCountrySWIFT);",
											"    console.log(\"dataFile/creditorAgentCountrySWIFT: \" + creditorAgentCountrySWIFT);",
											"}",
											"var accountAlias = data.accountAlias;",
											"if (accountAlias){ ",
											"    pm.environment.set(\"accountAlias\",data.accountAlias);",
											"    console.log(\"dataFile/accountAlias: \" + accountAlias);",
											"} else {",
											"    pm.environment.set(\"accountAlias\",\"1501 CHF\");",
											"    console.log(\"dataFile/accountAlias: \" + \"1501 CHF\");",
											"}",
											"",
											"var userId_security = data.contractNumber;",
											"if (userId_security){ ",
											"    pm.environment.set(\"userId_security\",JSON.parse(data.contractNumber));",
											"    console.log(\"dataFile/userId_security: \" + userId_security);",
											"}",
											"",
											"//console.log(testsScope); ",
											"switch(testsScope) {",
											"    case \"Full\":",
											"        var testSession = [",
											"            \"_Generate access token K8S\",",
											"            \"Create SEPA payment (C36240114)\",",
											"            \"Deliver SEPA payment (C34775338)\",",
											"            \"Update SEPA payment (C36275415)\",",
											"            \"Delete SEPA payment (C36240104)\",",
											"            \"Create SEPA (standing order) payment (C53860900)\",",
											"            \"Deliver SEPA (standing order) payment (C53860904)\",",
											"            \"Update SEPA (standing order) payment (C53860903)\",",
											"            \"Delete SEPA (standing order) payment (C53860905)\",",
											"            \"Create SWIFT payment (C36275411)\",",
											"            \"Create SWIFT payment V2 (C52650414)\",",
											"            \"Create SWIFT payment V3 (C52718222)\",",
											"            \"Deliver SWIFT payment (C36240103)\",",
											"            \"Update SWIFT payment (C36275416)\",",
											"            \"Delete SWIFT payment (C36240105)\", ",
											"            \"Create Orange payment (C48109263)\",",
											"            \"Deliver Orange payment (C49915362)\",",
											"            \"Update Orange payment (C48109272)\",",
											"            \"Delete Orange payment (C49915363)\",",
											"            \"Create Orange (standing order) payment (C49915384)\",",
											"            \"Deliver Orange (standing order) payment (C49915385)\",",
											"            \"Update Orange (standing order) payment (C49915387)\",",
											"            \"Delete Orange (standing order) payment (C49915386)\",",
											"            \"Create Red payment (C51026510)\",",
											"            \"Deliver Red payment (C51026511)\",",
											"            \"Update Red payment (ToDo)\",",
											"            \"Delete Red payment (ToDo)\",",
											"            \"Create Red (standing order) payment (C52949280)\",",
											"            \"Deliver Red (standing order) payment (C52992053)\",",
											"            \"Update Red (standing order) payment (C52949281)\",",
											"            \"Delete Red (standing order) payment (C52992055)\",",
											"            \"Create Swiss domestic payment (C45840620)\",",
											"            \"Deliver Swiss domestic payment (C45989797)\",",
											"            \"Update Swiss domestic payment (C45840627)\",",
											"            \"Delete Swiss domestic payment (C45989799)\",",
											"            \"Create Swiss domestic (standing order) payment (C45989795)\",",
											"            \"Deliver Swiss domestic (standing order) payment (C45989798)\",",
											"            \"Update Swiss domestic (standing order) payment (C45989796)\",",
											"            \"Delete Swiss domestic (standing order) payment (C45989800)\",",
											"            \"Create balance adjustment payment (C47415764)\",",
											"            \"Deliver balance adjustment payment (C47473069)\",",
											"            \"Update balance adjustment payment (C47473068)\",",
											"            \"Delete balance adjustment payment (C47489450)\",",
											"            \"Create QR-bill payment (C50483879)\",",
											"            \"Deliver QR-bill payment (C50880198)\",",
											"            \"Update QR-bill payment (C50483885)\",",
											"            \"Delete QR-bill payment (C51051785)\",",
											"            \"Create QR-bill (standing order) payment (C50483887)\",",
											"            \"Deliver QR-bill (standing order) payment (C51051788)\",",
											"            \"Update QR-bill (standing order) payment (C50483889)\",",
											"            \"Delete QR-bill (standing order) payment (C51051791)\",",
											"            \"Create account transfer payment (C41939554)\",",
											"            \"Deliver account transfer payment (C41939552)\",",
											"            \"Update account transfer payment (C41939560)\",",
											"            \"Delete account transfer payment (C41939557)\",",
											"            \"Create account transfer (standing order) payment (C53388199)\",",
											"            \"Deliver account transfer (standing order) payment (C53388200)\",",
											"            \"Update account transfer (standing order) payment (C53388201)\",",
											"            \"Delete account transfer (account transfer) payment (C53388202)\",",
											"            \"Create UK payment (C51026517)\",",
											"            \"Deliver UK payment (C51026519)\",",
											"            \"Update UK payment (ToDo)\",",
											"            \"Delete UK payment (ToDo)\",",
											"            \"Create UK (standing order) payment (ToDo)\",",
											"            \"Deliver UK (standing order) payment (ToDo)\",",
											"            \"Update UK (standing order) payment (ToDo)\",",
											"            \"Delete UK (standing order) Payment (ToDo)\",",
											"            \"Search Payment Returns Unique Pages (C49445322)\",",
											"            \"Search Payment calculates payments count regardles page and size parameters value (C49577618)\",",
											"            \"Search Payment number of returned payments matches to “totalElements” property value (ToDo)\",",
											"            \"Search Payment using filter by 'paymentStatuses' (ToDo)\",",
											"            \"Search Payment deleted payments aren't included (ToDo)\",",
											"            \"PayTo input validation for Alias as input parameter (C34380150)\",",
											"            \"Create payment template (ToDo)\",",
											"            \"Deliver payment template (ToDo)\",",
											"            \"Delete payment template (ToDo)\",",
											"            \"Deliver payments in bulk (ToDo)\"",
											"            ]; break;",
											"    case \"Core\":",
											"        var testSession = [",
											"            \"_Generate access token K8S\",",
											"            \"Create SEPA payment (C36240114)\",",
											"            \"Deliver SEPA payment (C34775338)\",",
											"            \"Update SEPA payment (C36275415)\",",
											"            \"Delete SEPA payment (C36240104)\",",
											"            //\"Create SEPA (standing order) payment (C53860900)\",",
											"            //\"Deliver SEPA (standing order) payment (C53860904)\",",
											"            //\"Update SEPA (standing order) payment (C53860903)\",",
											"            //\"Delete SEPA (standing order) payment (C53860905)\",",
											"            \"Create SWIFT payment (C36275411)\",",
											"            \"Create SWIFT payment V2 (C52650414)\",",
											"            \"Create SWIFT payment V3 (C52718222)\",",
											"            \"Deliver SWIFT payment (C36240103)\",",
											"            \"Update SWIFT payment (C36275416)\",",
											"            \"Delete SWIFT payment (C36240105)\", ",
											"            \"Create Orange payment (C48109263)\",",
											"            \"Deliver Orange payment (C49915362)\",",
											"            \"Update Orange payment (C48109272)\",",
											"            \"Delete Orange payment (C49915363)\",",
											"            //\"Create Orange (standing order) payment (C49915384)\",",
											"            //\"Deliver Orange (standing order) payment (C49915385)\",",
											"            //\"Update Orange (standing order) payment (C49915387)\",",
											"            //\"Delete Orange (standing order) payment (C49915386)\",",
											"            \"Create Red payment (C51026510)\",",
											"            \"Deliver Red payment (C51026511)\",",
											"            \"Update Red payment (ToDo)\",",
											"            \"Delete Red payment (ToDo)\",",
											"            //\"Create Red (standing order) payment (C52949280)\",",
											"            //\"Deliver Red (standing order) payment (C52992053)\",",
											"            //\"Update Red (standing order) payment (C52949281)\",",
											"            //\"Delete Red (standing order) payment (C52992055)\",",
											"            \"Create Swiss domestic payment (C45840620)\",",
											"            \"Deliver Swiss domestic payment (C45989797)\",",
											"            \"Update Swiss domestic payment (C45840627)\",",
											"            \"Delete Swiss domestic payment (C45989799)\",",
											"            //\"Create Swiss domestic (standing order) payment (C45989795)\",",
											"            //\"Deliver Swiss domestic (standing order) payment (C45989798)\",",
											"            //\"Update Swiss domestic (standing order) payment (C45989796)\",",
											"            //\"Delete Swiss domestic (standing order) payment (C45989800)\",",
											"            \"Create balance adjustment payment (C47415764)\",",
											"            \"Deliver balance adjustment payment (C47473069)\",",
											"            \"Update balance adjustment payment (C47473068)\",",
											"            \"Delete balance adjustment payment (C47489450)\",",
											"            \"Create QR-bill payment (C50483879)\",",
											"            \"Deliver QR-bill payment (C50880198)\",",
											"            \"Update QR-bill payment (C50483885)\",",
											"            \"Delete QR-bill payment (C51051785)\",",
											"            //\"Create QR-bill (standing order) payment (C50483887)\",",
											"            //\"Deliver QR-bill (standing order) payment (C51051788)\",",
											"            //\"Update QR-bill (standing order) payment (C50483889)\",",
											"            //\"Delete QR-bill (standing order) payment (C51051791)\",",
											"            \"Create account transfer payment (C41939554)\",",
											"            \"Deliver account transfer payment (C41939552)\",",
											"            \"Update account transfer payment (C41939560)\",",
											"            \"Delete account transfer payment (C41939557)\",",
											"            //\"Create account transfer (standing order) payment (C53388199)\",",
											"            //\"Deliver account transfer (standing order) payment (C53388200)\",",
											"            //\"Update account transfer (standing order) payment (C53388201)\",",
											"            //\"Delete account transfer (account transfer) payment (C53388202)\",",
											"            \"Search Payment Returns Unique Pages (C49445322)\",",
											"            \"Search Payment calculates payments count regardles page and size parameters value (C49577618)\",",
											"            \"Search Payment number of returned payments matches to “totalElements” property value (ToDo)\",",
											"            \"Search Payment using filter by 'paymentStatuses' (ToDo)\",",
											"            \"Search Payment deleted payments aren't included (ToDo)\",",
											"            \"PayTo input validation for Alias as input parameter (C34380150)\",",
											"            \"Create payment template (ToDo)\",",
											"            \"Deliver payment template (ToDo)\",",
											"            \"Delete payment template (ToDo)\",",
											"            \"Deliver payments in bulk (ToDo)\"",
											"            ]; break;",
											"    case \"Quick\":",
											"        var testSession = [",
											"            \"_Generate access token K8S\",",
											"            \"PayTo input validation for Alias as input parameter (C34380150)\",",
											"            \"Create payment template (ToDo)\",",
											"            \"Deliver payment template (ToDo)\",",
											"            \"Delete payment template (ToDo)\",",
											"            \"Deliver payments in bulk (ToDo)\"            ",
											"            ]; break;",
											"    case \"TestRailClean\":        ",
											"        var testSession = [",
											"            \"_Test session close\"",
											"            ]; break;",
											"    default:",
											"        throw new Error(\"No tests selected for execution!\")",
											"}        ",
											"    ",
											"// Session initiate from PrS using eval()",
											"eval(globals.sessionInit)(testSession, \"testSession\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "OPTIONS",
								"header": [],
								"url": {
									"raw": "httpbin.org/uuid",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"uuid"
									]
								}
							},
							"response": []
						},
						{
							"name": "_Generate access token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ae9a03b6-e62e-48de-b80c-7144951c24e0",
										"exec": [
											"var requestsToRun = [",
											"        \"GetAuthorizationCode\",",
											"        \"GetAccessToken\"",
											"    ]; ",
											"",
											"// Session initiate from PrS using eval()",
											"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "da97c8d7-19cf-460d-b66c-1dd884a89f7a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "httpbin.org/uuid",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"uuid"
									]
								}
							},
							"response": []
						},
						{
							"name": "_Generate access token K8S",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ae9a03b6-e62e-48de-b80c-7144951c24e0",
										"exec": [
											"var requestsToRun = [",
											"        \"getAuthTestToken\"",
											"    ]; ",
											"",
											"// Session initiate from PrS using eval()",
											"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "da97c8d7-19cf-460d-b66c-1dd884a89f7a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "OPTIONS",
								"header": [],
								"url": {
									"raw": "httpbin.org/uuid",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"uuid"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Payments: Payment type",
					"item": [
						{
							"name": "SEPA",
							"item": [
								{
									"name": "Standing order",
									"item": [
										{
											"name": "Create SEPA (standing order) payment (C53860900)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
														"exec": [
															"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
															"eval(globals.testsExecuted)(testRailTestCases);",
															"",
															"var requestsToRun = [",
															"        \"createPaymentSepaSO\",",
															"        \"deletePaymentSepaSO\"",
															"    ]; ",
															"    pm.globals.set(\"_tr_createPaymentSepaSO\",testRailTestCases);",
															"    pm.globals.set(\"_tr_deletePaymentSepaSO\",\"<cleanUp>\");",
															"",
															"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
															"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "httpbin.org/uuid",
													"host": [
														"httpbin",
														"org"
													],
													"path": [
														"uuid"
													]
												},
												"description": "Bug: PRODUCT-12186"
											},
											"response": []
										},
										{
											"name": "Deliver SEPA (standing order) payment (C53860904)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
														"exec": [
															"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
															"eval(globals.testsExecuted)(testRailTestCases);",
															"",
															"var requestsToRun = [",
															"        \"createPaymentSepaSO\",",
															"        \"getPaymentSepaSO\",",
															"        \"deletePaymentSepaSO\"",
															"    ]; ",
															"    pm.globals.set(\"_tr_createPaymentSepaSO\",\"<preCondition>\");",
															"    pm.globals.set(\"_tr_getPaymentSepaSO\",testRailTestCases);",
															"    pm.globals.set(\"_tr_deletePaymentSepaSO\",\"<cleanUp>\");",
															"",
															"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
															"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "httpbin.org/uuid",
													"host": [
														"httpbin",
														"org"
													],
													"path": [
														"uuid"
													]
												},
												"description": "Bug: PRODUCT-12186"
											},
											"response": []
										},
										{
											"name": "Update SEPA (standing order) payment (C53860903)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
														"exec": [
															"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
															"eval(globals.testsExecuted)(testRailTestCases);",
															"",
															"var requestsToRun = [",
															"        \"createPaymentSepaSO\",",
															"        \"updatePaymentSepaSO\",",
															"        \"deletePaymentSepaSO\"",
															"    ]; ",
															"    pm.globals.set(\"_tr_createPaymentSepaSO\",\"<preCondition>\");",
															"    pm.globals.set(\"_tr_updatePaymentSepaSO\",testRailTestCases);",
															"    pm.globals.set(\"_tr_deletePaymentSepaSO\",\"<cleanUp>\");",
															"",
															"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
															"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "httpbin.org/uuid",
													"host": [
														"httpbin",
														"org"
													],
													"path": [
														"uuid"
													]
												},
												"description": "Bug: PRODUCT-12186"
											},
											"response": []
										},
										{
											"name": "Delete SEPA (standing order) payment (C53860905)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
														"exec": [
															"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
															"eval(globals.testsExecuted)(testRailTestCases);",
															"",
															"var requestsToRun = [",
															"        \"createPaymentSepaSO\",",
															"        \"deletePaymentSepaSO\"",
															"    ]; ",
															"    pm.globals.set(\"_tr_createPaymentSepaSO\",\"<preCondition>\");",
															"    pm.globals.set(\"_tr_deletePaymentSepaSO\",testRailTestCases);",
															"",
															"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
															"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "httpbin.org/uuid",
													"host": [
														"httpbin",
														"org"
													],
													"path": [
														"uuid"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Create SEPA payment (C36240114)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
												"exec": [
													"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
													"eval(globals.testsExecuted)(testRailTestCases);",
													"",
													"var requestsToRun = [",
													"        \"createPaymentSepa\",",
													"        \"deletePaymentSepa\"",
													"    ]; ",
													"    pm.globals.set(\"_tr_createPaymentSepa\",testRailTestCases);",
													"    pm.globals.set(\"_tr_deletePaymentSepa\",\"<cleanUp>\");",
													"",
													"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
													"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "httpbin.org/uuid",
											"host": [
												"httpbin",
												"org"
											],
											"path": [
												"uuid"
											]
										}
									},
									"response": []
								},
								{
									"name": "Deliver SEPA payment (C34775338)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
												"exec": [
													"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
													"eval(globals.testsExecuted)(testRailTestCases);",
													"",
													"var requestsToRun = [",
													"        \"createPaymentSepa\",",
													"        \"getPaymentSepa\",",
													"        \"deletePaymentSepa\"",
													"    ]; ",
													"    pm.globals.set(\"_tr_createPaymentSepa\",\"<preCondition>\");",
													"    pm.globals.set(\"_tr_getPaymentSepa\",testRailTestCases);",
													"    pm.globals.set(\"_tr_deletePaymentSepa\",\"<cleanUp>\");",
													"",
													"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
													"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "httpbin.org/uuid",
											"host": [
												"httpbin",
												"org"
											],
											"path": [
												"uuid"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update SEPA payment (C36275415)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
												"exec": [
													"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
													"eval(globals.testsExecuted)(testRailTestCases);",
													"",
													"var requestsToRun = [",
													"        \"createPaymentSepa\",",
													"        \"updatePaymentSepa\",",
													"        \"deletePaymentSepa\"",
													"    ]; ",
													"    pm.globals.set(\"_tr_createPaymentSepa\",\"<preCondition>\");",
													"    pm.globals.set(\"_tr_updatePaymentSepa\",testRailTestCases);",
													"    pm.globals.set(\"_tr_deletePaymentSepa\",\"<cleanUp>\");",
													"",
													"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
													"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "httpbin.org/uuid",
											"host": [
												"httpbin",
												"org"
											],
											"path": [
												"uuid"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete SEPA payment (C36240104)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
												"exec": [
													"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
													"eval(globals.testsExecuted)(testRailTestCases);",
													"",
													"var requestsToRun = [",
													"        \"createPaymentSepa\",",
													"        \"deletePaymentSepa\"",
													"    ]; ",
													"    pm.globals.set(\"_tr_createPaymentSepa\",\"<preCondition>\");",
													"    pm.globals.set(\"_tr_deletePaymentSepa\",testRailTestCases);",
													"",
													"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
													"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "httpbin.org/uuid",
											"host": [
												"httpbin",
												"org"
											],
											"path": [
												"uuid"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "SWIFT",
							"item": [
								{
									"name": "Create SWIFT payment (C36275411)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
												"exec": [
													"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
													"eval(globals.testsExecuted)(testRailTestCases);",
													"",
													"var requestsToRun = [",
													"        \"createPaymentSwift\",",
													"        \"deletePaymentSwift\"",
													"    ]; ",
													"    pm.globals.set(\"_tr_createPaymentSwift\",testRailTestCases);",
													"    pm.globals.set(\"_tr_deletePaymentSwift\",\"<cleanUp>\");",
													"",
													"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
													"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "httpbin.org/uuid",
											"host": [
												"httpbin",
												"org"
											],
											"path": [
												"uuid"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create SWIFT payment V2 (C52650414)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
												"exec": [
													"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
													"eval(globals.testsExecuted)(testRailTestCases);",
													"",
													"var requestsToRun = [",
													"        \"createPaymentSwiftV2\",",
													"        \"deletePaymentSwift\"",
													"    ]; ",
													"    pm.globals.set(\"_tr_createPaymentSwiftV2\",testRailTestCases);",
													"    pm.globals.set(\"_tr_deletePaymentSwift\",\"<cleanUp>\");",
													"",
													"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
													"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "httpbin.org/uuid",
											"host": [
												"httpbin",
												"org"
											],
											"path": [
												"uuid"
											]
										},
										"description": "Bug: PRODUCT-11910"
									},
									"response": []
								},
								{
									"name": "Create SWIFT payment V3 (C52718222)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
												"exec": [
													"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
													"eval(globals.testsExecuted)(testRailTestCases);",
													"",
													"var requestsToRun = [",
													"        \"createPaymentSwiftV3\",",
													"        \"deletePaymentSwift\"",
													"    ]; ",
													"    pm.globals.set(\"_tr_createPaymentSwiftV3\",testRailTestCases);",
													"    pm.globals.set(\"_tr_deletePaymentSwift\",\"<cleanUp>\");",
													"",
													"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
													"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "httpbin.org/uuid",
											"host": [
												"httpbin",
												"org"
											],
											"path": [
												"uuid"
											]
										}
									},
									"response": []
								},
								{
									"name": "Deliver SWIFT payment (C36240103)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
												"exec": [
													"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
													"eval(globals.testsExecuted)(testRailTestCases);",
													"",
													"var requestsToRun = [",
													"        \"createPaymentSwift\",",
													"        \"getPaymentSwift\",",
													"        \"deletePaymentSwift\"",
													"    ]; ",
													"    pm.globals.set(\"_tr_createPaymentSwift\",\"<preCondition>\");",
													"    pm.globals.set(\"_tr_getPaymentSwift\",testRailTestCases);",
													"    pm.globals.set(\"_tr_deletePaymentSwift\",\"<cleanUp>\");",
													"",
													"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
													"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "httpbin.org/uuid",
											"host": [
												"httpbin",
												"org"
											],
											"path": [
												"uuid"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update SWIFT payment (C36275416)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
												"exec": [
													"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
													"eval(globals.testsExecuted)(testRailTestCases);",
													"",
													"var requestsToRun = [",
													"        \"createPaymentSwift\",",
													"        \"updatePaymentSwift\",",
													"        \"deletePaymentSwift\"",
													"    ]; ",
													"    pm.globals.set(\"_tr_createPaymentSwift\",\"<preCondition>\");",
													"    pm.globals.set(\"_tr_updatePaymentSwift\",testRailTestCases);",
													"    pm.globals.set(\"_tr_deletePaymentSwift\",\"<cleanUp>\");",
													"",
													"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
													"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "httpbin.org/uuid",
											"host": [
												"httpbin",
												"org"
											],
											"path": [
												"uuid"
											]
										},
										"description": "PRODUCT-10872"
									},
									"response": []
								},
								{
									"name": "Delete SWIFT payment (C36240105)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
												"exec": [
													"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
													"eval(globals.testsExecuted)(testRailTestCases);",
													"",
													"var requestsToRun = [",
													"        \"createPaymentSwift\",",
													"        \"deletePaymentSwift\"",
													"    ]; ",
													"    pm.globals.set(\"_tr_createPaymentSwift\",\"<preCondition>\");",
													"    pm.globals.set(\"_tr_deletePaymentSwift\",testRailTestCases);",
													"",
													"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
													"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "httpbin.org/uuid",
											"host": [
												"httpbin",
												"org"
											],
											"path": [
												"uuid"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Swiss",
							"item": [
								{
									"name": "Orange",
									"item": [
										{
											"name": "Standing order",
											"item": [
												{
													"name": "Create Orange (standing order) payment (C49915384)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
																"exec": [
																	"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
																	"eval(globals.testsExecuted)(testRailTestCases);",
																	"",
																	"var requestsToRun = [",
																	"        \"createPaymentOrangeSO\",",
																	"        \"deletePaymentOrangeSO\"",
																	"    ]; ",
																	"    pm.globals.set(\"_tr_createPaymentOrangeSO\",testRailTestCases);",
																	"    pm.globals.set(\"_tr_deletePaymentOrangeSO\",\"<cleanUp>\");",
																	"",
																	"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
																	"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "HEAD",
														"header": [],
														"url": {
															"raw": "httpbin.org/uuid",
															"host": [
																"httpbin",
																"org"
															],
															"path": [
																"uuid"
															]
														}
													},
													"response": []
												},
												{
													"name": "Deliver Orange (standing order) payment (C49915385)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
																"exec": [
																	"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
																	"eval(globals.testsExecuted)(testRailTestCases);",
																	"",
																	"var requestsToRun = [",
																	"        \"createPaymentOrangeSO\",",
																	"        \"getPaymentOrangeSO\",",
																	"        \"deletePaymentOrangeSO\"",
																	"    ]; ",
																	"    pm.globals.set(\"_tr_createPaymentOrangeSO\",\"<preCondition>\");",
																	"    pm.globals.set(\"_tr_getPaymentOrangeSO\",testRailTestCases);",
																	"    pm.globals.set(\"_tr_deletePaymentOrangeSO\",\"<cleanUp>\");",
																	"",
																	"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
																	"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "HEAD",
														"header": [],
														"url": {
															"raw": "httpbin.org/uuid",
															"host": [
																"httpbin",
																"org"
															],
															"path": [
																"uuid"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update Orange (standing order) payment (C49915387)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
																"exec": [
																	"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
																	"eval(globals.testsExecuted)(testRailTestCases);",
																	"",
																	"var requestsToRun = [",
																	"        \"createPaymentOrangeSO\",",
																	"        \"updatePaymentOrangeSO\",",
																	"        \"deletePaymentOrangeSO\"",
																	"    ]; ",
																	"    pm.globals.set(\"_tr_createPaymentOrangeSO\",\"<preCondition>\");",
																	"    pm.globals.set(\"_tr_updatePaymentOrangeSO\",testRailTestCases);",
																	"    pm.globals.set(\"_tr_deletePaymentOrangeSO\",\"<cleanUp>\");",
																	"",
																	"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
																	"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "HEAD",
														"header": [],
														"url": {
															"raw": "httpbin.org/uuid",
															"host": [
																"httpbin",
																"org"
															],
															"path": [
																"uuid"
															]
														},
														"description": "PRODUCT-8395"
													},
													"response": []
												},
												{
													"name": "Delete Orange (standing order) payment (C49915386)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
																"exec": [
																	"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
																	"eval(globals.testsExecuted)(testRailTestCases);",
																	"",
																	"var requestsToRun = [",
																	"        \"createPaymentOrangeSO\",",
																	"        \"deletePaymentOrangeSO\"",
																	"    ]; ",
																	"    pm.globals.set(\"_tr_createPaymentOrangeSO\",\"<preCondition>\");",
																	"    pm.globals.set(\"_tr_deletePaymentOrangeSO\",testRailTestCases);",
																	"",
																	"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
																	"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "HEAD",
														"header": [],
														"url": {
															"raw": "httpbin.org/uuid",
															"host": [
																"httpbin",
																"org"
															],
															"path": [
																"uuid"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Create Orange payment (C48109263)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
														"exec": [
															"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
															"eval(globals.testsExecuted)(testRailTestCases);",
															"",
															"var requestsToRun = [",
															"        \"createPaymentOrange\",",
															"        \"deletePaymentOrange\"",
															"    ]; ",
															"    pm.globals.set(\"_tr_createPaymentOrange\",testRailTestCases);",
															"    pm.globals.set(\"_tr_deletePaymentOrange\",\"<cleanUp>\");",
															"",
															"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
															"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "httpbin.org/uuid",
													"host": [
														"httpbin",
														"org"
													],
													"path": [
														"uuid"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deliver Orange payment (C49915362)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
														"exec": [
															"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
															"eval(globals.testsExecuted)(testRailTestCases);",
															"",
															"var requestsToRun = [",
															"        \"createPaymentOrange\",",
															"        \"getPaymentOrange\",",
															"        \"deletePaymentOrange\"",
															"    ]; ",
															"    pm.globals.set(\"_tr_createPaymentOrange\",\"<preCondition>\");",
															"    pm.globals.set(\"_tr_getPaymentOrange\",testRailTestCases);",
															"    pm.globals.set(\"_tr_deletePaymentOrange\",\"<cleanUp>\");",
															"",
															"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
															"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "httpbin.org/uuid",
													"host": [
														"httpbin",
														"org"
													],
													"path": [
														"uuid"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Orange payment (C48109272)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
														"exec": [
															"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
															"eval(globals.testsExecuted)(testRailTestCases);",
															"",
															"var requestsToRun = [",
															"        \"createPaymentOrange\",",
															"        \"updatePaymentOrange\",",
															"        \"deletePaymentOrange\"",
															"    ]; ",
															"    pm.globals.set(\"_tr_createPaymentOrange\",\"<preCondition>\");",
															"    pm.globals.set(\"_tr_updatePaymentOrange\",testRailTestCases);",
															"    pm.globals.set(\"_tr_deletePaymentOrange\",\"<cleanUp>\");",
															"",
															"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
															"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "httpbin.org/uuid",
													"host": [
														"httpbin",
														"org"
													],
													"path": [
														"uuid"
													]
												},
												"description": "PRODUCT-8395"
											},
											"response": []
										},
										{
											"name": "Delete Orange payment (C49915363)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
														"exec": [
															"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
															"eval(globals.testsExecuted)(testRailTestCases);",
															"",
															"var requestsToRun = [",
															"        \"createPaymentOrange\",",
															"        \"deletePaymentOrange\"",
															"    ]; ",
															"    pm.globals.set(\"_tr_createPaymentOrange\",\"<preCondition>\");",
															"    pm.globals.set(\"_tr_deletePaymentOrange\",testRailTestCases);",
															"",
															"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
															"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "httpbin.org/uuid",
													"host": [
														"httpbin",
														"org"
													],
													"path": [
														"uuid"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Red",
									"item": [
										{
											"name": "Standing order",
											"item": [
												{
													"name": "Create Red (standing order) payment (C52949280)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
																"exec": [
																	"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
																	"eval(globals.testsExecuted)(testRailTestCases);",
																	"",
																	"var requestsToRun = [",
																	"        \"createPaymentRedSO\",",
																	"        \"deletePaymentRedSO\"",
																	"    ]; ",
																	"    pm.globals.set(\"_tr_createPaymentRedSO\",testRailTestCases);",
																	"    pm.globals.set(\"_tr_deletePaymentRedSO\",\"<cleanUp>\");",
																	"",
																	"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
																	"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "HEAD",
														"header": [],
														"url": {
															"raw": "httpbin.org/uuid",
															"host": [
																"httpbin",
																"org"
															],
															"path": [
																"uuid"
															]
														},
														"description": "PRODUCT-8395"
													},
													"response": []
												},
												{
													"name": "Deliver Red (standing order) payment (C52992053)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
																"exec": [
																	"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
																	"eval(globals.testsExecuted)(testRailTestCases);",
																	"",
																	"var requestsToRun = [",
																	"        \"createPaymentRedSO\",",
																	"        \"getPaymentRedSO\",",
																	"        \"deletePaymentRedSO\"",
																	"    ]; ",
																	"    pm.globals.set(\"_tr_createPaymentRedSO\",\"<preCondition>\");",
																	"    pm.globals.set(\"_tr_getPaymentRedSO\",testRailTestCases);",
																	"    pm.globals.set(\"_tr_deletePaymentRedSO\",\"<cleanUp>\");",
																	"",
																	"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
																	"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "HEAD",
														"header": [],
														"url": {
															"raw": "httpbin.org/uuid",
															"host": [
																"httpbin",
																"org"
															],
															"path": [
																"uuid"
															]
														},
														"description": "PRODUCT-8401"
													},
													"response": []
												},
												{
													"name": "Update Red (standing order) payment (C52949281)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
																"exec": [
																	"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
																	"eval(globals.testsExecuted)(testRailTestCases);",
																	"",
																	"var requestsToRun = [",
																	"        \"createPaymentRedSO\",",
																	"        \"updatePaymentRedSO\",",
																	"        \"deletePaymentRedSO\"",
																	"    ]; ",
																	"    pm.globals.set(\"_tr_createPaymentRedSO\",\"<preCondition>\");",
																	"    pm.globals.set(\"_tr_updatePaymentRedSO\",testRailTestCases);",
																	"    pm.globals.set(\"_tr_deletePaymentRedSO\",\"<cleanUp>\");",
																	"",
																	"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
																	"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "HEAD",
														"header": [],
														"url": {
															"raw": "httpbin.org/uuid",
															"host": [
																"httpbin",
																"org"
															],
															"path": [
																"uuid"
															]
														},
														"description": "PRODUCT-8395"
													},
													"response": []
												},
												{
													"name": "Delete Red (standing order) payment (C52992055)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
																"exec": [
																	"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
																	"eval(globals.testsExecuted)(testRailTestCases);",
																	"",
																	"var requestsToRun = [",
																	"        \"createPaymentRedSO\",",
																	"        \"deletePaymentRedSO\"",
																	"    ]; ",
																	"    pm.globals.set(\"_tr_createPaymentRedSO\",\"<preCondition>\");",
																	"    pm.globals.set(\"_tr_deletePaymentRedSO\",testRailTestCases);",
																	"",
																	"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
																	"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "HEAD",
														"header": [],
														"url": {
															"raw": "httpbin.org/uuid",
															"host": [
																"httpbin",
																"org"
															],
															"path": [
																"uuid"
															]
														},
														"description": "PRODUCT-8401"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Create Red payment (C51026510)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
														"exec": [
															"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
															"eval(globals.testsExecuted)(testRailTestCases);",
															"",
															"var requestsToRun = [",
															"        \"createPaymentRed\",",
															"        \"deletePaymentRed\"",
															"    ]; ",
															"    pm.globals.set(\"_tr_createPaymentRed\",testRailTestCases);",
															"    pm.globals.set(\"_tr_deletePaymentRed\",\"<cleanUp>\");",
															"",
															"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
															"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "httpbin.org/uuid",
													"host": [
														"httpbin",
														"org"
													],
													"path": [
														"uuid"
													]
												},
												"description": "PRODUCT-8395"
											},
											"response": []
										},
										{
											"name": "Deliver Red payment (C51026511)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
														"exec": [
															"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
															"eval(globals.testsExecuted)(testRailTestCases);",
															"",
															"var requestsToRun = [",
															"        \"createPaymentRed\",",
															"        \"getPaymentRed\",",
															"        \"deletePaymentRed\"",
															"    ]; ",
															"    pm.globals.set(\"_tr_createPaymentRed\",\"<preCondition>\");",
															"    pm.globals.set(\"_tr_getPaymentRed\",testRailTestCases);",
															"    pm.globals.set(\"_tr_deletePaymentRed\",\"<cleanUp>\");",
															"",
															"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
															"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "httpbin.org/uuid",
													"host": [
														"httpbin",
														"org"
													],
													"path": [
														"uuid"
													]
												},
												"description": "PRODUCT-8401"
											},
											"response": []
										},
										{
											"name": "Update Red payment (ToDo)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
														"exec": [
															"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
															"eval(globals.testsExecuted)(testRailTestCases);",
															"",
															"var requestsToRun = [",
															"        \"createPaymentRed\",",
															"        \"updatePaymentRed\",",
															"        \"deletePaymentRed\"",
															"    ]; ",
															"    pm.globals.set(\"_tr_createPaymentRed\",\"<preCondition>\");",
															"    pm.globals.set(\"_tr_updatePaymentRed\",testRailTestCases);",
															"    pm.globals.set(\"_tr_deletePaymentRed\",\"<cleanUp>\");",
															"",
															"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
															"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "httpbin.org/uuid",
													"host": [
														"httpbin",
														"org"
													],
													"path": [
														"uuid"
													]
												},
												"description": "PRODUCT-8395"
											},
											"response": []
										},
										{
											"name": "Delete Red payment (ToDo)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
														"exec": [
															"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
															"eval(globals.testsExecuted)(testRailTestCases);",
															"",
															"var requestsToRun = [",
															"        \"createPaymentRed\",",
															"        \"deletePaymentRed\"",
															"    ]; ",
															"    pm.globals.set(\"_tr_createPaymentRed\",\"<preCondition>\");",
															"    pm.globals.set(\"_tr_deletePaymentRed\",testRailTestCases);",
															"",
															"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
															"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "httpbin.org/uuid",
													"host": [
														"httpbin",
														"org"
													],
													"path": [
														"uuid"
													]
												},
												"description": "PRODUCT-8401"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Domestic",
									"item": [
										{
											"name": "Standing order",
											"item": [
												{
													"name": "Create Swiss domestic (standing order) payment (C45989795)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
																"exec": [
																	"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
																	"eval(globals.testsExecuted)(testRailTestCases);",
																	"",
																	"var requestsToRun = [",
																	"        \"createPaymentSwissDomesticSO\",",
																	"        \"deletePaymentSwissDomesticSO\"",
																	"    ]; ",
																	"    pm.globals.set(\"_tr_createPaymentSwissDomesticSO\",testRailTestCases);",
																	"    pm.globals.set(\"_tr_deletePaymentSwissDomesticSO\",\"<cleanUp>\");",
																	"",
																	"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
																	"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "HEAD",
														"header": [],
														"url": {
															"raw": "httpbin.org/uuid",
															"host": [
																"httpbin",
																"org"
															],
															"path": [
																"uuid"
															]
														}
													},
													"response": []
												},
												{
													"name": "Deliver Swiss domestic (standing order) payment (C45989798)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
																"exec": [
																	"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
																	"eval(globals.testsExecuted)(testRailTestCases);",
																	"",
																	"var requestsToRun = [",
																	"        \"createPaymentSwissDomesticSO\",",
																	"        \"getPaymentSwissDomesticSO\",",
																	"        \"deletePaymentSwissDomesticSO\"",
																	"    ]; ",
																	"    pm.globals.set(\"_tr_createPaymentSwissDomesticSO\",\"<preCondition>\");",
																	"    pm.globals.set(\"_tr_getPaymentSwissDomesticSO\",testRailTestCases);",
																	"    pm.globals.set(\"_tr_deletePaymentSwissDomesticSO\",\"<cleanUp>\");",
																	"",
																	"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
																	"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "HEAD",
														"header": [],
														"url": {
															"raw": "httpbin.org/uuid",
															"host": [
																"httpbin",
																"org"
															],
															"path": [
																"uuid"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update Swiss domestic (standing order) payment (C45989796)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
																"exec": [
																	"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
																	"eval(globals.testsExecuted)(testRailTestCases);",
																	"",
																	"var requestsToRun = [",
																	"        \"createPaymentSwissDomesticSO\",",
																	"        \"updatePaymentSwissDomesticSO\",",
																	"        \"deletePaymentSwissDomesticSO\"",
																	"    ]; ",
																	"    pm.globals.set(\"_tr_createPaymentSwissDomesticSO\",\"<preCondition>\");",
																	"    pm.globals.set(\"_tr_updatePaymentSwissDomesticSO\",testRailTestCases);",
																	"    pm.globals.set(\"_tr_deletePaymentSwissDomesticSO\",\"<cleanUp>\");",
																	"",
																	"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
																	"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "HEAD",
														"header": [],
														"url": {
															"raw": "httpbin.org/uuid",
															"host": [
																"httpbin",
																"org"
															],
															"path": [
																"uuid"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Swiss domestic (standing order) payment (C45989800)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
																"exec": [
																	"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
																	"eval(globals.testsExecuted)(testRailTestCases);",
																	"",
																	"var requestsToRun = [",
																	"        \"createPaymentSwissDomesticSO\",",
																	"        \"deletePaymentSwissDomesticSO\"",
																	"    ]; ",
																	"    pm.globals.set(\"_tr_createPaymentSwissDomesticSO\",\"<preCondition>\");",
																	"    pm.globals.set(\"_tr_deletePaymentSwissDomesticSO\",testRailTestCases);",
																	"",
																	"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
																	"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "HEAD",
														"header": [],
														"url": {
															"raw": "httpbin.org/uuid",
															"host": [
																"httpbin",
																"org"
															],
															"path": [
																"uuid"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Create Swiss domestic payment (C45840620)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
														"exec": [
															"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
															"eval(globals.testsExecuted)(testRailTestCases);",
															"",
															"var requestsToRun = [",
															"        \"createPaymentSwissDomestic\",",
															"        \"deletePaymentSwissDomestic\"",
															"    ]; ",
															"    pm.globals.set(\"_tr_createPaymentSwissDomestic\",testRailTestCases);",
															"    pm.globals.set(\"_tr_deletePaymentSwissDomestic\",\"<cleanUp>\");",
															"",
															"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
															"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "httpbin.org/uuid",
													"host": [
														"httpbin",
														"org"
													],
													"path": [
														"uuid"
													]
												},
												"description": "PRODUCT-11486"
											},
											"response": []
										},
										{
											"name": "Deliver Swiss domestic payment (C45989797)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
														"exec": [
															"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
															"eval(globals.testsExecuted)(testRailTestCases);",
															"",
															"var requestsToRun = [",
															"        \"createPaymentSwissDomestic\",",
															"        \"getPaymentSwissDomestic\",",
															"        \"deletePaymentSwissDomestic\"",
															"    ]; ",
															"    pm.globals.set(\"_tr_createPaymentSwissDomestic\",\"<preCondition>\");",
															"    pm.globals.set(\"_tr_getPaymentSwissDomestic\",testRailTestCases);",
															"    pm.globals.set(\"_tr_deletePaymentSwissDomestic\",\"<cleanUp>\");",
															"",
															"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
															"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "httpbin.org/uuid",
													"host": [
														"httpbin",
														"org"
													],
													"path": [
														"uuid"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Swiss domestic payment (C45840627)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
														"exec": [
															"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
															"eval(globals.testsExecuted)(testRailTestCases);",
															"",
															"var requestsToRun = [",
															"        \"createPaymentSwissDomestic\",",
															"        \"updatePaymentSwissDomestic\",",
															"        \"deletePaymentSwissDomestic\"",
															"    ]; ",
															"    pm.globals.set(\"_tr_createPaymentSwissDomestic\",\"<preCondition>\");",
															"    pm.globals.set(\"_tr_updatePaymentSwissDomestic\",testRailTestCases);",
															"    pm.globals.set(\"_tr_deletePaymentSwissDomestic\",\"<cleanUp>\");",
															"",
															"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
															"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "httpbin.org/uuid",
													"host": [
														"httpbin",
														"org"
													],
													"path": [
														"uuid"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Swiss domestic payment (C45989799)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
														"exec": [
															"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
															"eval(globals.testsExecuted)(testRailTestCases);",
															"",
															"var requestsToRun = [",
															"        \"createPaymentSwissDomestic\",",
															"        \"deletePaymentSwissDomestic\"",
															"    ]; ",
															"    pm.globals.set(\"_tr_createPaymentSwissDomestic\",\"<preCondition>\");",
															"    pm.globals.set(\"_tr_deletePaymentSwissDomestic\",testRailTestCases);",
															"",
															"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
															"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "httpbin.org/uuid",
													"host": [
														"httpbin",
														"org"
													],
													"path": [
														"uuid"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "UK",
							"item": [
								{
									"name": "Standing order",
									"item": [
										{
											"name": "Create UK (standing order) payment (ToDo)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
														"exec": [
															"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
															"eval(globals.testsExecuted)(testRailTestCases);",
															"",
															"var requestsToRun = [",
															"        \"createPaymentUKSO\",",
															"        \"deletePaymentUKSO\"",
															"    ]; ",
															"    pm.globals.set(\"_tr_createPaymentUKSO\",testRailTestCases);",
															"    pm.globals.set(\"_tr_deletePaymentUKSO\",\"<cleanUp>\");",
															"",
															"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
															"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "httpbin.org/uuid",
													"host": [
														"httpbin",
														"org"
													],
													"path": [
														"uuid"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deliver UK (standing order) payment (ToDo)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
														"exec": [
															"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
															"eval(globals.testsExecuted)(testRailTestCases);",
															"",
															"var requestsToRun = [",
															"        \"createPaymentUKSO\",",
															"        \"getPaymentUKSO\",",
															"        \"deletePaymentUKSO\"",
															"    ]; ",
															"    pm.globals.set(\"_tr_createPaymentUKSO\",\"<preCondition>\");",
															"    pm.globals.set(\"_tr_getPaymentUKSO\",testRailTestCases);",
															"    pm.globals.set(\"_tr_deletePaymentUKSO\",\"<cleanUp>\");",
															"",
															"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
															"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "httpbin.org/uuid",
													"host": [
														"httpbin",
														"org"
													],
													"path": [
														"uuid"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update UK (standing order) payment (ToDo)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
														"exec": [
															"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
															"eval(globals.testsExecuted)(testRailTestCases);",
															"",
															"var requestsToRun = [",
															"        \"createPaymentUKSO\",",
															"        \"updatePaymentUKSO\",",
															"        \"deletePaymentUKSO\"",
															"    ]; ",
															"    pm.globals.set(\"_tr_createPaymentUKSO\",\"<preCondition>\");",
															"    pm.globals.set(\"_tr_updatePaymentUKSO\",testRailTestCases);",
															"    pm.globals.set(\"_tr_deletePaymentUKSO\",\"<cleanUp>\");",
															"",
															"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
															"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "httpbin.org/uuid",
													"host": [
														"httpbin",
														"org"
													],
													"path": [
														"uuid"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete UK (standing order) Payment (ToDo)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
														"exec": [
															"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
															"eval(globals.testsExecuted)(testRailTestCases);",
															"",
															"var requestsToRun = [",
															"        \"createPaymentUKSO\",",
															"        \"deletePaymentUKSO\"",
															"    ]; ",
															"    pm.globals.set(\"_tr_createPaymentUKSO\",\"<preCondition>\");",
															"    pm.globals.set(\"_tr_deletePaymentUKSO\",testRailTestCases);",
															"",
															"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
															"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "httpbin.org/uuid",
													"host": [
														"httpbin",
														"org"
													],
													"path": [
														"uuid"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Create UK payment (C51026517)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
												"exec": [
													"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
													"eval(globals.testsExecuted)(testRailTestCases);",
													"",
													"var requestsToRun = [",
													"        \"createPaymentUK\",",
													"        \"deletePaymentUK\"",
													"    ]; ",
													"    pm.globals.set(\"_tr_createPaymentUK\",testRailTestCases);",
													"    pm.globals.set(\"_tr_deletePaymentUK\",\"<cleanUp>\");",
													"",
													"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
													"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "httpbin.org/uuid",
											"host": [
												"httpbin",
												"org"
											],
											"path": [
												"uuid"
											]
										},
										"description": "PRODUCT-8405"
									},
									"response": []
								},
								{
									"name": "Deliver UK payment (C51026519)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
												"exec": [
													"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
													"eval(globals.testsExecuted)(testRailTestCases);",
													"",
													"var requestsToRun = [",
													"        \"createPaymentUK\",",
													"        \"getPaymentUK\",",
													"        \"deletePaymentUK\"",
													"    ]; ",
													"    pm.globals.set(\"_tr_createPaymentUK\",\"<preCondition>\");",
													"    pm.globals.set(\"_tr_getPaymentUK\",testRailTestCases);",
													"    pm.globals.set(\"_tr_deletePaymentUK\",\"<cleanUp>\");",
													"",
													"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
													"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "httpbin.org/uuid",
											"host": [
												"httpbin",
												"org"
											],
											"path": [
												"uuid"
											]
										},
										"description": "PRODUCT-8406"
									},
									"response": []
								},
								{
									"name": "Update UK payment (ToDo)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
												"exec": [
													"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
													"eval(globals.testsExecuted)(testRailTestCases);",
													"",
													"var requestsToRun = [",
													"        \"createPaymentUK\",",
													"        \"updatePaymentUK\",",
													"        \"deletePaymentUK\"",
													"    ]; ",
													"    pm.globals.set(\"_tr_createPaymentUK\",\"<preCondition>\");",
													"    pm.globals.set(\"_tr_updatePaymentUK\",testRailTestCases);",
													"    pm.globals.set(\"_tr_deletePaymentUK\",\"<cleanUp>\");",
													"",
													"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
													"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "httpbin.org/uuid",
											"host": [
												"httpbin",
												"org"
											],
											"path": [
												"uuid"
											]
										},
										"description": "PRODUCT-8405"
									},
									"response": []
								},
								{
									"name": "Delete UK payment (ToDo)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
												"exec": [
													"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
													"eval(globals.testsExecuted)(testRailTestCases);",
													"",
													"var requestsToRun = [",
													"        \"createPaymentUK\",",
													"        \"deletePaymentUK\"",
													"    ]; ",
													"    pm.globals.set(\"_tr_createPaymentUK\",\"<preCondition>\");",
													"    pm.globals.set(\"_tr_deletePaymentUK\",testRailTestCases);",
													"",
													"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
													"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "httpbin.org/uuid",
											"host": [
												"httpbin",
												"org"
											],
											"path": [
												"uuid"
											]
										},
										"description": "PRODUCT-8406"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Balance adjustment",
							"item": [
								{
									"name": "Create balance adjustment payment (C47415764)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
												"exec": [
													"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
													"eval(globals.testsExecuted)(testRailTestCases);",
													"",
													"var requestsToRun = [",
													"        \"createPaymentBalanceAdjustment\",",
													"        \"deletePaymentBalanceAdjustment\"",
													"    ]; ",
													"    pm.globals.set(\"_tr_createPaymentBalanceAdjustment\",testRailTestCases);",
													"    pm.globals.set(\"_tr_deletePaymentBalanceAdjustment\",\"<cleanUp>\");",
													"",
													"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
													"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "httpbin.org/uuid",
											"host": [
												"httpbin",
												"org"
											],
											"path": [
												"uuid"
											]
										},
										"description": "PRODUCT-8412"
									},
									"response": []
								},
								{
									"name": "Deliver balance adjustment payment (C47473069)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
												"exec": [
													"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
													"eval(globals.testsExecuted)(testRailTestCases);",
													"",
													"var requestsToRun = [",
													"        \"createPaymentBalanceAdjustment\",",
													"        \"getPaymentBalanceAdjustment\",",
													"        \"deletePaymentBalanceAdjustment\"",
													"    ]; ",
													"    pm.globals.set(\"_tr_createPaymentBalanceAdjustment\",\"<preCondition>\");",
													"    pm.globals.set(\"_tr_getPaymentBalanceAdjustment\",testRailTestCases);",
													"    pm.globals.set(\"_tr_deletePaymentBalanceAdjustment\",\"<cleanUp>\");",
													"",
													"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
													"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "httpbin.org/uuid",
											"host": [
												"httpbin",
												"org"
											],
											"path": [
												"uuid"
											]
										},
										"description": "PRODUCT-8412"
									},
									"response": []
								},
								{
									"name": "Update balance adjustment payment (C47473068)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
												"exec": [
													"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
													"eval(globals.testsExecuted)(testRailTestCases);",
													"",
													"var requestsToRun = [",
													"        \"createPaymentBalanceAdjustment\",",
													"        \"updatePaymentBalanceAdjustment\",",
													"        \"deletePaymentBalanceAdjustment\"",
													"    ]; ",
													"    pm.globals.set(\"_tr_createPaymentBalanceAdjustment\",\"<preCondition>\");",
													"    pm.globals.set(\"_tr_updatePaymentBalanceAdjustment\",testRailTestCases);",
													"    pm.globals.set(\"_tr_deletePaymentBalanceAdjustment\",\"<cleanUp>\");",
													"",
													"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
													"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "httpbin.org/uuid",
											"host": [
												"httpbin",
												"org"
											],
											"path": [
												"uuid"
											]
										},
										"description": "PRODUCT-8412"
									},
									"response": []
								},
								{
									"name": "Delete balance adjustment payment (C47489450)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
												"exec": [
													"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
													"eval(globals.testsExecuted)(testRailTestCases);",
													"",
													"var requestsToRun = [",
													"        \"createPaymentBalanceAdjustment\",",
													"        \"deletePaymentBalanceAdjustment\"",
													"    ]; ",
													"    pm.globals.set(\"_tr_createPaymentBalanceAdjustment\",\"<preCondition>\");",
													"    pm.globals.set(\"_tr_deletePaymentBalanceAdjustment\",testRailTestCases);",
													"",
													"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
													"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "httpbin.org/uuid",
											"host": [
												"httpbin",
												"org"
											],
											"path": [
												"uuid"
											]
										},
										"description": "PRODUCT-8412"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "QR-bill",
							"item": [
								{
									"name": "Standing order",
									"item": [
										{
											"name": "Create QR-bill (standing order) payment (C50483887)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
														"exec": [
															"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
															"eval(globals.testsExecuted)(testRailTestCases);",
															"",
															"var requestsToRun = [",
															"        \"createPaymentQrBillSO\",",
															"        \"deletePaymentQrBillSO\"",
															"    ]; ",
															"    pm.globals.set(\"_tr_createPaymentQrBillSO\",testRailTestCases);",
															"    pm.globals.set(\"_tr_deletePaymentQrBillSO\",\"<cleanUp>\");",
															"",
															"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
															"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "httpbin.org/uuid",
													"host": [
														"httpbin",
														"org"
													],
													"path": [
														"uuid"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deliver QR-bill (standing order) payment (C51051788)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
														"exec": [
															"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
															"eval(globals.testsExecuted)(testRailTestCases);",
															"",
															"var requestsToRun = [",
															"        \"createPaymentQrBillSO\",",
															"        \"getPaymentQrBillSO\",",
															"        \"deletePaymentQrBillSO\"",
															"    ]; ",
															"    pm.globals.set(\"_tr_createPaymentQrBillSO\",\"<preCondition>\");",
															"    pm.globals.set(\"_tr_getPaymentQrBillSO\",testRailTestCases);",
															"    pm.globals.set(\"_tr_deletePaymentQrBillSO\",\"<cleanUp>\");",
															"",
															"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
															"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "httpbin.org/uuid",
													"host": [
														"httpbin",
														"org"
													],
													"path": [
														"uuid"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update QR-bill (standing order) payment (C50483889)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
														"exec": [
															"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
															"eval(globals.testsExecuted)(testRailTestCases);",
															"",
															"var requestsToRun = [",
															"        \"createPaymentQrBillSO\",",
															"        \"updatePaymentQrBillSO\",",
															"        \"deletePaymentQrBillSO\"",
															"    ]; ",
															"    pm.globals.set(\"_tr_createPaymentQrBillSO\",\"<preCondition>\");",
															"    pm.globals.set(\"_tr_updatePaymentQrBillSO\",testRailTestCases);",
															"    pm.globals.set(\"_tr_deletePaymentQrBillSO\",\"<cleanUp>\");",
															"",
															"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
															"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "httpbin.org/uuid",
													"host": [
														"httpbin",
														"org"
													],
													"path": [
														"uuid"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete QR-bill (standing order) payment (C51051791)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
														"exec": [
															"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
															"eval(globals.testsExecuted)(testRailTestCases);",
															"",
															"var requestsToRun = [",
															"        \"createPaymentQrBillSO\",",
															"        \"deletePaymentQrBillSO\"",
															"    ]; ",
															"    pm.globals.set(\"_tr_createPaymentQrBillSO\",\"<preCondition>\");",
															"    pm.globals.set(\"_tr_deletePaymentQrBillSO\",testRailTestCases);",
															"",
															"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
															"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "httpbin.org/uuid",
													"host": [
														"httpbin",
														"org"
													],
													"path": [
														"uuid"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Create QR-bill payment (C50483879)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
												"exec": [
													"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
													"eval(globals.testsExecuted)(testRailTestCases);",
													"",
													"var requestsToRun = [",
													"        \"createPaymentQrBill\",",
													"        \"deletePaymentQrBill\"",
													"    ]; ",
													"    pm.globals.set(\"_tr_createPaymentQrBill\",testRailTestCases);",
													"    pm.globals.set(\"_tr_deletePaymentQrBill\",\"<cleanUp>\");",
													"",
													"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
													"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "httpbin.org/uuid",
											"host": [
												"httpbin",
												"org"
											],
											"path": [
												"uuid"
											]
										}
									},
									"response": []
								},
								{
									"name": "Deliver QR-bill payment (C50880198)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
												"exec": [
													"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
													"eval(globals.testsExecuted)(testRailTestCases);",
													"",
													"var requestsToRun = [",
													"        \"createPaymentQrBill\",",
													"        \"getPaymentQrBill\",",
													"        \"deletePaymentQrBill\"",
													"    ]; ",
													"    pm.globals.set(\"_tr_createPaymentQrBill\",\"<preCondition>\");",
													"    pm.globals.set(\"_tr_getPaymentQrBill\",testRailTestCases);",
													"    pm.globals.set(\"_tr_deletePaymentQrBill\",\"<cleanUp>\");",
													"",
													"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
													"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "httpbin.org/uuid",
											"host": [
												"httpbin",
												"org"
											],
											"path": [
												"uuid"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update QR-bill payment (C50483885)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
												"exec": [
													"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
													"eval(globals.testsExecuted)(testRailTestCases);",
													"",
													"var requestsToRun = [",
													"        \"createPaymentQrBill\",",
													"        \"updatePaymentQrBill\",",
													"        \"deletePaymentQrBill\"",
													"    ]; ",
													"    pm.globals.set(\"_tr_createPaymentQrBill\",\"<preCondition>\");",
													"    pm.globals.set(\"_tr_updatePaymentQrBill\",testRailTestCases);",
													"    pm.globals.set(\"_tr_deletePaymentQrBill\",\"<cleanUp>\");",
													"",
													"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
													"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "httpbin.org/uuid",
											"host": [
												"httpbin",
												"org"
											],
											"path": [
												"uuid"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete QR-bill payment (C51051785)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
												"exec": [
													"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
													"eval(globals.testsExecuted)(testRailTestCases);",
													"",
													"var requestsToRun = [",
													"        \"createPaymentQrBill\",",
													"        \"deletePaymentQrBill\"",
													"    ]; ",
													"    pm.globals.set(\"_tr_createPaymentQrBill\",\"<preCondition>\");",
													"    pm.globals.set(\"_tr_deletePaymentQrBill\",testRailTestCases);",
													"",
													"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
													"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "httpbin.org/uuid",
											"host": [
												"httpbin",
												"org"
											],
											"path": [
												"uuid"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Account transfer",
							"item": [
								{
									"name": "Standing order",
									"item": [
										{
											"name": "Create account transfer (standing order) payment (C53388199)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
														"exec": [
															"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
															"eval(globals.testsExecuted)(testRailTestCases);",
															"",
															"var requestsToRun = [",
															"        \"createPaymentAccountTransferSO\",",
															"        \"deletePaymentAccountTransferSO\"",
															"    ]; ",
															"    pm.globals.set(\"_tr_createPaymentAccountTransferSO\",testRailTestCases);",
															"    pm.globals.set(\"_tr_deletePaymentAccountTransferSO\",\"<cleanUp>\");",
															"",
															"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
															"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "httpbin.org/uuid",
													"host": [
														"httpbin",
														"org"
													],
													"path": [
														"uuid"
													]
												}
											},
											"response": []
										},
										{
											"name": "Deliver account transfer (standing order) payment (C53388200)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
														"exec": [
															"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
															"eval(globals.testsExecuted)(testRailTestCases);",
															"",
															"var requestsToRun = [",
															"        \"createPaymentAccountTransferSO\",",
															"        \"getPaymentAccountTransferSO\",",
															"        \"deletePaymentAccountTransferSO\"",
															"    ]; ",
															"    pm.globals.set(\"_tr_createPaymentAccountTransferSO\",\"<preCondition>\");",
															"    pm.globals.set(\"_tr_getPaymentAccountTransferSO\",testRailTestCases);",
															"    pm.globals.set(\"_tr_deletePaymentAccountTransferSO\",\"<cleanUp>\");",
															"",
															"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
															"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "httpbin.org/uuid",
													"host": [
														"httpbin",
														"org"
													],
													"path": [
														"uuid"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update account transfer (standing order) payment (C53388201)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
														"exec": [
															"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
															"eval(globals.testsExecuted)(testRailTestCases);",
															"",
															"var requestsToRun = [",
															"        \"createPaymentAccountTransferSO\",",
															"        \"updatePaymentAccountTransferSO\",",
															"        \"deletePaymentAccountTransferSO\"",
															"    ]; ",
															"    pm.globals.set(\"_tr_createPaymentAccountTransferSO\",\"<preCondition>\");",
															"    pm.globals.set(\"_tr_updatePaymentAccountTransferSO\",testRailTestCases);",
															"    pm.globals.set(\"_tr_deletePaymentAccountTransferSO\",\"<cleanUp>\");",
															"",
															"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
															"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "httpbin.org/uuid",
													"host": [
														"httpbin",
														"org"
													],
													"path": [
														"uuid"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete account transfer (account transfer) payment (C53388202)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
														"exec": [
															"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
															"eval(globals.testsExecuted)(testRailTestCases);",
															"",
															"var requestsToRun = [",
															"        \"createPaymentAccountTransferSO\",",
															"        \"deletePaymentAccountTransferSO\"",
															"    ]; ",
															"    pm.globals.set(\"_tr_createPaymentAccountTransferSO\",\"<preCondition>\");",
															"    pm.globals.set(\"_tr_deletePaymentAccountTransferSO\",testRailTestCases);",
															"",
															"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
															"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [],
												"url": {
													"raw": "httpbin.org/uuid",
													"host": [
														"httpbin",
														"org"
													],
													"path": [
														"uuid"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "94d39878-b23f-4283-976e-719d2030bb01",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "89db9f6d-1199-46ea-a7fc-54b1390103dc",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Create account transfer payment (C41939554)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
												"exec": [
													"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
													"eval(globals.testsExecuted)(testRailTestCases);",
													"",
													"var requestsToRun = [",
													"        \"createPaymentAccountTransfer\",",
													"        \"deletePaymentAccountTransfer\"",
													"    ]; ",
													"    pm.globals.set(\"_tr_createPaymentAccountTransfer\",testRailTestCases);",
													"    pm.globals.set(\"_tr_deletePaymentAccountTransfer\",\"<cleanUp>\");",
													"",
													"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
													"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "httpbin.org/uuid",
											"host": [
												"httpbin",
												"org"
											],
											"path": [
												"uuid"
											]
										}
									},
									"response": []
								},
								{
									"name": "Deliver account transfer payment (C41939552)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
												"exec": [
													"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
													"eval(globals.testsExecuted)(testRailTestCases);",
													"",
													"var requestsToRun = [",
													"        \"createPaymentAccountTransfer\",",
													"        \"getPaymentAccountTransfer\",",
													"        \"deletePaymentAccountTransfer\"",
													"    ]; ",
													"    pm.globals.set(\"_tr_createPaymentAccountTransfer\",\"<preCondition>\");",
													"    pm.globals.set(\"_tr_getPaymentAccountTransfer\",testRailTestCases);",
													"    pm.globals.set(\"_tr_deletePaymentAccountTransfer\",\"<cleanUp>\");",
													"",
													"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
													"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "httpbin.org/uuid",
											"host": [
												"httpbin",
												"org"
											],
											"path": [
												"uuid"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update account transfer payment (C41939560)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
												"exec": [
													"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
													"eval(globals.testsExecuted)(testRailTestCases);",
													"",
													"var requestsToRun = [",
													"        \"createPaymentAccountTransfer\",",
													"        \"updatePaymentAccountTransfer\",",
													"        \"deletePaymentAccountTransfer\"",
													"    ]; ",
													"    pm.globals.set(\"_tr_createPaymentAccountTransfer\",\"<preCondition>\");",
													"    pm.globals.set(\"_tr_updatePaymentAccountTransfer\",testRailTestCases);",
													"    pm.globals.set(\"_tr_deletePaymentAccountTransfer\",\"<cleanUp>\");",
													"",
													"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
													"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "httpbin.org/uuid",
											"host": [
												"httpbin",
												"org"
											],
											"path": [
												"uuid"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete account transfer payment (C41939557)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
												"exec": [
													"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
													"eval(globals.testsExecuted)(testRailTestCases);",
													"",
													"var requestsToRun = [",
													"        \"createPaymentAccountTransfer\",",
													"        \"deletePaymentAccountTransfer\"",
													"    ]; ",
													"    pm.globals.set(\"_tr_createPaymentAccountTransfer\",\"<preCondition>\");",
													"    pm.globals.set(\"_tr_deletePaymentAccountTransfer\",testRailTestCases);",
													"",
													"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
													"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "httpbin.org/uuid",
											"host": [
												"httpbin",
												"org"
											],
											"path": [
												"uuid"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Payments: Search",
					"item": [
						{
							"name": "Search Payment Returns Unique Pages (C49445322)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
										"exec": [
											"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
											"eval(globals.testsExecuted)(testRailTestCases);",
											"",
											"var requestsToRun = [",
											"        \"getPaymentsPaymentSearch?Swiftp0s20\",",
											"        \"getPaymentsPaymentSearch?Swiftp1s20\"",
											"    ]; ",
											"    pm.globals.set(\"_tr_getPaymentsPaymentSearch?Swiftp0s20\",\"<preCondition>\");",
											"    pm.globals.set(\"_tr_getPaymentsPaymentSearch?Swiftp1s20\",testRailTestCases);",
											"",
											"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
											"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "httpbin.org/uuid",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"uuid"
									]
								},
								"description": "PRODUCT-9760"
							},
							"response": []
						},
						{
							"name": "Search Payment calculates payments count regardles page and size parameters value (C49577618)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
										"exec": [
											"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
											"eval(globals.testsExecuted)(testRailTestCases);",
											"",
											"var requestsToRun = [",
											"        \"getPaymentsPaymentSearch?s1000\"",
											"    ]; ",
											"    pm.globals.set(\"_tr_getPaymentsPaymentSearch?s1000\",testRailTestCases);",
											"",
											"var body = {",
											"  \"pageRequest\": {",
											"  \"page\": 0,",
											"  \"size\": 100",
											"  },",
											"  \"paymentFilter\": {",
											"\t\"paymentType\":\"SWIFT_INTERNATIONAL\"",
											"  },",
											"  \"orderBy\": {",
											"    \"field\": \"CREATION_DATE\",",
											"    \"sortOrder\": \"DESC\"",
											"  }",
											"};",
											"pm.globals.set(\"body\", JSON.stringify(body));",
											"",
											"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
											"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "httpbin.org/uuid",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"uuid"
									]
								},
								"description": "PRODUCT-9150"
							},
							"response": []
						},
						{
							"name": "Search Payment number of returned payments matches to “totalElements” property value (ToDo)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
										"exec": [
											"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
											"eval(globals.testsExecuted)(testRailTestCases);",
											"",
											"var requestsToRun = [",
											"        \"getPaymentsPaymentSearch?s1000\"",
											"    ]; ",
											"    pm.globals.set(\"_tr_getPaymentsPaymentSearch?s1000\",testRailTestCases);",
											"",
											"//pm.globals.set(\"body\", ('{\"paymentType\": \"ACCOUNT_TRANSFER\"}'));",
											"var body = {",
											"  \"pageRequest\": {",
											"  \"page\": 0,",
											"  \"size\": 100",
											"  },",
											"  \"paymentFilter\": {",
											"\t\"paymentType\": \"ACCOUNT_TRANSFER\"",
											"  },",
											"  \"orderBy\": {",
											"    \"field\": \"CREATION_DATE\",",
											"    \"sortOrder\": \"DESC\"",
											"  }",
											"};",
											"pm.globals.set(\"body\", JSON.stringify(body));",
											"",
											"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
											"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "httpbin.org/uuid",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"uuid"
									]
								},
								"description": "PRODUCT-9148"
							},
							"response": []
						},
						{
							"name": "Search Payment using filter by 'paymentStatuses' (ToDo)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
										"exec": [
											"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
											"eval(globals.testsExecuted)(testRailTestCases);",
											"",
											"var requestsToRun = [",
											"        \"getPaymentsPaymentSearchAssertFilterPaymentStatuses?s100\"",
											"    ]; ",
											"    pm.globals.set(\"_tr_getPaymentsPaymentSearchAssertFilterPaymentStatuses?s100\",testRailTestCases);",
											"",
											"//pm.globals.set(\"body\", ('{\"paymentStatuses\": [\"READY_FOR_EXECUTION\", \"BOOKED\"]}'));",
											"var body = {",
											"  \"pageRequest\": {",
											"  \"page\": 0,",
											"  \"size\": 100",
											"  },",
											"  \"paymentFilter\": {",
											"\t\"paymentStatuses\": [\"READY_FOR_EXECUTION\", \"BOOKED\"]",
											"  },",
											"  \"orderBy\": {",
											"    \"field\": \"CREATION_DATE\",",
											"    \"sortOrder\": \"DESC\"",
											"  }",
											"};",
											"pm.globals.set(\"body\", JSON.stringify(body));",
											"",
											"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
											"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "httpbin.org/uuid",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"uuid"
									]
								},
								"description": "PRODUCT-9121"
							},
							"response": []
						},
						{
							"name": "Search Payment deleted payments aren't included (ToDo)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
										"exec": [
											"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
											"eval(globals.testsExecuted)(testRailTestCases);",
											"",
											"var requestsToRun = [",
											"        \"createPaymentSwift\",",
											"        \"deletePaymentSwift\",",
											"        \"getPaymentsPaymentSearch?s1000\"",
											"    ]; ",
											"    pm.globals.set(\"_tr_createPaymentSwift\",\"<preCondition>\");",
											"    pm.globals.set(\"_tr_deletePaymentSwift\",\"<preCondition>\");    ",
											"    pm.globals.set(\"_tr_getPaymentsPaymentSearch?s1000\",testRailTestCases);",
											"",
											"//pm.globals.set(\"body\",pm.globals.get(\"bodyPaymentSearchPaymentStatuses\"));",
											"var body =  {",
											"  \"pageRequest\": {",
											"  \"page\": 0,",
											"  \"size\": 100",
											"  },",
											"  \"paymentStatuses\": [\"READY_FOR_EXECUTION\", \"BOOKED\"],",
											"  \"orderBy\": {",
											"    \"field\": \"CREATION_DATE\",",
											"    \"sortOrder\": \"DESC\"",
											"  }",
											"};",
											"pm.globals.set(\"body\", JSON.stringify(body));",
											"",
											"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
											"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "httpbin.org/uuid",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"uuid"
									]
								},
								"description": "PRODUCT-9121"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Payments: Routing",
					"item": [
						{
							"name": "PayTo input validation for Alias as input parameter (C34380150)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
										"exec": [
											"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
											"eval(globals.testsExecuted)(testRailTestCases);",
											"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
											"",
											"var requestsToRun = [",
											"        \"getRoutingByFilterAlias\"",
											"    ]; ",
											"    pm.globals.set(\"_tr_getRoutingByFilterAlias\",testRailTestCases);",
											"",
											"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "httpbin.org/uuid",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"uuid"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Payments: Template",
					"item": [
						{
							"name": "Create payment template (ToDo)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
										"exec": [
											"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
											"eval(globals.testsExecuted)(testRailTestCases);",
											"",
											"var requestsToRun = [",
											"        \"createPaymentTemplate\",",
											"        \"deletePaymentTemplate\"",
											"    ]; ",
											"    pm.globals.set(\"_tr_createPaymentTemplate\",testRailTestCases);",
											"    pm.globals.set(\"_tr_deletePaymentTemplate\",\"<cleanUp>\");",
											"",
											"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
											"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "httpbin.org/uuid",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"uuid"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deliver payment template (ToDo)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
										"exec": [
											"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
											"eval(globals.testsExecuted)(testRailTestCases);",
											"",
											"var requestsToRun = [",
											"        \"createPaymentTemplate\",",
											"        \"getPaymentTemplate\",",
											"        \"deletePaymentTemplate\"",
											"    ]; ",
											"    pm.globals.set(\"_tr_createPaymentTemplate\",\"<preCondition>\");",
											"    pm.globals.set(\"_tr_getPaymentTemplate\",testRailTestCases);",
											"    pm.globals.set(\"_tr_deletePaymentTemplate\",\"<cleanUp>\");",
											"",
											"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
											"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "httpbin.org/uuid",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"uuid"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete payment template (ToDo)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
										"exec": [
											"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
											"eval(globals.testsExecuted)(testRailTestCases);",
											"",
											"var requestsToRun = [",
											"        \"createPaymentTemplate\",",
											"        \"deletePaymentTemplate\"",
											"    ]; ",
											"    pm.globals.set(\"_tr_createPaymentTemplate\",\"<preCondition>\");",
											"    pm.globals.set(\"_tr_deletePaymentTemplate\",testRailTestCases);",
											"",
											"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
											"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "httpbin.org/uuid",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"uuid"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Payments: Bulk operations",
					"item": [
						{
							"name": "Deliver payments in bulk (ToDo)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
										"exec": [
											"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
											"eval(globals.testsExecuted)(testRailTestCases);",
											"",
											"var requestsToRun = [",
											"        \"createPaymentBulk\",",
											"        \"getPaymentBulk\"",
											"    ]; ",
											"    pm.globals.set(\"_tr_createPaymentBulk\",\"<preCondition>\");",
											"    pm.globals.set(\"_tr_getPaymentBulk\",testRailTestCases);",
											"",
											"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
											"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "httpbin.org/uuid",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"uuid"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Deliver a specific pain.001 file (ToDo)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"createPaymentBulk\",",
									"        \"getPaymentBulk\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_createPaymentBulk\",\"preCondition\");",
									"    pm.globals.set(\"_tr_getPaymentBulk\",testRailTestCases);",
									"",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-5629"
					},
					"response": []
				},
				{
					"name": "SWIFT payment CD",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"testRailTestCases = \"C36275411 C36240105\"",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Create SWIFT payment\",",
									"        \"Delete SWIFT payment\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Create SWIFT payment\",\"C36275411\");",
									"    pm.globals.set(\"_tr_Delete SWIFT payment\",\"C36240105\");",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "SWIFT payment CRUD",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"var testRailTestCases = \"C36275411 C36240103 C36275416 C36240105\"",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Create SWIFT payment\",",
									"        \"Get SWIFT payment\", ",
									"        \"Update SWIFT payment\",",
									"        \"Delete SWIFT payment\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Create SWIFT payment\",\"C36275411\");",
									"    pm.globals.set(\"_tr_Get SWIFT payment\",\"C36240103\");",
									"    pm.globals.set(\"_tr_Update SWIFT payment\",\"C36275416\");",
									"    pm.globals.set(\"_tr_Delete SWIFT payment\",\"C36240105\");",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "_Test session close",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"var requestsToRun = ",
									"    [",
									"        \"Clean TestRail Run\"",
									"    ]; ",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Requests",
			"item": [
				{
					"name": "Payments: Payment type",
					"item": [
						{
							"name": "SEPA",
							"item": [
								{
									"name": "Standing order",
									"item": [
										{
											"name": "createPaymentSepaSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" SEPA (standing order) payment is created and assertions are passed\", function () {\r",
															"\r",
															"  //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
															"    //State is correct\r",
															"    let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
															"    //Creditor agent is correct\r",
															"    let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent.bic;\r",
															"    let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent.bic;\r",
															"    //Debtor address is correct\r",
															"    let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
															"    let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo; \r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;   \r",
															"    //Structured remittance information is correct\r",
															"    let requestBodyStructuredRemittance = JSON.parse(request.data).paymentInformation.remittanceInformation.structured;\r",
															"    let responseBodyStructuredRemittance = JSON.parse(responseBody).paymentInformation.remittanceInformation.structured; \r",
															"    //Standing order info is correct\r",
															"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
															"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Creditor agent is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Debtor address is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName);\r",
															"      pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
															"      pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Creditor account is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Structured remittance information is correct\", () => {\r",
															"      pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Standing order info is correct\", () => {\r",
															"      pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"    });\r",
															"\r",
															"    // check if payment is created\r",
															"    if (pm.response.to.have.status(201)){\r",
															"        var responseData = JSON.parse(responseBody);\r",
															"        pm.globals.set(\"newPaymentSepaID\", responseData.paymentId);\r",
															"        pm.globals.set(\"newPaymentSepaStOrInfo\", responseData.standingOrder);\r",
															"        console.log(\"New SEPA (standing order) payment ID: \" + pm.globals.get(\"newPaymentSepaID\"));\r",
															"    }\r",
															"    else {\r",
															"        console.log(\"Failed to create SEPA (standing order) payment\");\r",
															"    }\r",
															"\r",
															"    //Determine if assertion passed at whole\r",
															"    pm.response.to.have.status(201)\r",
															"    && pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyCreditorAgent.bic).to.eql(requestBodyCreditorAgent.bic) \r",
															"    && pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName) \r",
															"    && pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode) \r",
															"    && pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
															"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
															"    && pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance)\r",
															"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"});\r",
															"\r",
															"// Store the used parameters (test relevant)\r",
															"pm.environment.set(\"instructedAmount\", (JSON.parse(request.data).paymentInformation.instructedAmount));\r",
															"let response = pm.response.json().paymentInformation.standingOrder,\r",
															"    savedData = JSON.stringify(response);\r",
															"pm.environment.set(\"standingOrder\", savedData);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
														"exec": [
															"eval(globals.randomizeVariables)();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"storeOnly\": false,\r\n\t\"locked\": false,\r\n\t\"categoryPurposeCode\": \"SALA\",\r\n\t\"paymentInformation\": {\r\n\t\t\"instructedAmount\": {\r\n\t\t\t\"currency\": {\r\n\t\t\t\t\"code\": \"EUR\"\r\n\t\t\t},\r\n\t\t\t\"value\": 9.99\r\n\t\t},\r\n\t\t\"remittanceInformation\": {\r\n\t\t\t\"unstructured\": {{unstructured}},\r\n\t\t\t\"structured\": {{structuredRemittanceRF}}\r\n\t\t},\r\n\t\t\"instructionIdentification\": {{instructionIdentification}},\r\n\t\t\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\t\"instructionPriority\": \"NORMAL\",\r\n\t\t\"creditor\": {\r\n\t\t\t\"name\": {{name}},\r\n\t\t\t\"address\": {\r\n\t\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\t\"townName\": {{townName}},\r\n\t\t\t\t\"country\": {{country}}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"creditorAccountNo\": {{creditorAccountNoSEPA}},\r\n\t\t\"creditorAgent\": {\r\n\t\t\t\"bic\": {{creditorAgentBicSEPA}}\r\n\t\t},\r\n\t\t\"debtor\": {\r\n\t\t\t\"name\": {{debtorAccountName}},\r\n\t\t\t\"address\": {\r\n\t\t\t\t\"streetName\": {{debtorStreetName}},\r\n\t\t\t\t\"postalCode\": {{debtorPostalCode}},\r\n\t\t\t\t\"townName\": {{debtorTownName}}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"debtorAccountNo\":  {{debtorAccountNo}},\r\n\t\t\"standingOrder\": {\r\n\t\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\t\"beforeHoliday\": true,\r\n\t\t\t\"interval\": \"WEEKLY\",\r\n\t\t\t\"active\": true,\r\n\t\t\t\"ultimo\": false\t\t\r\n\t\t}\r\n\t}\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/sepa/{{tenant}}/v2/credittransfer",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"sepa",
														"{{tenant}}",
														"v2",
														"credittransfer"
													]
												}
											},
											"response": []
										},
										{
											"name": "getPaymentSepaSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" SEPA (standing order) payment is retrieved and assertions are passed\", function () {\r",
															"\r",
															"  //Instructed amount is correct\r",
															"let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
															"let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
															"//State is correct\r",
															"let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
															"//Creditor agent is correct\r",
															"let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent.bic;\r",
															"let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent.bic;\r",
															"//Debtor address is correct\r",
															"let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
															"let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
															"//Debtor account is correct\r",
															"let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
															"let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo; \r",
															"//Creditor account is correct\r",
															"let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
															"let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;   \r",
															"//Structured remittance information is correct\r",
															"let requestBodyStructuredRemittance = JSON.parse(request.data).paymentInformation.remittanceInformation.structured;\r",
															"let responseBodyStructuredRemittance = JSON.parse(responseBody).paymentInformation.remittanceInformation.structured; \r",
															"//Standing order info is correct\r",
															"let responseBodyStandingOrder = JSON.parse(responseBody).paymentInformation.standingOrder; \r",
															"\r",
															"pm.test(\"Payment (standing order) is retrieved\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Instructed amount is correct\", () => {\r",
															"  pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"});\r",
															"\r",
															"pm.test(\"Creditor agent is correct\", () => {\r",
															"  pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
															"});\r",
															"\r",
															"pm.test(\"Debtor address is correct\", () => {\r",
															"  pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName);\r",
															"  pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
															"  pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
															"});\r",
															"\r",
															"pm.test(\"Debtor account is correct\", () => {\r",
															"  pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"});\r",
															"\r",
															"pm.test(\"Creditor account is correct\", () => {\r",
															"  pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"});\r",
															"\r",
															"pm.test(\"Structured remittance information is correct\", () => {\r",
															"  pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance);\r",
															"});\r",
															"\r",
															"pm.test(\"Standing order info is correct\", () => {\r",
															"  pm.expect(responseBodyStandingOrder).to.eql(JSON.parse(pm.environment.get(\"standingOrder\")));\r",
															"});\r",
															"\r",
															"//Determine if assertion passed at whole\r",
															"pm.response.to.have.status(200)\r",
															"&& pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"&& pm.expect(responseBodyCreditorAgent.bic).to.eql(requestBodyCreditorAgent.bic) \r",
															"&& pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName) \r",
															"&& pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode) \r",
															"&& pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName) \r",
															"&& pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
															"&& pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
															"&& pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance)\r",
															"&& pm.expect(responseBodyStandingOrder).to.eql(JSON.parse(pm.environment.get(\"standingOrder\")));\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"storeOnly\": false,\r\n\"locked\": false,\r\n\"categoryPurposeCode\": \"SALA\",\r\n\"paymentInformation\": {\r\n\"instructedAmount\": {\r\n\"currency\": {\r\n\"code\": \"EUR\"\r\n},\r\n\"value\": 9.99\r\n},\r\n\"remittanceInformation\": {\r\n\"unstructured\": {{unstructured}},\r\n\"structured\": {{structuredRemittanceRF}}\r\n},\r\n\"instructionIdentification\": {{instructionIdentification}},\r\n\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\"instructionPriority\": \"NORMAL\",\r\n\"creditor\": {\r\n\"name\": {{name}},\r\n\"address\": {\r\n\"adrLine1\": {{adrLine1}},\r\n\"adrLine2\": {{adrLine2}},\r\n\"streetName\": {{streetName}},\r\n\"buildingNm\": {{buildingNm}},\r\n\"postalCode\": {{postalCode}},\r\n\"townName\": {{townName}},\r\n\"country\": {{country}}\r\n}\r\n},\r\n\"creditorAccountNo\": {{creditorAccountNoSEPA}},\r\n\"creditorAgent\": {\r\n\"bic\": {{creditorAgentBicSEPA}}\r\n},\r\n\"debtor\": {\r\n\"name\": {{debtorAccountName}},\r\n\"address\": {\r\n\"streetName\": {{debtorStreetName}},\r\n\"postalCode\": {{debtorPostalCode}},\r\n\"townName\": {{debtorTownName}}\r\n}\r\n},\r\n\"debtorAccountNo\":  {{debtorAccountNo}}\r\n},\r\n\"standingOrder\": {\r\n\"firstOn\": {{PrS:futureWorkingDay}},\r\n\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\"beforeHoliday\": true,\r\n\"interval\": \"WEEKLY\",\r\n\"active\": true,\r\n\"ultimo\": false\t\t\r\n}\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/sepa/{{tenant}}/v2/credittransfer/{{newPaymentSepaID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"sepa",
														"{{tenant}}",
														"v2",
														"credittransfer",
														"{{newPaymentSepaID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "updatePaymentSepaSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" SEPA (standing order) payment is updated and assertions are passed\", function () {\r",
															"\r",
															"  //Instructed amount is correct\r",
															"let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
															"let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
															"//State is correct\r",
															"let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
															"//Creditor agent is correct\r",
															"let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent.bic;\r",
															"let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent.bic;\r",
															"//Debtor address is correct\r",
															"let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
															"let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
															"//Debtor account is correct\r",
															"let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
															"let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo; \r",
															"//Creditor account is correct\r",
															"let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
															"let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;\r",
															"//Structured remittance information is correct\r",
															"let requestBodyStructuredRemittance = JSON.parse(request.data).paymentInformation.remittanceInformation.structured;\r",
															"let responseBodyStructuredRemittance = JSON.parse(responseBody).paymentInformation.remittanceInformation.structured; \r",
															"//Standing order info is correct\r",
															"let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
															"let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
															"\r",
															"pm.test(\"Payment (standing order) is updated\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Instructed amount is correct\", () => {\r",
															"  pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"});\r",
															"\r",
															"pm.test(\"Creditor agent is correct\", () => {\r",
															"  pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
															"});\r",
															"\r",
															"pm.test(\"Debtor address is correct\", () => {\r",
															"  pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName);\r",
															"  pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
															"  pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
															"});\r",
															"\r",
															"pm.test(\"Debtor account is correct\", () => {\r",
															"  pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"});\r",
															"\r",
															"pm.test(\"Creditor account is correct\", () => {\r",
															"  pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"});\r",
															"\r",
															"pm.test(\"Structured remittance information is correct\", () => {\r",
															"  pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance);\r",
															"});\r",
															"\r",
															"pm.test(\"Standing order info is correct\", () => {\r",
															"  pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"});\r",
															"\r",
															"\r",
															"//Determine if assertion passed at whole\r",
															"pm.response.to.have.status(200)\r",
															"&& pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"&& pm.expect(responseBodyCreditorAgent.bic).to.eql(requestBodyCreditorAgent.bic) \r",
															"&& pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName) \r",
															"&& pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode) \r",
															"&& pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName) \r",
															"&& pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
															"&& pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
															"&& pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance)\r",
															"&& pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
														"exec": [
															"eval(globals.randomizeVariables)();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\"storeOnly\": false,\r\n\"locked\": false,\r\n\"categoryPurposeCode\": \"SALA\",\r\n\"paymentInformation\": {\r\n\"instructedAmount\": {\r\n\"currency\": {\r\n\"code\": \"EUR\"\r\n},\r\n\"value\": 10.99\r\n},\r\n\"remittanceInformation\": {\r\n\"unstructured\": {{unstructured}},\r\n\"structured\": {{structuredRemittanceRF}}\r\n},\r\n\"instructionIdentification\": {{instructionIdentification}},\r\n\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\"instructionPriority\": \"NORMAL\",\r\n\"creditor\": {\r\n\"name\": {{name}},\r\n\"address\": {\r\n\"adrLine1\": {{adrLine1}},\r\n\"adrLine2\": {{adrLine2}},\r\n\"streetName\": {{streetName}},\r\n\"buildingNm\": {{buildingNm}},\r\n\"postalCode\": {{postalCode}},\r\n\"townName\": {{townName}},\r\n\"country\": {{country}}\r\n}\r\n},\r\n\"creditorAccountNo\": {{creditorAccountNoSEPA}},\r\n\"creditorAgent\": {\r\n\"bic\": {{creditorAgentBicSEPA}}\r\n},\r\n\"debtor\": {\r\n\"name\": {{debtorAccountName}},\r\n\"address\": {\r\n\"streetName\": {{debtorStreetName}},\r\n\"postalCode\": {{debtorPostalCode}},\r\n\"townName\": {{debtorTownName}}\r\n}\r\n},\r\n\"debtorAccountNo\":  {{debtorAccountNo}},\r\n\"standingOrder\": {\r\n\"firstOn\": {{PrS:futureWorkingDay}},\r\n\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\"beforeHoliday\": false,\r\n\"interval\": \"DAILY\",\r\n\"active\": true,\r\n\"ultimo\": false\t\t\r\n}\r\n}\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/sepa/{{tenant}}/v2/credittransfer/{{newPaymentSepaID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"sepa",
														"{{tenant}}",
														"v2",
														"credittransfer",
														"{{newPaymentSepaID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "deletePaymentSepaSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b805315b-12ae-4f45-85f9-14230e6cb91e",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" SEPA (standing order) payment is deleted and not exists anymore\", function () {\r",
															"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
															"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
															"    pm.response.to.have.status(200) \r",
															"    && pm.expect(responseBodyStatus).to.eql(true)\r",
															"    && pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
															"});\r",
															"\r",
															"// Log important stuff\r",
															"if (pm.response.to.have.status(200)){\r",
															"    console.log(\"Deleted SEPA (standing order) payment ID:\" + pm.globals.get(\"newPaymentSepaID\"));\r",
															"    pm.globals.set(\"deletedSepaPaymentID\",pm.globals.get(\"newPaymentSepaID\"));\r",
															"    pm.globals.unset(\"newPaymentSepaID\");\r",
															"    pm.globals.unset(\"newPaymentSepaStOrInfo\");\r",
															"}\r",
															"else {\r",
															"    console.log(\"Failed to delete SEPA (standing order) payment with ID:\" + pm.globals.get(\"newPaymentSepaID\"));\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8b0efd50-c002-40d7-bf02-ad82c22ce7a7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token}}",
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"disabled": true
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/sepa/{{tenant}}/v2/credittransfer/{{newPaymentSepaID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"sepa",
														"{{tenant}}",
														"v2",
														"credittransfer",
														"{{newPaymentSepaID}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "createPaymentSepa",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9c72540c-8b6e-4022-beb7-ef4a180f1b6b",
												"exec": [
													"eval(globals.randomizeVariables)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "05a88f70-ba02-48cd-9fae-2c7979c3c899",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"//pm.test(pm.globals.get(\"testRailTestCases\") + \" Payment is created and assertions are passed\", function () {\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment is created and assertions are passed\", function () {\r",
													"\r",
													"//Instructed amount is correct\r",
													"let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
													"let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
													"//Execution date is correct\r",
													"let requestBodyExecutionDate = JSON.parse(request.data).paymentInformation.requestedExecutionDate;\r",
													"let responseBodyExecutionDate = JSON.parse(responseBody).paymentInformation.requestedExecutionDate;    \r",
													"//State is correct\r",
													"let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
													"//Creditor agent is correct\r",
													"let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent.bic;\r",
													"let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent.bic;\r",
													"//Debtor address is correct\r",
													"let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
													"let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
													"//Debtor account is correct\r",
													"let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
													"let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo; \r",
													"//Creditor account is correct\r",
													"let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
													"let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;   \r",
													"//Structured remittance information is correct\r",
													"let requestBodyStructuredRemittance = JSON.parse(request.data).paymentInformation.remittanceInformation.structured;\r",
													"let responseBodyStructuredRemittance = JSON.parse(responseBody).paymentInformation.remittanceInformation.structured; \r",
													"\r",
													"pm.test(\"Instructed amount is correct\", () => {\r",
													"  pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"});\r",
													"\r",
													"pm.test(\"Execution date is correct\", () => {\r",
													"  pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate);\r",
													"});\r",
													"\r",
													"pm.test(\"Creditor agent is correct\", () => {\r",
													"  pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
													"});\r",
													"\r",
													"pm.test(\"Debtor address is correct\", () => {\r",
													"  pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName);\r",
													"  pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
													"  pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
													"});\r",
													"\r",
													"pm.test(\"Debtor account is correct\", () => {\r",
													"  pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"});\r",
													"\r",
													"pm.test(\"Creditor account is correct\", () => {\r",
													"  pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"});\r",
													"\r",
													"pm.test(\"Structured remittance information is correct\", () => {\r",
													"  pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance);\r",
													"});\r",
													"\r",
													"// check if payment is created\r",
													"if (pm.response.to.have.status(201)){\r",
													"    var responseData = JSON.parse(responseBody);\r",
													"    pm.globals.set(\"newPaymentSepaID\", responseData.paymentId);\r",
													"    console.log(\"New payment ID: \" + pm.globals.get(\"newPaymentSepaID\"));\r",
													"}\r",
													"else {\r",
													"    console.log(\"Failed to create payment with ID:\" + pm.globals.get(\"newPaymentSepaID\"));\r",
													"    pm.globals.unset(\"newPaymentSepaID\");\r",
													"}\r",
													"\r",
													"//Determine if assertion passed at whole\r",
													"pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"&& pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate) \r",
													"&& pm.expect(responseBodyCreditorAgent.bic).to.eql(requestBodyCreditorAgent.bic) \r",
													"&& pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName) \r",
													"&& pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode) \r",
													"&& pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName) \r",
													"&& pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
													"&& pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
													"&& pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance);\r",
													"});\r",
													"\r",
													"// Store the used parameters (test relevant)\r",
													"pm.environment.set(\"instructedAmount\", (JSON.parse(request.data).paymentInformation.instructedAmount));\r",
													"pm.environment.set(\"requestedExecutionDate\", (JSON.parse(request.data).paymentInformation.requestedExecutionDate));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"storeOnly\": false,\r\n\t\"locked\": false,\r\n\t\"categoryPurposeCode\": \"SALA\",\r\n\t\"paymentInformation\": {\r\n\t\t\"endToEndId\": {{endToEndId}},\r\n\t\t\"instructedAmount\": {\r\n\t\t\t\"currency\": {\r\n\t\t\t\t\"code\": \"EUR\"\r\n\t\t\t},\r\n\t\t\t\"value\": 312.00\r\n\t\t},\r\n\t\t\"remittanceInformation\": {\r\n\t\t\t\"unstructured\": {{unstructured}},\r\n\t\t\t\"structured\": {{structuredRemittanceRF}}\r\n\t\t},\r\n\t\t\"instructionIdentification\": {{instructionIdentification}},\r\n\t\t\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\t\"instructionPriority\": \"NORMAL\",\r\n\t\t\"creditor\": {\r\n\t\t\t\"name\": {{name}},\r\n\t\t\t\"address\": {\r\n\t\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\t\"townName\": {{townName}},\r\n\t\t\t\t\"country\": {{country}}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"creditorAccountNo\": {{creditorAccountNoSEPA}},\r\n\t\t\"creditorAgent\": {\r\n\t\t\t\"bic\": {{creditorAgentBicSEPA}}\r\n\t\t},\r\n\t\t\"debtor\": {\r\n\t\t\t\"name\": {{debtorAccountName}},\r\n\t\t\t\"address\": {\r\n\t\t\t\t\"streetName\": {{debtorStreetName}},\r\n\t\t\t\t\"postalCode\": {{debtorPostalCode}},\r\n\t\t\t\t\"townName\": {{debtorTownName}}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"debtorAccountNo\":  {{debtorAccountNo}}\r\n\t}\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/sepa/{{tenant}}/v2/credittransfer",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"sepa",
												"{{tenant}}",
												"v2",
												"credittransfer"
											]
										}
									},
									"response": []
								},
								{
									"name": "getPaymentSepa",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9c72540c-8b6e-4022-beb7-ef4a180f1b6b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "05a88f70-ba02-48cd-9fae-2c7979c3c899",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"//pm.test(pm.globals.get(\"testRailTestCases\") + \" Payment is created and assertions are passed\", function () {\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment is retrieved and assertions are passed\", function () {\r",
													"\r",
													"//Instructed amount is correct\r",
													"let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
													"//Execution date is correct\r",
													"let requestBodyExecutionDate = JSON.parse(request.data).paymentInformation.requestedExecutionDate;\r",
													"let responseBodyExecutionDate = JSON.parse(responseBody).paymentInformation.requestedExecutionDate;    \r",
													"//State is correct\r",
													"let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
													"//Creditor agent is correct\r",
													"let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent.bic;\r",
													"//Debtor address is correct\r",
													"let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
													"let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
													"//Debtor account is correct\r",
													"let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
													"let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo; \r",
													"//Creditor account is correct\r",
													"let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
													"let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;   \r",
													"//Structured remittance information is correct\r",
													"let requestBodyStructuredRemittance = JSON.parse(request.data).paymentInformation.remittanceInformation.structured;\r",
													"let responseBodyStructuredRemittance = JSON.parse(responseBody).paymentInformation.remittanceInformation.structured; \r",
													"\r",
													"pm.test(\"Payment is retrieved\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Instructed amount is correct\", () => {\r",
													"  pm.expect(responseBodyInstructedAmount).to.eql(pm.environment.get(\"instructedAmount\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Execution date is correct\", () => {\r",
													"  pm.expect(responseBodyExecutionDate).to.eql(pm.environment.get(\"requestedExecutionDate\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Creditor agent is correct\", () => {\r",
													"  pm.expect(responseBodyCreditorAgent).to.eql(JSON.parse(pm.environment.get(\"creditorAgentBicSEPA\")));\r",
													"});\r",
													"\r",
													"pm.test(\"Debtor address is correct\", () => {\r",
													"  pm.expect(responseBodyDebtorAddress.streetName).to.eql(JSON.parse(pm.environment.get(\"debtorStreetName\")));\r",
													"  pm.expect(responseBodyDebtorAddress.postalCode).to.eql(JSON.parse(pm.environment.get(\"debtorPostalCode\")));\r",
													"  pm.expect(responseBodyDebtorAddress.townName).to.eql(JSON.parse(pm.environment.get(\"debtorTownName\")));\r",
													"});\r",
													"\r",
													"pm.test(\"Debtor account is correct\", () => {\r",
													"  pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"});\r",
													"\r",
													"pm.test(\"Creditor account is correct\", () => {\r",
													"  pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"});\r",
													"\r",
													"pm.test(\"Structured remittance information is correct\", () => {\r",
													"  pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance);\r",
													"});\r",
													"\r",
													"//Determine if assertion passed at whole\r",
													"pm.response.to.have.status(200)\r",
													"&& pm.expect(responseBodyInstructedAmount).to.eql(pm.environment.get(\"instructedAmount\"))\r",
													"&& pm.expect(responseBodyExecutionDate).to.eql(pm.environment.get(\"requestedExecutionDate\"))\r",
													"&& pm.expect(responseBodyCreditorAgent).to.eql(JSON.parse(pm.environment.get(\"creditorAgentBicSEPA\")))\r",
													"&& pm.expect(responseBodyDebtorAddress.streetName).to.eql(JSON.parse(pm.environment.get(\"debtorStreetName\")))\r",
													"&& pm.expect(responseBodyDebtorAddress.postalCode).to.eql(JSON.parse(pm.environment.get(\"debtorPostalCode\")))\r",
													"&& pm.expect(responseBodyDebtorAddress.townName).to.eql(JSON.parse(pm.environment.get(\"debtorTownName\")))\r",
													"&& pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
													"&& pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
													"&& pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"storeOnly\": false,\r\n\"locked\": false,\r\n\"categoryPurposeCode\": \"SALA\",\r\n\"paymentInformation\": {\r\n\"endToEndId\": {{endToEndId}},\r\n\"instructedAmount\": {\r\n\"currency\": {\r\n\"code\": \"EUR\"\r\n},\r\n\"value\": 312.00\r\n},\r\n\"remittanceInformation\": {\r\n\"unstructured\": {{unstructured}},\r\n\"structured\": {{structuredRemittanceRF}}\r\n},\r\n\"instructionIdentification\": {{instructionIdentification}},\r\n\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\"instructionPriority\": \"NORMAL\",\r\n\"creditor\": {\r\n\"name\": {{name}},\r\n\"address\": {\r\n\"adrLine1\": {{adrLine1}},\r\n\"adrLine2\": {{adrLine2}},\r\n\"streetName\": {{streetName}},\r\n\"buildingNm\": {{buildingNm}},\r\n\"postalCode\": {{postalCode}},\r\n\"townName\": {{townName}},\r\n\"country\": {{country}}\r\n}\r\n},\r\n\"creditorAccountNo\": {{creditorAccountNoSEPA}},\r\n\"creditorAgent\": {\r\n\"bic\": {{creditorAgentBicSEPA}}\r\n},\r\n\"debtor\": {\r\n\"name\": {{debtorAccountName}},\r\n\"address\": {\r\n\"streetName\": {{debtorStreetName}},\r\n\"postalCode\": {{debtorPostalCode}},\r\n\"townName\": {{debtorTownName}}\r\n}\r\n},\r\n\"debtorAccountNo\":  {{debtorAccountNo}}\r\n}\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/sepa/{{tenant}}/v2/credittransfer/{{newPaymentSepaID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"sepa",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"{{newPaymentSepaID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "updatePaymentSepa",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96ee9651-4e6e-4a83-a257-55d56e136859",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"//pm.test(pm.globals.get(\"testRailTestCases\") + \" Payment is created and assertions are passed\", function () {\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment is updated and assertions are passed\", function () {\r",
													"\r",
													"//Instructed amount is correct\r",
													"let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
													"let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
													"//Execution date is correct\r",
													"let requestBodyExecutionDate = JSON.parse(request.data).paymentInformation.requestedExecutionDate;\r",
													"let responseBodyExecutionDate = JSON.parse(responseBody).paymentInformation.requestedExecutionDate;    \r",
													"//State is correct\r",
													"let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
													"//Creditor agent is correct\r",
													"let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent.bic;\r",
													"let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent.bic;\r",
													"//Debtor address is correct\r",
													"let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
													"let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
													"//Debtor account is correct\r",
													"let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
													"let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo; \r",
													"//Creditor account is correct\r",
													"let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
													"let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;   \r",
													"//Structured remittance information is correct\r",
													"let requestBodyStructuredRemittance = JSON.parse(request.data).paymentInformation.remittanceInformation.structured;\r",
													"let responseBodyStructuredRemittance = JSON.parse(responseBody).paymentInformation.remittanceInformation.structured; \r",
													"\r",
													"pm.test(\"Payment is updated\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Instructed amount is correct\", () => {\r",
													"  pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"});\r",
													"\r",
													"pm.test(\"Execution date is correct\", () => {\r",
													"  pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate);\r",
													"});\r",
													"\r",
													"pm.test(\"Creditor agent is correct\", () => {\r",
													"  pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
													"});\r",
													"\r",
													"pm.test(\"Debtor address is correct\", () => {\r",
													"  pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName);\r",
													"  pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
													"  pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
													"});\r",
													"\r",
													"pm.test(\"Debtor account is correct\", () => {\r",
													"  pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"});\r",
													"\r",
													"pm.test(\"Creditor account is correct\", () => {\r",
													"  pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"});\r",
													"\r",
													"pm.test(\"Structured remittance information is correct\", () => {\r",
													"  pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance);\r",
													"});\r",
													"\r",
													"//Determine if assertion passed at whole\r",
													"pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"&& pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate) \r",
													"&& pm.expect(responseBodyCreditorAgent.bic).to.eql(requestBodyCreditorAgent.bic) \r",
													"&& pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName) \r",
													"&& pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode) \r",
													"&& pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName) \r",
													"&& pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
													"&& pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
													"&& pm.expect(responseBodyStructuredRemittance).to.eql(requestBodyStructuredRemittance);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ed4149e4-3b82-4013-8999-2fa27812ab16",
												"exec": [
													"eval(globals.randomizeVariables)();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "content-type",
												"value": "application/json; charset=UTF-8"
											},
											{
												"key": "accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"disabled": true
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"storeOnly\": false,\r\n\"locked\": false,\r\n\"categoryPurposeCode\": \"SALA\",\r\n\"paymentInformation\": {\r\n\"endToEndId\": {{endToEndId}},\r\n\"instructedAmount\": {\r\n\"currency\": {\r\n\"code\": \"EUR\"\r\n},\r\n\"value\": 122.00\r\n},\r\n\"remittanceInformation\": {\r\n\"unstructured\": {{unstructured}},\r\n\"structured\": {{structuredRemittanceRF}}\r\n},\r\n\"instructionIdentification\": {{instructionIdentification}},\r\n\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\"instructionPriority\": \"NORMAL\",\r\n\"creditor\": {\r\n\"name\": {{name}},\r\n\"address\": {\r\n\"adrLine1\": {{adrLine1}},\r\n\"adrLine2\": {{adrLine2}},\r\n\"streetName\": {{streetName}},\r\n\"buildingNm\": {{buildingNm}},\r\n\"postalCode\": {{postalCode}},\r\n\"townName\": {{townName}},\r\n\"country\": {{country}}\r\n}\r\n},\r\n\"creditorAccountNo\": {{creditorAccountNoSEPA}},\r\n\"creditorAgent\": {\r\n\"bic\": {{creditorAgentBicSEPA}}\r\n},\r\n\"debtor\": {\r\n\"name\": {{debtorAccountName}},\r\n\"address\": {\r\n\"streetName\": {{debtorStreetName}},\r\n\"postalCode\": {{debtorPostalCode}},\r\n\"townName\": {{debtorTownName}}\r\n}\r\n},\r\n\"debtorAccountNo\":  {{debtorAccountNo}}\r\n}\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/sepa/{{tenant}}/v2/credittransfer/{{newPaymentSepaID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"sepa",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"{{newPaymentSepaID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "deletePaymentSepa",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b805315b-12ae-4f45-85f9-14230e6cb91e",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" SEPA payment is deleted and not exists anymore\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Log important stuff\r",
													"if (pm.response.to.have.status(200)){\r",
													"    console.log(\"Deleted SEPA payment ID:\" + pm.globals.get(\"newPaymentSepaID\"));\r",
													"    pm.globals.set(\"deletedPaymentSepaID\",pm.globals.get(\"newPaymentSepaID\"));\r",
													"    pm.globals.unset(\"newPaymentSepaID\");\r",
													"}\r",
													"else {\r",
													"    console.log(\"Failed to delete SEPA payment with ID: \" + pm.globals.get(\"newPaymentSepaID\"));\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8b0efd50-c002-40d7-bf02-ad82c22ce7a7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/sepa/{{tenant}}/v2/credittransfer/{{newPaymentSepaID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"sepa",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"{{newPaymentSepaID}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "SWIFT",
							"item": [
								{
									"name": "createPaymentSwift",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9c72540c-8b6e-4022-beb7-ef4a180f1b6b",
												"exec": [
													"eval(globals.randomizeVariables)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "05a88f70-ba02-48cd-9fae-2c7979c3c899",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"//pm.test(pm.globals.get(\"testRailTestCases\") + \" Payment is created and assertions are passed\", function () {\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment is created and assertions are passed\", function () {\r",
													"\r",
													"//Instructed amount is correct\r",
													"let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
													"let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
													"//Execution date is correct\r",
													"let requestBodyExecutionDate = JSON.parse(request.data).paymentInformation.requestedExecutionDate;\r",
													"let responseBodyExecutionDate = JSON.parse(responseBody).paymentInformation.requestedExecutionDate;    \r",
													"//State is correct\r",
													"let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
													"//Creditor agent is correct\r",
													"let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent.bic;\r",
													"let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent.bic;\r",
													"//Debtor address is correct\r",
													"let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
													"let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
													"//Debtor account is correct\r",
													"let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
													"let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo;   \r",
													"//Creditor account is correct\r",
													"let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
													"let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;   \r",
													"//Charge bearer is correct    \r",
													"let jsonDataResponseChargeBearer = pm.response.json().chargeBearer;\r",
													"\r",
													"pm.test(\"Instructed amount is correct\", () => {\r",
													"  pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"});\r",
													"\r",
													"pm.test(\"Execution date is correct\", () => {\r",
													"  pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate);\r",
													"});\r",
													"\r",
													"pm.test(\"Creditor agent is correct\", () => {\r",
													"  pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
													"});\r",
													"\r",
													"pm.test(\"Debtor address is correct\", () => {\r",
													"  pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName);\r",
													"  pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
													"  pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
													"});\r",
													"\r",
													"pm.test(\"Debtor account is correct\", () => {\r",
													"  pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"});\r",
													"\r",
													"pm.test(\"Creditor account is correct\", () => {\r",
													"  pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"});\r",
													"\r",
													"pm.test(\"Charge bearer is correct\", () => {\r",
													"  pm.expect(jsonDataResponseChargeBearer).to.eql(\"SHAR\");\r",
													"});\r",
													"\r",
													"// check if payment is created\r",
													"if (pm.response.to.have.status(201)){\r",
													"    var responseData = JSON.parse(responseBody);\r",
													"    pm.globals.set(\"newPaymentSwiftID\", responseData.paymentId);\r",
													"    console.log(\"New payment ID: \" + pm.globals.get(\"newPaymentSwiftID\"));\r",
													"}\r",
													"else {\r",
													"    console.log(\"Failed to create payment with ID:\" + pm.globals.get(\"newPaymentSwiftID\"));\r",
													"    pm.globals.unset(\"newPaymentSwiftID\");\r",
													"}\r",
													"\r",
													"//Determine if assertion passed at whole\r",
													"pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"&& pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate) \r",
													"&& pm.expect(responseBodyCreditorAgent.bic).to.eql(requestBodyCreditorAgent.bic) \r",
													"&& pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName) \r",
													"&& pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode) \r",
													"&& pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName) \r",
													"&& pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
													"&& pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
													"&& pm.expect(jsonDataResponseChargeBearer).to.eql(\"SHAR\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"storeOnly\": false,\r\n\"locked\": false,\r\n\"categoryPurposeCode\": \"SALA\",\r\n\"paymentInformation\": {\r\n\"endToEndId\": {{endToEndId}},\r\n\"instructedAmount\": {\r\n\"currency\": {\r\n\"code\": \"GBP\"\r\n},\r\n\"value\": 1\r\n},\r\n\"remittanceInformation\": {\r\n\"unstructured\": {{unstructured}},\r\n\"structured\": {{structuredRemittanceRF}}\r\n},\r\n\"instructionIdentification\": {{instructionIdentification}},\r\n\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\"instructionPriority\": \"NORMAL\",\r\n\"creditor\": {\r\n\"name\": {{name}},\r\n\"address\": {\r\n\"adrLine1\": {{adrLine1}},\r\n\"adrLine2\": {{adrLine2}},\r\n\"streetName\": {{streetName}},\r\n\"buildingNm\": {{buildingNm}},\r\n\"postalCode\": {{postalCode}},\r\n\"townName\": {{townName}},\r\n\"country\": {{country}}\r\n}\r\n},\r\n\"creditorAccountNo\": {{creditorAccountNoSWIFT}},\r\n\"creditorAgent\": {\r\n\"bic\": {{creditorAgentBicSWIFT}}\r\n},\r\n\"debtor\": {\r\n\"name\": {{debtorAccountName}},\r\n\"address\": {\r\n\"streetName\": {{debtorStreetName}},\r\n\"postalCode\": {{debtorPostalCode}},\r\n\"townName\": {{debtorTownName}}\r\n}\r\n},\r\n\"debtorAccountNo\":  {{debtorAccountNo}}\r\n}\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/swift/{{tenant}}/v2/credittransfer",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"swift",
												"{{tenant}}",
												"v2",
												"credittransfer"
											]
										}
									},
									"response": []
								},
								{
									"name": "createPaymentSwiftV2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6bd40450-09b6-4eb2-b672-981852dd7dea",
												"exec": [
													"eval(globals.randomizeVariables)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5e34c468-2683-411b-8d1e-986c358c4f21",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"//pm.test(pm.globals.get(\"testRailTestCases\") + \" Payment is created and assertions are passed\", function () {\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment is created and assertions are passed\", function () {\r",
													"\r",
													"//Instructed amount is correct\r",
													"let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
													"let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
													"//Execution date is correct\r",
													"let requestBodyExecutionDate = JSON.parse(request.data).paymentInformation.requestedExecutionDate;\r",
													"let responseBodyExecutionDate = JSON.parse(responseBody).paymentInformation.requestedExecutionDate;    \r",
													"//State is correct\r",
													"let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
													"//Creditor agent is correct\r",
													"let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent;\r",
													"let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent;\r",
													"//Debtor address is correct\r",
													"let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
													"let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
													"//Debtor account is correct\r",
													"let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
													"let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo;   \r",
													"//Creditor account is correct\r",
													"let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
													"let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;   \r",
													"//Charge bearer is correct    \r",
													"let jsonDataResponseChargeBearer = pm.response.json().chargeBearer;\r",
													"\r",
													"pm.test(\"Instructed amount is correct\", () => {\r",
													"  pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"});\r",
													"\r",
													"pm.test(\"Execution date is correct\", () => {\r",
													"  pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate);\r",
													"});\r",
													"\r",
													"pm.test(\"Creditor agent is correct\", () => {\r",
													"  pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
													"});\r",
													"\r",
													"pm.test(\"Debtor address is correct\", () => {\r",
													"  pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName);\r",
													"  pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
													"  pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
													"});\r",
													"\r",
													"pm.test(\"Debtor account is correct\", () => {\r",
													"  pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"});\r",
													"\r",
													"pm.test(\"Creditor account is correct\", () => {\r",
													"  pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"});\r",
													"\r",
													"pm.test(\"Charge bearer is correct\", () => {\r",
													"  pm.expect(jsonDataResponseChargeBearer).to.eql(\"SHAR\");\r",
													"});\r",
													"\r",
													"// check if payment is created\r",
													"if (pm.response.to.have.status(201)){\r",
													"    var responseData = JSON.parse(responseBody);\r",
													"    pm.globals.set(\"newPaymentSwiftID\", responseData.paymentId);\r",
													"    console.log(\"New payment ID: \" + pm.globals.get(\"newPaymentSwiftID\"));\r",
													"}\r",
													"else {\r",
													"    console.log(\"Failed to create payment with ID:\" + pm.globals.get(\"newPaymentSwiftID\"));\r",
													"    pm.globals.unset(\"newPaymentSwiftID\");\r",
													"}\r",
													"\r",
													"//Determine if assertion passed at whole\r",
													"pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"&& pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate) \r",
													"&& pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent) \r",
													"&& pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName) \r",
													"&& pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode) \r",
													"&& pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName) \r",
													"&& pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
													"&& pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
													"&& pm.expect(jsonDataResponseChargeBearer).to.eql(\"SHAR\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"storeOnly\": false,\r\n\"locked\": false,\r\n\"paymentInformation\": {\r\n\"endToEndId\": {{endToEndId}},\r\n\"instructedAmount\": {\r\n\"currency\": {\r\n\"code\": \"SEK\"\r\n},\r\n\"value\": 4.23\r\n},\r\n\"remittanceInformation\": {\r\n\"unstructured\": {{unstructured}},\r\n\"structured\": {{structuredRemittanceRF}}\r\n},\r\n\"instructionIdentification\": {{instructionIdentification}},\r\n\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\"instructionPriority\": \"NORMAL\",\r\n\"creditor\": {\r\n\"name\": {{name}},\r\n\"address\": {\r\n\"adrLine1\": {{adrLine1}},\r\n\"adrLine2\": {{adrLine2}},\r\n\"streetName\": {{streetName}},\r\n\"buildingNm\": {{buildingNm}},\r\n\"postalCode\": {{postalCode}},\r\n\"townName\": {{townName}},\r\n\"country\": {{country}}\r\n}\r\n},\r\n\"creditorAccountNo\": {{creditorAccountNoSWIFTBankAcco}},\r\n\"creditorAgent\": {\r\n    \t\t\"name1\": {{creditorAgentName1SWIFT}},\r\n    \t\t\"name2\": {{creditorAgentName2SWIFT}},\r\n    \t\t\"street\": {{creditorAgentStreetSWIFT}},\r\n    \t\t\"city\": {{creditorAgentCitySWIFT}},\r\n    \t\t\"country\": {{creditorAgentCountrySWIFT}}\r\n},\r\n\"debtor\": {\r\n\"name\": {{debtorAccountName}},\r\n\"address\": {\r\n\"streetName\": {{debtorStreetName}},\r\n\"postalCode\": {{debtorPostalCode}},\r\n\"townName\": {{debtorTownName}}\r\n}\r\n},\r\n\"debtorAccountNo\": {{debtorAccountNo}}\r\n}\t\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/swift/{{tenant}}/v2/credittransfer",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"swift",
												"{{tenant}}",
												"v2",
												"credittransfer"
											]
										}
									},
									"response": []
								},
								{
									"name": "createPaymentSwiftV3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6bd40450-09b6-4eb2-b672-981852dd7dea",
												"exec": [
													"eval(globals.randomizeVariables)();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5e34c468-2683-411b-8d1e-986c358c4f21",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"//pm.test(pm.globals.get(\"testRailTestCases\") + \" Payment is created and assertions are passed\", function () {\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment is created and assertions are passed\", function () {\r",
													"\r",
													"//Instructed amount is correct\r",
													"let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
													"let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
													"//Execution date is correct\r",
													"let requestBodyExecutionDate = JSON.parse(request.data).paymentInformation.requestedExecutionDate;\r",
													"let responseBodyExecutionDate = JSON.parse(responseBody).paymentInformation.requestedExecutionDate;    \r",
													"//State is correct\r",
													"let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
													"//Creditor agent is correct\r",
													"let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent;\r",
													"let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent;\r",
													"//Debtor address is correct\r",
													"let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
													"let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
													"//Debtor account is correct\r",
													"let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
													"let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo;   \r",
													"//Creditor account is correct\r",
													"let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
													"let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;   \r",
													"//Charge bearer is correct    \r",
													"let jsonDataResponseChargeBearer = pm.response.json().chargeBearer;\r",
													"\r",
													"pm.test(\"Instructed amount is correct\", () => {\r",
													"  pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"});\r",
													"\r",
													"pm.test(\"Execution date is correct\", () => {\r",
													"  pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate);\r",
													"});\r",
													"\r",
													"pm.test(\"Creditor agent is correct\", () => {\r",
													"  pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
													"});\r",
													"\r",
													"pm.test(\"Debtor address is correct\", () => {\r",
													"  pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName);\r",
													"  pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
													"  pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
													"});\r",
													"\r",
													"pm.test(\"Debtor account is correct\", () => {\r",
													"  pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"});\r",
													"\r",
													"pm.test(\"Creditor account is correct\", () => {\r",
													"  pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"});\r",
													"\r",
													"pm.test(\"Charge bearer is correct\", () => {\r",
													"  pm.expect(jsonDataResponseChargeBearer).to.eql(\"SHAR\");\r",
													"});\r",
													"\r",
													"// check if payment is created\r",
													"if (pm.response.to.have.status(201)){\r",
													"    var responseData = JSON.parse(responseBody);\r",
													"    pm.globals.set(\"newPaymentSwiftID\", responseData.paymentId);\r",
													"    console.log(\"New payment ID: \" + pm.globals.get(\"newPaymentSwiftID\"));\r",
													"}\r",
													"else {\r",
													"    console.log(\"Failed to create payment with ID:\" + pm.globals.get(\"newPaymentSwiftID\"));\r",
													"    pm.globals.unset(\"newPaymentSwiftID\");\r",
													"}\r",
													"\r",
													"//Determine if assertion passed at whole\r",
													"pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"&& pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate) \r",
													"&& pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent) \r",
													"&& pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName) \r",
													"&& pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode) \r",
													"&& pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName) \r",
													"&& pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
													"&& pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
													"&& pm.expect(jsonDataResponseChargeBearer).to.eql(\"SHAR\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"storeOnly\": false,\r\n\"locked\": false,\r\n\"paymentInformation\": {\r\n\"endToEndId\": {{endToEndId}},\r\n\"instructedAmount\": {\r\n\"currency\": {\r\n\"code\": \"SEK\"\r\n},\r\n\"value\": 4.23\r\n},\r\n\"remittanceInformation\": {\r\n\"unstructured\": {{unstructured}},\r\n\"structured\": {{structuredRemittanceRF}}\r\n},\r\n\"instructionIdentification\": {{instructionIdentification}},\r\n\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\"instructionPriority\": \"NORMAL\",\r\n\"creditor\": {\r\n\"name\": {{name}},\r\n\"address\": {\r\n\"adrLine1\": {{adrLine1}},\r\n\"adrLine2\": {{adrLine2}},\r\n\"streetName\": {{streetName}},\r\n\"buildingNm\": {{buildingNm}},\r\n\"postalCode\": {{postalCode}},\r\n\"townName\": {{townName}},\r\n\"country\": {{country}}\r\n}\r\n},\r\n\"creditorAccountNo\": {{creditorAccountNoSWIFTBankAcco}},\r\n\"creditorAgent\": {\r\n    \t\t\"name1\": {{creditorAgentName1SWIFT}},\r\n    \t\t\"name2\": {{creditorAgentName2SWIFT}},\r\n    \t\t\"street\": {{creditorAgentStreetSWIFT}},\r\n    \t\t\"city\": {{creditorAgentCitySWIFT}},\r\n    \t\t\"country\": {{creditorAgentCountrySWIFT}}\r\n},\r\n\"debtor\": {\r\n\"name\": {{debtorAccountName}},\r\n\"address\": {\r\n\"streetName\": {{debtorStreetName}},\r\n\"postalCode\": {{debtorPostalCode}},\r\n\"townName\": {{debtorTownName}}\r\n}\r\n},\r\n\"debtorAccountNo\": {{debtorAccountNo}}\r\n}\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/swift/{{tenant}}/v2/credittransfer",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"swift",
												"{{tenant}}",
												"v2",
												"credittransfer"
											]
										}
									},
									"response": []
								},
								{
									"name": "getPaymentSwift",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9c72540c-8b6e-4022-beb7-ef4a180f1b6b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "05a88f70-ba02-48cd-9fae-2c7979c3c899",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment is retrieved and assertions are passed\", function () {\r",
													"\r",
													"    //Payment status is correct\r",
													"    let jsonDataPaymentState = pm.response.json().paymentState;\r",
													"    //Debtor is correct\r",
													"    let jsonDataDebtorName = pm.response.json().paymentInformation.debtor.name;\r",
													"    let jsonDataDebtorAccount = pm.response.json().paymentInformation.debtorAccountNo;\r",
													"    //Creditor agent is correct\r",
													"    let jsonResponseCreditorAgent = pm.response.json().paymentInformation.creditorAgent.bic;\r",
													"\r",
													"\r",
													"    pm.test(\"Payment is retrieved\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Debtor is correct\", () => {\r",
													"      pm.expect(jsonDataDebtorName).to.eql(JSON.parse(pm.environment.get(\"debtorAccountName\")));\r",
													"      pm.expect(jsonDataDebtorAccount).to.eql(JSON.parse(pm.environment.get(\"debtorAccountNo\")));\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Creditor agent is correct\", () => {\r",
													"      pm.expect(jsonResponseCreditorAgent).to.eql(JSON.parse(pm.environment.get(\"creditorAgentBicSWIFT\")));\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Body matches string\", function () {\r",
													"      pm.expect(pm.response.text()).to.include(JSON.parse(pm.environment.get(\"debtorAccountName\")));\r",
													"    });\r",
													"\r",
													"    pm.response.to.have.status(200)\r",
													"    && pm.expect(jsonDataDebtorName).to.eql(JSON.parse(pm.environment.get(\"debtorAccountName\")))\r",
													"    && pm.expect(jsonDataDebtorAccount).to.eql(JSON.parse(pm.environment.get(\"debtorAccountNo\")))\r",
													"    && pm.expect(jsonResponseCreditorAgent).to.eql(JSON.parse(pm.environment.get(\"creditorAgentBicSWIFT\")))\r",
													"    && pm.expect(pm.response.text()).to.include(JSON.parse(pm.environment.get(\"debtorAccountName\")));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/swift/{{tenant}}/v2/credittransfer/{{newPaymentSwiftID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"swift",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"{{newPaymentSwiftID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "updatePaymentSwift",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99e48e52-0f3e-4849-8aaf-b607243a0667",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment is updated and assertions are passed\", function () {\r",
													"\r",
													"//Instructed amount is correct\r",
													"let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
													"let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
													"//Execution date is correct    \r",
													"let requestBodyExecutionDate = JSON.parse(request.data).paymentInformation.requestedExecutionDate;\r",
													"let responseBodyExecutionDate = JSON.parse(responseBody).paymentInformation.requestedExecutionDate;    \r",
													"//State is correct\r",
													"let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
													"//Creditor agent is correct    \r",
													"let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent.bic;\r",
													"let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent.bic;\r",
													"//Debtor address is correct    \r",
													"let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
													"let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
													"//Debtor account is correct    \r",
													"let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
													"let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo;   \r",
													"//Creditor account is correct    \r",
													"let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
													"let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;   \r",
													"//Charge bearer is correct    \r",
													"let requestBodyChargeBearer = JSON.parse(request.data).chargeBearer;\r",
													"let responseBodyChargeBearer = JSON.parse(responseBody).chargeBearer;       \r",
													"\r",
													"\r",
													"pm.test(\"Payment is updated\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Instructed amount is correct\", () => {\r",
													"  pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"});\r",
													"\r",
													"pm.test(\"Execution date is correct\", () => {\r",
													"  pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate);\r",
													"});\r",
													"\r",
													"pm.test(\"Creditor agent is correct\", () => {\r",
													"  pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
													"});\r",
													"\r",
													"pm.test(\"Debtor address is correct\", () => {\r",
													"  pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName);\r",
													"  pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
													"  pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
													"});\r",
													"\r",
													"pm.test(\"Debtor account is correct\", () => {\r",
													"  pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"});\r",
													"\r",
													"pm.test(\"Creditor account is correct\", () => {\r",
													"  pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"});\r",
													"\r",
													"pm.test(\"Charge bearer is correct\", () => {\r",
													"  pm.expect(responseBodyChargeBearer).to.eql(requestBodyChargeBearer);\r",
													"});\r",
													"\r",
													"pm.response.to.have.status(200)\r",
													"&& pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount)\r",
													"&& pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate)\r",
													"&& pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent)\r",
													"&& pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName)\r",
													"&& pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode)\r",
													"&& pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName)\r",
													"&& pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
													"&& pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo)\r",
													"&& pm.expect(requestBodyChargeBearer).to.eql(responseBodyChargeBearer);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0415c0ea-9fa8-4aec-adfb-7b35a10b7f05",
												"exec": [
													"eval(globals.randomizeVariables)();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"storeOnly\": false,\r\n\"locked\": false,\r\n\"paymentInformation\": {\r\n\"endToEndId\": {{endToEndId}},\r\n\"instructedAmount\": {\r\n\"currency\": {\r\n\"code\": \"GBP\"\r\n},\r\n\"value\": 45\r\n},\r\n\"remittanceInformation\": {\r\n\"unstructured\": {{unstructured}},\r\n\"structured\": {{structuredRemittanceRF}}\r\n},\r\n\"instructionIdentification\": {{instructionIdentification}},\r\n\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\"instructionPriority\": \"NORMAL\",\r\n\"creditor\": {\r\n\"name\": \"MDB-R191-Test\",\r\n\"address\": {\r\n\"adrLine1\": {{adrLine1}},\r\n\"adrLine2\": {{adrLine2}},\r\n\"streetName\": {{streetName}},\r\n\"buildingNm\": {{buildingNm}},\r\n\"postalCode\": {{postalCode}},\r\n\"townName\": {{townName}},\r\n\"country\": {{country}}\r\n}\r\n},\r\n\"creditorAccountNo\": {{creditorAccountNoSWIFT}},\r\n\"creditorAgent\": {\r\n\"bic\": {{creditorAgentBicSWIFT}}\r\n},\r\n\"debtor\": {\r\n\"name\": {{debtorAccountName}},\r\n\"address\": {\r\n\"streetName\": {{debtorStreetName}},\r\n\"postalCode\": {{debtorPostalCode}},\r\n\"townName\": {{debtorTownName}}\r\n}\r\n},\r\n\"debtorAccountNo\":  {{debtorAccountNo}}\r\n},\r\n\"chargeBearer\": \"SHAR\"\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/swift/{{tenant}}/v2/credittransfer/{{newPaymentSwiftID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"swift",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"{{newPaymentSwiftID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "deletePaymentSwift",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7bea7b10-ea3c-4e3d-9ded-3ccda02daa46",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment is deleted and not exists anymore\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Log important stuff\r",
													"if (pm.response.to.have.status(200)){\r",
													"    console.log(\"Deleted payment ID:\" + pm.globals.get(\"newPaymentSwiftID\"));\r",
													"    pm.globals.unset(\"newPaymentSwiftID\");\r",
													"}\r",
													"else {\r",
													"    console.log(\"Failed to delete payment with ID:\" + pm.globals.get(\"newPaymentSwiftID\"));\r",
													"    pm.globals.set(\"newPaymentSwiftID\", \"ERROR!\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text",
												"disabled": true
											},
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "Bearer {{access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{environment}}/banking-api/payment/swift/{{tenant}}/v2/credittransfer/{{newPaymentSwiftID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"swift",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"{{newPaymentSwiftID}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Swiss",
							"item": [
								{
									"name": "Orange",
									"item": [
										{
											"name": "Standing order",
											"item": [
												{
													"name": "createPaymentOrangeSO",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
																"exec": [
																	"// Execute standard tests from PrS using eval()\r",
																	"//eval(globals.commonTests)();\r",
																	"\r",
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Orange (standing order) payment is created and assertions are passed\", function () {\r",
																	"\r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    //Postal account is correct\r",
																	"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
																	"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo; \r",
																	"    //categoryPurposeCode is correct\r",
																	"    let requestBodyCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
																	"    let responseBodyCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode; \r",
																	"    //Standing order info is correct\r",
																	"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
																	"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
																	"    //Remittance Information is correct\r",
																	"    let requestBodyRemittanceInformation = JSON.parse(request.data).remittanceInformation;\r",
																	"    let responseBodyRemittanceInformation = JSON.parse(responseBody).remittanceInformation; \r",
																	"    \r",
																	"    pm.test(\"Instructed amount is correct\", () => {\r",
																	"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Debtor account is correct\", () => {\r",
																	"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Postal account is correct\", () => {\r",
																	"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Category purpose code is correct\", () => {\r",
																	"      pm.expect(responseBodyCategoryPurposeCode).to.eql(requestBodyCategoryPurposeCode);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Standing order info is correct\", () => {\r",
																	"      pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Remittance Information is correct\", () => {\r",
																	"      pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
																	"    });\r",
																	"    \r",
																	"    // check if payment is created\r",
																	"    if (pm.response.to.have.status(201)){\r",
																	"        var responseData = JSON.parse(responseBody);\r",
																	"        pm.globals.set(\"newPaymentOrangeID\", responseData.paymentId);\r",
																	"        pm.globals.set(\"newPaymentOrangeStOrInfo\", responseData.standingOrder);\r",
																	"        console.log(\"New Orange (standing order) payment ID: \" + pm.globals.get(\"newPaymentOrangeID\"));\r",
																	"    }\r",
																	"    else {\r",
																	"        console.log(\"Failed to create Orange (standing order) payment\");\r",
																	"    }\r",
																	"    \r",
																	"    //Determine if assertion passed at whole\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
																	"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
																	"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
																	"    && pm.expect(responseBodyCategoryPurposeCode).to.eql(requestBodyCategoryPurposeCode)\r",
																	"    && pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation)\r",
																	"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
																"exec": [
																	"eval(globals.randomizeVariables)();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"creditorAccountNo\":  {{orangeAccountNo}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.01\r\n    },\r\n    \"remittanceInformation\": {\r\n        \"structured\": \"224812900001336000000054583\"\r\n    },\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n    \"debitNote\": \"Expenses during company trip\",\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
														},
														"url": {
															"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/orange/",
															"host": [
																"{{environment}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"orange",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "getPaymentOrangeSO",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
																"exec": [
																	"// Execute standard tests from PrS using eval()\r",
																	"//eval(globals.commonTests)();\r",
																	"\r",
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Orange (standing order) payment is retrieved and assertions are passed\", function () {\r",
																	"\r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    //Postal account is correct\r",
																	"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
																	"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
																	"    //Category purpose code is correct\r",
																	"    let requestBodyResponseCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
																	"    let responseBodyResponseCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode;   \r",
																	"    //Standing order info is correct\r",
																	"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
																	"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
																	"    //Remittance Information is correct\r",
																	"    let requestBodyRemittanceInformation = JSON.parse(request.data).remittanceInformation;\r",
																	"    let responseBodyRemittanceInformation = JSON.parse(responseBody).remittanceInformation; \r",
																	"    \r",
																	"    pm.test(\"Instructed amount is correct\", () => {\r",
																	"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Debtor account is correct\", () => {\r",
																	"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Postal account is correct\", () => {\r",
																	"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Category purpose code account is correct\", () => {\r",
																	"      pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Standing order info is correct\", () => {\r",
																	"      pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Remittance Information is correct\", () => {\r",
																	"      pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
																	"    });\r",
																	"    \r",
																	"    //Determine if assertion passed at whole\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
																	"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
																	"    && pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode)\r",
																	"    && pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation)\r",
																	"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"creditorAccountNo\":  {{orangeAccountNo}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.01\r\n    },\r\n    \"remittanceInformation\": {\r\n        \"structured\": \"224812900001336000000054583\"\r\n    },\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n    \"debitNote\": \"Expenses during company trip\",\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
														},
														"url": {
															"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/orange/{{newPaymentOrangeID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"orange",
																"{{newPaymentOrangeID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "updatePaymentOrangeSO",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
																"exec": [
																	"// Execute standard tests from PrS using eval()\r",
																	"//eval(globals.commonTests)();\r",
																	"\r",
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Orange (standing order) payment is created and assertions are passed\", function () {\r",
																	"\r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    //Postal account is correct\r",
																	"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
																	"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
																	"    //Category purpose code is correct\r",
																	"    let requestBodyResponseCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
																	"    let responseBodyResponseCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode; \r",
																	"    //Standing order info is correct\r",
																	"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
																	"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
																	"    //Remittance Information is correct\r",
																	"    let requestBodyRemittanceInformation = JSON.parse(request.data).remittanceInformation;\r",
																	"    let responseBodyRemittanceInformation = JSON.parse(responseBody).remittanceInformation; \r",
																	"    \r",
																	"    pm.test(\"Instructed amount is correct\", () => {\r",
																	"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Debtor account is correct\", () => {\r",
																	"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Postal account is correct\", () => {\r",
																	"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Category purpose code account is correct\", () => {\r",
																	"      pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Standing order info is correct\", () => {\r",
																	"      pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Remittance Information is correct\", () => {\r",
																	"      pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
																	"    });\r",
																	"        \r",
																	"    //Determine if assertion passed at whole\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
																	"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
																	"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
																	"    && pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode)\r",
																	"    && pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation)\r",
																	"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);    \r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
																"exec": [
																	"eval(globals.randomizeVariables)();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"creditorAccountNo\":  {{orangeAccountNo}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.02\r\n    },\r\n    \"remittanceInformation\": {\r\n        \"structured\": \"224812900001336000000099999\"\r\n    },\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n    \"debitNote\": \"Expenses during company trip\",\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": true\t\t\r\n\t}\r\n}"
														},
														"url": {
															"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/orange/{{newPaymentOrangeID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"orange",
																"{{newPaymentOrangeID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "deletePaymentOrangeSO",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "b805315b-12ae-4f45-85f9-14230e6cb91e",
																"exec": [
																	"// Execute standard tests from PrS using eval()\r",
																	"//eval(globals.commonTests)();\r",
																	"\r",
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Orange (standing order) payment is deleted and not exists anymore\", function () {\r",
																	"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
																	"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
																	"    pm.response.to.have.status(200) \r",
																	"    && pm.expect(responseBodyStatus).to.eql(true)\r",
																	"    && pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
																	"});\r",
																	"\r",
																	"// Log important stuff\r",
																	"if (pm.response.to.have.status(200)){\r",
																	"    console.log(\"Deleted Orange (standing order) payment ID:\" + pm.globals.get(\"newPaymentOrangeID\"));\r",
																	"    pm.globals.set(\"deletedPaymentOrangeID\",pm.globals.get(\"newPaymentOrangeID\"));\r",
																	"    pm.globals.unset(\"newPaymentOrangeID\");\r",
																	"    pm.globals.unset(\"newPaymentOrangeStOrInfo\");\r",
																	"}\r",
																	"else {\r",
																	"    console.log(\"Failed to delete Orange (standing order) payment with ID:\" + pm.globals.get(\"newPaymentOrangeID\"));\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "8b0efd50-c002-40d7-bf02-ad82c22ce7a7",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/orange/{{newPaymentOrangeID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"orange",
																"{{newPaymentOrangeID}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "createPaymentOrange",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Orange payment is created and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Postal account is correct\r",
															"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
															"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo; \r",
															"    //categoryPurposeCode is correct\r",
															"    let requestBodyCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
															"    let responseBodyCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode; \r",
															"    //Remittance Information is correct\r",
															"    let requestBodyRemittanceInformation = JSON.parse(request.data).remittanceInformation;\r",
															"    let responseBodyRemittanceInformation = JSON.parse(responseBody).remittanceInformation; \r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Postal account is correct\", () => {\r",
															"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Category purpose code is correct\", () => {\r",
															"      pm.expect(responseBodyCategoryPurposeCode).to.eql(requestBodyCategoryPurposeCode);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Remittance Information is correct\", () => {\r",
															"      pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
															"    });\r",
															"    \r",
															"    // check if payment is created\r",
															"    if (pm.response.to.have.status(201)){\r",
															"        var responseData = JSON.parse(responseBody);\r",
															"        pm.globals.set(\"newPaymentOrangeID\", responseData.paymentId);\r",
															"        console.log(\"New Orange payment ID: \" + pm.globals.get(\"newPaymentOrangeID\"));\r",
															"    }\r",
															"    else {\r",
															"        console.log(\"Failed to create Orange payment\");\r",
															"    }\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
															"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
															"    && pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation)    \r",
															"    && pm.expect(responseBodyCategoryPurposeCode).to.eql(requestBodyCategoryPurposeCode);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
														"exec": [
															"eval(globals.randomizeVariables)();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"creditorAccountNo\":  {{orangeAccountNo}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.01\r\n    },\r\n    \"remittanceInformation\": {\r\n        \"structured\": \"224812900001336000000054583\"\r\n    },\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n    \"debitNote\": \"Expenses during company trip\",\r\n    \"categoryPurposeCode\": \"SALA\"\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/orange/",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"orange",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "getPaymentOrange",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Orange payment is retrieved and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Postal account is correct\r",
															"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
															"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
															"    //Category purpose code is correct\r",
															"    let requestBodyResponseCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
															"    let responseBodyResponseCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode;   \r",
															"    //Remittance Information is correct\r",
															"    let requestBodyRemittanceInformation = JSON.parse(request.data).remittanceInformation;\r",
															"    let responseBodyRemittanceInformation = JSON.parse(responseBody).remittanceInformation; \r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Postal account is correct\", () => {\r",
															"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Category purpose code account is correct\", () => {\r",
															"      pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Remittance Information is correct\", () => {\r",
															"      pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
															"    });\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
															"    && pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation)        \r",
															"    && pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"creditorAccountNo\":  {{orangeAccountNo}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.01\r\n    },\r\n    \"remittanceInformation\": {\r\n        \"structured\": \"224812900001336000000054583\"\r\n    },\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n    \"debitNote\": \"Expenses during company trip\",\r\n    \"categoryPurposeCode\": \"SALA\"\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/orange/{{newPaymentOrangeID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"orange",
														"{{newPaymentOrangeID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "updatePaymentOrange",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Orange payment is created and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Postal account is correct\r",
															"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
															"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
															"    //Category purpose code is correct\r",
															"    let requestBodyResponseCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
															"    let responseBodyResponseCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode; \r",
															"    //Remittance Information is correct\r",
															"    let requestBodyRemittanceInformation = JSON.parse(request.data).remittanceInformation;\r",
															"    let responseBodyRemittanceInformation = JSON.parse(responseBody).remittanceInformation; \r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Postal account is correct\", () => {\r",
															"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Category purpose code account is correct\", () => {\r",
															"      pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Remittance Information is correct\", () => {\r",
															"      pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
															"    });\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
															"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
															"    && pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation)        \r",
															"    && pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
														"exec": [
															"eval(globals.randomizeVariables)();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"creditorAccountNo\":  {{orangeAccountNo}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.02\r\n    },\r\n    \"remittanceInformation\": {\r\n        \"structured\": \"224812900001336000000077777\"\r\n    },\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n    \"debitNote\": \"Expenses during private trip\"\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/orange/{{newPaymentOrangeID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"orange",
														"{{newPaymentOrangeID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "deletePaymentOrange",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b805315b-12ae-4f45-85f9-14230e6cb91e",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Orange payment is deleted and not exists anymore\", function () {\r",
															"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
															"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
															"    pm.response.to.have.status(200) \r",
															"    && pm.expect(responseBodyStatus).to.eql(true)\r",
															"    && pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
															"});\r",
															"\r",
															"// Log important stuff\r",
															"if (pm.response.to.have.status(200)){\r",
															"    console.log(\"Deleted Orange payment ID:\" + pm.globals.get(\"newPaymentOrangeID\"));\r",
															"    pm.globals.set(\"deletedPaymentOrangeID\",pm.globals.get(\"newPaymentOrangeID\"));\r",
															"    pm.globals.unset(\"newPaymentOrangeID\");\r",
															"}\r",
															"else {\r",
															"    console.log(\"Failed to delete Orange payment with ID:\" + pm.globals.get(\"newPaymentOrangeID\"));\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8b0efd50-c002-40d7-bf02-ad82c22ce7a7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/orange/{{newPaymentOrangeID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"orange",
														"{{newPaymentOrangeID}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Red",
									"item": [
										{
											"name": "Standing order",
											"item": [
												{
													"name": "createPaymentRedSO",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "4c32ae21-d88b-41bf-a851-d10b72bb04bc",
																"exec": [
																	"// Execute standard tests from PrS using eval()\r",
																	"//eval(globals.commonTests)();\r",
																	"\r",
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Red payment (standing order) is created and assertions are passed\", function () {\r",
																	"\r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    //State is correct\r",
																	"    let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    //Postal account is correct\r",
																	"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
																	"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo; \r",
																	"    //categoryPurposeCode is correct\r",
																	"    let requestBodyCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
																	"    let responseBodyCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode; \r",
																	"    //Standing order info is correct\r",
																	"   let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
																	"   let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder;\r",
																	"    //Remittance information is correct\r",
																	"    let requestBodyRemittanceInformation = JSON.parse(request.data).RemittanceInformation;\r",
																	"    let responseBodyRemittanceInformation = JSON.parse(responseBody).RemittanceInformation; \r",
																	"    \r",
																	"    pm.test(\"Instructed amount is correct\", () => {\r",
																	"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Debtor account is correct\", () => {\r",
																	"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Postal account is correct\", () => {\r",
																	"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Category purpose code is correct\", () => {\r",
																	"      pm.expect(responseBodyCategoryPurposeCode).to.eql(requestBodyCategoryPurposeCode);\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Standing order info is correct\", () => {\r",
																	"     pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"   });\r",
																	"\r",
																	"    pm.test(\"Remittance information is correct\", () => {\r",
																	"      pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
																	"    });\r",
																	"    \r",
																	"    // check if payment is created\r",
																	"    if (pm.response.to.have.status(201)){\r",
																	"        var responseData = JSON.parse(responseBody);\r",
																	"         pm.globals.set(\"newPaymentRedID\", responseData.paymentId);\r",
																	"        pm.globals.set(\"newPaymentRedStOrInfo\", responseData.standingOrder);\r",
																	"        console.log(\"New Red payment (standing order) ID: \" + pm.globals.get(\"newPaymentRedID\"));\r",
																	"    }\r",
																	"    else {\r",
																	"        console.log(\"Failed to create Red payment (standing order)\");\r",
																	"    }\r",
																	"    \r",
																	"    //Determine if assertion passed at whole\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
																	"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
																	"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
																	"    && pm.expect(responseBodyCategoryPurposeCode).to.eql(requestBodyCategoryPurposeCode)\r",
																	"    && pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation)\r",
																	"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "78b1074c-dd61-4c7a-8fcf-9fb2f734f087",
																"exec": [
																	"eval(globals.randomizeVariables)();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"postalAccountNo\": {{postalAccountNo}},\t\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n\t\"categoryPurposeCode\": \"SALA\",    \r\n    \"remittanceInformation\": {\r\n        \"unstructured\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\"\r\n    },\r\n    \"debitNote\": \"Debit reference\",    \r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
														},
														"url": {
															"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/red",
															"host": [
																"{{environment}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"red"
															]
														}
													},
													"response": []
												},
												{
													"name": "getPaymentRedSO",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "5d2b38c3-314e-4d67-aae2-bf2350879ca8",
																"exec": [
																	"// Execute standard tests from PrS using eval()\r",
																	"//eval(globals.commonTests)();\r",
																	"\r",
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Red payment (standing order) is retrieved and assertions are passed\", function () {\r",
																	"\r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    //State is correct\r",
																	"    let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    //Postal account is correct\r",
																	"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
																	"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
																	"    //Category purpose code is correct\r",
																	"    let requestBodyCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
																	"    let responseBodyCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode;\r",
																	"    //Standing order info is correct\r",
																	"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
																	"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder;\r",
																	"    //Remittance information is correct\r",
																	"    let requestBodyRemittanceInformation = JSON.parse(request.data).RemittanceInformation;\r",
																	"    let responseBodyRemittanceInformation = JSON.parse(responseBody).RemittanceInformation; \r",
																	"\r",
																	"    pm.test(\"Standing order is retrieved\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Instructed amount is correct\", () => {\r",
																	"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Debtor account is correct\", () => {\r",
																	"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Postal account is correct\", () => {\r",
																	"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Category purpose code account is correct\", () => {\r",
																	"      pm.expect(responseBodyCategoryPurposeCode).to.eql(requestBodyCategoryPurposeCode);\r",
																	"    });\r",
																	"    \r",
																	"     pm.test(\"Standing order info is correct\", () => {\r",
																	"     pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"   });\r",
																	"\r",
																	"    pm.test(\"Remittance information is correct\", () => {\r",
																	"      pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
																	"    });\r",
																	"    \r",
																	"    //Determine if assertion passed at whole\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
																	"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
																	"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
																	"    && pm.expect(responseBodyCategoryPurposeCode).to.eql(requestBodyCategoryPurposeCode)\r",
																	"   && pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation)\r",
																	"   && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "5ccbf179-8950-4f25-b942-2b31afab22f4",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"categoryPurposeCode\": \"SALA\",\r\n    \"remittanceInformation\": {\r\n        \"unstructured\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\"\r\n    },\r\n\t\"postalAccountNo\": {{postalAccountNo}},\t\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
														},
														"url": {
															"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/red/{{newPaymentRedID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"red",
																"{{newPaymentRedID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "updatePaymentRedSO",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
																"exec": [
																	"// Execute standard tests from PrS using eval()\r",
																	"//eval(globals.commonTests)();\r",
																	"\r",
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Red payment (standing order) is updated and assertions are passed\", function () {\r",
																	"\r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    //State is correct\r",
																	"    let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    //Postal account is correct\r",
																	"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
																	"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
																	"    //Category purpose code is correct\r",
																	"    let requestBodyResponseCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
																	"    let responseBodyResponseCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode; \r",
																	"    //Standing order info is correct\r",
																	"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
																	"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder;\r",
																	"    //Remittance information is correct\r",
																	"    let requestBodyRemittanceInformation = JSON.parse(request.data).RemittanceInformation;\r",
																	"    let responseBodyRemittanceInformation = JSON.parse(responseBody).RemittanceInformation; \r",
																	"    \r",
																	"    pm.test(\"Standing order is updated\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Instructed amount is correct\", () => {\r",
																	"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Debtor account is correct\", () => {\r",
																	"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Postal account is correct\", () => {\r",
																	"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Category purpose code account is correct\", () => {\r",
																	"      pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
																	"    });\r",
																	"    \r",
																	"     pm.test(\"Remittance information is correct\", () => {\r",
																	"      pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Standing order info is correct\", () => {\r",
																	"     pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"   });\r",
																	"    \r",
																	"    //Determine if assertion passed at whole\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
																	"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
																	"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
																	"    && pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation)\r",
																	"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder)\r",
																	"    && pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
																"exec": [
																	"eval(globals.randomizeVariables)();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"storeOnly\": false,\r\n\t\"locked\": false,       \r\n\t\"categoryPurposeCode\": \"SALA\",\r\n\t\"postalAccountNo\": {{postalAccountNo}},\t\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.02\r\n\t},\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
														},
														"url": {
															"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/red/{{newPaymentRedID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"red",
																"{{newPaymentRedID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "deletePaymentRedSO",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "b805315b-12ae-4f45-85f9-14230e6cb91e",
																"exec": [
																	"// Execute standard tests from PrS using eval()\r",
																	"//eval(globals.commonTests)();\r",
																	"\r",
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Red (standing order) payment is deleted and not exists anymore\", function () {\r",
																	"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
																	"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
																	"    pm.response.to.have.status(200) \r",
																	"    && pm.expect(responseBodyStatus).to.eql(true)\r",
																	"    && pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
																	"});\r",
																	"\r",
																	"// Log important stuff\r",
																	"if (pm.response.to.have.status(200)){\r",
																	"    console.log(\"Deleted Red (standing order) payment ID:\" + pm.globals.get(\"newPaymentRedID\"));\r",
																	"    pm.globals.set(\"deletedPaymentRedID\",pm.globals.get(\"newPaymentRedID\"));\r",
																	"    pm.globals.unset(\"newPaymentRedID\");\r",
																	"    pm.globals.unset(\"newPaymentRedStOrInfo\");\r",
																	"}\r",
																	"else {\r",
																	"    console.log(\"Failed to delete Red (standing order) payment with ID:\" + pm.globals.get(\"newPaymentRedID\"));\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "8b0efd50-c002-40d7-bf02-ad82c22ce7a7",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{token}}",
																"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
																"disabled": true
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/red/{{newPaymentRedID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"red",
																"{{newPaymentRedID}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "createPaymentRed",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Red payment is created and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //State is correct\r",
															"    let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Postal account is correct\r",
															"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
															"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo; \r",
															"    //categoryPurposeCode is correct\r",
															"    let requestBodyCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
															"    let responseBodyCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode; \r",
															"    //Remittance information is correct\r",
															"    let requestBodyRemittanceInformation = JSON.parse(request.data).RemittanceInformation;\r",
															"    let responseBodyRemittanceInformation = JSON.parse(responseBody).RemittanceInformation; \r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Postal account is correct\", () => {\r",
															"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Category purpose code is correct\", () => {\r",
															"      pm.expect(responseBodyCategoryPurposeCode).to.eql(requestBodyCategoryPurposeCode);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Remittance information is correct\", () => {\r",
															"      pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
															"    });\r",
															"    \r",
															"    // check if payment is created\r",
															"    if (pm.response.to.have.status(201)){\r",
															"        var responseData = JSON.parse(responseBody);\r",
															"        pm.globals.set(\"newPaymentRedID\", responseData.paymentId);\r",
															"        console.log(\"New Red payment ID: \" + pm.globals.get(\"newPaymentRedID\"));\r",
															"    }\r",
															"    else {\r",
															"        console.log(\"Failed to create Red payment\");\r",
															"    }\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
															"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
															"    && pm.expect(responseBodyCategoryPurposeCode).to.eql(requestBodyCategoryPurposeCode)\r",
															"    && pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
														"exec": [
															"eval(globals.randomizeVariables)();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"postalAccountNo\": {{postalAccountNo}},\t\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n\t\"categoryPurposeCode\": \"SALA\",    \r\n    \"remittanceInformation\": {\r\n        \"unstructured\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\"\r\n    },\r\n    \"debitNote\": \"Debit reference\",    \r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t}\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/red",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"red"
													]
												}
											},
											"response": []
										},
										{
											"name": "getPaymentRed",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Red payment is retrieved and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //State is correct\r",
															"    let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Postal account is correct\r",
															"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
															"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
															"    //Category purpose code is correct\r",
															"    let requestBodyResponseCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
															"    let responseBodyResponseCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode;   \r",
															"    //Remittance information is correct\r",
															"    let requestBodyRemittanceInformation = JSON.parse(request.data).RemittanceInformation;\r",
															"    let responseBodyRemittanceInformation = JSON.parse(responseBody).RemittanceInformation; \r",
															"\r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Postal account is correct\", () => {\r",
															"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Category purpose code account is correct\", () => {\r",
															"      pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Remittance information is correct\", () => {\r",
															"      pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
															"    });\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
															"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
															"    && pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode)\r",
															"    && pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"categoryPurposeCode\": \"SALA\",    \r\n    \"remittanceInformation\": {\r\n        \"unstructured\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\"\r\n    },\r\n\t\"postalAccountNo\": {{postalAccountNo}},\t\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t}\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/red/{{newPaymentRedID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"red",
														"{{newPaymentRedID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "updatePaymentRed",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Red payment is updated and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //State is correct\r",
															"    let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Postal account is correct\r",
															"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
															"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
															"    //Category purpose code is correct\r",
															"    let requestBodyResponseCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
															"    let responseBodyResponseCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode; \r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Postal account is correct\", () => {\r",
															"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Category purpose code account is correct\", () => {\r",
															"      pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
															"    });\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
															"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
															"    && pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
														"exec": [
															"eval(globals.randomizeVariables)();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"storeOnly\": false,\r\n\t\"locked\": false,       \r\n\t\"categoryPurposeCode\": \"SALA\",\r\n\t\"postalAccountNo\": {{postalAccountNo}},\t\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.02\r\n\t}\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/red/{{newPaymentRedID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"red",
														"{{newPaymentRedID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "deletePaymentRed",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b805315b-12ae-4f45-85f9-14230e6cb91e",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Red payment is deleted and not exists anymore\", function () {\r",
															"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
															"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
															"    pm.response.to.have.status(200) \r",
															"    && pm.expect(responseBodyStatus).to.eql(true)\r",
															"    && pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
															"});\r",
															"\r",
															"// Log important stuff\r",
															"if (pm.response.to.have.status(200)){\r",
															"    console.log(\"Deleted Red payment ID:\" + pm.globals.get(\"newPaymentRedID\"));\r",
															"    pm.globals.set(\"deletedPaymentRedID\",pm.globals.get(\"newPaymentRedID\"));\r",
															"    pm.globals.unset(\"newPaymentRedID\");\r",
															"}\r",
															"else {\r",
															"    console.log(\"Failed to delete Red payment with ID:\" + pm.globals.get(\"newPaymentRedID\"));\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8b0efd50-c002-40d7-bf02-ad82c22ce7a7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token}}",
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"disabled": true
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/red/{{newPaymentRedID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"red",
														"{{newPaymentRedID}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Domestic",
									"item": [
										{
											"name": "Standing order",
											"item": [
												{
													"name": "createPaymentSwissDomesticSO",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
																"exec": [
																	"// Execute standard tests from PrS using eval()\r",
																	"//eval(globals.commonTests)();\r",
																	"\r",
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Swiss domestic (standing order) payment is created and assertions are passed\", function () {\r",
																	"\r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    //Creditor account is correct\r",
																	"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
																	"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
																	"    //chargesBearer is correct\r",
																	"    let responseBodyChargesBearer = JSON.parse(responseBody).chargesBearer; \r",
																	"    //Standing order info is correct\r",
																	"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
																	"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
																	"    \r",
																	"    pm.test(\"Instructed amount is correct\", () => {\r",
																	"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Debtor account is correct\", () => {\r",
																	"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Creditor account is correct\", () => {\r",
																	"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Charges bearer is correct\", () => {\r",
																	"      pm.expect(responseBodyChargesBearer).to.eql(\"SHAR\");\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Standing order info is correct\", () => {\r",
																	"      pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"    });\r",
																	"    \r",
																	"    // check if payment is created\r",
																	"    if (pm.response.to.have.status(201)){\r",
																	"        var responseData = JSON.parse(responseBody);\r",
																	"        pm.globals.set(\"newPaymentSwissDomesticID\", responseData.paymentId);\r",
																	"        pm.globals.set(\"newPaymentSwissDomesticStOrInfo\", responseData.standingOrder);\r",
																	"        console.log(\"New Swiss domestic (standing order) payment ID: \" + pm.globals.get(\"newPaymentSwissDomesticID\"));\r",
																	"    }\r",
																	"    else {\r",
																	"        console.log(\"Failed to create Swiss domestic (standing order) payment\");\r",
																	"    }\r",
																	"    \r",
																	"    //Determine if assertion passed at whole\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
																	"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
																	"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo)\r",
																	"    && pm.expect(responseBodyChargesBearer).to.eql(\"SHAR\")\r",
																	"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
																"exec": [
																	"eval(globals.randomizeVariables)();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoSwisDomestic}},\t\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"No debit information\",\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
														},
														"url": {
															"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/swiss/",
															"host": [
																"{{environment}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"swiss",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "getPaymentSwissDomesticSO",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
																"exec": [
																	"// Execute standard tests from PrS using eval()\r",
																	"//eval(globals.commonTests)();\r",
																	"\r",
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Swiss domestic (standing order) payment is retrieved and assertions are passed\", function () {\r",
																	"\r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    //Creditor account is correct\r",
																	"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
																	"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
																	"    //chargesBearer is correct\r",
																	"    let responseBodyChargesBearer = JSON.parse(responseBody).chargesBearer; \r",
																	"    //Standing order info is correct\r",
																	"    let requestBodyStandingOrder = pm.globals.get(\"newPaymentSwissDomesticStOrInfo\");\r",
																	"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
																	"    \r",
																	"    pm.test(\"Instructed amount is correct\", () => {\r",
																	"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Debtor account is correct\", () => {\r",
																	"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Creditor account is correct\", () => {\r",
																	"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Charges bearer is correct\", () => {\r",
																	"      pm.expect(responseBodyChargesBearer).to.eql(\"SHAR\");\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Standing order info is correct\", () => {\r",
																	"      pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"    });\r",
																	"    \r",
																	"    //Determine if assertion passed at whole\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
																	"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
																	"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo)\r",
																	"    && pm.expect(responseBodyChargesBearer).to.eql(\"SHAR\")\r",
																	"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoSwisDomestic}},\t\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"No debit information\",\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
														},
														"url": {
															"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/swiss/{{newPaymentSwissDomesticID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"swiss",
																"{{newPaymentSwissDomesticID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "updatePaymentSwissDomesticSO",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
																"exec": [
																	"// Execute standard tests from PrS using eval()\r",
																	"//eval(globals.commonTests)();\r",
																	"\r",
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Swiss domestic (standing order) payment is updated and assertions are passed\", function () {\r",
																	"\r",
																	"    //Instructed amount is correct\r",
																	"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
																	"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
																	"    //Debtor account is correct\r",
																	"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
																	"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
																	"    //Creditor account is correct\r",
																	"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
																	"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
																	"    //chargesBearer is correct\r",
																	"    let responseBodyChargesBearer = JSON.parse(responseBody).chargesBearer; \r",
																	"    //Creditor info is correct\r",
																	"    let requestBodyCreditorInfo = JSON.parse(request.data).creditor;\r",
																	"    let responseBodyCreditorInfo = JSON.parse(responseBody).creditor; \r",
																	"    //Debit note is correct\r",
																	"    let requestBodyDebitNote = JSON.parse(request.data).debitNote;\r",
																	"    let responseBodyDebitNote = JSON.parse(responseBody).debitNote; \r",
																	"    //Standing order info is correct\r",
																	"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
																	"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
																	"    \r",
																	"    pm.test(\"Instructed amount is correct\", () => {\r",
																	"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Debtor account is correct\", () => {\r",
																	"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
																	"    });\r",
																	"    \r",
																	"    pm.test(\"Creditor account is correct\", () => {\r",
																	"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Creditor info is correct\", () => {\r",
																	"      pm.expect(responseBodyCreditorInfo).to.eql(requestBodyCreditorInfo);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Debit note is correct\", () => {\r",
																	"      pm.expect(responseBodyDebitNote).to.eql(requestBodyDebitNote);\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Charges bearer is correct\", () => {\r",
																	"      pm.expect(responseBodyChargesBearer).to.eql(\"SHAR\");\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Standing order info is correct\", () => {\r",
																	"      pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"    });\r",
																	"    \r",
																	"    //Determine if assertion passed at whole\r",
																	"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
																	"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
																	"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo)\r",
																	"    && pm.expect(responseBodyCreditorInfo).to.eql(requestBodyCreditorInfo)\r",
																	"    && pm.expect(responseBodyDebitNote).to.eql(requestBodyDebitNote)\r",
																	"    && pm.expect(responseBodyChargesBearer).to.eql(\"SHAR\")\r",
																	"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
																"exec": [
																	"eval(globals.randomizeVariables)();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoSwisDomestic}},\t\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.02\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"No debit information\",\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": true\t\t\r\n\t}\r\n}"
														},
														"url": {
															"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/swiss/{{newPaymentSwissDomesticID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"swiss",
																"{{newPaymentSwissDomesticID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "deletePaymentSwissDomesticSO",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "b805315b-12ae-4f45-85f9-14230e6cb91e",
																"exec": [
																	"// Execute standard tests from PrS using eval()\r",
																	"//eval(globals.commonTests)();\r",
																	"\r",
																	"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Swiss domestic (standing order) payment is deleted and not exists anymore\", function () {\r",
																	"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
																	"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
																	"    pm.response.to.have.status(200) \r",
																	"    && pm.expect(responseBodyStatus).to.eql(true)\r",
																	"    && pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
																	"});\r",
																	"\r",
																	"// Log important stuff\r",
																	"if (pm.response.to.have.status(200)){\r",
																	"    console.log(\"Deleted Swiss domestic (standing order) payment ID:\" + pm.globals.get(\"newPaymentSwissDomesticID\"));\r",
																	"    pm.globals.set(\"deletedSwissDomesticPaymentID\",pm.globals.get(\"newPaymentSwissDomesticID\"));\r",
																	"    pm.globals.unset(\"newPaymentSwissDomesticID\");\r",
																	"    pm.globals.unset(\"newPaymentSwissDomesticStOrInfo\");\r",
																	"}\r",
																	"else {\r",
																	"    console.log(\"Failed to delete Swiss domestic (standing order) payment with ID:\" + pm.globals.get(\"newPaymentSwissDomesticID\"));\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "8b0efd50-c002-40d7-bf02-ad82c22ce7a7",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "accept",
																"value": "application/json, application/hal+json"
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{token}}",
																"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
																"disabled": true
															},
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/swiss/{{newPaymentSwissDomesticID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"banking-api",
																"payment",
																"swissPayment",
																"{{tenant}}",
																"v1",
																"credittransfer",
																"swiss",
																"{{newPaymentSwissDomesticID}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "createPaymentSwissDomestic",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Swiss domestic payment is created and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
															"    //chargesBearer is correct\r",
															"    let requestBodyChargesBearer = JSON.parse(request.data).chargesBearer;\r",
															"    let responseBodyChargesBearer = JSON.parse(responseBody).chargesBearer; \r",
															"    //categoryPurposeCode is correct\r",
															"    let requestBodyCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
															"    let responseBodyCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode; \r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Creditor account is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Charges bearer is correct\", () => {\r",
															"      pm.expect(responseBodyChargesBearer).to.eql(requestBodyChargesBearer);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Category purpose code is correct\", () => {\r",
															"      pm.expect(responseBodyCategoryPurposeCode).to.eql(requestBodyCategoryPurposeCode);\r",
															"    });\r",
															"    \r",
															"    // check if payment is created\r",
															"    if (pm.response.to.have.status(201)){\r",
															"        var responseData = JSON.parse(responseBody);\r",
															"        pm.globals.set(\"newPaymentSwissDomesticID\", responseData.paymentId);\r",
															"        console.log(\"New Swiss domestic payment ID: \" + pm.globals.get(\"newPaymentSwissDomesticID\"));\r",
															"    }\r",
															"    else {\r",
															"        console.log(\"Failed to create Swiss domestic payment\");\r",
															"    }\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
															"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo)\r",
															"    && pm.expect(responseBodyChargesBearer).to.eql(requestBodyChargesBearer)\r",
															"    && pm.expect(responseBodyCategoryPurposeCode).to.eql(requestBodyCategoryPurposeCode);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
														"exec": [
															"eval(globals.randomizeVariables)();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoSwisDomestic}},\t\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"remittanceInformation\": {\r\n        \"unstructured\": \"unstructured\"\r\n    },    \r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"No new information needed\",\r\n    \"chargesBearer\": \"DEBT\",\r\n    \"categoryPurposeCode\": \"SALA\"\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/swiss/",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"swiss",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "getPaymentSwissDomestic",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Swiss domestic payment is retrieved and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
															"    //chargesBearer is correct\r",
															"    let requestBodyChargesBearer = JSON.parse(request.data).chargesBearer;\r",
															"    let responseBodyChargesBearer = JSON.parse(responseBody).chargesBearer; \r",
															"    //categoryPurposeCode is correct\r",
															"    let requestBodyCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
															"    let responseBodyCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode; \r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Creditor account is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Charges bearer is correct\", () => {\r",
															"      pm.expect(responseBodyChargesBearer).to.eql(requestBodyChargesBearer);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Category purpose code is correct\", () => {\r",
															"      pm.expect(responseBodyCategoryPurposeCode).to.eql(requestBodyCategoryPurposeCode);\r",
															"    });\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
															"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo)\r",
															"    && pm.expect(responseBodyChargesBearer).to.eql(requestBodyChargesBearer)\r",
															"    && pm.expect(responseBodyCategoryPurposeCode).to.eql(requestBodyCategoryPurposeCode);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoSwisDomestic}},\t\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNm}},\r\n\t\t\t\"postalCode\": {{postalCode}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"remittanceInformation\": {\r\n        \"unstructured\": \"unstructured\"\r\n    },    \r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"No new information needed\",\r\n    \"chargesBearer\": \"DEBT\",\r\n    \"categoryPurposeCode\": \"SALA\"\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/swiss/{{newPaymentSwissDomesticID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"swiss",
														"{{newPaymentSwissDomesticID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "updatePaymentSwissDomestic",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Swiss domestic payment is updated and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
															"    //chargesBearer is correct\r",
															"    let requestBodyChargesBearer = JSON.parse(request.data).chargesBearer;\r",
															"    let responseBodyChargesBearer = JSON.parse(responseBody).chargesBearer; \r",
															"    //categoryPurposeCode is correct\r",
															"    let requestBodyCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
															"    let responseBodyCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode; \r",
															"    //Creditor info is correct\r",
															"    let requestBodyCreditorInfo = JSON.parse(request.data).creditor;\r",
															"    let responseBodyCreditorInfo = JSON.parse(responseBody).creditor; \r",
															"    //Debit note is correct\r",
															"    let requestBodyDebitNote = JSON.parse(request.data).debitNote;\r",
															"    let responseBodyDebitNote = JSON.parse(responseBody).debitNote; \r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Creditor account is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Creditor info is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorInfo).to.eql(requestBodyCreditorInfo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debit note is correct\", () => {\r",
															"      pm.expect(responseBodyDebitNote).to.eql(requestBodyDebitNote);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Charges bearer is correct\", () => {\r",
															"      pm.expect(responseBodyChargesBearer).to.eql(requestBodyChargesBearer);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Category purpose code is correct\", () => {\r",
															"      pm.expect(responseBodyCategoryPurposeCode).to.eql(requestBodyCategoryPurposeCode);\r",
															"    });\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
															"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo)\r",
															"    && pm.expect(responseBodyCreditorInfo).to.eql(requestBodyCreditorInfo)\r",
															"    && pm.expect(responseBodyDebitNote).to.eql(requestBodyDebitNote)\r",
															"    && pm.expect(responseBodyChargesBearer).to.eql(requestBodyChargesBearer)\r",
															"    && pm.expect(responseBodyCategoryPurposeCode).to.eql(requestBodyCategoryPurposeCode);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
														"exec": [
															"eval(globals.randomizeVariables)();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoSwisDomestic}},\t\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.02\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"Still no debit information\",\r\n    \"chargesBearer\": \"SHAR\",\r\n    \"categoryPurposeCode\": \"SALA\"\t\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/swiss/{{newPaymentSwissDomesticID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"swiss",
														"{{newPaymentSwissDomesticID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "deletePaymentSwissDomestic",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b805315b-12ae-4f45-85f9-14230e6cb91e",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Swiss domestic payment is deleted and not exists anymore\", function () {\r",
															"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
															"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
															"    pm.response.to.have.status(200) \r",
															"    && pm.expect(responseBodyStatus).to.eql(true)\r",
															"    && pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
															"});\r",
															"\r",
															"// Log important stuff\r",
															"if (pm.response.to.have.status(200)){\r",
															"    console.log(\"Deleted Swiss domestic payment ID:\" + pm.globals.get(\"newPaymentSwissDomesticID\"));\r",
															"    pm.globals.set(\"deletedSwissDomesticPaymentID\",pm.globals.get(\"newPaymentSwissDomesticID\"));\r",
															"    pm.globals.unset(\"newPaymentSwissDomesticID\");\r",
															"}\r",
															"else {\r",
															"    console.log(\"Failed to delete Swiss domestic payment with ID:\" + pm.globals.get(\"newPaymentSwissDomesticID\"));\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8b0efd50-c002-40d7-bf02-ad82c22ce7a7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token}}",
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"disabled": true
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/swiss/{{newPaymentSwissDomesticID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"swiss",
														"{{newPaymentSwissDomesticID}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "UK",
							"item": [
								{
									"name": "Standing order",
									"item": [
										{
											"name": "createPaymentUKSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" UK (standing order) payment is created and assertions are passed\", function () {\r",
															"\r",
															"    //Payment type is correct\r",
															"    let requestBodyPaymentType = JSON.parse(request.data).paymentType;\r",
															"    let responseBodyPaymentType = JSON.parse(responseBody).paymentType;\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //Creditor agent sort code is correct\r",
															"    let requestBodyCreditorAgentSortCode = JSON.parse(request.data).creditorAgentSortCode;\r",
															"    let responseBodyCreditorAgentSortCode = JSON.parse(responseBody).creditorAgentSortCode;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo;   \r",
															"    //Postal account is correct\r",
															"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
															"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo; \r",
															"    //categoryPurposeCode is correct\r",
															"    let requestBodyCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
															"    let responseBodyCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode; \r",
															"    //Standing order info is correct\r",
															"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
															"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
															"\r",
															"    pm.test(\"Payment type is correct\", () => {\r",
															"      pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Creditor agent sort code is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAgentSortCode).to.eql(requestBodyCreditorAgentSortCode);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Creditor account is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Postal account is correct\", () => {\r",
															"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Category purpose code is correct\", () => {\r",
															"      pm.expect(responseBodyCategoryPurposeCode).to.eql(requestBodyCategoryPurposeCode);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Standing order info is correct\", () => {\r",
															"      pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"    });\r",
															"    \r",
															"    // check if payment is created\r",
															"    if (pm.response.to.have.status(201)){\r",
															"        var responseData = JSON.parse(responseBody);\r",
															"        pm.globals.set(\"newPaymentUkID\", responseData.paymentId);\r",
															"        pm.globals.set(\"newPaymentUKStOrInfo\", responseData.standingOrder);\r",
															"        console.log(\"New UK (standing order) payment ID: \" + pm.globals.get(\"newPaymentUkID\"));\r",
															"    }\r",
															"    else {\r",
															"        console.log(\"Failed to create UK (standing order) payment\");\r",
															"    }\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType)\r",
															"    && pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyCreditorAgentSortCode).to.eql(requestBodyCreditorAgentSortCode)\r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
															"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo)\r",
															"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
															"    && pm.expect(responseBodyCategoryPurposeCode).to.eql(requestBodyCategoryPurposeCode)\r",
															"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
														"exec": [
															"// paymentType: [Faster,CHAPS]",
															"let paymentTypeUK = parseInt(Math.random() * 2) ?  \"Faster\" : \"CHAPS\";",
															"pm.environment.set(\"paymentTypeUK\", paymentTypeUK);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"paymentType\": \"{{paymentTypeUK}}\",\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"GBP\"\r\n        },\r\n        \"value\": 2.01\r\n    },\r\n    \"remittanceInformation\": {\r\n        \"structured\": \"224812900001336000000054583\"\r\n    },\r\n    \"creditorAccountNo\": {{creditorAccountNo}},\r\n    \"creditorAgentSortCode\": \"601437\",\r\n    \"creditor\": {\r\n        \"name\": \"{{$randomFullName}}\"\r\n    },\r\n    \t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t},\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"template\": true,\r\n\t\"debitNote\": \"Expenses during company trip\"\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/UKPayment/{{tenant}}/v1/credittransfer",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"UKPayment",
														"{{tenant}}",
														"v1",
														"credittransfer"
													]
												}
											},
											"response": []
										},
										{
											"name": "getPaymentUKSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" UK (standing order) payment is retrieved and assertions are passed\", function () {\r",
															"\r",
															"    //Payment type is correct\r",
															"    let requestBodyPaymentType = JSON.parse(request.data).paymentType;\r",
															"    let responseBodyPaymentType = JSON.parse(responseBody).paymentType;\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo;     \r",
															"    //Postal account is correct\r",
															"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
															"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
															"    //Category purpose code is correct\r",
															"    let requestBodyResponseCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
															"    let responseBodyResponseCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode;   \r",
															"    //Standing order info is correct\r",
															"    let requestBodyStandingOrder = pm.globals.get(\"newPaymentUKStOrInfo\");\r",
															"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
															"\r",
															"    pm.test(\"Payment type is correct\", () => {\r",
															"      pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Creditor account is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Postal account is correct\", () => {\r",
															"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Category purpose code account is correct\", () => {\r",
															"      pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Standing order info is correct\", () => {\r",
															"      pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"    });\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType)\r",
															"    && pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
															"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo)\r",
															"    && pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode)\r",
															"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"paymentType\": \"{{paymentTypeUK}}\",\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"GBP\"\r\n        },\r\n        \"value\": 2.01\r\n    },\r\n    \"remittanceInformation\": {\r\n        \"structured\": \"224812900001336000000054583\"\r\n    },\r\n    \"creditorAccountNo\": {{creditorAccountNo}},\r\n    \"creditorAgentSortCode\": \"601437\",\r\n    \"creditor\": {\r\n        \"name\": \"{{$randomFullName}}\"\r\n    },\r\n    \t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t},\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"template\": true,\r\n\t\"debitNote\": \"Expenses during company trip\"\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/UKPayment/{{tenant}}/v1/credittransfer/{{newPaymentUkID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"UKPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"{{newPaymentUkID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "updatePaymentUKSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" UK (standing order) payment is created and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //Payment type is correct\r",
															"    let requestBodyPaymentType = JSON.parse(request.data).paymentType;\r",
															"    let responseBodyPaymentType = JSON.parse(responseBody).paymentType;\r",
															"    //Creditor agent sort code is correct\r",
															"    let requestBodyCreditorAgentSortCode = JSON.parse(request.data).creditorAgentSortCode;\r",
															"    let responseBodyCreditorAgentSortCode = JSON.parse(responseBody).creditorAgentSortCode;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo;   \r",
															"    //Postal account is correct\r",
															"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
															"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
															"    //Category purpose code is correct\r",
															"    let requestBodyResponseCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
															"    let responseBodyResponseCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode; \r",
															"\r",
															"    pm.test(\"Payment type is correct\", () => {\r",
															"      pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Creditor agent sort code is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAgentSortCode).to.eql(requestBodyCreditorAgentSortCode);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Creditor account is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Postal account is correct\", () => {\r",
															"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Category purpose code account is correct\", () => {\r",
															"      pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
															"    });\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType) \r",
															"    && pm.expect(responseBodyCreditorAgentSortCode).to.eql(requestBodyCreditorAgentSortCode)\r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
															"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo)\r",
															"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
															"    && pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"paymentType\": \"{{paymentTypeUK}}\",\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"GBP\"\r\n        },\r\n        \"value\": 2.02\r\n    },\r\n    \"remittanceInformation\": {\r\n        \"structured\": \"224812900001336000000054385\"\r\n    },\r\n    \"creditorAccountNo\": {{creditorAccountNo}},\r\n    \"creditorAgentSortCode\": \"601437\",\r\n    \"creditor\": {\r\n        \"name\": \"{{$randomFullName}}\"\r\n    },\r\n    \t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t},\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"template\": true,\r\n\t\"debitNote\": \"Expenses during company trip\"\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/UKPayment/{{tenant}}/v1/credittransfer/{{newPaymentUkID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"UKPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"{{newPaymentUkID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "deletePaymentUKSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b805315b-12ae-4f45-85f9-14230e6cb91e",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" UK (standing order) payment is deleted and not exists anymore\", function () {\r",
															"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
															"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
															"    pm.response.to.have.status(200) \r",
															"    && pm.expect(responseBodyStatus).to.eql(true)\r",
															"    && pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
															"});\r",
															"\r",
															"// Log important stuff\r",
															"if (pm.response.to.have.status(200)){\r",
															"    console.log(\"Deleted UK (standing order) payment ID:\" + pm.globals.get(\"newPaymentUkID\"));\r",
															"    pm.globals.set(\"deletedPaymentUkID\",pm.globals.get(\"newPaymentUkID\"));\r",
															"    pm.globals.unset(\"newPaymentUkID\");\r",
															"    pm.globals.unset(\"newPaymentUKStOrInfo\");\r",
															"}\r",
															"else {\r",
															"    console.log(\"Failed to delete UK (standing order) payment with ID:\" + pm.globals.get(\"newPaymentUkID\"));\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8b0efd50-c002-40d7-bf02-ad82c22ce7a7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token}}",
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"disabled": true
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/UKPayment/{{tenant}}/v1/credittransfer/{{newPaymentUkID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"UKPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"{{newPaymentUkID}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "createPaymentUK",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" UK payment is created and assertions are passed\", function () {\r",
													"\r",
													"    //Payment type is correct\r",
													"    let requestBodyPaymentType = JSON.parse(request.data).paymentType;\r",
													"    let responseBodyPaymentType = JSON.parse(responseBody).paymentType;\r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    //Creditor agent sort code is correct\r",
													"    let requestBodyCreditorAgentSortCode = JSON.parse(request.data).creditorAgentSortCode;\r",
													"    let responseBodyCreditorAgentSortCode = JSON.parse(responseBody).creditorAgentSortCode;\r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"    //Postal account is correct\r",
													"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
													"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo; \r",
													"    //categoryPurposeCode is correct\r",
													"    let requestBodyCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
													"    let responseBodyCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode; \r",
													"    //remittanceInfo is correct\r",
													"    let requestBodyRemittanceInfo = JSON.parse(request.data).remittanceInfo;\r",
													"    let responseBodyRemittanceInfo = JSON.parse(responseBody).remittanceInfo;\r",
													"\r",
													"    pm.test(\"Payment type is correct\", () => {\r",
													"      pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Instructed amount is correct\", () => {\r",
													"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Creditor agent sort code is correct\", () => {\r",
													"      pm.expect(responseBodyCreditorAgentSortCode).to.eql(requestBodyCreditorAgentSortCode);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Debtor account is correct\", () => {\r",
													"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Postal account is correct\", () => {\r",
													"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Category purpose code is correct\", () => {\r",
													"      pm.expect(responseBodyCategoryPurposeCode).to.eql(requestBodyCategoryPurposeCode);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Remittance info is correct\", () => {\r",
													"      pm.expect(responseBodyRemittanceInfo).to.eql(requestBodyRemittanceInfo);\r",
													"    });\r",
													"    \r",
													"    // check if payment is created\r",
													"    if (pm.response.to.have.status(201)){\r",
													"        var responseData = JSON.parse(responseBody);\r",
													"        pm.globals.set(\"newPaymentUkID\", responseData.paymentId);\r",
													"        console.log(\"New UK payment ID: \" + pm.globals.get(\"newPaymentUkID\"));\r",
													"    }\r",
													"    else {\r",
													"        console.log(\"Failed to create UK payment\");\r",
													"    }\r",
													"    \r",
													"    //Determine if assertion passed at whole\r",
													"    pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType)\r",
													"    && pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"    && pm.expect(responseBodyCreditorAgentSortCode).to.eql(requestBodyCreditorAgentSortCode)\r",
													"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
													"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
													"    && pm.expect(responseBodyCategoryPurposeCode).to.eql(requestBodyCategoryPurposeCode)\r",
													"    && pm.expect(responseBodyRemittanceInfo).to.eql(requestBodyRemittanceInfo);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
												"exec": [
													"// paymentType: [Faster,CHAPS]",
													"let paymentTypeUK = parseInt(Math.random() * 2) ?  \"Faster\" : \"CHAPS\";",
													"pm.environment.set(\"paymentTypeUK\", paymentTypeUK);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"paymentType\": \"{{paymentTypeUK}}\",\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"GBP\"\r\n        },\r\n        \"value\": 2.01\r\n    },\r\n\t\"remittanceInfo\": {\r\n    \t\"unstructured\": \"Beneficiary reference\"\r\n\t},\r\n    \"creditorAccountNo\": {{creditorAccountNoUK}},\r\n    \"creditorAgentSortCode\": \"601437\",\r\n    \"creditor\": {\r\n        \"name\": \"{{$randomFullName}}\"\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"template\": true,\r\n\t\"categoryPurposeCode\": \"SALA\",\r\n\t\"debitNote\": \"Expenses during company trip\"\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/UKPayment/{{tenant}}/v1/credittransfer",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"UKPayment",
												"{{tenant}}",
												"v1",
												"credittransfer"
											]
										}
									},
									"response": []
								},
								{
									"name": "getPaymentUK",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" UK payment is retrieved and assertions are passed\", function () {\r",
													"\r",
													"    //Payment type is correct\r",
													"    let requestBodyPaymentType = JSON.parse(request.data).paymentType;\r",
													"    let responseBodyPaymentType = JSON.parse(responseBody).paymentType;\r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    //State is correct\r",
													"    let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"    //Postal account is correct\r",
													"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
													"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
													"    //Category purpose code is correct\r",
													"    let requestBodyResponseCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
													"    let responseBodyResponseCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode;   \r",
													"    //remittanceInfo is correct\r",
													"    let requestBodyRemittanceInfo = JSON.parse(request.data).remittanceInfo;\r",
													"    let responseBodyRemittanceInfo = JSON.parse(responseBody).remittanceInfo;\r",
													"\r",
													"    pm.test(\"Payment type is correct\", () => {\r",
													"      pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Instructed amount is correct\", () => {\r",
													"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Debtor account is correct\", () => {\r",
													"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Postal account is correct\", () => {\r",
													"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Category purpose code account is correct\", () => {\r",
													"      pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Remittance info is correct\", () => {\r",
													"      pm.expect(responseBodyRemittanceInfo).to.eql(requestBodyRemittanceInfo);\r",
													"    });\r",
													"    \r",
													"    //Determine if assertion passed at whole\r",
													"    pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType)\r",
													"    && pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
													"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
													"    && pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode)\r",
													"    && pm.expect(responseBodyRemittanceInfo).to.eql(requestBodyRemittanceInfo);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"paymentType\": \"{{paymentTypeUK}}\",\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"GBP\"\r\n        },\r\n        \"value\": 2.01\r\n    },\r\n\t\"remittanceInfo\": {\r\n    \t\"unstructured\": \"Beneficiary reference\"\r\n\t},\r\n    \"creditorAccountNo\": {{creditorAccountNoUK}},\r\n    \"creditorAgentSortCode\": \"601437\",\r\n    \"creditor\": {\r\n        \"name\": \"{{$randomFullName}}\"\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"template\": true,\r\n\t\"categoryPurposeCode\": \"SALA\",\r\n\t\"debitNote\": \"Expenses during company trip\"\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/UKPayment/{{tenant}}/v1/credittransfer/{{newPaymentUkID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"UKPayment",
												"{{tenant}}",
												"v1",
												"credittransfer",
												"{{newPaymentUkID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "updatePaymentUK",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" UK payment is created and assertions are passed\", function () {\r",
													"\r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    //Payment type is correct\r",
													"    let requestBodyPaymentType = JSON.parse(request.data).paymentType;\r",
													"    let responseBodyPaymentType = JSON.parse(responseBody).paymentType;\r",
													"    //Creditor agent sort code is correct\r",
													"    let requestBodyCreditorAgentSortCode = JSON.parse(request.data).creditorAgentSortCode;\r",
													"    let responseBodyCreditorAgentSortCode = JSON.parse(responseBody).creditorAgentSortCode;\r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"    //Postal account is correct\r",
													"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
													"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
													"    //Category purpose code is correct\r",
													"    let requestBodyResponseCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
													"    let responseBodyResponseCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode; \r",
													"\r",
													"    pm.test(\"Payment type is correct\", () => {\r",
													"      pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Instructed amount is correct\", () => {\r",
													"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Creditor agent sort code is correct\", () => {\r",
													"      pm.expect(responseBodyCreditorAgentSortCode).to.eql(requestBodyCreditorAgentSortCode);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Debtor account is correct\", () => {\r",
													"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Postal account is correct\", () => {\r",
													"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Category purpose code account is correct\", () => {\r",
													"      pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
													"    });\r",
													"    \r",
													"    //Determine if assertion passed at whole\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"    && pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType) \r",
													"    && pm.expect(responseBodyCreditorAgentSortCode).to.eql(requestBodyCreditorAgentSortCode)\r",
													"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
													"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
													"    && pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"paymentType\": \"{{paymentTypeUK}}\",\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"GBP\"\r\n        },\r\n        \"value\": 2.01\r\n    },\r\n    \"remittanceInformation\": {\r\n        \"structured\": \"224812900001336000000054385\"\r\n    },\r\n    \"creditorAccountNo\": {{creditorAccountNo}},\r\n    \"creditorAgentSortCode\": \"601437\",\r\n    \"creditor\": {\r\n        \"name\": \"{{$randomFullName}}\"\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"template\": true,\r\n\t\"debitNote\": \"Expenses during company trip\"\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/UKPayment/{{tenant}}/v1/credittransfer/{{newPaymentUkID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"UKPayment",
												"{{tenant}}",
												"v1",
												"credittransfer",
												"{{newPaymentUkID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "deletePaymentUK",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b805315b-12ae-4f45-85f9-14230e6cb91e",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" UK payment is deleted and not exists anymore\", function () {\r",
													"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
													"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
													"    pm.response.to.have.status(200) \r",
													"    && pm.expect(responseBodyStatus).to.eql(true)\r",
													"    && pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
													"});\r",
													"\r",
													"// Log important stuff\r",
													"if (pm.response.to.have.status(200)){\r",
													"    console.log(\"Deleted UK payment ID:\" + pm.globals.get(\"newPaymentUkID\"));\r",
													"    pm.globals.set(\"deletedPaymentUkID\",pm.globals.get(\"newPaymentUkID\"));\r",
													"    pm.globals.unset(\"newPaymentUkID\");\r",
													"}\r",
													"else {\r",
													"    console.log(\"Failed to delete UK payment with ID:\" + pm.globals.get(\"newPaymentUkID\"));\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8b0efd50-c002-40d7-bf02-ad82c22ce7a7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"disabled": true
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/UKPayment/{{tenant}}/v1/credittransfer/{{newPaymentUkID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"UKPayment",
												"{{tenant}}",
												"v1",
												"credittransfer",
												"{{newPaymentUkID}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Balance adjustment",
							"item": [
								{
									"name": "createPaymentBalanceAdjustment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Balance adjustment payment is created and assertions are passed\", function () {\r",
													"\r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    \r",
													"    //REMOVED: Impossible to setup all needed requirements for automated execution\r",
													"    //State is correct\r",
													"    //let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
													"\r",
													"    //Transfer type is correct\r",
													"    let requestBodyTypeOfTransfer = JSON.parse(request.data).typeOfTransfer;\r",
													"    let responseBodyTypeOfTransfer = JSON.parse(responseBody).typeOfTransfer; \r",
													"\r",
													"    //Type of amount is correct\r",
													"    let requestBodyTypeOfAmount = JSON.parse(request.data).typeOfAmount;\r",
													"    let responseBodyTypeOfAmount = JSON.parse(responseBody).typeOfAmount; \r",
													"    \r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"\r",
													"    //Creditor account is correct\r",
													"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
													"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo;   \r",
													"\r",
													"    pm.test(\"Instructed amount is correct\", () => {\r",
													"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    });\r",
													"\r",
													"    //pm.test(\"State is correct\", () => {\r",
													"    //  pm.expect(jsonDataResponsePaymentState).to.eql(\"READY_FOR_EXECUTION\");\r",
													"    //});\r",
													"\r",
													"    pm.test(\"Type of transfer is correct\", () => {\r",
													"      pm.expect(responseBodyTypeOfTransfer).to.eql(requestBodyTypeOfTransfer);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Type of amount is correct\", () => {\r",
													"      pm.expect(responseBodyTypeOfAmount).to.eql(requestBodyTypeOfAmount);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Debtor account is correct\", () => {\r",
													"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Creditor account is correct\", () => {\r",
													"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"    });\r",
													"    \r",
													"    // check if payment is created\r",
													"    if (pm.response.to.have.status(201)){\r",
													"        var responseData = JSON.parse(responseBody);\r",
													"        pm.globals.set(\"newPaymentBalanceAdjustmentID\", responseData.paymentId);\r",
													"        console.log(\"New balance adjustment payment ID: \" + pm.globals.get(\"newPaymentBalanceAdjustmentID\"));\r",
													"    }\r",
													"    else {\r",
													"        console.log(\"Failed to create balance adjustment payment\");\r",
													"    }\r",
													"    \r",
													"    //Determine if assertion passed at whole\r",
													"    pm.expect(responseBodyTypeOfTransfer).to.eql(requestBodyTypeOfTransfer)\r",
													"    && pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"    // && pm.expect(jsonDataResponsePaymentState).to.eql(\"READY_FOR_EXECUTION\") \r",
													"    && pm.expect(responseBodyTypeOfAmount).to.eql(requestBodyTypeOfAmount)\r",
													"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
													"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
												"exec": [
													"// 1248081507: CH9512312001248081507, CH6312312001248081501"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"typeOfTransfer\": \"TRANSFER_SPARE_CASH_TO_CREDIT_ACCOUNT\",\r\n\t\"cashBalanceThreshold\": 2303.56,\r\n\t\"typeOfAmount\": \"FIXED_AMOUNT\",\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.34\r\n    },\r\n\t\"remittanceInformation\": {\r\n    \t\"unstructured\": \"unstructured remittance\"\r\n\t},\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"creditorAccountNo\": {{creditorAccountNoBalanceAdjustment}},\r\n\t\"debitNote\": \"Expenses for SW implementation\",\r\n\t\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitForm\": \"SIA\"\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/balanceadjustment",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"accounttransfer",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"balanceadjustment"
											]
										}
									},
									"response": []
								},
								{
									"name": "getPaymentBalanceAdjustment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Balance adjustment payment is retrieved and assertions are passed\", function () {\r",
													"\r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    \r",
													"    //REMOVED: Impossible to setup all needed requirements for automated execution\r",
													"    //State is correct\r",
													"    //let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
													"    \r",
													"    //Transfer type is correct\r",
													"    let requestBodyTypeOfTransfer = JSON.parse(request.data).typeOfTransfer;\r",
													"    let responseBodyTypeOfTransfer = JSON.parse(responseBody).typeOfTransfer;    \r",
													"    \r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"    \r",
													"    //Category purpose code is correct\r",
													"    let requestBodyResponseCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
													"    let responseBodyResponseCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode;   \r",
													"\r",
													"    pm.test(\"Instructed amount is correct\", () => {\r",
													"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    });\r",
													"\r",
													"    //pm.test(\"State is correct\", () => {\r",
													"    //  pm.expect(jsonDataResponsePaymentState).to.eql(\"READY_FOR_EXECUTION\");\r",
													"    //});\r",
													"\r",
													"    pm.test(\"Type of transfer is correct\", () => {\r",
													"      pm.expect(responseBodyTypeOfTransfer).to.eql(requestBodyTypeOfTransfer);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Debtor account is correct\", () => {\r",
													"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Category purpose code account is correct\", () => {\r",
													"      pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
													"    });\r",
													"    \r",
													"    //Determine if assertion passed at whole\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"    // && pm.expect(jsonDataResponsePaymentState).to.eql(\"READY_FOR_EXECUTION\") \r",
													"    && pm.expect(responseBodyTypeOfTransfer).to.eql(requestBodyTypeOfTransfer)\r",
													"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
													"    && pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"typeOfTransfer\": \"TRANSFER_SPARE_CASH_TO_CREDIT_ACCOUNT\",\r\n\t\"cashBalanceThreshold\": 2303.56,\r\n\t\"typeOfAmount\": \"FIXED_AMOUNT\",\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.34\r\n    },\r\n\t\"remittanceInformation\": {\r\n    \t\"unstructured\": \"\"\r\n\t},\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"creditorAccountNo\": {{creditorAccountNoBalanceAdjustment}},\r\n\t\"debitNote\": \"Expenses for SW implementation\",\r\n\t\"debitForm\": \"SIA\"\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/balanceadjustment/{{newPaymentBalanceAdjustmentID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"accounttransfer",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"balanceadjustment",
												"{{newPaymentBalanceAdjustmentID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "updatePaymentBalanceAdjustment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Balance adjustment payment is created and assertions are passed\", function () {\r",
													"\r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    //Type of transfer\r",
													"    let requestBodyTypeOfTransfer = JSON.parse(request.data).typeOfTransfer;\r",
													"    let responseBodyTypeOfTransfer = JSON.parse(responseBody).typeOfTransfer;\r",
													"    //Creditor agent sort code is correct\r",
													"    let requestBodyCreditorAgentSortCode = JSON.parse(request.data).creditorAgentSortCode;\r",
													"    let responseBodyCreditorAgentSortCode = JSON.parse(responseBody).creditorAgentSortCode;\r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"    //Postal account is correct\r",
													"    let requestBodyPostalAccountNo = JSON.parse(request.data).postalAccountNo;\r",
													"    let responseBodyPostalAccountNo = JSON.parse(responseBody).postalAccountNo;   \r",
													"    //Category purpose code is correct\r",
													"    let requestBodyResponseCategoryPurposeCode = JSON.parse(request.data).categoryPurposeCode;\r",
													"    let responseBodyResponseCategoryPurposeCode = JSON.parse(responseBody).categoryPurposeCode; \r",
													"\r",
													"    pm.test(\"Type of transfer is correct\", () => {\r",
													"      pm.expect(responseBodyTypeOfTransfer).to.eql(requestBodyTypeOfTransfer);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Instructed amount is correct\", () => {\r",
													"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Creditor agent sort code is correct\", () => {\r",
													"      pm.expect(responseBodyCreditorAgentSortCode).to.eql(requestBodyCreditorAgentSortCode);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Debtor account is correct\", () => {\r",
													"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Postal account is correct\", () => {\r",
													"      pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Category purpose code account is correct\", () => {\r",
													"      pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
													"    });\r",
													"    \r",
													"    //Determine if assertion passed at whole\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"    && pm.expect(responseBodyTypeOfTransfer).to.eql(requestBodyTypeOfTransfer) \r",
													"    && pm.expect(responseBodyCreditorAgentSortCode).to.eql(requestBodyCreditorAgentSortCode)\r",
													"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
													"    && pm.expect(responseBodyPostalAccountNo).to.eql(requestBodyPostalAccountNo)\r",
													"    && pm.expect(responseBodyResponseCategoryPurposeCode).to.eql(requestBodyResponseCategoryPurposeCode);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"typeOfTransfer\": \"TRANSFER_SPARE_CASH_TO_CREDIT_ACCOUNT\",\r\n\t\"cashBalanceThreshold\": 2303.63,\r\n\t\"typeOfAmount\": \"FIXED_AMOUNT\",\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.43\r\n    },\r\n\t\"remittanceInformation\": {\r\n    \t\"unstructured\": \"\"\r\n\t},\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"creditorAccountNo\": {{creditorAccountNoBalanceAdjustment}},\r\n\t\"debitNote\": \"Expenses for SW implementation\",\r\n\t\"requestedExecutionDate\": {{PrS:nextWorkingDay}}\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/balanceadjustment/{{newPaymentBalanceAdjustmentID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"accounttransfer",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"balanceadjustment",
												"{{newPaymentBalanceAdjustmentID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "deletePaymentBalanceAdjustment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b805315b-12ae-4f45-85f9-14230e6cb91e",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Balance adjustment is deleted and not exists anymore\", function () {\r",
													"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
													"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
													"    pm.response.to.have.status(200) \r",
													"    && pm.expect(responseBodyStatus).to.eql(true)\r",
													"    && pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
													"});\r",
													"\r",
													"// Log important stuff\r",
													"if (pm.response.to.have.status(200)){\r",
													"    console.log(\"Deleted balance adjustment ID:\" + pm.globals.get(\"newPaymentBalanceAdjustmentID\"));\r",
													"    pm.globals.set(\"deletedPaymentBalanceAdjustmentID\",pm.globals.get(\"newPaymentBalanceAdjustmentID\"));\r",
													"    pm.globals.unset(\"newPaymentBalanceAdjustmentID\");\r",
													"}\r",
													"else {\r",
													"    console.log(\"Failed to delete balance adjustment payment with ID:\" + pm.globals.get(\"newPaymentBalanceAdjustmentID\"));\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8b0efd50-c002-40d7-bf02-ad82c22ce7a7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"disabled": true
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/balanceadjustment/{{newPaymentBalanceAdjustmentID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"accounttransfer",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"balanceadjustment",
												"{{newPaymentBalanceAdjustmentID}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "QR-bill",
							"item": [
								{
									"name": "Standing order",
									"item": [
										{
											"name": "createPaymentQrBillSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"//pm.test(pm.globals.get(\"testRailTestCases\") + \" Payment is created and assertions are passed\", function () {\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" QR-bill (standing order) payment is created and assertions are passed\", function () {\r",
															"\r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo;   \r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //Creditor info is correct\r",
															"    let requestBodyCreditor = JSON.parse(request.data).creditor;\r",
															"    let responseBodyCreditor = JSON.parse(responseBody).creditor;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Category purpose code is correct    \r",
															"    let jsonDataResponseCategoryPurposeCode = pm.response.json().categoryPurposeCode;\r",
															"    //Ultimate debtor info is correct\r",
															"    let requestBodyUltimateDebtor = JSON.parse(request.data).ultimateDebtor;\r",
															"    let responseBodyUltimateDebtor = JSON.parse(responseBody).ultimateDebtor;    \r",
															"    //Standing order info is correct\r",
															"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
															"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
															"    \r",
															"    pm.test(\"Creditor account is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Creditor info is correct\", () => {\r",
															"      pm.expect(responseBodyCreditor).to.eql(requestBodyCreditor);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"\t\r",
															"    pm.test(\"Category purpose code is correct\", () => {\r",
															"      pm.expect(jsonDataResponseCategoryPurposeCode).to.eql(\"SALA\");\r",
															"    });\r",
															"\r",
															"    pm.test(\"Ultimate debtor info is correct\", () => {\r",
															"      pm.expect(responseBodyUltimateDebtor).to.eql(requestBodyUltimateDebtor);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Standing order info is correct\", () => {\r",
															"      pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"    });\r",
															"    \r",
															"    // check if payment is created\r",
															"    if (pm.response.to.have.status(201)){\r",
															"        var responseData = JSON.parse(responseBody);\r",
															"        pm.globals.set(\"newQrBillPaymentID\", responseData.paymentId);\r",
															"        pm.globals.set(\"newPaymentQrBillStOrInfo\", responseData.standingOrder);\r",
															"        console.log(\"New QR-bill (standing order) payment ID: \" + pm.globals.get(\"newQrBillPaymentID\"));\r",
															"    }\r",
															"    else {\r",
															"        console.log(\"Failed to create QR-bill (standing order) payment with ID:\" + pm.globals.get(\"newQrBillPaymentID\"));\r",
															"        pm.globals.unset(\"newQrBillPaymentID\");\r",
															"    }\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
															"    && pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyCreditor).to.eql(requestBodyCreditor) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
															"    && pm.expect(jsonDataResponseCategoryPurposeCode).to.eql(\"SALA\")\r",
															"    && pm.expect(responseBodyUltimateDebtor).to.eql(requestBodyUltimateDebtor)\r",
															"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
														"exec": [
															"eval(globals.randomizeVariables)();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoBalanceAdjustment}},\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n\t\"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"requestedExecutionDate\":  {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"Expenses during company trip\",\r\n    \"ultimateDebtor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t},\r\n\t\"categoryPurposeCode\": \"SALA\"\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/QRbill/",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"QRbill",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "getPaymentQrBillSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f5d00dc8-f552-48c0-9a1c-2510df583464",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" QR-bill (standing order) payment is retrieved and assertions are passed\", function () {\r",
															"\r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Category purpose code is correct    \r",
															"    let jsonDataResponseCategoryPurposeCode = pm.response.json().categoryPurposeCode;\r",
															"    //Standing order info is correct\r",
															"    let requestBodyStandingOrder = pm.globals.get(\"newPaymentQrBillStOrInfo\");\r",
															"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
															"    \r",
															"    pm.test(\"Creditor account is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"\t\r",
															"    pm.test(\"Category purpose code is correct\", () => {\r",
															"      pm.expect(jsonDataResponseCategoryPurposeCode).to.eql(\"SALA\");\r",
															"    });\r",
															"\r",
															"    pm.test(\"Standing order info is correct\", () => {\r",
															"      pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"    });\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
															"    && pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
															"    && pm.expect(jsonDataResponseCategoryPurposeCode).to.eql(\"SALA\")\r",
															"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "22f2990b-adb1-4668-a6e9-92884e953577",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json; charset=UTF-8"
													},
													{
														"key": "accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoBalanceAdjustment}},\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n\t\"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"requestedExecutionDate\":  {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"Expenses during company trip\",\r\n    \"ultimateDebtor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\r\n\t\"categoryPurposeCode\": \"SALA\"\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/QRbill/{{newQrBillPaymentID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"QRbill",
														"{{newQrBillPaymentID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "updatePaymentQrBillSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" QR-bill (standing order) payment is updated and assertions are passed\", function () {\r",
															"\r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
															"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    //Creditor info is correct\r",
															"    let requestBodyCreditor = JSON.parse(request.data).creditor;\r",
															"    let responseBodyCreditor = JSON.parse(responseBody).creditor;\r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"    //Category purpose code is correct    \r",
															"    let jsonDataResponseCategoryPurposeCode = pm.response.json().categoryPurposeCode;\r",
															"    //Ultimate debtor info is correct\r",
															"    let requestBodyUltimateDebtor = JSON.parse(request.data).ultimateDebtor;\r",
															"    let responseBodyUltimateDebtor = JSON.parse(responseBody).ultimateDebtor;    \r",
															"    //Standing order info is correct\r",
															"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
															"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder; \r",
															"    \r",
															"    pm.test(\"Creditor account is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Creditor info is correct\", () => {\r",
															"      pm.expect(responseBodyCreditor).to.eql(requestBodyCreditor);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"\t\r",
															"    pm.test(\"Category purpose code is correct\", () => {\r",
															"      pm.expect(jsonDataResponseCategoryPurposeCode).to.eql(\"SALA\");\r",
															"    });\r",
															"\r",
															"    pm.test(\"Ultimate debtor info is correct\", () => {\r",
															"      pm.expect(responseBodyUltimateDebtor).to.eql(requestBodyUltimateDebtor);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Standing order info is correct\", () => {\r",
															"      pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"    });\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
															"    && pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyCreditor).to.eql(requestBodyCreditor) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
															"    && pm.expect(jsonDataResponseCategoryPurposeCode).to.eql(\"SALA\")\r",
															"    && pm.expect(responseBodyUltimateDebtor).to.eql(requestBodyUltimateDebtor)\r",
															"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
														"exec": [
															"eval(globals.randomizeVariables)();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoBalanceAdjustment}},\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.02\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n\t\"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"requestedExecutionDate\":  {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"Expenses business lunch\",\r\n    \"ultimateDebtor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t},    \r\n\t\"categoryPurposeCode\": \"SALA\"\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/QRbill/{{newQrBillPaymentID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"QRbill",
														"{{newQrBillPaymentID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "deletePaymentQrBillSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b805315b-12ae-4f45-85f9-14230e6cb91e",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" QR-bill (standing order) payment is deleted and not exists anymore\", function () {\r",
															"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
															"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
															"    pm.response.to.have.status(200) \r",
															"    && pm.expect(responseBodyStatus).to.eql(true)\r",
															"    && pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
															"});\r",
															"\r",
															"// Log important stuff\r",
															"if (pm.response.to.have.status(200)){\r",
															"    console.log(\"Deleted QR-bill (standing order) payment ID:\" + pm.globals.get(\"newQrBillPaymentID\"));\r",
															"    pm.globals.set(\"deletedQrBillPaymentID\",pm.globals.get(\"newQrBillPaymentID\"));\r",
															"    pm.globals.unset(\"newQrBillPaymentID\");\r",
															"    pm.globals.unset(\"newPaymentQrBillStOrInfo\");\r",
															"}\r",
															"else {\r",
															"    console.log(\"Failed to delete QR-bill (standing order) payment with ID:\" + pm.globals.get(\"newQrBillPaymentID\"));\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8b0efd50-c002-40d7-bf02-ad82c22ce7a7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token}}",
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"disabled": true
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/QRbill/{{newQrBillPaymentID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"swissPayment",
														"{{tenant}}",
														"v1",
														"credittransfer",
														"QRbill",
														"{{newQrBillPaymentID}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "createPaymentQrBill",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"//pm.test(pm.globals.get(\"testRailTestCases\") + \" Payment is created and assertions are passed\", function () {\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" QR-bill payment is created and assertions are passed\", function () {\r",
													"\r",
													"    //Creditor account is correct\r",
													"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
													"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo;   \r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    //Creditor info is correct\r",
													"    let requestBodyCreditor = JSON.parse(request.data).creditor;\r",
													"    let responseBodyCreditor = JSON.parse(responseBody).creditor;\r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"    //Execution date is correct\r",
													"    let requestBodyExecutionDate = JSON.parse(request.data).requestedExecutionDate;\r",
													"    let responseBodyExecutionDate = JSON.parse(responseBody).requestedExecutionDate;    \r",
													"    //Category purpose code is correct    \r",
													"    let jsonDataResponseCategoryPurposeCode = pm.response.json().categoryPurposeCode;\r",
													"    //Ultimate debtor info is correct\r",
													"    let requestBodyUltimateDebtor = JSON.parse(request.data).ultimateDebtor;\r",
													"    let responseBodyUltimateDebtor = JSON.parse(responseBody).ultimateDebtor;    \r",
													"\r",
													"    pm.test(\"Creditor account is correct\", () => {\r",
													"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Instructed amount is correct\", () => {\r",
													"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Creditor info is correct\", () => {\r",
													"      pm.expect(responseBodyCreditor).to.eql(requestBodyCreditor);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Debtor account is correct\", () => {\r",
													"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    });\r",
													"\t\r",
													"    pm.test(\"Execution date is correct\", () => {\r",
													"      pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Category purpose code is correct\", () => {\r",
													"      pm.expect(jsonDataResponseCategoryPurposeCode).to.eql(\"SALA\");\r",
													"    });\r",
													"\r",
													"    pm.test(\"Ultimate debtor info is correct\", () => {\r",
													"      pm.expect(responseBodyUltimateDebtor).to.eql(requestBodyUltimateDebtor);\r",
													"    });\r",
													"\r",
													"    // check if payment is created\r",
													"    if (pm.response.to.have.status(201)){\r",
													"        var responseData = JSON.parse(responseBody);\r",
													"        pm.globals.set(\"newQrBillPaymentID\", responseData.paymentId);\r",
													"        console.log(\"New QR-bill payment ID: \" + pm.globals.get(\"newQrBillPaymentID\"));\r",
													"    }\r",
													"    else {\r",
													"        console.log(\"Failed to create QR-bill payment with ID:\" + pm.globals.get(\"newQrBillPaymentID\"));\r",
													"        pm.globals.unset(\"newQrBillPaymentID\");\r",
													"    }\r",
													"    \r",
													"    //Determine if assertion passed at whole\r",
													"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
													"    && pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"    && pm.expect(responseBodyCreditor).to.eql(requestBodyCreditor) \r",
													"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
													"    && pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate) \r",
													"    && pm.expect(jsonDataResponseCategoryPurposeCode).to.eql(\"SALA\")\r",
													"    && pm.expect(responseBodyUltimateDebtor).to.eql(requestBodyUltimateDebtor);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
												"exec": [
													"eval(globals.randomizeVariables)();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoBalanceAdjustment}},\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n\t\"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"requestedExecutionDate\":  {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"Expenses during company trip\",\r\n    \"ultimateDebtor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n            \"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\r\n\t\"categoryPurposeCode\": \"SALA\"\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/QRbill/",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"swissPayment",
												"{{tenant}}",
												"v1",
												"credittransfer",
												"QRbill",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "getPaymentQrBill",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f5d00dc8-f552-48c0-9a1c-2510df583464",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" QR-bill payment is retrieved and assertions are passed\", function () {\r",
													"\r",
													"    //Creditor account is correct\r",
													"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
													"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"    //Category purpose code is correct    \r",
													"    let jsonDataResponseCategoryPurposeCode = pm.response.json().categoryPurposeCode;\r",
													"\r",
													"    pm.test(\"Creditor account is correct\", () => {\r",
													"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Instructed amount is correct\", () => {\r",
													"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Debtor account is correct\", () => {\r",
													"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    });\r",
													"\t\r",
													"    pm.test(\"Category purpose code is correct\", () => {\r",
													"      pm.expect(jsonDataResponseCategoryPurposeCode).to.eql(\"SALA\");\r",
													"    });\r",
													"    \r",
													"    //Determine if assertion passed at whole\r",
													"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
													"    && pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
													"    && pm.expect(jsonDataResponseCategoryPurposeCode).to.eql(\"SALA\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "22f2990b-adb1-4668-a6e9-92884e953577",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json; charset=UTF-8"
											},
											{
												"key": "accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoBalanceAdjustment}},\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.01\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n\t\"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"requestedExecutionDate\":  {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"Expenses during company trip\",\r\n    \"ultimateDebtor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n\t\"categoryPurposeCode\": \"SALA\"\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/QRbill/{{newQrBillPaymentID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"swissPayment",
												"{{tenant}}",
												"v1",
												"credittransfer",
												"QRbill",
												"{{newQrBillPaymentID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "updatePaymentQrBill",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" QR-bill payment is updated and assertions are passed\", function () {\r",
													"\r",
													"    //Creditor account is correct\r",
													"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
													"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo; \r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    //Creditor info is correct\r",
													"    let requestBodyCreditor = JSON.parse(request.data).creditor;\r",
													"    let responseBodyCreditor = JSON.parse(responseBody).creditor;\r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"    //Category purpose code is correct    \r",
													"    let jsonDataResponseCategoryPurposeCode = pm.response.json().categoryPurposeCode;\r",
													"    //Ultimate debtor info is correct\r",
													"    let requestBodyUltimateDebtor = JSON.parse(request.data).ultimateDebtor;\r",
													"    let responseBodyUltimateDebtor = JSON.parse(responseBody).ultimateDebtor;    \r",
													"\r",
													"    pm.test(\"Creditor account is correct\", () => {\r",
													"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Instructed amount is correct\", () => {\r",
													"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Creditor info is correct\", () => {\r",
													"      pm.expect(responseBodyCreditor).to.eql(requestBodyCreditor);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Debtor account is correct\", () => {\r",
													"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    });\r",
													"\t\r",
													"    pm.test(\"Category purpose code is correct\", () => {\r",
													"      pm.expect(jsonDataResponseCategoryPurposeCode).to.eql(\"SALA\");\r",
													"    });\r",
													"\r",
													"    pm.test(\"Ultimate debtor info is correct\", () => {\r",
													"      pm.expect(responseBodyUltimateDebtor).to.eql(requestBodyUltimateDebtor);\r",
													"    });\r",
													"\r",
													"    //Determine if assertion passed at whole\r",
													"    pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
													"    && pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"    && pm.expect(responseBodyCreditor).to.eql(requestBodyCreditor) \r",
													"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
													"    && pm.expect(jsonDataResponseCategoryPurposeCode).to.eql(\"SALA\")\r",
													"    && pm.expect(responseBodyUltimateDebtor).to.eql(requestBodyUltimateDebtor);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
												"exec": [
													"eval(globals.randomizeVariables)();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"creditorAccountNo\": {{creditorAccountNoBalanceAdjustment}},\r\n\t\"instructedAmount\": {\r\n       \"currency\": {\r\n       \"code\": \"CHF\"\r\n        },\r\n        \"value\": 0.02\r\n\t},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\r\n\t\"debtorAccountNo\": {{debtorAccountNo}},\r\n\t\"requestedExecutionDate\":  {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"Expenses business lunch\",\r\n    \"ultimateDebtor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"streetName\": {{streetName}},\r\n\t\t\t\"buildingNm\": {{buildingNmStr}},\r\n\t\t\t\"postalCode\": {{postalCodeStr}},\r\n\t\t\t\"townName\": {{townName}},\r\n\t\t\t\"country\": {{country}}\r\n        }\r\n    },\t\r\n\t\"categoryPurposeCode\": \"SALA\"\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/QRbill/{{newQrBillPaymentID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"swissPayment",
												"{{tenant}}",
												"v1",
												"credittransfer",
												"QRbill",
												"{{newQrBillPaymentID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "deletePaymentQrBill",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b805315b-12ae-4f45-85f9-14230e6cb91e",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" QR-bill payment is deleted and not exists anymore\", function () {\r",
													"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
													"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
													"    pm.response.to.have.status(200) \r",
													"    && pm.expect(responseBodyStatus).to.eql(true)\r",
													"    && pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
													"});\r",
													"\r",
													"// Log important stuff\r",
													"if (pm.response.to.have.status(200)){\r",
													"    console.log(\"Deleted QR-bill payment ID:\" + pm.globals.get(\"newQrBillPaymentID\"));\r",
													"    pm.globals.set(\"deletedQrBillPaymentID\",pm.globals.get(\"newQrBillPaymentID\"));\r",
													"    pm.globals.unset(\"newQrBillPaymentID\");\r",
													"}\r",
													"else {\r",
													"    console.log(\"Failed to delete QR-bill payment with ID:\" + pm.globals.get(\"newQrBillPaymentID\"));\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8b0efd50-c002-40d7-bf02-ad82c22ce7a7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"disabled": true
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/swissPayment/{{tenant}}/v1/credittransfer/QRbill/{{newQrBillPaymentID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"swissPayment",
												"{{tenant}}",
												"v1",
												"credittransfer",
												"QRbill",
												"{{newQrBillPaymentID}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Account transfer",
							"item": [
								{
									"name": "Standing order",
									"item": [
										{
											"name": "createPaymentAccountTransferSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Account transfer (standing order) payment is created and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    \r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"\r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo2 = JSON.parse(request.data).creditorAccountNo2;\r",
															"    let responseBodyCreditorAccountNo2 = JSON.parse(responseBody).creditorAccountNo2;  \r",
															"    \r",
															"    //Remittance information is correct\r",
															"    let requestBodyRemittanceInformation = JSON.parse(request.data).remittanceInformation;\r",
															"    let responseBodyRemittanceInformation = JSON.parse(responseBody).remittanceInformation;  \r",
															"    \r",
															"    //Standing order info is correct\r",
															"    let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
															"    let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder;\r",
															"\r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Creditor account is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Remittance information is correct\", () => {\r",
															"      pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Standing order info is correct\", () => {\r",
															"    pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"     });\r",
															"\r",
															"    // check if payment is created\r",
															"    if (pm.response.to.have.status(201)){\r",
															"        var responseData = JSON.parse(responseBody);\r",
															"        pm.globals.set(\"newPaymentAccountTransferID\", responseData.paymentId);\r",
															"        pm.globals.set(\"newPaymentRedStOrInfo\", responseData.standingOrder);\r",
															"        console.log(\"New account transfer (standing order) payment ID: \" + pm.globals.get(\"newPaymentAccountTransferID\"));\r",
															"    }\r",
															"    else {\r",
															"        console.log(\"Failed to create account transfer (standing order) payment\");\r",
															"    }\r",
															"    \r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
															"    && pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2)\r",
															"    && pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation)\r",
															"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
														"exec": [
															"const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\r",
															"const s = Array.from({length:20}, _ => c[Math.floor(Math.random()*c.length)]).join('')\r",
															"pm.globals.set(\"paymentAccountTransferRemittanceInformationUnstructured\",s);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"creditorAccountNo\": {{creditorAccountNo2}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.34\r\n    },\r\n\t\"remittanceInformation\": {\r\n    \t\"unstructured\": \"{{paymentAccountTransferRemittanceInformationUnstructured}}\"\r\n\t},\r\n\t\"debitNote\": \"New reference\",\r\n\t\"debitForm\": \"SIA\",\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/accounttransfer",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"accounttransfer",
														"{{tenant}}",
														"v2",
														"credittransfer",
														"accounttransfer"
													]
												}
											},
											"response": []
										},
										{
											"name": "getPaymentAccountTransferSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Account transfer (standing order) payment is retrieved and assertions are passed\", function () {\r",
															"\r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    \r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"\r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo2 = JSON.parse(request.data).creditorAccountNo2;\r",
															"    let responseBodyCreditorAccountNo2 = JSON.parse(responseBody).creditorAccountNo2;  \r",
															"\r",
															"    //Remittance information is correct\r",
															"    let requestBodyRemittanceInformation = JSON.parse(request.data).remittanceInformation;\r",
															"    let responseBodyRemittanceInformation = JSON.parse(responseBody).remittanceInformation;  \r",
															"    \r",
															"    //Standing order info is correct\r",
															"   let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
															"   let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder;\r",
															"    \r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Creditor account is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Remittance information is correct\", () => {\r",
															"      pm.expect(responseBodyRemittanceInformation.unstructured).to.eql(requestBodyRemittanceInformation.unstructured);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Standing order info is correct\", () => {\r",
															"    pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"    });\r",
															"\r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
															"    && pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2)\r",
															"    && pm.expect(responseBodyRemittanceInformation.unstructured).to.eql(requestBodyRemittanceInformation.unstructured)\r",
															"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"creditorAccountNo\": {{creditorAccountNo2}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.34\r\n    },\r\n\t\"remittanceInformation\": {\r\n    \t\"unstructured\": \"{{paymentAccountTransferRemittanceInformationUnstructured}}\"\r\n\t},\r\n\t\"debitNote\": \"New reference\",\r\n\t\"debitForm\": \"SIA\",\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/accounttransfer/{{newPaymentAccountTransferID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"accounttransfer",
														"{{tenant}}",
														"v2",
														"credittransfer",
														"accounttransfer",
														"{{newPaymentAccountTransferID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "updatePaymentAccountTransferSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Account transfer (standing order) payment is created and assertions are passed\", function () {\r",
															"    \r",
															"    //Instructed amount is correct\r",
															"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
															"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
															"    \r",
															"    //Debtor account is correct\r",
															"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
															"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
															"\r",
															"    //Creditor account is correct\r",
															"    let requestBodyCreditorAccountNo2 = JSON.parse(request.data).creditorAccountNo2;\r",
															"    let responseBodyCreditorAccountNo2 = JSON.parse(responseBody).creditorAccountNo2;  \r",
															"    \r",
															"    //Remittance information is correct\r",
															"    let requestBodyRemittanceInformation = JSON.parse(request.data).remittanceInformation;\r",
															"    let responseBodyRemittanceInformation = JSON.parse(responseBody).remittanceInformation;  \r",
															"    \r",
															"    //Standing order info is correct\r",
															"   let requestBodyStandingOrder = JSON.parse(request.data).standingOrder;\r",
															"   let responseBodyStandingOrder = JSON.parse(responseBody).standingOrder;\r",
															"\r",
															"    pm.test(\"Instructed amount is correct\", () => {\r",
															"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Debtor account is correct\", () => {\r",
															"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Creditor account is correct\", () => {\r",
															"      pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Remittance information is correct\", () => {\r",
															"      pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
															"    });\r",
															"    \r",
															"    pm.test(\"Standing order info is correct\", () => {\r",
															"    pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"    });\r",
															"\r",
															"    //Determine if assertion passed at whole\r",
															"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
															"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
															"    && pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2)\r",
															"    && pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation)\r",
															"    && pm.expect(responseBodyStandingOrder).to.eql(requestBodyStandingOrder);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
														"exec": [
															"const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\r",
															"const s = Array.from({length:20}, _ => c[Math.floor(Math.random()*c.length)]).join('')\r",
															"pm.globals.set(\"paymentAccountTransferRemittanceInformationUnstructured\",s);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"creditorAccountNo\": {{creditorAccountNo2}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.43\r\n    },\r\n\t\"remittanceInformation\": {\r\n    \t\"unstructured\": \"{{paymentAccountTransferRemittanceInformationUnstructured}}\"\r\n\t},\r\n\t\"debitNote\": \"New reference\",\r\n\t\"debitForm\": \"SIA\",\r\n\t\"standingOrder\": {\r\n\t\t\"firstOn\": {{PrS:futureWorkingDay}},\r\n\t\t\"lastOn\": {{PrS:futurePlusWorkingDay}},\r\n\t\t\"beforeHoliday\": true,\r\n\t\t\"interval\": \"WEEKLY\",\r\n    \t\"active\": true,\r\n    \t\"ultimo\": false\t\t\r\n\t}\r\n}"
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/accounttransfer/{{newPaymentAccountTransferID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"accounttransfer",
														"{{tenant}}",
														"v2",
														"credittransfer",
														"accounttransfer",
														"{{newPaymentAccountTransferID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "deletePaymentAccountTransferSO",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b805315b-12ae-4f45-85f9-14230e6cb91e",
														"exec": [
															"// Execute standard tests from PrS using eval()\r",
															"//eval(globals.commonTests)();\r",
															"\r",
															"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Account transfer (standing order) is deleted and not exists anymore\", function () {\r",
															"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
															"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
															"    pm.response.to.have.status(200) \r",
															"    && pm.expect(responseBodyStatus).to.eql(true)\r",
															"    && pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
															"});\r",
															"\r",
															"// Log important stuff\r",
															"if (pm.response.to.have.status(200)){\r",
															"    console.log(\"Deleted account transfer (standing order) payment ID:\" + pm.globals.get(\"newPaymentAccountTransferID\"));\r",
															"    pm.globals.set(\"deletedPaymentAccountTransferID\",pm.globals.get(\"newPaymentAccountTransferID\"));\r",
															"    pm.globals.unset(\"newPaymentAccountTransferID\");\r",
															"    pm.globals.unset(\"paymentAccountTransferRemittanceInformationUnstructured\");\r",
															"    pm.globals.unset(\"newPaymentAccountTransferStOrInfo\");\r",
															"}\r",
															"else {\r",
															"    console.log(\"Failed to delete account transfer (standing order) payment with ID:\" + pm.globals.get(\"newPaymentAccountTransferID\"));\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8b0efd50-c002-40d7-bf02-ad82c22ce7a7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "accept",
														"value": "application/json, application/hal+json"
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token}}",
														"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
														"disabled": true
													},
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{environment}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/accounttransfer/{{newPaymentAccountTransferID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"banking-api",
														"payment",
														"accounttransfer",
														"{{tenant}}",
														"v2",
														"credittransfer",
														"accounttransfer",
														"{{newPaymentAccountTransferID}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "createPaymentAccountTransfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Account transfer payment is created and assertions are passed\", function () {\r",
													"\r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    \r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"\r",
													"    //Creditor account is correct\r",
													"    let requestBodyCreditorAccountNo2 = JSON.parse(request.data).creditorAccountNo2;\r",
													"    let responseBodyCreditorAccountNo2 = JSON.parse(responseBody).creditorAccountNo2;  \r",
													"    \r",
													"    //Requested execution date is correct\r",
													"    let requestBodyRequestedExecutionDate = JSON.parse(request.data).requestedExecutionDate;\r",
													"    let responseBodyRequestedExecutionDate = JSON.parse(responseBody).requestedExecutionDate;  \r",
													"    \r",
													"    //Remittance information is correct\r",
													"    let requestBodyRemittanceInformation = JSON.parse(request.data).remittanceInformation;\r",
													"    let responseBodyRemittanceInformation = JSON.parse(responseBody).remittanceInformation;  \r",
													"\r",
													"    pm.test(\"Instructed amount is correct\", () => {\r",
													"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Debtor account is correct\", () => {\r",
													"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Creditor account is correct\", () => {\r",
													"      pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Execution date is correct\", () => {\r",
													"      pm.expect(responseBodyRequestedExecutionDate).to.eql(requestBodyRequestedExecutionDate);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Remittance information is correct\", () => {\r",
													"      pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
													"    });\r",
													"\r",
													"    // check if payment is created\r",
													"    if (pm.response.to.have.status(201)){\r",
													"        var responseData = JSON.parse(responseBody);\r",
													"        pm.globals.set(\"newPaymentAccountTransferID\", responseData.paymentId);\r",
													"        console.log(\"New account transfer payment ID: \" + pm.globals.get(\"newPaymentAccountTransferID\"));\r",
													"    }\r",
													"    else {\r",
													"        console.log(\"Failed to create account transfer payment\");\r",
													"    }\r",
													"    \r",
													"    //Determine if assertion passed at whole\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
													"    && pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2)\r",
													"    && pm.expect(responseBodyRequestedExecutionDate).to.eql(requestBodyRequestedExecutionDate)\r",
													"    && pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
												"exec": [
													"const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\r",
													"const s = Array.from({length:20}, _ => c[Math.floor(Math.random()*c.length)]).join('')\r",
													"pm.globals.set(\"paymentAccountTransferRemittanceInformationUnstructured\",s);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"creditorAccountNo\": {{creditorAccountNo2}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.34\r\n    },\r\n\t\"remittanceInformation\": {\r\n    \t\"unstructured\": \"{{paymentAccountTransferRemittanceInformationUnstructured}}\"\r\n\t},\r\n\t\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"New reference\",\r\n\t\"debitForm\": \"SIA\"\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/accounttransfer",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"accounttransfer",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"accounttransfer"
											]
										}
									},
									"response": []
								},
								{
									"name": "getPaymentAccountTransfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Account transfer payment is retrieved and assertions are passed\", function () {\r",
													"\r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    \r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"\r",
													"    //Creditor account is correct\r",
													"    let requestBodyCreditorAccountNo2 = JSON.parse(request.data).creditorAccountNo2;\r",
													"    let responseBodyCreditorAccountNo2 = JSON.parse(responseBody).creditorAccountNo2;  \r",
													"\r",
													"    //Remittance information is correct\r",
													"    let requestBodyRemittanceInformation = JSON.parse(request.data).remittanceInformation;\r",
													"    let responseBodyRemittanceInformation = JSON.parse(responseBody).remittanceInformation;  \r",
													"    \r",
													"    pm.test(\"Account transfer payment is retrieved\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Instructed amount is correct\", () => {\r",
													"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Debtor account is correct\", () => {\r",
													"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Creditor account is correct\", () => {\r",
													"      pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Remittance information is correct\", () => {\r",
													"      pm.expect(responseBodyRemittanceInformation.unstructured).to.eql(requestBodyRemittanceInformation.unstructured);\r",
													"    });\r",
													"\r",
													"    //Determine if assertion passed at whole\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
													"    && pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2)\r",
													"    && pm.expect(responseBodyRemittanceInformation.unstructured).to.eql(requestBodyRemittanceInformation.unstructured);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"creditorAccountNo\": {{creditorAccountNo2}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.34\r\n    },\r\n\t\"remittanceInformation\": {\r\n    \t\"unstructured\": \"{{paymentAccountTransferRemittanceInformationUnstructured}}\"\r\n\t},\r\n\t\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"New reference\",\r\n\t\"debitForm\": \"SIA\"\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/accounttransfer/{{newPaymentAccountTransferID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"accounttransfer",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"accounttransfer",
												"{{newPaymentAccountTransferID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "updatePaymentAccountTransfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Account transfer payment is updated and assertions are passed\", function () {\r",
													"    \r",
													"    //Instructed amount is correct\r",
													"    let requestBodyInstructedAmount = JSON.parse(request.data).instructedAmount;\r",
													"    let responseBodyInstructedAmount = JSON.parse(responseBody).instructedAmount;\r",
													"    \r",
													"    //Debtor account is correct\r",
													"    let requestBodyDebtorAccountNo = JSON.parse(request.data).debtorAccountNo;\r",
													"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).debtorAccountNo;   \r",
													"\r",
													"    //Creditor account is correct\r",
													"    let requestBodyCreditorAccountNo2 = JSON.parse(request.data).creditorAccountNo2;\r",
													"    let responseBodyCreditorAccountNo2 = JSON.parse(responseBody).creditorAccountNo2;  \r",
													"    \r",
													"    //Remittance information is correct\r",
													"    let requestBodyRemittanceInformation = JSON.parse(request.data).remittanceInformation;\r",
													"    let responseBodyRemittanceInformation = JSON.parse(responseBody).remittanceInformation;  \r",
													"\r",
													"    pm.test(\"Account transfer payment is updated\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Instructed amount is correct\", () => {\r",
													"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Debtor account is correct\", () => {\r",
													"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Creditor account is correct\", () => {\r",
													"      pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2);\r",
													"    });\r",
													"    \r",
													"    pm.test(\"Remittance information is correct\", () => {\r",
													"      pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
													"    });\r",
													"\r",
													"    //Determine if assertion passed at whole\r",
													"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
													"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
													"    && pm.expect(responseBodyCreditorAccountNo2).to.eql(requestBodyCreditorAccountNo2)\r",
													"    && pm.expect(responseBodyRemittanceInformation).to.eql(requestBodyRemittanceInformation);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
												"exec": [
													"const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\r",
													"const s = Array.from({length:20}, _ => c[Math.floor(Math.random()*c.length)]).join('')\r",
													"pm.globals.set(\"paymentAccountTransferRemittanceInformationUnstructured\",s);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\t\r\n    \"creditorAccountNo\": {{creditorAccountNo2}},\r\n    \"instructedAmount\": {\r\n        \"currency\": {\r\n            \"code\": \"CHF\"\r\n        },\r\n        \"value\": 2.43\r\n    },\r\n\t\"remittanceInformation\": {\r\n    \t\"unstructured\": \"{{paymentAccountTransferRemittanceInformationUnstructured}}\"\r\n\t},\r\n\t\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n\t\"debitNote\": \"New reference\",\r\n\t\"debitForm\": \"SIA\"\r\n}"
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/accounttransfer/{{newPaymentAccountTransferID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"accounttransfer",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"accounttransfer",
												"{{newPaymentAccountTransferID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "deletePaymentAccountTransfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b805315b-12ae-4f45-85f9-14230e6cb91e",
												"exec": [
													"// Execute standard tests from PrS using eval()\r",
													"//eval(globals.commonTests)();\r",
													"\r",
													"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Account transfer is deleted and not exists anymore\", function () {\r",
													"    let responseBodyStatus = JSON.parse(responseBody)._status; \r",
													"    let responseBodyMessages = JSON.parse(responseBody)._messages; \r",
													"    pm.response.to.have.status(200) \r",
													"    && pm.expect(responseBodyStatus).to.eql(true)\r",
													"    && pm.expect(responseBodyMessages).to.be.an('array').that.is.empty;\r",
													"});\r",
													"\r",
													"// Log important stuff\r",
													"if (pm.response.to.have.status(200)){\r",
													"    console.log(\"Deleted account transfer payment ID:\" + pm.globals.get(\"newPaymentAccountTransferID\"));\r",
													"    pm.globals.set(\"deletedPaymentAccountTransferID\",pm.globals.get(\"newPaymentAccountTransferID\"));\r",
													"    pm.globals.unset(\"newPaymentAccountTransferID\");\r",
													"    pm.globals.unset(\"paymentAccountTransferRemittanceInformationUnstructured\");\r",
													"}\r",
													"else {\r",
													"    console.log(\"Failed to delete account transfer payment with ID:\" + pm.globals.get(\"newPaymentAccountTransferID\"));\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8b0efd50-c002-40d7-bf02-ad82c22ce7a7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "accept",
												"value": "application/json, application/hal+json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}",
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"disabled": true
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{environment}}/banking-api/payment/accounttransfer/{{tenant}}/v2/credittransfer/accounttransfer/{{newPaymentAccountTransferID}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"banking-api",
												"payment",
												"accounttransfer",
												"{{tenant}}",
												"v2",
												"credittransfer",
												"accounttransfer",
												"{{newPaymentAccountTransferID}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Payments: Search",
					"item": [
						{
							"name": "getPaymentsPaymentSearch?Swiftp0s20",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5d00dc8-f552-48c0-9a1c-2510df583464",
										"exec": [
											"// if response is spread on multiple pages, remember lates payment ID\r",
											"let skipTests = true;\r",
											"if (pm.response.to.have.status(200)){\r",
											"    var responseData = JSON.parse(responseBody);\r",
											"    if (responseData.pageResponse.totalPages>1){\r",
											"        pm.globals.set(\"latestPaymentID\", responseData.payments[parseInt(responseData.pageResponse.size,10)-1].specificPaymentId);\r",
											"        console.log(\"Latest payment ID in the list: \" + pm.globals.get(\"latestPaymentID\"));\r",
											"        skipTests = false;\r",
											"    } else {\r",
											"        console.log(\"Not enough test data!!!\");\r",
											"        pm.globals.unset(\"latestPaymentID\");\r",
											"    }\r",
											"}\r",
											"else {\r",
											"    console.log(\"Failed to retrieve payments!!!\");\r",
											"    pm.globals.unset(\"latestPaymentID\");\r",
											"}\r",
											"\r",
											"(skipTests ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" Payments are retrieved and assertions are passed\", function () {\r",
											"\r",
											"    pm.test(\"Payments are retrieved\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22f2990b-adb1-4668-a6e9-92884e953577",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"pageRequest\": {\r\n  \"page\": 0,\r\n  \"size\": 5\r\n  },\r\n   \"paymentFilter\": {\r\n   \"paymentType\":\"SWIFT_INTERNATIONAL\"\r\n   },\r\n   \"orderBy\": {\r\n     \"field\": \"CREATION_DATE\",\r\n     \"sortOrder\": \"DESC\"\r\n  }\r\n \r\n}"
								},
								"url": {
									"raw": "{{environment}}/banking-api/payment/payments/{{tenant}}/v2/payment/search?page=0&size=20",
									"host": [
										"{{environment}}"
									],
									"path": [
										"banking-api",
										"payment",
										"payments",
										"{{tenant}}",
										"v2",
										"payment",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getPaymentsPaymentSearch?Swiftp1s20",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5d00dc8-f552-48c0-9a1c-2510df583464",
										"exec": [
											"let skipTests = true;\r",
											"let latestPaymentID = pm.globals.get(\"latestPaymentID\");\r",
											"if (pm.response.to.have.status(200)){\r",
											"    if (latestPaymentID){\r",
											"        skipTests = false;\r",
											"    } else {\r",
											"        console.log(\"Not enough test data!!!\");\r",
											"    }\r",
											"}\r",
											"else {\r",
											"    console.log(\"Failed to retrieve payments!!!\");\r",
											"    pm.globals.unset(\"latestPaymentID\");\r",
											"}\r",
											"\r",
											"(skipTests ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" Payments are retrieved and assertions are passed\", function () {\r",
											"    pm.test(\"Payments are retrieved\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    let responseData = JSON.parse(responseBody);\r",
											"    pm.test(\"Latest payment from previous page is not in the list\", function () {\r",
											"        pm.expect(pm.response.text()).not.to.include(latestPaymentID);\r",
											"    });\r",
											"    \r",
											"    pm.response.to.have.status(200) &&\r",
											"    pm.expect(pm.response.text()).not.to.include(latestPaymentID);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22f2990b-adb1-4668-a6e9-92884e953577",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"pageRequest\": {\r\n  \"page\": 1,\r\n  \"size\": 5\r\n  },\r\n   \"paymentFilter\": {\r\n   \"paymentType\":\"SWIFT_INTERNATIONAL\"\r\n   },\r\n   \"orderBy\": {\r\n     \"field\": \"CREATION_DATE\",\r\n     \"sortOrder\": \"DESC\"\r\n  }\r\n \r\n}"
								},
								"url": {
									"raw": "{{environment}}/banking-api/payment/payments/{{tenant}}/v2/payment/search?page=1&size=20",
									"host": [
										"{{environment}}"
									],
									"path": [
										"banking-api",
										"payment",
										"payments",
										"{{tenant}}",
										"v2",
										"payment",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getPaymentsPaymentSearch?s1000",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5d00dc8-f552-48c0-9a1c-2510df583464",
										"exec": [
											"let skipTests = true;\r",
											"let responseData = JSON.parse(responseBody);\r",
											"if (pm.response.to.have.status(200)){\r",
											"    if (responseData.pageResponse.totalElements>0){\r",
											"        skipTests = false;\r",
											"    } else {\r",
											"        console.log(\"Not enough test data!!!\");\r",
											"    }\r",
											"}\r",
											"else {\r",
											"    console.log(\"Failed to retrieve payments!!!\");\r",
											"}\r",
											"\r",
											"(skipTests ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" Value of 'totalElements' property matches to number of payments retrieved and assertions are passed\", function () {\r",
											"    pm.test(\"Command is executed without problems\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    let valueToCompare = parseInt(responseData.pageResponse.size,10);\r",
											"    if(parseInt(responseData.pageResponse.size,10)>parseInt(responseData.pageResponse.totalElements,10)){\r",
											"        valueToCompare = parseInt(responseData.pageResponse.totalElements,10)\r",
											"    }\r",
											"    \r",
											"    pm.test(\"Value of 'totalElements' property matches to number of payments retrieved\", function () {\r",
											"        pm.expect(valueToCompare).to.eql(responseData.payments.length);\r",
											"    });\r",
											"    \r",
											"    let deletedPaymentID = pm.globals.get(\"deletedPaymentID\");\r",
											"    if (deletedPaymentID){\r",
											"        pm.test(\"Deleted payments aren't shown in response\", function () {\r",
											"            pm.expect(pm.response.text()).not.to.include(deletedPaymentID);\r",
											"        });\r",
											"        pm.expect(pm.response.text()).not.to.include(deletedPaymentID) &&\r",
											"        pm.response.to.have.status(200) &&\r",
											"        pm.expect(valueToCompare).to.eql(responseData.payments.length);\r",
											"        pm.globals.unset(\"deletedPaymentID\");\r",
											"    } else {\r",
											"        pm.response.to.have.status(200) &&\r",
											"        pm.expect(valueToCompare).to.eql(responseData.payments.length);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22f2990b-adb1-4668-a6e9-92884e953577",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"pageRequest\": {\n  \"page\": 0,\n  \"size\": 100\n  },\n  \"paymentFilter\": {\n\t\"paymentType\":\"SWIFT_INTERNATIONAL\"\n  },\n  \"orderBy\": {\n    \"field\": \"CREATION_DATE\",\n    \"sortOrder\": \"DESC\"\n  }\n}"
								},
								"url": {
									"raw": "{{environment}}/banking-api/payment/payments/{{tenant}}/v2/payment/search?size=1000",
									"host": [
										"{{environment}}"
									],
									"path": [
										"banking-api",
										"payment",
										"payments",
										"{{tenant}}",
										"v2",
										"payment",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getPaymentsPaymentSearchAssertFilterPaymentStatuses?s100",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5d00dc8-f552-48c0-9a1c-2510df583464",
										"exec": [
											"let skipTests = true;\r",
											"let responseData = JSON.parse(responseBody);\r",
											"if (pm.response.to.have.status(200)){\r",
											"    if (responseData.pageResponse.totalElements>0){\r",
											"        skipTests = false;\r",
											"    } else {\r",
											"        console.log(\"Not enough test data!!!\");\r",
											"    }\r",
											"}\r",
											"else {\r",
											"    console.log(\"Failed to retrieve payments!!!\");\r",
											"}\r",
											"\r",
											"(skipTests ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" Returned payments are filtered by 'paymentStatuses' property and all assertions are passed\", function () {\r",
											"    pm.test(\"Command is executed without errors\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    let isTrue = true;\r",
											"    pm.test(\"Returned payments are filtered by 'paymentStatuses' property\", function () {\r",
											"        // determine filter\r",
											"        let filter = pm.globals.get(\"body\");\r",
											"        let n = filter.lastIndexOf(\"[\");\r",
											"        filter = filter.substr(n, filter.length - n - 2);\r",
											"        // check if all returned payments have 'paymentStatuses' property matching to defined filter\r",
											"        for(let i = 0; i < responseData.payments.length; ++i){\r",
											"            isTrue = isTrue && filter.includes(responseData.payments[i].payment.paymentState);\r",
											"        }\r",
											"        pm.expect(isTrue).to.be.eql(true);\r",
											"    });\r",
											"    \r",
											"    pm.response.to.have.status(200) &&\r",
											"    pm.expect(isTrue).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22f2990b-adb1-4668-a6e9-92884e953577",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{body}}"
								},
								"url": {
									"raw": "{{environment}}/banking-api/payment/payments/{{tenant}}/v2/payment/search?size=1000",
									"host": [
										"{{environment}}"
									],
									"path": [
										"banking-api",
										"payment",
										"payments",
										"{{tenant}}",
										"v2",
										"payment",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getPaymentsPaymentSearchNoDeletedInResponse?s1000",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5d00dc8-f552-48c0-9a1c-2510df583464",
										"exec": [
											"let skipTests = true;\r",
											"let responseData = JSON.parse(responseBody);\r",
											"if (pm.response.to.have.status(200)){\r",
											"    if (responseData.pageResponse.totalElements>0){\r",
											"        skipTests = false;\r",
											"    } else {\r",
											"        console.log(\"Not enough test data!!!\");\r",
											"    }\r",
											"}\r",
											"else {\r",
											"    console.log(\"Failed to retrieve payments!!!\");\r",
											"}\r",
											"\r",
											"(skipTests ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" Value of totalElements property matches to number of payments retrieved and assertions are passed\", function () {\r",
											"    pm.test(\"Command is executed without problems\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Value of totalElements property matches to number of payments retrieved\", function () {\r",
											"        pm.expect(parseInt(responseData.pageResponse.totalElements,10)).to.eql(responseData.payments.length);\r",
											"    });\r",
											"    \r",
											"    pm.response.to.have.status(200) &&\r",
											"    pm.expect(parseInt(responseData.pageResponse.totalElements,10)).to.eql(responseData.payments.length);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22f2990b-adb1-4668-a6e9-92884e953577",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{body}}"
								},
								"url": {
									"raw": "{{environment}}/banking-api/payment/payments/{{tenant}}/v2/payment/search?size=1000",
									"host": [
										"{{environment}}"
									],
									"path": [
										"banking-api",
										"payment",
										"payments",
										"{{tenant}}",
										"v2",
										"payment",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Payments: Routing",
					"item": [
						{
							"name": "getRoutingByFilterAlias",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "23d2e5d8-1818-43d0-bc4d-bf2eeb68b0d0",
										"exec": [
											"//pm.environment.set(\"accountAlias\",\"1501 CHF\")",
											"//pm.environment.set(\"accountAlias\",\"Test1320369\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1a2ffb06-e34e-4d38-ad8f-29c0e7446fd7",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"var notExists = typeof undefined;\r",
											"let paymentType = JSON.parse(pm.environment.get(\"paymentType\"));\r",
											"if (typeof paymentType == notExists) {\r",
											"    paymentType = \"ACCOUNT_TRANSFER\"; \r",
											"}\r",
											"let beneficiaryAccount = pm.environment.get(\"beneficiaryAccount\");\r",
											"if (typeof beneficiaryAccount == notExists) {\r",
											"    beneficiaryAccount = \"CH6312312001248081501\"; \r",
											"}\r",
											"\r",
											"const isMasterTestK8S = pm.environment.get(\"envName\") == 'MDB-MASTER-TESTK8S';\r",
											"(isMasterTestK8S ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" Routing is retrieved and assertions are passed\", function () {\r",
											"\r",
											"    //Payment type\r",
											"    let jsonDataPaymentType = pm.response.json().paymentType;\r",
											"    //Beneficiary account\r",
											"    let jsonDataBeneficiaryAccount = JSON.stringify(pm.response.json().beneficiaryAccount);\r",
											"\r",
											"    pm.test(\"Routing is retrieved\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Routing type is correct\", () => {\r",
											"      pm.expect(jsonDataPaymentType).to.eql(paymentType);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Beneficiary account is correct\", () => {\r",
											"      pm.expect(jsonDataBeneficiaryAccount).to.eql(beneficiaryAccount);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Beneficiary account ID is in response\", function () {\r",
											"      pm.expect(pm.response.text()).to.include(\"beneficiaryAccountId\");\r",
											"    });\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(jsonDataPaymentType).to.eql(paymentType)\r",
											"    && pm.expect(jsonDataBeneficiaryAccount).to.eql(beneficiaryAccount)\r",
											"    && pm.expect(pm.response.text()).to.include(\"beneficiaryAccountId\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/banking-api/payment/payments/{{tenant}}/v1/routing/analyze?routingRequest={{accountAlias}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"banking-api",
										"payment",
										"payments",
										"{{tenant}}",
										"v1",
										"routing",
										"analyze"
									],
									"query": [
										{
											"key": "routingRequest",
											"value": "{{accountAlias}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Payments: Template",
					"item": [
						{
							"name": "createPaymentTemplate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment template is created and assertions are passed\", function () {\r",
											"\r",
											"    //Amount is correct\r",
											"    let requestBodyAmount = JSON.parse(request.data).amount.value;\r",
											"    let responseBodyAmount = JSON.stringify(JSON.parse(responseBody).amount.value);\r",
											"    //Execution date is correct\r",
											"    let requestBodyExecutionDate = JSON.parse(request.data).requestedExecutionDate;\r",
											"    let responseBodyExecutionDate = JSON.parse(responseBody).requestedExecutionDate;    \r",
											"    //Creditor is correct\r",
											"    let requestBodyCreditor = JSON.parse(request.data).creditor;\r",
											"    let responseBodyCreditor = JSON.parse(responseBody).creditor;\r",
											"    //Creditor account is correct\r",
											"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
											"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo;   \r",
											"    //Template name is correct\r",
											"    let requestBodyTemplateName = JSON.parse(request.data).templateName;\r",
											"    let responseBodyTemplateName = JSON.parse(responseBody).templateName;\r",
											"    //Template group name is correct\r",
											"    let requestBodyTemplateGroupName = JSON.parse(request.data).templateGroupName;\r",
											"    let responseBodyTemplateGroupName = JSON.parse(responseBody).templateGroupName;\r",
											"    //Payment type is correct    \r",
											"    //let requestBodyPaymentType = JSON.parse(request.data).paymentType;\r",
											"    //let responseBodyPaymentType = JSON.parse(responseBody).paymentType;\r",
											"    \r",
											"    pm.test(\"Amount is correct\", () => {\r",
											"      pm.expect(responseBodyAmount).to.eql(requestBodyAmount);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Execution date is correct\", () => {\r",
											"      pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Creditor is correct\", () => {\r",
											"      pm.expect(responseBodyCreditor).to.eql(requestBodyCreditor);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Creditor account is correct\", () => {\r",
											"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Template name and template group name are correct\", () => {\r",
											"      pm.expect(responseBodyTemplateName).to.eql(requestBodyTemplateName)\r",
											"      && pm.expect(responseBodyTemplateGroupName).to.eql(requestBodyTemplateGroupName);\r",
											"    });\r",
											"    \r",
											"    //pm.test(\"Payment type is correct\", () => {\r",
											"    //  pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType);\r",
											"    //});\r",
											"    \r",
											"    // check if payment is created\r",
											"    if (pm.response.to.have.status(201)){\r",
											"        var responseData = JSON.parse(responseBody);\r",
											"        pm.globals.set(\"newPaymentTemplateID\", responseData.id);\r",
											"        pm.globals.set(\"newPaymentTemplateName\", responseData.templateName);\r",
											"        pm.globals.set(\"newPaymentTemplateGroupName\", responseData.templateGroupName);  \r",
											"        pm.globals.set(\"newPaymentTemplatePaymentType\", responseData.paymentType);  \r",
											"        console.log(\"New payment template ID: \" + pm.globals.get(\"newPaymentTemplateID\"));        \r",
											"    }\r",
											"    else {\r",
											"        console.log(\"Failed to create payment template!\");\r",
											"    }\r",
											"    \r",
											"    //Determine if assertion passed at whole\r",
											"    pm.expect(responseBodyAmount).to.eql(requestBodyAmount) \r",
											"    && pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate) \r",
											"    && pm.expect(responseBodyCreditor).to.eql(requestBodyCreditor)\r",
											"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
											"    && pm.expect(responseBodyTemplateName).to.eql(requestBodyTemplateName)\r",
											"    && pm.expect(responseBodyTemplateGroupName).to.eql(requestBodyTemplateGroupName);\r",
											"    //&& pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
										"exec": [
											"eval(globals.randomizeVariables)();",
											"",
											"//random string 6 characters long using defined characters only",
											"const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';",
											"const s = Array.from({length:12}, _ => c[Math.floor(Math.random()*c.length)]).join('');",
											"pm.environment.set(\"templateName\", JSON.stringify(s));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"amount\": {\r\n        \"currency\": {\r\n            \"code\": \"EUR\"\r\n        },\r\n        \"value\": \"1.01\"\r\n    },\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}}\r\n    \t}\r\n    },\r\n    \"creditorAccountNo\": {{creditorAccountNo}},\r\n    \"agent\": {\r\n        \"bic\": {{creditorAgentBicSWIFT}}\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"templateName\": {{templateName}},\r\n    \"templateGroupName\": \"Meine Zahlungsliste\",\r\n    \"paymentType\": \"SWIFT_INTERNATIONAL\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/banking-api/payment/payments/{{tenant}}/v2/payment/template",
									"host": [
										"{{environment}}"
									],
									"path": [
										"banking-api",
										"payment",
										"payments",
										"{{tenant}}",
										"v2",
										"payment",
										"template"
									]
								}
							},
							"response": []
						},
						{
							"name": "getPaymentTemplate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5d00dc8-f552-48c0-9a1c-2510df583464",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment template is retrieved and assertions are passed\", function () {\r",
											"\r",
											"    //Amount is correct\r",
											"    let requestBodyAmount = JSON.parse(request.data).amount.value;\r",
											"    let responseBodyAmount = JSON.stringify(JSON.parse(responseBody).amount.value);\r",
											"    //Creditor account is correct\r",
											"    let requestBodyCreditorAccountNo = JSON.parse(request.data).creditorAccountNo;\r",
											"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).creditorAccountNo;   \r",
											"    //Template ID is correct\r",
											"    let requestBodyTemplateId = pm.globals.get(\"newPaymentTemplateID\");\r",
											"    let responseBodyTemplateId = JSON.parse(responseBody).id;    \r",
											"    //Template name is correct\r",
											"    let requestBodyTemplateName = pm.globals.get(\"newPaymentTemplateName\");\r",
											"    let responseBodyTemplateName = JSON.parse(responseBody).templateName;\r",
											"    //Template group name is correct\r",
											"    let requestBodyTemplateGroupName = pm.globals.get(\"newPaymentTemplateGroupName\");\r",
											"    let responseBodyTemplateGroupName = JSON.parse(responseBody).templateGroupName;\r",
											"    //Payment type is correct    \r",
											"    //let requestBodyPaymentType = pm.globals.get(\"newPaymentTemplatePaymentType\");\r",
											"    //let responseBodyPaymentType = JSON.parse(responseBody).paymentType;\r",
											"\r",
											"    pm.test(\"Template ID is correct\", () => {\r",
											"      pm.expect(responseBodyTemplateId).to.eql(requestBodyTemplateId);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Amount is correct\", () => {\r",
											"      pm.expect(responseBodyAmount).to.eql(requestBodyAmount);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Creditor account is correct\", () => {\r",
											"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Template name and template group name are correct\", () => {\r",
											"      pm.expect(responseBodyTemplateName).to.eql(requestBodyTemplateName)\r",
											"      && pm.expect(responseBodyTemplateGroupName).to.eql(requestBodyTemplateGroupName);\r",
											"    });\r",
											"    \r",
											"    //pm.test(\"Payment type is correct\", () => {\r",
											"    //  pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType);\r",
											"    //});\r",
											"    \r",
											"    //Determine if assertion passed at whole\r",
											"    pm.expect(responseBodyTemplateId).to.eql(requestBodyTemplateId)\r",
											"    && pm.expect(responseBodyAmount).to.eql(requestBodyAmount) \r",
											"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
											"    && pm.expect(responseBodyTemplateName).to.eql(requestBodyTemplateName)\r",
											"    && pm.expect(responseBodyTemplateGroupName).to.eql(requestBodyTemplateGroupName);\r",
											"    //&& pm.expect(responseBodyPaymentType).to.eql(requestBodyPaymentType);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22f2990b-adb1-4668-a6e9-92884e953577",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"amount\": {\r\n        \"currency\": {\r\n            \"code\": \"EUR\"\r\n        },\r\n        \"value\": \"1.01\"\r\n    },\r\n    \"requestedExecutionDate\": {{PrS:nextWorkingDay}},\r\n    \"creditor\": {\r\n        \"name\": {{name}},\r\n        \"address\": {\r\n\t\t\t\"adrLine1\": {{adrLine1}},\r\n\t\t\t\"adrLine2\": {{adrLine2}}\r\n    \t}\r\n    },\r\n    \"creditorAccountNo\": {{creditorAccountNo}},\r\n    \"agent\": {\r\n        \"bic\": {{creditorAgentBicSWIFT}}\r\n    },\r\n    \"debtorAccountNo\": {{debtorAccountNo}},\r\n    \"templateName\": {{templateName}},\r\n    \"templateGroupName\": \"Meine Zahlungsliste\",\r\n    \"paymentType\": \"SWIFT_INTERNATIONAL\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{environment}}/banking-api/payment/payments/12312/v2/payment/template/{{newPaymentTemplateID}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"banking-api",
										"payment",
										"payments",
										"12312",
										"v2",
										"payment",
										"template",
										"{{newPaymentTemplateID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "deletePaymentTemplate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment template is deleted and not exists anymore\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Log important stuff\r",
											"if (pm.response.to.have.status(200)){\r",
											"    console.log(\"Deleted payment template ID:\" + pm.globals.get(\"newPaymentTemplateID\"));\r",
											"    pm.globals.set(\"deletedPaymentTemplateID\",pm.globals.get(\"newPaymentTemplateID\"));\r",
											"    pm.globals.unset(\"newPaymentTemplateID\");\r",
											"}\r",
											"else {\r",
											"    console.log(\"Failed to delete payment template with ID: \" + pm.globals.get(\"newPaymentTemplateID\"));\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/banking-api/payment/payments/{{tenant}}/v2/payment/template/{{newPaymentTemplateID}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"banking-api",
										"payment",
										"payments",
										"{{tenant}}",
										"v2",
										"payment",
										"template",
										"{{newPaymentTemplateID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Payments: Bulk operations",
					"item": [
						{
							"name": "createPaymentBulk",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e8465d3-a973-4345-b784-3588367cc0d6",
										"exec": [
											"var notExists = typeof undefined;\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment is created in bulk and assertions are passed\", function () {\r",
											"    \r",
											"    //reportId property is in response\r",
											"    let responseBodyReportId = JSON.parse(responseBody).reportId;\r",
											"    //State is correct\r",
											"    let responseBodyState = JSON.parse(responseBody).state;\r",
											"    //href property is in response\r",
											"    let responseBodyHref = JSON.parse(responseBody)._links.statusReport.href;   \r",
											"\r",
											"    pm.test(\"State is correct\", () => {\r",
											"      pm.expect(responseBodyState).to.eql(\"IN_PROCESS\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"'reportId' property is in response\", () => {\r",
											"      pm.expect(typeof responseBodyReportId !== notExists).to.eql(true);\r",
											"    });\r",
											"\r",
											"    pm.test(\"'href' property is in response\", () => {\r",
											"      pm.expect(typeof responseBodyHref !== notExists).to.eql(true);\r",
											"    });\r",
											"    \r",
											"    // check if payment is created\r",
											"    if (pm.response.to.have.status(201)){\r",
											"        var responseData = JSON.parse(responseBody);\r",
											"        pm.globals.set(\"newPaymentBulkID\", responseData.reportId);\r",
											"        console.log(\"New ID for payment created in bulk: \" + pm.globals.get(\"newPaymentBulkID\"));\r",
											"    }\r",
											"    else {\r",
											"        console.log(\"Failed to create payment in bulk\");\r",
											"    }\r",
											"    \r",
											"    //Determine if assertion passed at whole\r",
											"    pm.response.to.have.status(201) \r",
											"    && pm.expect(typeof responseBodyReportId !== notExists).to.eql(true) \r",
											"    && pm.expect(responseBodyState).to.eql(\"IN_PROCESS\") \r",
											"    && pm.expect(typeof responseBodyHref !== notExists).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "54b67252-e386-431b-bac0-420821c9d3af",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"xmlData\": \"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPCEtLSAgQ1JFQUxPR0lYIEFHLCBtZnJpICYgbXBpbCBnZW5lcmljIHRlc3QgZmlsZSB0ZW1wbGF0ZSBmb3IgSVNPMjAwMjIgcGFpbi4wMDEgLS0+CjxEb2N1bWVudCB4bWxucz0iaHR0cDovL3d3dy5zaXgtaW50ZXJiYW5rLWNsZWFyaW5nLmNvbS9kZS9wYWluLjAwMS4wMDEuMDMuY2guMDIueHNkIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly93d3cuc2l4LWludGVyYmFuay1jbGVhcmluZy5jb20vZGUvcGFpbi4wMDEuMDAxLjAzLmNoLjAyLnhzZCAgcGFpbi4wMDEuMDAxLjAzLmNoLjAyLnhzZCI+Cgk8Q3N0bXJDZHRUcmZJbml0bj4KPCEtLSAKCQlBIGxldmVsCi0tPgkJCgkJPEdycEhkcj4KCQkJPE1zZ0lkPjIwMTkxMTIxMTA1MTQ4OTg0PC9Nc2dJZD4KCQkJPENyZUR0VG0+MjAxOS0xMS0yMVQwMDowMDowMTwvQ3JlRHRUbT4KCQkJPE5iT2ZUeHM+MTwvTmJPZlR4cz4KCQkJPEN0cmxTdW0+MzcuNTg8L0N0cmxTdW0+CgkJCTxJbml0Z1B0eT4KCQkJCTxObT5GcmVkZHkgSGluejwvTm0+CgkJCTwvSW5pdGdQdHk+CgkJPC9HcnBIZHI+CjwhLS0gCQoJCUIgbGV2ZWwJCQotLT4KCQk8UG10SW5mPgoJCQk8UG10SW5mSWQ+QzE2MTA2Mjc8L1BtdEluZklkPgoJCQk8UG10TXRkPlRSRjwvUG10TXRkPgoJCQk8QnRjaEJvb2tnPnRydWU8L0J0Y2hCb29rZz4KCQkJPFJlcWRFeGN0bkR0PjIwMTktMTEtMjI8L1JlcWRFeGN0bkR0PgoJCQk8RGJ0cj4KCQkJCTxObT5GcmVkZHkgSGluejwvTm0+CgkJCTwvRGJ0cj4KCQkJPERidHJBY2N0PgoJCQkJPElkPgoJCQkJCTxJQkFOPkNIMjExMjMxMjAwMTI2MTUzMTUwMTwvSUJBTj4KCQkJCTwvSWQ+CgkJCTwvRGJ0ckFjY3Q+CgkJCTxEYnRyQWd0PgoJCQkJPEZpbkluc3RuSWQ+CgkJCQkJPENsclN5c01tYklkPgoJCQkJCQk8Q2xyU3lzSWQ+CgkJCQkJCQk8Q2Q+Q0hCQ0M8L0NkPgoJCQkJCQk8L0NsclN5c0lkPgoJCQkJCQk8TW1iSWQ+MTIzMTI8L01tYklkPgoJCQkJCTwvQ2xyU3lzTW1iSWQ+CgkJCQk8L0Zpbkluc3RuSWQ+CgkJCTwvRGJ0ckFndD4KPCEtLQoJCUMgbGV2ZWwJCQkKLS0+CQkKCQkJPENkdFRyZlR4SW5mPgoJCQkJPFBtdElkPgoJCQkJCTxJbnN0cklkPkMxNjEwNjI3LUMtRE9NRVNUSUM8L0luc3RySWQ+CgkJCQkJPEVuZFRvRW5kSWQ+MjAxOTExMjExMDUxNDg5ODQwMDAwMDA8L0VuZFRvRW5kSWQ+CgkJCQk8L1BtdElkPgoJCQkJPEFtdD4KCQkJCQk8SW5zdGRBbXQgQ2N5PSJDSEYiPjM3LjU4PC9JbnN0ZEFtdD4KCQkJCTwvQW10PgoJCQkJPENkdHJBZ3Q+CgkJCQkJPEZpbkluc3RuSWQ+CgkJCQkJCTxDbHJTeXNNbWJJZD4KCQkJCQkJCTxDbHJTeXNJZD4KCQkJCQkJCQk8Q2Q+Q0hCQ0M8L0NkPgoJCQkJCQkJPC9DbHJTeXNJZD4KCQkJCQkJCTxNbWJJZD43NzQ8L01tYklkPgoJCQkJCQk8L0NsclN5c01tYklkPgoJCQkJCTwvRmluSW5zdG5JZD4KCQkJCTwvQ2R0ckFndD4KCQkJCTxDZHRyPgoJCQkJCTxObT5IT0NIQUxQSU5FUyBJTlNUSVRVVCBGVEFOPC9ObT4KCQkJCQk8UHN0bEFkcj4KCQkJCQkJPFN0cnRObT5XQUxEV0VHPC9TdHJ0Tm0+CgkJCQkJCTxCbGRnTmI+MTwvQmxkZ05iPgoJCQkJCQk8UHN0Q2Q+NzU1MTwvUHN0Q2Q+CgkJCQkJCTxUd25ObT5GVEFOPC9Ud25ObT4KCQkJCQkJPEN0cnk+Q0g8L0N0cnk+CgkJCQkJPC9Qc3RsQWRyPgoJCQkJPC9DZHRyPgoJCQkJPENkdHJBY2N0PgoJCQkJCTxJZD4KCQkJCQkJPElCQU4+Q0gxNjAwNzc0MDEyMzEyMzQ1Njc4PC9JQkFOPgoJCQkJCTwvSWQ+CgkJCQk8L0NkdHJBY2N0PgoJCQkJPFJtdEluZj4KCQkJCQk8VXN0cmQ+S2F1ZiBTa2lhdXNyw7xzdHVuZzwvVXN0cmQ+CgkJCQk8L1JtdEluZj4KCQkJPC9DZHRUcmZUeEluZj4KCQk8L1BtdEluZj4KCTwvQ3N0bXJDZHRUcmZJbml0bj4KPC9Eb2N1bWVudD4K\"\n}"
								},
								"url": {
									"raw": "{{environment}}/banking-api/payments/pain/v1/credittransfer",
									"host": [
										"{{environment}}"
									],
									"path": [
										"banking-api",
										"payments",
										"pain",
										"v1",
										"credittransfer"
									]
								}
							},
							"response": []
						},
						{
							"name": "getPaymentBulk",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment is retrieved and assertions are passed\", function () {\r",
											"\r",
											"    pm.test(\"Response code is correct\", () => {\r",
											"      pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response header 'Content-Type' exists and has correct value\", () => {\r",
											"        pm.response.to.have.header('Content-Type', 'application/zip');\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response header 'Content-Disposition' exists and has correct value\", () => {\r",
											"        pm.response.to.have.header('Content-Disposition', 'attachment; filename=pain001.zip');\r",
											"    });\r",
											"\r",
											"    //Determine if assertion passed at whole\r",
											"    pm.response.to.have.status(200) \r",
											"    && pm.response.to.have.header('Content-Type', 'application/zip') \r",
											"    && pm.response.to.have.header('Content-Disposition', 'attachment; filename=pain001.zip');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/zip"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/banking-api/payments/pain/v1/credittransfer/{{newPaymentBulkID}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"banking-api",
										"payments",
										"pain",
										"v1",
										"credittransfer",
										"{{newPaymentBulkID}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "createPaymentAuthorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27036f64-04c0-4032-a002-c71b9e801183",
								"exec": [
									"    // check if authorization is created\r",
									"    if (pm.response.to.have.status(201)){\r",
									"        let responseData = JSON.parse(responseBody);\r",
									"        let href = responseData._links.scaRequired.href;\r",
									"        let n = href.lastIndexOf(\"PIS\");\r",
									"        let pis = href.substr(n, href.length - n);        \r",
									"        pm.globals.set(\"newPaymentAuthorizationPis\", pis);\r",
									"        console.log(\"New authorization PIS: \" + pm.globals.get(\"newPaymentAuthorizationPis\"));\r",
									"    }\r",
									"    else {\r",
									"        console.log(\"Failed to create authorization for payment with ID:\" + pm.globals.get(\"newPaymentID\"));\r",
									"        pm.globals.unset(\"newPaymentAuthorizationPis\");\r",
									"    }"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json; charset=UTF-8"
							},
							{
								"key": "Accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{environment}}/banking-api/payment/payments/{{tenant}}/v1/payment/{{newPaymentID}}/authorisations/",
							"host": [
								"{{environment}}"
							],
							"path": [
								"banking-api",
								"payment",
								"payments",
								"{{tenant}}",
								"v1",
								"payment",
								"{{newPaymentID}}",
								"authorisations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "authorizePayment",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "content-type",
								"value": "application/json; charset=UTF-8"
							},
							{
								"key": "Accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{environment}}/banking-api/payment/payments/12312/v1/payment/{{newPaymentID}}/authorisation/{{paymentAuthorizationPis}}",
							"host": [
								"{{environment}}"
							],
							"path": [
								"banking-api",
								"payment",
								"payments",
								"12312",
								"v1",
								"payment",
								"{{newPaymentID}}",
								"authorisation",
								"{{paymentAuthorizationPis}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "aa72ccf4-c0a6-4369-b208-84996ac9140e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d4535163-d01d-49e7-89db-d442371d0449",
						"type": "text/javascript",
						"exec": [
							"eval(globals.sessionNavigate)();",
							"pm.globals.unset(\"_tr_\" + request.name);"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tools",
			"item": [
				{
					"name": "GetAuthorizationCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f39a2b7-32ec-4e45-89e0-767e57fd9a60",
								"exec": [
									"//console.log(\">>> \" + getQueryParams(postman.getResponseHeader(\"Location\")).code);",
									"//console.log(\"<<< \" + eval(globals.getQueryParams)(postman.getResponseHeader(\"Location\")).code);",
									"",
									"",
									"let locationHeader = postman.getResponseHeader(\"Location\");",
									"//let code = getQueryParams(locationHeader).code;",
									"let code = eval(globals.getQueryParams)(locationHeader).code;",
									"",
									"console.log(\">>>> Old authorization code: \" + pm.environment.get(\"authorization_code\"));",
									"pm.environment.set(\"authorization_code\", code);",
									"console.log(\">>>> Generated authorization code: \" + pm.environment.get(\"authorization_code\"));",
									"",
									"pm.environment.set(\"testAdam\", \"test\");",
									"console.log(pm.environment.get(\"testAdam\"));",
									"",
									"/*",
									"function getQueryParams(uri) {",
									"  var vars = [];",
									"",
									"  // Get the start index of the query string",
									"  var qsi = uri.indexOf('?');",
									"  if (qsi == -1)",
									"    return vars;",
									"",
									"  // Get the query string",
									"  var qs = uri.slice(qsi + 1);",
									"",
									"  // Check if there is a subsection reference",
									"  sri = qs.indexOf('#');",
									"  if (sri >= 0)",
									"    qs = qs.slice(0, sri);",
									"",
									"  // Build the associative array",
									"  var hashes = qs.split('&');",
									"  for (var i = 0; i < hashes.length; i++) {",
									"    var sep = hashes[i].indexOf('=');",
									"    if (sep <= 0)",
									"      continue;",
									"    var key = decodeURIComponent(hashes[i].slice(0, sep));",
									"    var val = decodeURIComponent(hashes[i].slice(sep + 1));",
									"    vars[key] = val;",
									"  }",
									"  const jar = pm.cookies.jar();",
									"",
									"  jar.clear(pm.request.url, function (error) {",
									"  // error - <Error>",
									"  });",
									"",
									"  return vars;",
									"  ",
									"}",
									"*/",
									"",
									"//setTimeout(function(){}, 2000); ",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "788f1748-1ad3-4c79-99ea-b6c931411c1b",
								"exec": [
									"const contractNum = pm.environment.get(\"contract\"); //'1248081501';\r",
									"//const contractNum = '1000041509';\r",
									"//const contractNum = '1259731501';\r",
									"//const contractNum = '1000041501';\r",
									"//const contractNum = '1248221501';\r",
									"//const contractNum = '1268411501'; // MDB-MASTER-TEST\r",
									"//const contractNum = '1273221501'; // SOBA-R191-TEST\r",
									"console.log('Generating token for contract :' + contractNum);\r",
									"\r",
									"var stringInit = ':12312'; // MDB R191 TEST\r",
									"//var stringInit = ':8334'; // SOBA R191 TEST\r",
									"\r",
									"// Define the string\r",
									"//var stringPrefix = 'test.user@crealogix.com:12312:Wh2V3uPfJvtedUnZ5OoY0VnhaBVVlL5aB4AyXyzl1000167712:en:';\r",
									"//'1248081501:12312:Wh2V3uPfJvtedUnZ5OoY0VnhaBVVlL5aB4AyXyzl1000167712:en:';\r",
									"//var stringPrefix = contractNum +':12312:Wh2V3uPfJvtedUnZ5OoY0VnhaBVVlL5aB4AyXyzl1000167712:en:';\r",
									"\r",
									"var stringPrefix = contractNum + stringInit + ':Wh2V3uPfJvtedUnZ5OoY0VnhaBVVlL5aB4AyXyzl1000167712:en:';\r",
									"var stringSuffix = ':1234';\r",
									"\r",
									"// Encode the String\r",
									"var encodedString = btoa(stringPrefix + contractNum + stringSuffix);\r",
									"console.log(\"Generated X-CLX-Auth: \" + encodedString);\r",
									"pm.globals.set(\"X-CLX-AuthV2\",encodedString);\r",
									"console.log(\"Original X-CLX-Auth: \" + pm.globals.get(\"X-CLX-Auth\"));\r",
									"\r",
									"/*\r",
									"// Decode the String\r",
									"var decodedString = atob(encodedString);\r",
									"console.log(decodedString); // Outputs: \"Hello World!\"\r",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "CLX_LEGACY",
								"value": "true",
								"type": "text"
							},
							{
								"key": "X-CLX-Auth",
								"value": "{{X-CLX-AuthV2}}",
								"type": "text"
							},
							{
								"key": "X-CLX-Auth",
								"value": "{{X-CLX-Auth}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{ASO}}/{{tenantId}}/oauth/authorize?response_type=code&client_id=postman&redirect_uri=https://www.getpostman.com/oauth2/callback&state=&scope=https://api.crealogix.com/payments/payment.read https://api.crealogix.com/payments/payment.write",
							"host": [
								"{{ASO}}"
							],
							"path": [
								"{{tenantId}}",
								"oauth",
								"authorize"
							],
							"query": [
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "client_id",
									"value": "postman"
								},
								{
									"key": "redirect_uri",
									"value": "https://www.getpostman.com/oauth2/callback"
								},
								{
									"key": "state",
									"value": ""
								},
								{
									"key": "scope",
									"value": "https://api.crealogix.com/payments/payment.read https://api.crealogix.com/payments/payment.write",
									"description": "If scope is empty resource collects all available client scopes"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAccessToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9d12e97-96ac-481a-9c03-6d11da90d5e5",
								"exec": [
									"if (responseBody) {\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									"    if (jsonData) {\r",
									"        postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token);\r",
									"    }\r",
									"}\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);\r",
									"//postman.setEnvironmentVariable(\"token\", jsonData.access_token);\r",
									"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token);\r",
									"\r",
									"\r",
									"const jar = pm.cookies.jar();\r",
									"\r",
									"jar.clear(pm.request.url, function (error) {\r",
									"  // error - <Error>\r",
									"});\r",
									"\r",
									"pm.environment.unset(\"authorization_code\");\r",
									"// Session navigate from PrS using eval()\r",
									"//eval(globals.sessionNavigate)();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "86397e3d-1c3c-4fc7-9e47-32bb55289434",
								"exec": [
									"//let code = pm.iterationData.get(\"authorization_code\");",
									"//console.log(\">>>> Retrieving authorization code: \" + code);",
									"//pm.environment.set(\"authorization_code\", pm.iterationData.get(\"authorization_code\"));",
									"//let code = JSON.parse(pm.environment.get(\"authorization_code\"));",
									"//pm.environment.set(\"authorization_code\",code);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "CLX_LEGACY",
								"type": "text",
								"value": "true"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic cG9zdG1hbjpzZWNyZXQ="
							}
						],
						"url": {
							"raw": "{{ASO}}/{{tenantId}}/oauth/token?grant_type=authorization_code&redirect_uri=https://www.getpostman.com/oauth2/callback&code={{authorization_code}}",
							"host": [
								"{{ASO}}"
							],
							"path": [
								"{{tenantId}}",
								"oauth",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "authorization_code"
								},
								{
									"key": "redirect_uri",
									"value": "https://www.getpostman.com/oauth2/callback"
								},
								{
									"key": "code",
									"value": "{{authorization_code}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getAuthTestToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a273110-311c-4228-915e-cd6995d15219",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
									"    pm.response.to.not.be.error;",
									"    //pm.response.to.be.withBody;",
									"    pm.environment.set(\"access_token\", pm.response.text());",
									"});",
									"",
									"",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6ee2d0e8-1a92-4a19-80b1-45d1262d6230",
								"exec": [
									"console.log(\"Test Token url is: \" + pm.environment.get(\"env_security_testToken\"));",
									"console.log(\"Contract is: \" + pm.environment.get(\"userId_security\"));",
									"",
									"// Set up pre-conditions with Chai Assertion library. https://www.chaijs.com/api/bdd/",
									"pm.expect(pm.environment.get(\"env_securemail\")).to.be.a('string', \"The env_securemail is not defined\");",
									"pm.expect(pm.environment.get(\"env_security_testToken\")).to.be.a('string', \"The testTokenUrl is not defined\");",
									"pm.expect(pm.environment.get(\"tenantId_security\")).to.be.a('string', \"The tenantId is not defined\");",
									"pm.expect(pm.environment.get(\"tenantName_security\")).to.be.a('string', \"The tenantName is not defined\");",
									"pm.expect(pm.environment.get(\"userName_security\")).to.be.a('string', \"The userName is not defined\");",
									"pm.expect(pm.environment.get(\"contractNo_security\")).to.be.a('string', \"The contractNo is not defined\");",
									"pm.expect(pm.environment.get(\"bcNo_security\")).to.be.a('string', \"The bcNo is not defined\");",
									"pm.expect(pm.environment.get(\"userId_security\")).to.be.a('string', \"The userId is not defined\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"tenant_id\": {{tenantId_security}},\r\n  \"acsKey\": \"i6PiNObtdp2rCNW7mlV51BDSY4zAliSvBCyVsuML1000203567\",\r\n  \"tenant_name\": \"{{tenantName_security}}\",\r\n  \"user_name\": \"{{userId_security}}\",\r\n  \"contractNo\": \"{{contractNo_security}}\",\r\n  \"languageCode\": \"en\",\r\n  \"bcNo\": \"{{bcNo_security}}\",\r\n  \"authorities\": [],\r\n  \"client_id\": \"postman\",\r\n  \"user_id\": \"{{userId_security}}\",\r\n  \"scope\": [\r\n    \"https://api.crealogix.com/dban\",\r\n    \"read\",\r\n    \"https://api.crealogix.com/contracts/contract.advisor.readonly\",\r\n    \"https://api.crealogix.com/assets/account.balance.readonly\",\r\n    \"https://api.crealogix.com/contracts/contract.metadata.readonly\",\r\n    \"https://api.crealogix.com/contracts/contract.person.readonly\",\r\n    \"https://api.crealogix.com/payments/payment.initiate\",\r\n    \"https://api.crealogix.com/assets/account.transaction.readonly\",\r\n    \"https://api.crealogix.com/assets/account.permission.readonly\",\r\n    \"write\",\r\n    \"https://api.crealogix.com/assets/account.metadata.readonly\",\r\n    \"https://api.crealogix.com/messages/securemail.write\",\r\n    \"https://api.crealogix.com/messages/securemail.read\",\r\n    \"https://api.crealogix.com/messages/document.category.read\",\r\n    \"https://api.crealogix.com/messages/document.category.write\",\r\n    \"https://api.crealogix.com/messages/document.write\",\r\n    \"https://api.crealogix.com/messages/document.read\",    \r\n    \"https://api.crealogix.com/payments/payment.read\",\r\n    \"https://api.crealogix.com/payments/payment.write\",\r\n    \"https://api.crealogix.com/brokerage/security.readonly\",\r\n    \"https://api.crealogix.com/brokerage/tradingplace.readonly\",\r\n    \"https://api.crealogix.com/brokerage/depository.readonly\",\r\n    \"https://api.crealogix.com/brokerage/order.readonly\",\r\n\t\"https://api.crealogix.com/brokerage/order.write\"\r\n  ],\r\n  \"loginName\": \"{{userId_security}}\",\r\n  \"exp\": 32479694642,\r\n  \"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\r\n  \"iat\": 1553855569\r\n}"
						},
						"url": {
							"raw": "{{env_security_testToken}}",
							"host": [
								"{{env_security_testToken}}"
							]
						},
						"description": "Retrieve the test token"
					},
					"response": []
				},
				{
					"name": "Clean TestRail Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5d00dc8-f552-48c0-9a1c-2510df583464",
								"exec": [
									"// Prepare list of TestRail tests for 'Clean TestRail Run' request",
									"//var execTests = pm.environment.get(\"testRailTestsInRun\");",
									"var execTests = data.executedTests;",
									"console.log(\"TestRail, tests executed in last run: \" + execTests);",
									"execTests = execTests.replace(/C/g, \"\");",
									"//console.log(\"TestRail, first cleanup: \" + execTests);",
									"execTests = execTests.replace(/ /g, \", \");",
									"//console.log(\"TestRail, second cleanup: \" + execTests);",
									"execTests = execTests.replace(/,,/g, \",\");",
									"pm.environment.set(\"testRailTestsInRun\", execTests); ",
									"",
									"var array = JSON.parse(\"[\" + execTests + \"]\"); //convert string to array",
									"for(let i = 0; i < 10; i++){",
									"    let runId = JSON.parse(responseBody)[i].id;",
									"    let runName = JSON.parse(responseBody)[i].name;",
									"    let runSuiteId = JSON.parse(responseBody)[i].suite_id;",
									"    if (runName === \"Postman API Tests\") { //determine proper run",
									"        //console.log(runId);   ",
									"        console.log(\"TestRail run '\" + runId + \"' updating for tests: \" + execTests);",
									"        pm.sendRequest({",
									"            url: \"https://testrail.ebs.crealogix.net/index.php?/api/v2/update_run/\" + runId,",
									"            method: \"POST\",",
									"            header: {",
									"                \"Authorization\": \"Basic bWlsYW4ua2FyYWRlZ2xpY0BjcmVhbG9naXguY29tOlNTQ25hcG9saTEyMzQ1Njc4OQ==\",",
									"                \"Content-Type\": \"application/json\"",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ include_all: false, case_ids: array })",
									"        \t}",
									"        });",
									"        break;",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "22f2990b-adb1-4668-a6e9-92884e953577",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "SSCnapoli123456789",
									"type": "string"
								},
								{
									"key": "username",
									"value": "milan.karadeglic@crealogix.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json; charset=UTF-8"
							},
							{
								"key": "accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://testrail.ebs.crealogix.net/index.php?/api/v2/get_runs/8=",
							"protocol": "https",
							"host": [
								"testrail",
								"ebs",
								"crealogix",
								"net"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "/api/v2/get_runs/8",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SWIFT hardcoded",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
								"exec": [
									"// Execute standard tests from PrS using eval()\r",
									"eval(globals.commonTests)();\r",
									"\r",
									"//pm.test(pm.globals.get(\"testRailTestCases\") + \" Payment is created and assertions are passed\", function () {\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment is created and assertions are passed\", function () {\r",
									"\r",
									"    //Instructed amount is correct\r",
									"    let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
									"    let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
									"    //Execution date is correct\r",
									"    let requestBodyExecutionDate = JSON.parse(request.data).paymentInformation.requestedExecutionDate;\r",
									"    let responseBodyExecutionDate = JSON.parse(responseBody).paymentInformation.requestedExecutionDate;    \r",
									"    //State is correct\r",
									"    let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
									"    //Creditor agent is correct\r",
									"    let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent;\r",
									"    let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent;\r",
									"    //Debtor address is correct\r",
									"    let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
									"    let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
									"    //Debtor account is correct\r",
									"    let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
									"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo;   \r",
									"    //Creditor account is correct\r",
									"    let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
									"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;   \r",
									"    //Charge bearer is correct    \r",
									"    let jsonDataResponseChargeBearer = pm.response.json().chargeBearer;\r",
									"    \r",
									"    pm.test(\"Instructed amount is correct\", () => {\r",
									"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Execution date is correct\", () => {\r",
									"      pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"State is correct\", () => {\r",
									"      pm.expect(jsonDataResponsePaymentState).to.eql(\"ENTERED\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Creditor agent is correct\", () => {\r",
									"      pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Debtor address is correct\", () => {\r",
									"      pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName);\r",
									"      pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
									"      pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Debtor account is correct\", () => {\r",
									"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Creditor account is correct\", () => {\r",
									"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Charge bearer is correct\", () => {\r",
									"      pm.expect(jsonDataResponseChargeBearer).to.eql(\"SHAR\");\r",
									"    });\r",
									"    \r",
									"    // check if payment is created\r",
									"    if (pm.response.to.have.status(201)){\r",
									"        var responseData = JSON.parse(responseBody);\r",
									"        pm.globals.set(\"newPaymentSwiftID\", responseData.paymentId);\r",
									"        console.log(\"New payment ID: \" + pm.globals.get(\"newPaymentSwiftID\"));\r",
									"    }\r",
									"    else {\r",
									"        console.log(\"Failed to create payment with ID:\" + pm.globals.get(\"newPaymentSwiftID\"));\r",
									"        pm.globals.unset(\"newPaymentSwiftID\");\r",
									"    }\r",
									"    \r",
									"    //Determine if assertion passed at whole\r",
									"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
									"    && pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate) \r",
									"    && pm.expect(jsonDataResponsePaymentState).to.eql(\"ENTERED\") \r",
									"    && pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent) \r",
									"    && pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.streetName) \r",
									"    && pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode) \r",
									"    && pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName) \r",
									"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
									"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
									"    && pm.expect(jsonDataResponseChargeBearer).to.eql(\"SHAR\");\r",
									"});\r",
									"\r",
									"// Session navigate from PrS using eval()\r",
									"eval(globals.sessionNavigate)();\r",
									"\r",
									"// Reset reference to TR test cases\r",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"paymentInformation\": {\r\n    \"endToEndId\": \"consequuntur-maiores-assumenda\",\r\n    \"instructedAmount\": {\r\n      \"currency\": {\r\n        \"code\": \"EUR\"\r\n      },\r\n      \"value\": 10.01\r\n    },\r\n\t\"requestedExecutionDate\":  {{PrS:nextWorkingDay}},\r\n    \"instructionPriority\": \"NORMAL\",\r\n    \"debtor\": {\r\n      \"name\": \"Freddy Hinz\",\r\n      \"address\": {\r\n        \"streetName\": \"Schachenallee 31\",\r\n        \"postalCode\": \"5004\",\r\n        \"townName\": \"Aarau\"\r\n      }\r\n    },\r\n\t\"debtorAccountNo\": \"CH6312312001248081501\",\r\n\t\"creditorAccountNo\": 12345678,\t\r\n\t\"creditor\": {\r\n      \"name\": \"Talon Ondricka\",\r\n      \"address\": {\r\n        \"buildingNm\": \"566\",\r\n        \"postalCode\": \"638\",\r\n        \"townName\": \"North Norvalside\",\r\n        \"country\": \"AI\"\r\n      }\r\n    },\r\n    \"creditorAgent\": {\r\n      \"name1\": \"Esmeralda\",\r\n      \"name2\": \"Grady\",\r\n      \"street\": \"60308 Adalberto Passage\",\r\n      \"city\": \"Port Shayleeburgh\",\r\n      \"country\": \"CH\"\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{environment}}/banking-api/payment/swift/{{tenant}}/v2/credittransfer",
							"host": [
								"{{environment}}"
							],
							"path": [
								"banking-api",
								"payment",
								"swift",
								"{{tenant}}",
								"v2",
								"credittransfer"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "cc52a1da-bedb-499b-9889-bd5c4a2f665c",
				"type": "text/javascript",
				"exec": [
					"//************************************************************************************************",
					"// variable initialization************************************************************************",
					"//************************************************************************************************",
					"var test = pm.environment.get(\"testRailTestsInRun\");",
					"if( !test) {",
					"    pm.environment.set(\"testRailTestsInRun\",\"\");",
					"}",
					"",
					"",
					"// Define test data, setup configuration per environment",
					"let pmEnv = pm.environment.get(\"envName\");",
					"//let pmEnv = pm.environment.name;",
					"let dataEnv = data.envName;",
					"if (dataEnv){",
					"    if (pmEnv !== dataEnv) {",
					"        throw new Error(\"Wrong environment selected, testing is terminated!\");",
					"    }",
					"}",
					"//************************************************************************************************",
					"// DEPRECATED !!!",
					"// set access token ******************************************************************************",
					"//************************************************************************************************",
					"//pm.environment.set(\"token\",data.accessToken);",
					"",
					"//************************************************************************************************",
					"// set parameters ********************************************************************************",
					"//************************************************************************************************",
					"/*",
					"var contractNumber = data.contractNumber;",
					"if (contractNumber){ ",
					"    pm.environment.set(\"contract\",JSON.parse(data.contractNumber));",
					"    console.log(\"dataFile/contractNumber: \" + contractNumber);",
					"}",
					"",
					"var paymentType = data.paymentType;",
					"if (paymentType){ ",
					"    pm.environment.set(\"paymentType\",data.paymentType);",
					"    console.log(\"dataFile/paymentType: \" + paymentType);",
					"}",
					"var beneficiaryAccount = data.beneficiaryAccount;",
					"if (beneficiaryAccount){ ",
					"    pm.environment.set(\"beneficiaryAccount\",data.beneficiaryAccount);",
					"    console.log(\"dataFile/beneficiaryAccount: \" + beneficiaryAccount);",
					"}",
					"var debtorAccountNo = data.debtorAccountNo;",
					"if (debtorAccountNo){ ",
					"    pm.environment.set(\"debtorAccountNo\",data.debtorAccountNo);",
					"    console.log(\"dataFile/debtorAccountNo: \" + debtorAccountNo);",
					"}",
					"var debtorAccountName = data.debtorAccountName;",
					"if (debtorAccountName){ ",
					"    pm.environment.set(\"debtorAccountName\",data.debtorAccountName);",
					"    console.log(\"dataFile/debtorAccountName: \" + debtorAccountName);",
					"}",
					"var debtorStreetName = data.debtorStreetName;",
					"if (debtorStreetName){ ",
					"    pm.environment.set(\"debtorStreetName\",data.debtorStreetName);",
					"    console.log(\"dataFile/debtorStreetName: \" + debtorStreetName);",
					"}",
					"var debtorPostalCode = data.debtorPostalCode;",
					"if (debtorPostalCode){ ",
					"    pm.environment.set(\"debtorPostalCode\",data.debtorPostalCode);",
					"    console.log(\"dataFile/debtorPostalCode: \" + debtorPostalCode);",
					"}",
					"var debtorTownName = data.debtorTownName;",
					"if (debtorTownName){ ",
					"    pm.environment.set(\"debtorTownName\",data.debtorTownName);",
					"    console.log(\"dataFile/debtorTownName: \" + debtorTownName);",
					"}",
					"var creditorAccountNo = data.creditorAccountNo;",
					"if (creditorAccountNo){ ",
					"    pm.environment.set(\"creditorAccountNo\",data.creditorAccountNo);",
					"    console.log(\"dataFile/creditorAccountNo: \" + creditorAccountNo);",
					"}",
					"var creditorAgentCountry = data.creditorAgentCountry;",
					"if (creditorAgentCountry){ ",
					"    pm.environment.set(\"creditorAgentCountry\",data.creditorAgentCountry);",
					"    console.log(\"dataFile/creditorAgentCountry: \" + creditorAgentCountry);",
					"}",
					"var currencyCode = data.currencyCode;",
					"if (currencyCode){ ",
					"    pm.environment.set(\"currencyCode\",data.currencyCode);",
					"    console.log(\"dataFile/currencyCode: \" + currencyCode);",
					"}",
					"var endToEndId = data.endToEndId;",
					"if (endToEndId){ ",
					"    pm.environment.set(\"endToEndId\",data.endToEndId);",
					"    console.log(\"dataFile/endToEndId: \" + endToEndId);",
					"}",
					"var postalAccountNo = data.postalAccountNo;",
					"if (postalAccountNo){ ",
					"    pm.environment.set(\"postalAccountNo\",data.postalAccountNo);",
					"    console.log(\"dataFile/postalAccountNo: \" + postalAccountNo);",
					"}*/",
					"",
					"//************************************************************************************************",
					"// connect to TestRail ***************************************************************************",
					"//************************************************************************************************",
					"pm.globals.set(\"TESTRAIL_DOMAIN\",\"testrail.ebs.crealogix.net\");",
					"pm.globals.set(\"TESTRAIL_USERNAME\",\"milan.karadeglic@crealogix.com\"); ",
					"pm.globals.set(\"TESTRAIL_APIKEY\",\"Q4MlDw1e70Kxh1g1YPq9-Dg0abDWer.pSWcVWcxO4\");",
					"pm.globals.set(\"TESTRAIL_PROJECTID\",8); ",
					"pm.globals.set(\"TESTRAIL_TITLE\",\"Postman API Tests\");",
					"",
					"//************************************************************************************************",
					"//global function to determine next day/next working day *****************************************",
					"//************************************************************************************************",
					"var moment = require('moment');",
					"let nextDay = moment().add(\"days\",1).format(\"YYYY-MM-DD\"); //next day in specified format",
					"let futureDay = moment().add(\"days\",30).format(\"YYYY-MM-DD\"); //next day in specified format",
					"switch (moment().add(\"days\",1).format(\"dddd\")){",
					"    case \"Sunday\":",
					"        var nextWorkingDay = moment().add(\"days\",2).format(\"YYYY-MM-DD\");",
					"        break;",
					"    case \"Saturday\":",
					"        var nextWorkingDay = moment().add(\"days\",3).format(\"YYYY-MM-DD\");",
					"        break;",
					"    default:",
					"        var nextWorkingDay = moment().add(\"days\",1).format(\"YYYY-MM-DD\");",
					"}",
					"switch (moment().add(\"days\",30).format(\"dddd\")){",
					"    case \"Sunday\":",
					"        var futureWorkingDay = moment().add(\"days\",31).format(\"YYYY-MM-DD\");",
					"        var futurePlusWorkingDay = moment().add(\"days\",38).format(\"YYYY-MM-DD\");",
					"        break;",
					"    case \"Saturday\":",
					"        var futureWorkingDay = moment().add(\"days\",32).format(\"YYYY-MM-DD\");",
					"        var futurePlusWorkingDay = moment().add(\"days\",39).format(\"YYYY-MM-DD\");",
					"        break;",
					"    default:",
					"        var futureWorkingDay = moment().add(\"days\",30).format(\"YYYY-MM-DD\");",
					"        var futurePlusWorkingDay = moment().add(\"days\",37).format(\"YYYY-MM-DD\");",
					"}",
					"",
					"pm.globals.set('PrS:nextDay', JSON.stringify(nextDay));",
					"pm.globals.set('PrS:nextWorkingDay', JSON.stringify(nextWorkingDay));",
					"pm.globals.set('PrS:futureWorkingDay', JSON.stringify(futureWorkingDay));",
					"pm.globals.set('PrS:futurePlusWorkingDay', JSON.stringify(futurePlusWorkingDay));",
					"",
					"/*",
					"// Define test data, setup configuration per environment",
					"var env = pm.environment.get(\"envName\");",
					"if (env === \"MDB-R191-TEST\") {",
					"//    var contractNumber = \"{{contractNumber}}\";",
					"//    var debtorAccountNo = \"{{debtorAccountNo}}\";",
					"//    var debtorAccountName = \"{{debtorAccountName}}\";",
					"//    var creditorAccountNo = \"{{creditorAccountNo}}\";",
					"    } else if (env === \"MDB-R191-LAT\") {",
					"} else {",
					"    throw new Error(\"Wrong environment selected, requests are skipped!\")",
					"}",
					"//pm.globals.set('PrS:contractNumber', JSON.stringify(contractNumber));",
					"//pm.globals.set('PrS:debtorAccountNo', JSON.stringify(debtorAccountNo));",
					"//pm.globals.set('PrS:debtorAccountName', JSON.stringify(debtorAccountName));",
					"//pm.globals.set('PrS:creditorAccountNo', JSON.stringify(creditorAccountNo));",
					"*/",
					"",
					"// Save the object as a variable.",
					"// JSON.stringify will serialize the object so that Postman can save it",
					"",
					"//pm.globals.set('PrS:tags', JSON.stringify(tags));",
					"//pm.environment.set(\"testGroup\",\"Patient Zero\") //set environment variable if/when needed",
					"",
					"                //pm.response.to.be.ok;         - Status code must be 200",
					"                //pm.response.to.be.error       - Checks 4XX or 5XX",
					"                //pm.response.to.be.serverError - Checks 5XX",
					"                //pm.response.to.be.clientError - Checks 4XX status code",
					"",
					"// Save common tests in a global variable",
					"postman.setGlobalVariable(\"commonTests\", () => {",
					"    pm.test(\"Response must be valid with/with out a body and with proper status code\", function () {",
					"        let newmanRun = pm.globals.get(\"newmanRun\");",
					"        if (newmanRun != 1) {",
					"            if ([\"GET\",\"POST\",\"PUT\"].indexOf(request.method) > -1) {",
					"                pm.response.to.not.be.error;",
					"                pm.response.to.be.withBody;",
					"                pm.response.to.be.json;",
					"                pm.response.to.have.jsonBody();",
					"                pm.response.to.not.have.jsonBody('error');",
					"                pm.response.to.have.header('Content-Type', 'application/json;charset=UTF-8');",
					"            } else {",
					"                pm.response.to.not.be.withBody;",
					"            }",
					"            switch(request.method){",
					"                case \"POST\":",
					"                    pm.response.to.have.status(201);",
					"                    break;",
					"                case \"PUT\":",
					"                    pm.response.to.have.status(200);",
					"                    break;",
					"                case \"GET\":",
					"                    pm.response.to.have.status(200);",
					"                    break;",
					"                case \"DELETE\":",
					"                    pm.response.to.have.status(200);",
					"                    break;",
					"            }        ",
					"        }",
					"    });",
					"    //pm.test(\"Response time is below 1000ms\", function () {",
					"    //    pm.expect(pm.response.responseTime).to.be.below(1000);",
					"    //});",
					"});",
					"",
					"postman.setGlobalVariable(\"assertValidCreditorAgent\", () => {",
					"    pm.expect(address).to.be.an('object').with.keys('name1', 'name2', 'street', 'city', 'country', 'bic');",
					"    pm.expect(address.name1).to.be.a('string').and.not.empty;",
					"    pm.expect(address.name2).to.be.a('string').and.not.empty;",
					"    pm.expect(address.street).to.be.a('string').and.not.empty;",
					"    pm.expect(address.city).to.be.a('string').and.not.empty;",
					"    pm.expect(address.country).to.be.a('string').with.lengthOf(2).and.match(/[A-Z]+/);",
					"    pm.expect(address.bic).to.be.a('string').and.not.empty;",
					"});",
					"",
					"postman.setGlobalVariable(\"sessionInit\", (testSession, sessionName) => {",
					"    //session init section",
					"    console.log(request.name + \", initialization: \" + testSession + \", global var: \" + sessionName);",
					"    console.log(request.name + \", executing: \" + testSession[0]);",
					"    ",
					"    // Select first test from session to be executed",
					"    postman.setNextRequest(testSession[0]);",
					"    testSession.shift();",
					"    if (testSession.length === 0) {",
					"        console.log(request.name + \", test session is empty, unset \" + sessionName);",
					"        pm.globals.unset(sessionName);",
					"        console.log(request.name + \", terminate tests execution list\");",
					"    } else {",
					"        pm.globals.set(sessionName, testSession);",
					"        console.log(request.name + \" for \" + sessionName + \", updated list of tests to be executed: \" + testSession);",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"sessionNavigate\", () => {",
					"    console.log(request.name + \", entering ...\");",
					"    if (pm.globals.get(\"requestsToRun\") === undefined){",
					"        console.log(request.name + \", requestsToRun is undefined\");",
					"        pm.globals.set(\"testRailTestCases\",\"\");",
					"        console.log(request.name + \", reset global var: testRailTestCases\");    ",
					"        if (pm.globals.get(\"testSession\") === undefined){",
					"            console.log(request.name + \", testSession is undefined\");",
					"            //here >> export list of tests executed",
					"            var tests = pm.environment.get(\"testRailTestsInRun\");",
					"            tests = tests.replace(/C/g, \"\");",
					"            tests = tests.replace(/ /g, \", \");",
					"            tests = tests.replace(/,,/g, \",\");",
					"            console.log(\"TestRail tests executed executed in this run: \" + tests);",
					"            console.log(\"The end\");",
					"            postman.setNextRequest(null);",
					"        } else {",
					"        var testSession = pm.globals.get(\"testSession\");",
					"        console.log(request.name + \", checking what to run: \" + testSession[0]);",
					"        postman.setNextRequest(testSession[0]); ",
					"        testSession.shift();",
					"        if (testSession.length === 0) {",
					"            pm.globals.unset(\"testSession\");",
					"            console.log(request.name + \", terminate execution list\");",
					"        } else {",
					"            pm.globals.set(\"testSession\", testSession);",
					"            console.log(request.name + \", updated list of tests to be executed: \" + testSession);",
					"        }}",
					"    } else {",
					"    var requestsToRun = pm.globals.get(\"requestsToRun\");",
					"    console.log(request.name + \", checking what to run: \" + requestsToRun[0]);",
					"    postman.setNextRequest(requestsToRun[0]); ",
					"    requestsToRun.shift();",
					"    if (requestsToRun.length === 0) {",
					"        pm.globals.unset(\"requestsToRun\");",
					"        console.log(request.name + \", terminate requests execution list\");",
					"    } else {",
					"        pm.globals.set(\"requestsToRun\", requestsToRun);",
					"        console.log(request.name + \", updated list of requests to be executed: \" + requestsToRun);",
					"    }}",
					"});",
					"",
					"postman.setGlobalVariable(\"cleanup\", () => {",
					"    const clean = [\"requestsToRun\", \"testSession\"];",
					"    for(let i = 0; i < clean.length; ++i){",
					"        pm.globals.unset(clean[i]);",
					"    }",
					"    //create single secure mail by default ",
					"    pm.environment.set(\"mailsToCreate\", 1);    ",
					"});",
					"",
					"postman.setGlobalVariable(\"testsExecuted\", (listOfExecutedTests) => {",
					"    let tests =  pm.environment.get(\"testRailTestsInRun\");",
					"    //console.log(\"TestRail tests stored in 'testRailTestsInRun': \" + tests);",
					"    if (tests.length > 0) {",
					"        tests = tests + \" \"",
					"    }",
					"    tests = tests + listOfExecutedTests;",
					"    //console.log(\"TestRail tests to be stored to 'testRailTestsInRun': \" + tests);",
					"    pm.environment.set(\"testRailTestsInRun\",tests);",
					"    //console.log(\"TestRail tests executed so far: \" + tests);",
					"});",
					"",
					"postman.setGlobalVariable(\"extractTestCaseIDFromRequestName\", () => {",
					"    let n = request.name.lastIndexOf(\"(\");",
					"    return request.name.substr(n + 1, request.name.length - n - 2);",
					"});",
					"",
					"postman.setGlobalVariable(\"schemaValidator\", (schema, jsonData) => {",
					"    //old, deprecated schema validationimplementation",
					"    //pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;",
					"    ",
					"    //new schema validation implementation",
					"    ",
					"    var schemaValidationPassed = true;",
					"    var serviceSchema = pm.environment.get(schema);",
					"    //var jsonData = JSON.parse(pm.responseBody);",
					"",
					"    var validationResult = tv4.validateMultiple(jsonData, serviceSchema, true, true);",
					"    for(var i =0; i<validationResult.errors.length;i++){",
					"        console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  ",
					"        //Skipping all \"Invalid type\" errors as they are expected with current service implementations",
					"        schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);",
					"        //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);",
					"    }    ",
					"    return schemaValidationPassed;",
					"}); ",
					"",
					"postman.setGlobalVariable(\"isTest\", () => {",
					"    let reqPurpose = pm.globals.get(\"_tr_\" + request.name);",
					"    //console.log(request.name + \" has purpose: \" + reqPurpose);",
					"    if ([\"[cleanUp]\",\"[preCondition]\",\"[postCondition]\"].indexOf(reqPurpose) > -1) {",
					"        //console.log(\"Conclusion: NOT a test\");",
					"        return false;",
					"    } else {",
					"        //console.log(\"Conclusion: IS a test\");",
					"        return true;",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"getQueryParams\", (uri) => {",
					"  var vars = [];",
					"",
					"  // Get the start index of the query string",
					"  var qsi = uri.indexOf('?');",
					"  if (qsi == -1)",
					"    return vars;",
					"",
					"  // Get the query string",
					"  var qs = uri.slice(qsi + 1);",
					"",
					"  // Check if there is a subsection reference",
					"  sri = qs.indexOf('#');",
					"  if (sri >= 0)",
					"    qs = qs.slice(0, sri);",
					"",
					"  // Build the associative array",
					"  var hashes = qs.split('&');",
					"  for (var i = 0; i < hashes.length; i++) {",
					"    var sep = hashes[i].indexOf('=');",
					"    if (sep <= 0)",
					"      continue;",
					"    var key = decodeURIComponent(hashes[i].slice(0, sep));",
					"    var val = decodeURIComponent(hashes[i].slice(sep + 1));",
					"    vars[key] = val;",
					"  }",
					"  const jar = pm.cookies.jar();",
					"",
					"  jar.clear(pm.request.url, function (error) {",
					"  // error - <Error>",
					"  });",
					"",
					"  return vars;",
					"  ",
					"});",
					"",
					"postman.setGlobalVariable(\"randomizeVariables\", () => {",
					"    let newmanRun = pm.globals.get(\"newmanRun\");",
					"    if (newmanRun != 1) {",
					"        console.log(\"Randomizing variables ...\");",
					"        pm.environment.set(\"endToEndId\",JSON.stringify(pm.variables.replaceIn(\"{{$randomLoremSlug}}\")));",
					"        pm.environment.set(\"unstructured\",JSON.stringify(pm.variables.replaceIn(\"{{$guid}}\")));",
					"        pm.environment.set(\"instructionIdentification\",JSON.stringify(pm.variables.replaceIn(\"{{$randomBitcoin}}\")));",
					"        pm.environment.set(\"name\",JSON.stringify(pm.variables.replaceIn(\"{{$randomFullName}}\")));",
					"        pm.environment.set(\"adrLine1\",JSON.stringify(pm.variables.replaceIn(\"{{$randomStreetName}}\")));",
					"        pm.environment.set(\"adrLine2\",JSON.stringify(pm.variables.replaceIn(\"{{$randomStreetAddress}}\")));",
					"        pm.environment.set(\"streetName\",JSON.stringify(pm.variables.replaceIn(\"{{$randomStreetName}}\")));",
					"        pm.environment.set(\"townName\",JSON.stringify(pm.variables.replaceIn(\"{{$randomCity}}\")));",
					"        pm.environment.set(\"country\",JSON.stringify(pm.variables.replaceIn(\"{{$randomCountryCode}}\")));",
					"        pm.environment.set(\"buildingNm\",pm.variables.replaceIn('{{$randomInt}}'));",
					"        pm.environment.set(\"postalCode\",pm.variables.replaceIn('{{$randomInt}}'));",
					"        pm.environment.set(\"buildingNmStr\",JSON.stringify(pm.variables.replaceIn('{{$randomInt}}')));",
					"        pm.environment.set(\"postalCodeStr\",JSON.stringify(pm.variables.replaceIn('{{$randomInt}}')));",
					"        console.log(\"... randomize is finished\");",
					"    }",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7e7d41ba-50b0-48b0-bc52-53d4e572706a",
				"type": "text/javascript",
				"exec": [
					"// check if test is executed",
					"pm.test(\"'\" + request.name +\"' is initiated\", function () {",
					"    //pm.response.to.have.status(200);",
					"    //pm.response.to.be.success ",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"id": "a7cfa34e-74ac-4f61-b4d0-5669b75b17fb",
			"key": "EPIC",
			"value": "PRODUCT-6323",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}