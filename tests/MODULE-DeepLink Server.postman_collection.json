{
	"info": {
		"_postman_id": "dbd48958-067b-4bcb-8699-3f7af2382155",
		"name": "MODULE: DeepLInk Server",
		"description": "Integration of payment endpoints for SEPA and SWIFT payments against DBAN\r\n\r\nBased on clarification call from 24th of August 2018 efforts have been estimated to 140PD of development\r\n\r\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Tests",
			"item": [
				{
					"name": "_Test session",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//reset global variables for controling execution flow",
									"eval(globals.cleanup)();",
									"//clear list of executed TestRail tests",
									"pm.environment.set(\"testRailTestsInRun\",\"\");   ",
									"",
									"//specify list of tests to be executed in exact order",
									"//const testsScope = \"Full\"; [Full|Core|Full+TestRail]",
									"let testsScope = data.testsScope;",
									"//console.log(testsScope); ",
									"",
									"switch(testsScope) {",
									"    case \"Full\":",
									"        var testSession = [",
									"            \"Create new whitelist domain entry (T26165735)\"",
									"            ]; ",
									"        break;",
									"    case \"Core\":",
									"        var testSession = [",
									"            \"_Generate access token\",",
									"            \"Create new whitelist domain entry (T26165735)\"",
									"            ]; ",
									"        break;",
									"    case \"TestRailClean\":        ",
									"        var testSession = [",
									"            \"_Test session close\"",
									"            ]; ",
									"        break;",
									"    default:",
									"        throw new Error(\"No tests selected for execution!\")",
									"}        ",
									"    ",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(testSession, \"testSession\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "_Generate access token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"var requestsToRun = [",
									"        \"GetAuthorizationCode\",",
									"        \"GetAccessToken\"",
									"    ]; ",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new whitelist domain entry (T26165735)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"registerDomain\",",
									"        \"getRegisteredDomains\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_registerDomain\",\"[preCondition]\");",
									"    pm.globals.set(\"_tr_getRegisteredDomains\",testRailTestCases);",
									"",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "_Test session close",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"var requestsToRun = ",
									"    [",
									"        \"Clean TestRail Run\"",
									"    ]; ",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Requests",
			"item": [
				{
					"name": "Other",
					"item": [
						{
							"name": "Get SWIFT payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5d00dc8-f552-48c0-9a1c-2510df583464",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment is retrieved and assertions are passed\", function () {\r",
											"\r",
											"    //Payment status is correct\r",
											"    let jsonDataPaymentState = pm.response.json().paymentState;\r",
											"    //Debtor is correct\r",
											"    let jsonDataDebtorName = pm.response.json().paymentInformation.debtor.name;\r",
											"    let jsonDataDebtorAccount = pm.response.json().paymentInformation.debtorAccountNo;\r",
											"    //Creditor agent is correct\r",
											"    let address = pm.response.json().paymentInformation.creditorAgent;\r",
											"\r",
											"    pm.test(\"Payment is retrieved\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Payment status is correct\", () => {\r",
											"      pm.expect(jsonDataPaymentState).to.eql(\"READY_FOR_EXECUTION\");\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Debtor is correct\", () => {\r",
											"      pm.expect(jsonDataDebtorName).to.eql(JSON.parse(data.debtorAccountName));\r",
											"      pm.expect(jsonDataDebtorAccount).to.eql(JSON.parse(data.debtorAccountNo));\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Creditor agent is correct\", () => {\r",
											"      eval(globals.assertValidCreditorAgent)(address);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Body matches string\", function () {\r",
											"      pm.expect(pm.response.text()).to.include(data.debtorAccountName);\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(jsonDataPaymentState).to.eql(\"READY_FOR_EXECUTION\")\r",
											"    && pm.expect(jsonDataDebtorName).to.eql(JSON.parse(data.debtorAccountName))\r",
											"    && pm.expect(jsonDataDebtorAccount).to.eql(JSON.parse(data.debtorAccountNo))\r",
											"    && eval(globals.assertValidCreditorAgent)(address)\r",
											"    && pm.expect(pm.response.text()).to.include(data.debtorAccountName);\r",
											"});\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22f2990b-adb1-4668-a6e9-92884e953577",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"disabled": true
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/banking-api/payment/swift/{{tenant}}/v2/credittransfer/{{newPaymentID}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"banking-api",
										"payment",
										"swift",
										"{{tenant}}",
										"v2",
										"credittransfer",
										"{{newPaymentID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update SWIFT payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96ee9651-4e6e-4a83-a257-55d56e136859",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment is updated and assertions are passed\", function () {\r",
											"\r",
											"    //Instructed amount is correct\r",
											"    let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
											"    let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
											"    //Execution date is correct    \r",
											"    let requestBodyExecutionDate = JSON.parse(request.data).paymentInformation.requestedExecutionDate;\r",
											"    let responseBodyExecutionDate = JSON.parse(responseBody).paymentInformation.requestedExecutionDate;    \r",
											"    //State is correct\r",
											"    let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
											"    //Creditor agent is correct    \r",
											"    let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent;\r",
											"    let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent;\r",
											"    //Debtor address is correct    \r",
											"    let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
											"    let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
											"    //Debtor account is correct    \r",
											"    let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
											"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo;   \r",
											"    //Creditor account is correct    \r",
											"    let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
											"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;   \r",
											"    //Charge bearer is correct    \r",
											"    let requestBodyChargeBearer = JSON.parse(request.data).chargeBearer;\r",
											"    let responseBodyChargeBearer = JSON.parse(responseBody).chargeBearer;       \r",
											"\r",
											"\r",
											"    pm.test(\"Payment is updated\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Instructed amount is correct\", () => {\r",
											"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Execution date is correct\", () => {\r",
											"      pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"State is correct\", () => {\r",
											"      pm.expect(jsonDataResponsePaymentState).to.eql(\"READY_FOR_EXECUTION\");\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Creditor agent is correct\", () => {\r",
											"      pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Debtor address is correct\", () => {\r",
											"      pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.adrLine1);\r",
											"      pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
											"      pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Debtor account is correct\", () => {\r",
											"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Creditor account is correct\", () => {\r",
											"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Charge bearer is correct\", () => {\r",
											"      pm.expect(responseBodyChargeBearer).to.eql(requestBodyChargeBearer);\r",
											"    });\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount)\r",
											"    && pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate)\r",
											"    && pm.expect(jsonDataResponsePaymentState).to.eql(\"READY_FOR_EXECUTION\")\r",
											"    && pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent)\r",
											"    && pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.adrLine1)\r",
											"    && pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode)\r",
											"    && pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName)\r",
											"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo)\r",
											"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo)\r",
											"    && pm.expect(responseBodyChargeBearer).to.eql(requestBodyChargeBearer);\r",
											"});\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed4149e4-3b82-4013-8999-2fa27812ab16",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"disabled": true
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"storeOnly\": false,\n\t\"locked\": false,       \n\t\"categoryPurposeCode\": \"{{$randomDepartment}}\",\n    \"paymentInformation\": {\n\t\t\"endToEndId\": {{endToEndId}},\n\t\t\"instructedAmount\": {\n           \"currency\": {\n           \"code\": \"CHF\"\n            },\n            \"value\": 45\n    \t},\n        \"remittanceInformation\": {\n            \"unstructured\": \"{{$guid}}\",\n            \"structured\":  \"{{$randomUUID}}\"\n        },\n        \"instructionIdentification\": \"{{$randomBitcoin}}\",\n    \t\"requestedExecutionDate\": {{PrS:nextWorkingDay}},\n        \"instructionPriority\": \"NORMAL\",\n        \"creditor\": {\n            \"name\": \"MDB-R191-Test\",\n            \"address\": {\n            \t\"adrLine1\": \"{{$randomStreetName}}\",\n            \t\"adrLine2\": \"{{$randomStreetAddress}}\",\n            \t\"buildingNm\": {{$randomInt}},\n            \t\"postalCode\": {{$randomInt}},\n            \t\"townName\": \"{{$randomCity}}\",\n            \t\"country\": \"{{$randomCountryCode}}\"\n        \t}\n        },\n\t\t\"creditorAccountNo\": {{creditorAccountNo}},\n        \"creditorAgent\": {\n    \t\t\"name1\": \"{{$randomFirstName}}\",\n    \t\t\"name2\": \"{{$randomLastName}}\",\n    \t\t\"street\": \"{{$randomStreetAddress}}\",\n    \t\t\"city\": \"{{$randomCity}}\",\n    \t\t\"country\": {{creditorAgentCountry}}\n    \t},\n        \"debtor\": {\n            \"name\": {{debtorAccountName}},\n            \"address\": {\n            \t\"adrLine1\": {{debtorAdrLine}},\n            \t\"postalCode\": {{debtorPostalCode}},\n            \t\"townName\": {{debtorTownName}}\n        \t}\n        },\n        \"debtorAccountNo\": {{debtorAccountNo}}\n    },\n      \"chargeBearer\": \"SHAR\"\n}"
								},
								"url": {
									"raw": "{{environment}}/banking-api/payment/swift/{{tenant}}/v2/credittransfer/{{newPaymentID}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"banking-api",
										"payment",
										"swift",
										"{{tenant}}",
										"v2",
										"credittransfer",
										"{{newPaymentID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete SWIFT payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b805315b-12ae-4f45-85f9-14230e6cb91e",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Payment is deleted and not exists anymore\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"// Log important stuff\r",
											"if (pm.response.to.have.status(204)){\r",
											"    console.log(\"Deleted payment ID:\" + pm.globals.get(\"newPaymentID\"));\r",
											"    pm.globals.unset(\"newPaymentID\");\r",
											"}\r",
											"else {\r",
											"    console.log(\"Failed to delete payment with ID:\" + pm.globals.get(\"newPaymentID\"));\r",
											"    pm.globals.set(\"newPaymentID\", \"ERROR!\");\r",
											"}\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8b0efd50-c002-40d7-bf02-ad82c22ce7a7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"disabled": true
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment}}/banking-api/payment/swift/{{tenant}}/v2/credittransfer/{{newPaymentID}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"banking-api",
										"payment",
										"swift",
										"{{tenant}}",
										"v2",
										"credittransfer",
										"{{newPaymentID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAuthorizationCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5042c46-0d70-4033-8620-c9fe5964059e",
										"exec": [
											"var locationHeader = postman.getResponseHeader(\"Location\");",
											"var code = getQueryParams(locationHeader)['code'];",
											"pm.environment.set(\"authorization_code\", code);",
											"",
											"function getQueryParams(uri) {",
											"  var vars = [];",
											"",
											"  // Get the start index of the query string",
											"  var qsi = uri.indexOf('?');",
											"  if (qsi == -1)",
											"    return vars;",
											"",
											"  // Get the query string",
											"  var qs = uri.slice(qsi + 1);",
											"",
											"  // Check if there is a subsection reference",
											"  sri = qs.indexOf('#');",
											"  if (sri >= 0)",
											"    qs = qs.slice(0, sri);",
											"",
											"  // Build the associative array",
											"  var hashes = qs.split('&');",
											"  for (var i = 0; i < hashes.length; i++) {",
											"    var sep = hashes[i].indexOf('=');",
											"    if (sep <= 0)",
											"      continue;",
											"    var key = decodeURIComponent(hashes[i].slice(0, sep));",
											"    var val = decodeURIComponent(hashes[i].slice(sep + 1));",
											"    vars[key] = val;",
											"  }",
											"  const jar = pm.cookies.jar();",
											"",
											"  jar.clear(pm.request.url, function (error) {",
											"  // error - <Error>",
											"  });",
											"",
											"  return vars;",
											"  ",
											"}",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e81ac4d1-7b10-4601-a91f-2c8e6983d079",
										"exec": [
											"const contractNum = pm.environment.get(\"contract\"); //'1248081501';\r",
											"console.log('Contract :'+contractNum);\r",
											"\r",
											"// Define the string\r",
											"//var stringPrefix = 'test.user@crealogix.com:12312:Wh2V3uPfJvtedUnZ5OoY0VnhaBVVlL5aB4AyXyzl1000167712:en:';\r",
											"//'1248081501:12312:Wh2V3uPfJvtedUnZ5OoY0VnhaBVVlL5aB4AyXyzl1000167712:en:';\r",
											"var stringPrefix = contractNum +':12312:Wh2V3uPfJvtedUnZ5OoY0VnhaBVVlL5aB4AyXyzl1000167712:en:';\r",
											"var stringSuffix = ':1234';\r",
											"\r",
											"// Encode the String\r",
											"var encodedString = btoa(stringPrefix + contractNum + stringSuffix);\r",
											"console.log(\"Generated X-CLX-Auth: \" + encodedString);\r",
											"pm.globals.set(\"X-CLX-AuthV2\",encodedString);\r",
											"console.log(\"Original X-CLX-Auth: \" + pm.globals.get(\"X-CLX-Auth\"));\r",
											"\r",
											"/*\r",
											"// Decode the String\r",
											"var decodedString = atob(encodedString);\r",
											"console.log(decodedString); // Outputs: \"Hello World!\"\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "CLX_LEGACY",
										"type": "text",
										"value": "true"
									},
									{
										"key": "X-CLX-Auth",
										"type": "text",
										"value": "{{X-CLX-AuthV2}}"
									},
									{
										"key": "X-CLX-Auth",
										"type": "text",
										"value": "{{X-CLX-Auth}}",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{ASO}}/{{tenantId}}/oauth/authorize?response_type=code&client_id=postman&redirect_uri=https://www.getpostman.com/oauth2/callback&state=&scope=",
									"host": [
										"{{ASO}}"
									],
									"path": [
										"{{tenantId}}",
										"oauth",
										"authorize"
									],
									"query": [
										{
											"key": "response_type",
											"value": "code"
										},
										{
											"key": "client_id",
											"value": "postman"
										},
										{
											"key": "redirect_uri",
											"value": "https://www.getpostman.com/oauth2/callback"
										},
										{
											"key": "state",
											"value": ""
										},
										{
											"key": "scope",
											"value": "",
											"description": "If scope is empty resource collects all available client scopes"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAccessToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9d12e97-96ac-481a-9c03-6d11da90d5e5",
										"exec": [
											"if (responseBody) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    if (jsonData) {\r",
											"        postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token);\r",
											"    }\r",
											"}\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);\r",
											"//postman.setEnvironmentVariable(\"token\", jsonData.access_token);\r",
											"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token);\r",
											"\r",
											"\r",
											"const jar = pm.cookies.jar();\r",
											"\r",
											"jar.clear(pm.request.url, function (error) {\r",
											"  // error - <Error>\r",
											"});\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "86397e3d-1c3c-4fc7-9e47-32bb55289434",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "CLX_LEGACY",
										"value": "true",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic cG9zdG1hbjpzZWNyZXQ=",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{ASO}}/{{tenantId}}/oauth/token?grant_type=authorization_code&redirect_uri=https://www.getpostman.com/oauth2/callback&code={{authorization_code}}",
									"host": [
										"{{ASO}}"
									],
									"path": [
										"{{tenantId}}",
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "authorization_code"
										},
										{
											"key": "redirect_uri",
											"value": "https://www.getpostman.com/oauth2/callback"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getAuthTestToken",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "871a062d-fd8b-4583-a09e-84e18b781faa",
										"exec": [
											"// This is only required if there are multiple \"getToken\" requests and some need to be skipped",
											"//postman.setNextRequest(\"getAllTopics (C41673954)\");",
											"",
											"console.log(\"Test Token url is: \" + pm.environment.get(\"env_security_testToken\"));",
											"",
											"// Set up pre-conditions with Chai Assertion library. https://www.chaijs.com/api/bdd/",
											"pm.expect(pm.environment.get(\"env_securemail\")).to.be.a('string', \"The env_securemail is not defined\");",
											"pm.expect(pm.environment.get(\"env_security_testToken\")).to.be.a('string', \"The testTokenUrl is not defined\");",
											"pm.expect(pm.environment.get(\"tenantId_security\")).to.be.a('string', \"The tenantId is not defined\");",
											"pm.expect(pm.environment.get(\"tenantName_security\")).to.be.a('string', \"The tenantName is not defined\");",
											"pm.expect(pm.environment.get(\"userName_security\")).to.be.a('string', \"The userName is not defined\");",
											"pm.expect(pm.environment.get(\"contractNo_security\")).to.be.a('string', \"The contractNo is not defined\");",
											"pm.expect(pm.environment.get(\"bcNo_security\")).to.be.a('string', \"The bcNo is not defined\");",
											"pm.expect(pm.environment.get(\"userId_security\")).to.be.a('string', \"The userId is not defined\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2c7c456c-2745-40e5-a4ff-aba74cc52590",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
											"    pm.response.to.not.be.error;",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"token\", pm.response.text());",
											"});",
											"",
											"",
											"// Session navigate from PrS using eval()",
											"eval(globals.sessionNavigate)();",
											"",
											"// Reset reference to TR test cases",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tenant_id\": {{tenantId_security}},\r\n  \"acsKey\": \"i6PiNObtdp2rCNW7mlV51BDSY4zAliSvBCyVsuML1000203567\",\r\n  \"tenant_name\": \"{{tenantName_security}}\",\r\n  \"user_name\": \"{{userId_security}}\",\r\n  \"contractNo\": \"{{contractNo_security}}\",\r\n  \"languageCode\": \"en\",\r\n  \"bcNo\": \"{{bcNo_security}}\",\r\n  \"authorities\": [],\r\n  \"client_id\": \"postman\",\r\n  \"user_id\": {{userId_security}},\r\n  \"scope\": [\r\n    \"https://api.crealogix.com/dban\",\r\n    \"read\",\r\n    \"https://api.crealogix.com/contracts/contract.advisor.readonly\",\r\n    \"https://api.crealogix.com/assets/account.balance.readonly\",\r\n    \"https://api.crealogix.com/contracts/contract.metadata.readonly\",\r\n    \"https://api.crealogix.com/contracts/contract.person.readonly\",\r\n    \"https://api.crealogix.com/payments/payment.initiate\",\r\n    \"https://api.crealogix.com/assets/account.transaction.readonly\",\r\n    \"https://api.crealogix.com/assets/account.permission.readonly\",\r\n    \"write\",\r\n    \"https://api.crealogix.com/assets/account.metadata.readonly\",\r\n    \"https://api.crealogix.com/messages/securemail.write\",\r\n    \"https://api.crealogix.com/messages/securemail.read\"\r\n  ],\r\n  \"loginName\": \"{{userId_security}}\",\r\n  \"exp\": 32479694642,\r\n  \"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\r\n  \"iat\": 1553855569\r\n}"
								},
								"url": {
									"raw": "{{env_security_testToken}}",
									"host": [
										"{{env_security_testToken}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clean TestRail Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5d00dc8-f552-48c0-9a1c-2510df583464",
										"exec": [
											"// Prepare list of TestRail tests for 'Clean TestRail Run' request",
											"//var execTests = pm.environment.get(\"testRailTestsInRun\");",
											"var execTests = data.executedTests;",
											"console.log(\"TestRail, tests executed in last run: \" + execTests);",
											"execTests = execTests.replace(/C/g, \"\");",
											"//console.log(\"TestRail, first cleanup: \" + execTests);",
											"execTests = execTests.replace(/ /g, \", \");",
											"//console.log(\"TestRail, second cleanup: \" + execTests);",
											"execTests = execTests.replace(/,,/g, \",\");",
											"pm.environment.set(\"testRailTestsInRun\", execTests); ",
											"",
											"var array = JSON.parse(\"[\" + execTests + \"]\"); //convert string to array",
											"for(let i = 0; i < 10; i++){",
											"    let runId = JSON.parse(responseBody)[i].id;",
											"    let runName = JSON.parse(responseBody)[i].name;",
											"    let runSuiteId = JSON.parse(responseBody)[i].suite_id;",
											"    if (runName === \"Postman API Tests\") { //determine proper run",
											"        //console.log(runId);   ",
											"        console.log(\"TestRail run '\" + runId + \"' updating for tests: \" + execTests);",
											"        pm.sendRequest({",
											"            url: \"https://testrail.ebs.crealogix.net/index.php?/api/v2/update_run/\" + runId,",
											"            method: \"POST\",",
											"            header: {",
											"                \"Authorization\": \"Basic bWlsYW4ua2FyYWRlZ2xpY0BjcmVhbG9naXguY29tOlNTQ25hcG9saTEyMzQ1Njc4OQ==\",",
											"                \"Content-Type\": \"application/json\"",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({ include_all: false, case_ids: array })",
											"        \t}",
											"        });",
											"        break;",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22f2990b-adb1-4668-a6e9-92884e953577",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "SSCnapoli123456789",
											"type": "string"
										},
										{
											"key": "username",
											"value": "milan.karadeglic@crealogix.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://testrail.ebs.crealogix.net/index.php?/api/v2/get_runs/8",
									"protocol": "https",
									"host": [
										"testrail",
										"ebs",
										"crealogix",
										"net"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "/api/v2/get_runs/8",
											"value": null
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Routing",
					"item": [
						{
							"name": "getRoutingByFilterAlias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5d00dc8-f552-48c0-9a1c-2510df583464",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"let paymentType = pm.environment.get(\"paymentType\");\r",
											"let beneficiaryAccount = pm.environment.get(\"beneficiaryAccount\");\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Routing is retrieved and assertions are passed\", function () {\r",
											"\r",
											"    //Payment type\r",
											"    let jsonDataPaymentType = pm.response.json().paymentType;\r",
											"    //Beneficiary account\r",
											"    let jsonDataBeneficiaryAccount = pm.response.json().beneficiaryAccount;\r",
											"\r",
											"    pm.test(\"Routing is retrieved\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Routing type is correct\", () => {\r",
											"      pm.expect(jsonDataPaymentType).to.eql(paymentType);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Beneficiary account is correct\", () => {\r",
											"      pm.expect(jsonDataBeneficiaryAccount).to.eql(beneficiaryAccount);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Beneficiary account ID is in response\", function () {\r",
											"      pm.expect(pm.response.text()).to.include(\"beneficiaryAccountId\");\r",
											"    });\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(jsonDataPaymentType).to.eql(paymentType)\r",
											"    && pm.expect(jsonDataBeneficiaryAccount).to.eql(beneficiaryAccount)\r",
											"    && pm.expect(pm.response.text()).to.include(\"beneficiaryAccountId\");\r",
											"});\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22f2990b-adb1-4668-a6e9-92884e953577",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{environment}}/banking-api/payment/payments/{{tenant}}/v1/routing/analyze?routingRequest={{accountAlias}}",
									"host": [
										"{{environment}}"
									],
									"path": [
										"banking-api",
										"payment",
										"payments",
										"{{tenant}}",
										"v1",
										"routing",
										"analyze"
									],
									"query": [
										{
											"key": "routingRequest",
											"value": "{{accountAlias}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "registerDomain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
								"exec": [
									"// Execute standard tests from PrS using eval()\r",
									"//eval(globals.commonTests)();\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Server is registered and assertions are passed\", function () {\r",
									"\r",
									"    pm.test(\"Command is executed\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //Determine if assertion passed at whole\r",
									"    pm.response.to.have.status(200); \r",
									"});\r",
									"\r",
									"// check if DL server is registered\r",
									"if (pm.response.to.have.status(200)){\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    //let url = responseData._links.details.href    \r",
									"    //let n = url.lastIndexOf(\"/\");\r",
									"    //let domain = url.substr(n + 1, url.length - n - 1);\r",
									"    pm.globals.set(\"domainID\", responseData.id);\r",
									"    console.log(\"New domain ID: \" + pm.globals.get(\"domainID\"));\r",
									"}\r",
									"else {\r",
									"    console.log(\"Failed to register deeplink server\");\r",
									"    pm.globals.unset(\"domainID\");\r",
									"}\r",
									"\r",
									"eval(globals.sessionNavigate)();\r",
									"\r",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
								"exec": [
									"const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\r",
									"const s = Array.from({length:6}, _ => c[Math.floor(Math.random()*c.length)]).join('')\r",
									"//console.log(\"randomV2\", s);\r",
									"pm.environment.set(\"_tmp_domainPattern\",\"mybank\" + s + \".com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"crealogix - sarch\",\r\n\t\"domainPattern\": \"crealogix.com\",\r\n\t\"loginRequired\": false,\r\n\t\"state\": \"ALLOWED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_deeplink}}/deeplink/admin/{{tenantId_deeplink}}/v1/domains",
							"host": [
								"{{env_deeplink}}"
							],
							"path": [
								"deeplink",
								"admin",
								"{{tenantId_deeplink}}",
								"v1",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "registerDomainFieldStateNotAllowed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
								"exec": [
									"// Execute standard tests from PrS using eval()\r",
									"//eval(globals.commonTests)();\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Server is registered and assertions are passed\", function () {\r",
									"\r",
									"    pm.test(\"Command is executed\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //Determine if assertion passed at whole\r",
									"    pm.response.to.have.status(200); \r",
									"});\r",
									"\r",
									"// check if DL server is registered\r",
									"if (pm.response.to.have.status(200)){\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    //let url = responseData._links.details.href    \r",
									"    //let n = url.lastIndexOf(\"/\");\r",
									"    //let domain = url.substr(n + 1, url.length - n - 1);\r",
									"    pm.globals.set(\"domainID\", responseData.id);\r",
									"    console.log(\"New domain ID: \" + pm.globals.get(\"domainID\"));\r",
									"}\r",
									"else {\r",
									"    console.log(\"Failed to register deeplink server\");\r",
									"    pm.globals.unset(\"domainID\");\r",
									"}\r",
									"\r",
									"eval(globals.sessionNavigate)();\r",
									"\r",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
								"exec": [
									"const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\r",
									"const s = Array.from({length:6}, _ => c[Math.floor(Math.random()*c.length)]).join('')\r",
									"//console.log(\"randomV2\", s);\r",
									"pm.environment.set(\"_tmp_domainPattern\",\"mybank\" + s + \".com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"My Favourite Bank\",\r\n\t\"domainPattern\": \"{{_tmp_domainPattern}}\",\r\n\t\"loginRequired\": true,\r\n\t\"state\": \"NOT_ALLOWED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_deeplink}}/deeplink/admin/{{tenantId_deeplink}}/v1/domains",
							"host": [
								"{{env_deeplink}}"
							],
							"path": [
								"deeplink",
								"admin",
								"{{tenantId_deeplink}}",
								"v1",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "registerDomainErrorMandatoryFieldsNotProvided",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
								"exec": [
									"// Execute standard tests from PrS using eval()\r",
									"//eval(globals.commonTests)();\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Server registration is failed if mandatory filed is not provided\", function () {\r",
									"\r",
									"    pm.test(\"Command is failed with validation error\", function () {\r",
									"        pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"    let jsonData = pm.response.json();    \r",
									"    pm.test(\"'DOMAIN_MANDATORY_FIELDS_NOT_PROVIDED' is in error description\", function () {\r",
									"        pm.expect(jsonData._messages[0].text.indexOf(\"DOMAIN_MANDATORY_FIELDS_NOT_PROVIDED\")).to.not.be.eql(-1);\r",
									"    });\r",
									"    \r",
									"\r",
									"    //Determine if assertion passed at whole\r",
									"    pm.response.to.have.status(422) &&\r",
									"    pm.expect(jsonData._messages[0].text.indexOf(\"DOMAIN_MANDATORY_FIELDS_NOT_PROVIDED\")).to.not.be.eql(-1); \r",
									"});\r",
									"\r",
									"\r",
									"eval(globals.sessionNavigate)();\r",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"domainPattern\": \"{{_tmp_domainPattern}}\",\r\n\t\"loginRequired\": true,\r\n\t\"state\": \"ALLOWED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_deeplink}}/deeplink/admin/{{tenantId_deeplink}}/v1/domains",
							"host": [
								"{{env_deeplink}}"
							],
							"path": [
								"deeplink",
								"admin",
								"{{tenantId_deeplink}}",
								"v1",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "getRegisteredDomains",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
								"exec": [
									"// Execute standard tests from PrS using eval()\r",
									"//eval(globals.commonTests)();\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Server registrations are retrieved, latest registered one is located and assertions are passed\", \r",
									"    function () {\r",
									"\r",
									"    let jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status 200 OK is displayed\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    schemaValidationPassed = eval(globals.schemaValidator)(\"registeredDomainsSchema\",jsonData);\r",
									"    pm.test(\"Response schema is correct\", () => {\r",
									"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
									"    }); \r",
									"\r",
									"    // Find the array index for the domain with domainPattern = {{_tmp_domainPattern}}\r",
									"    var domainNameIndex = jsonData.domains.map(\r",
									"            function (index) {\r",
									"            return index.domainPattern; // <-- HERE is the name of the property\r",
									"        }).indexOf(pm.environment.get(\"_tmp_domainPattern\")); // <-- HERE is the value we are searching for\r",
									"    console.log(\"It found: \" + domainNameIndex);\r",
									"    \r",
									"    // Get the domain object by using the index calculated above\r",
									"    var domain = jsonData.domains[domainNameIndex];\r",
									"\r",
									"    //Determine if assertion passed at whole\r",
									"    pm.response.to.have.status(200) &&\r",
									"    pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
									"    pm.expect(jsonData.domains).to.be.an('array').that.is.not.empty &&\r",
									"    pm.expect(domain).to.exist &&\r",
									"    pm.expect(domain.id).to.be.eql(pm.globals.get(\"domainID\")); \r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"eval(globals.sessionNavigate)();\r",
									"\r",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"crealogix.net\",\r\n  \"domainPattern\": \"crealogix.net\",\r\n  \"loginRequired\": false,\r\n  \"state\": \"ALLOWED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_deeplink}}/deeplink/admin/{{tenantId_deeplink}}/v1/domains",
							"host": [
								"{{env_deeplink}}"
							],
							"path": [
								"deeplink",
								"admin",
								"{{tenantId_deeplink}}",
								"v1",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "getDomainRegistrationById",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
								"exec": [
									"// Execute standard tests from PrS using eval()\r",
									"//eval(globals.commonTests)();\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Server registrations are retrieved and assertions are passed\", function () {\r",
									"\r",
									"    pm.test(\"Command is executed\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"/*\r",
									"    //Instructed amount is correct\r",
									"    let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
									"    let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
									"    //Execution date is correct\r",
									"    let requestBodyExecutionDate = JSON.parse(request.data).paymentInformation.requestedExecutionDate;\r",
									"    let responseBodyExecutionDate = JSON.parse(responseBody).paymentInformation.requestedExecutionDate;    \r",
									"    //State is correct\r",
									"    let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
									"    //Creditor agent is correct\r",
									"    let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent;\r",
									"    let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent;\r",
									"    //Debtor address is correct\r",
									"    let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
									"    let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
									"    //Debtor account is correct\r",
									"    let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
									"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo;   \r",
									"    //Creditor account is correct\r",
									"    let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
									"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;   \r",
									"    //Charge bearer is correct    \r",
									"    let jsonDataResponseChargeBearer = pm.response.json().chargeBearer;\r",
									"    \r",
									"    pm.test(\"Instructed amount is correct\", () => {\r",
									"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Execution date is correct\", () => {\r",
									"      pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"State is correct\", () => {\r",
									"      pm.expect(jsonDataResponsePaymentState).to.eql(\"READY_FOR_EXECUTION\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Creditor agent is correct\", () => {\r",
									"      pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Debtor address is correct\", () => {\r",
									"      pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.adrLine1);\r",
									"      pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
									"      pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Debtor account is correct\", () => {\r",
									"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Creditor account is correct\", () => {\r",
									"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Charge bearer is correct\", () => {\r",
									"      pm.expect(jsonDataResponseChargeBearer).to.eql(\"SHAR\");\r",
									"    });\r",
									"    \r",
									"    // check if payment is created\r",
									"    if (pm.response.to.have.status(201)){\r",
									"        var responseData = JSON.parse(responseBody);\r",
									"        pm.globals.set(\"newPaymentID\", responseData.paymentId);\r",
									"        console.log(\"New payment ID: \" + pm.globals.get(\"newPaymentID\"));\r",
									"    }\r",
									"    else {\r",
									"        console.log(\"Failed to create payment with ID:\" + pm.globals.get(\"newPaymentID\"));\r",
									"        pm.globals.unset(\"newPaymentID\");\r",
									"    }\r",
									"    \r",
									"    //Determine if assertion passed at whole\r",
									"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
									"    && pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate) \r",
									"    && pm.expect(jsonDataResponsePaymentState).to.eql(\"READY_FOR_EXECUTION\") \r",
									"    && pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent) \r",
									"    && pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.adrLine1) \r",
									"    && pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode) \r",
									"    && pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName) \r",
									"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
									"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
									"    && pm.expect(jsonDataResponseChargeBearer).to.eql(\"SHAR\");\r",
									"    \r",
									"*/\r",
									"    //Determine if assertion passed at whole\r",
									"    pm.response.to.have.status(200); \r",
									"});\r",
									"\r",
									"eval(globals.sessionNavigate)();\r",
									"\r",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"crealogix.net\",\r\n  \"domainPattern\": \"crealogix.net\",\r\n  \"loginRequired\": false,\r\n  \"state\": \"ALLOWED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_deeplink}}/deeplink/admin/{{tenantId_deeplink}}/v1/domains/{{domainID}}",
							"host": [
								"{{env_deeplink}}"
							],
							"path": [
								"deeplink",
								"admin",
								"{{tenantId_deeplink}}",
								"v1",
								"domains",
								"{{domainID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "putDomainRegistrationActivate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
								"exec": [
									"// Execute standard tests from PrS using eval()\r",
									"//eval(globals.commonTests)();\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Server registrations are retrieved and assertions are passed\", function () {\r",
									"\r",
									"    pm.test(\"Command is executed\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //Determine if assertion passed at whole\r",
									"    pm.response.to.have.status(200); \r",
									"});\r",
									"\r",
									"eval(globals.sessionNavigate)();\r",
									"\r",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"crealogix.net\",\r\n  \"domainPattern\": \"crealogix.net\",\r\n  \"loginRequired\": false,\r\n  \"state\": \"ALLOWED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_deeplink}}/deeplink/admin/{{tenantId_deeplink}}/v1/domains/{{domainID}}/perform?action=activate",
							"host": [
								"{{env_deeplink}}"
							],
							"path": [
								"deeplink",
								"admin",
								"{{tenantId_deeplink}}",
								"v1",
								"domains",
								"{{domainID}}",
								"perform"
							],
							"query": [
								{
									"key": "action",
									"value": "activate"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "putDomainRegistrationDeactivate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
								"exec": [
									"// Execute standard tests from PrS using eval()\r",
									"//eval(globals.commonTests)();\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Server registrations are retrieved and assertions are passed\", function () {\r",
									"\r",
									"    pm.test(\"Command is executed\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //Determine if assertion passed at whole\r",
									"    pm.response.to.have.status(200); \r",
									"});\r",
									"\r",
									"eval(globals.sessionNavigate)();\r",
									"\r",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"crealogix.net\",\r\n  \"domainPattern\": \"crealogix.net\",\r\n  \"loginRequired\": false,\r\n  \"state\": \"ALLOWED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_deeplink}}/deeplink/admin/{{tenantId_deeplink}}/v1/domains/{{domainID}}/perform?action=deactivate",
							"host": [
								"{{env_deeplink}}"
							],
							"path": [
								"deeplink",
								"admin",
								"{{tenantId_deeplink}}",
								"v1",
								"domains",
								"{{domainID}}",
								"perform"
							],
							"query": [
								{
									"key": "action",
									"value": "deactivate"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "putDomainRegistration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
								"exec": [
									"// Execute standard tests from PrS using eval()\r",
									"//eval(globals.commonTests)();\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Server registrations are retrieved and assertions are passed\", function () {\r",
									"\r",
									"    pm.test(\"Command is executed\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //Determine if assertion passed at whole\r",
									"    pm.response.to.have.status(200); \r",
									"});\r",
									"\r",
									"eval(globals.sessionNavigate)();\r",
									"\r",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"just zex.net\",\r\n  \"domainPattern\": \"zex.net\",\r\n  \"loginRequired\": true,\r\n  \"state\": \"NOT_ALLOWED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_deeplink}}/deeplink/admin/{{tenantId_deeplink}}/v1/domains/{{domainID}}",
							"host": [
								"{{env_deeplink}}"
							],
							"path": [
								"deeplink",
								"admin",
								"{{tenantId_deeplink}}",
								"v1",
								"domains",
								"{{domainID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getDomainParameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
								"exec": [
									"// Execute standard tests from PrS using eval()\r",
									"//eval(globals.commonTests)();\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Server registrations are retrieved and assertions are passed\", function () {\r",
									"\r",
									"    pm.test(\"Command is executed\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"/*\r",
									"    //Instructed amount is correct\r",
									"    let requestBodyInstructedAmount = JSON.parse(request.data).paymentInformation.instructedAmount;\r",
									"    let responseBodyInstructedAmount = JSON.parse(responseBody).paymentInformation.instructedAmount;\r",
									"    //Execution date is correct\r",
									"    let requestBodyExecutionDate = JSON.parse(request.data).paymentInformation.requestedExecutionDate;\r",
									"    let responseBodyExecutionDate = JSON.parse(responseBody).paymentInformation.requestedExecutionDate;    \r",
									"    //State is correct\r",
									"    let jsonDataResponsePaymentState = pm.response.json().paymentState;\r",
									"    //Creditor agent is correct\r",
									"    let requestBodyCreditorAgent = JSON.parse(request.data).paymentInformation.creditorAgent;\r",
									"    let responseBodyCreditorAgent = JSON.parse(responseBody).paymentInformation.creditorAgent;\r",
									"    //Debtor address is correct\r",
									"    let requestBodyDebtorAddress = JSON.parse(request.data).paymentInformation.debtor.address;\r",
									"    let responseBodyDebtorAddress = JSON.parse(responseBody).paymentInformation.debtor.address;\r",
									"    //Debtor account is correct\r",
									"    let requestBodyDebtorAccountNo = JSON.parse(request.data).paymentInformation.debtorAccountNo;\r",
									"    let responseBodyDebtorAccountNo = JSON.parse(responseBody).paymentInformation.debtorAccountNo;   \r",
									"    //Creditor account is correct\r",
									"    let requestBodyCreditorAccountNo = JSON.parse(request.data).paymentInformation.creditorAccountNo;\r",
									"    let responseBodyCreditorAccountNo = JSON.parse(responseBody).paymentInformation.creditorAccountNo;   \r",
									"    //Charge bearer is correct    \r",
									"    let jsonDataResponseChargeBearer = pm.response.json().chargeBearer;\r",
									"    \r",
									"    pm.test(\"Instructed amount is correct\", () => {\r",
									"      pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Execution date is correct\", () => {\r",
									"      pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"State is correct\", () => {\r",
									"      pm.expect(jsonDataResponsePaymentState).to.eql(\"READY_FOR_EXECUTION\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Creditor agent is correct\", () => {\r",
									"      pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Debtor address is correct\", () => {\r",
									"      pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.adrLine1);\r",
									"      pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode);\r",
									"      pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Debtor account is correct\", () => {\r",
									"      pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Creditor account is correct\", () => {\r",
									"      pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Charge bearer is correct\", () => {\r",
									"      pm.expect(jsonDataResponseChargeBearer).to.eql(\"SHAR\");\r",
									"    });\r",
									"    \r",
									"    // check if payment is created\r",
									"    if (pm.response.to.have.status(201)){\r",
									"        var responseData = JSON.parse(responseBody);\r",
									"        pm.globals.set(\"newPaymentID\", responseData.paymentId);\r",
									"        console.log(\"New payment ID: \" + pm.globals.get(\"newPaymentID\"));\r",
									"    }\r",
									"    else {\r",
									"        console.log(\"Failed to create payment with ID:\" + pm.globals.get(\"newPaymentID\"));\r",
									"        pm.globals.unset(\"newPaymentID\");\r",
									"    }\r",
									"    \r",
									"    //Determine if assertion passed at whole\r",
									"    pm.expect(responseBodyInstructedAmount).to.eql(requestBodyInstructedAmount) \r",
									"    && pm.expect(responseBodyExecutionDate).to.eql(requestBodyExecutionDate) \r",
									"    && pm.expect(jsonDataResponsePaymentState).to.eql(\"READY_FOR_EXECUTION\") \r",
									"    && pm.expect(responseBodyCreditorAgent).to.eql(requestBodyCreditorAgent) \r",
									"    && pm.expect(responseBodyDebtorAddress.streetName).to.eql(requestBodyDebtorAddress.adrLine1) \r",
									"    && pm.expect(responseBodyDebtorAddress.postalCode).to.eql(requestBodyDebtorAddress.postalCode) \r",
									"    && pm.expect(responseBodyDebtorAddress.townName).to.eql(requestBodyDebtorAddress.townName) \r",
									"    && pm.expect(responseBodyDebtorAccountNo).to.eql(requestBodyDebtorAccountNo) \r",
									"    && pm.expect(responseBodyCreditorAccountNo).to.eql(requestBodyCreditorAccountNo) \r",
									"    && pm.expect(jsonDataResponseChargeBearer).to.eql(\"SHAR\");\r",
									"    \r",
									"*/\r",
									"    //Determine if assertion passed at whole\r",
									"    pm.response.to.have.status(200); \r",
									"});\r",
									"\r",
									"eval(globals.sessionNavigate)();\r",
									"\r",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"parameters\": [\r\n    {\r\n      \"name\": \"s\",\r\n      \"state\": \"ALLOWED\"\r\n    },\r\n    {\r\n      \"name\": \"lang\",\r\n      \"state\": \"ALLOWED\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_deeplink}}/deeplink/admin/{{tenantId_deeplink}}/v1/domains/{{domainID}}/parameters",
							"host": [
								"{{env_deeplink}}"
							],
							"path": [
								"deeplink",
								"admin",
								"{{tenantId_deeplink}}",
								"v1",
								"domains",
								"{{domainID}}",
								"parameters"
							]
						}
					},
					"response": []
				},
				{
					"name": "putDomainParameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
								"exec": [
									"// Execute standard tests from PrS using eval()\r",
									"//eval(globals.commonTests)();\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Server registrations are retrieved and assertions are passed\", function () {\r",
									"\r",
									"    pm.test(\"Command is executed\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //Determine if assertion passed at whole\r",
									"    pm.response.to.have.status(200); \r",
									"});\r",
									"\r",
									"//store names of parameters used\r",
									"let requestBodyParameter1Name = JSON.parse(request.data).parameters[0].name;\r",
									"pm.environment.set(\"_parameter1_Name\",requestBodyParameter1Name);\r",
									"let requestBodyParameter2Name = JSON.parse(request.data).parameters[1].name;\r",
									"pm.environment.set(\"_parameter2_Name\",requestBodyParameter2Name)\r",
									"\r",
									"eval(globals.sessionNavigate)();\r",
									"\r",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"parameters\": [\r\n    {\r\n      \"name\": \"s\",\r\n      \"state\": \"ALLOWED\"\r\n    },\r\n    {\r\n      \"name\": \"lang\",\r\n      \"state\": \"ALLOWED\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_deeplink}}/deeplink/admin/{{tenantId_deeplink}}/v1/domains/{{domainID}}/parameters",
							"host": [
								"{{env_deeplink}}"
							],
							"path": [
								"deeplink",
								"admin",
								"{{tenantId_deeplink}}",
								"v1",
								"domains",
								"{{domainID}}",
								"parameters"
							]
						}
					},
					"response": []
				},
				{
					"name": "putDomainParameterDisable",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
								"exec": [
									"// Execute standard tests from PrS using eval()\r",
									"//eval(globals.commonTests)();\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Domain first parameter is deactivated and assertions are passed\", function () {\r",
									"\r",
									"    pm.test(\"Command is executed\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    //Determine if assertion passed at whole\r",
									"    pm.response.to.have.status(200); \r",
									"});\r",
									"\r",
									"eval(globals.sessionNavigate)();\r",
									"\r",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_deeplink}}/deeplink/admin/{{tenantId_deeplink}}/v1/domains/{{domainID}}/parameters/{{_parameter1_Name}}/perform?action=deactivate",
							"host": [
								"{{env_deeplink}}"
							],
							"path": [
								"deeplink",
								"admin",
								"{{tenantId_deeplink}}",
								"v1",
								"domains",
								"{{domainID}}",
								"parameters",
								"{{_parameter1_Name}}",
								"perform"
							],
							"query": [
								{
									"key": "action",
									"value": "deactivate"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "registerLink",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
								"exec": [
									"// Execute standard tests from PrS using eval()\r",
									"//eval(globals.commonTests)();\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Link is registered successfully and assertions are passed\", function () {\r",
									"\r",
									"    pm.test(\"Command is executed\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"\r",
									"    //Determine if assertion passed at whole\r",
									"    pm.response.to.have.status(201); \r",
									"});\r",
									"\r",
									"// check if link is registered\r",
									"if (pm.response.to.have.status(201)){\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    let url = responseData.link;    \r",
									"    url = url.replace(\"lang={$1}\", \"lang=en\");\r",
									"    url = url.replace(\"lang={$2}\", \"lang=en\");\r",
									"    url = url.replace(\"search={$2}\", \"search=payments\");\r",
									"    url = url.replace(\"search={$1}\", \"search=payments\");\r",
									"    pm.globals.set(\"deepLinkRedirectUrl\", url);\r",
									"    console.log(\"New redirect URL: \" + pm.globals.get(\"deepLinkRedirectUrl\"));\r",
									"    //request link\r",
									"    let requestBody = JSON.parse(request.data);\r",
									"    let location = requestBody.ports[0].location;\r",
									"    location = location.replace(\"{$search}\", \"payments\");\r",
									"    location = location.replace(\"{$lang}\", \"en\");\r",
									"    pm.globals.set(\"deepLinkRedirectLocation\", location);\r",
									"    console.log(\"New redirect location: \" + pm.globals.get(\"deepLinkRedirectLocation\"));\r",
									"    // DeepLink UUID\r",
									"    let n = url.lastIndexOf(\"/\");\r",
									"    uuid = url.substr(n + 1, url.length - n - 1);\r",
									"    pm.globals.set(\"deepLink_uuid\", uuid);\r",
									"    console.log(\"New DeepLink UUID: \" + pm.globals.get(\"deepLink_uuid\"));\r",
									"}\r",
									"else {\r",
									"    console.log(\"Failed to register link\");\r",
									"    pm.globals.unset(\"deepLinkRedirectUrl\");\r",
									"    pm.globals.unset(\"deepLinkRedirectLocation\");\r",
									"    pm.globals.unset(\"deepLink_uuid\");\r",
									"}\r",
									"\r",
									"//time when link becomes available is 60 seconds in future thus test needs to be paused the same ammount of time\r",
									"setTimeout(function(){}, 60000); \r",
									"\r",
									"eval(globals.sessionNavigate)();\r",
									"\r",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
								"exec": [
									"let currentDateTime = eval(globals.calculateTimeAndDate)(0);",
									"pm.environment.set(\"currentDateTime\",currentDateTime);",
									"let futureDateTime30 = eval(globals.calculateTimeAndDate)(30);",
									"pm.environment.set(\"futureDateTime\",futureDateTime30)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"key\": {\r\n    \"businessDomain\": \"crealogix.com\",\r\n    \"linkName\": \"Search in CLX website  {{$timestamp}}\"\r\n  },\r\n  \"registrationType\": \"FREELINK\",\r\n  \"settings\": {\r\n    \"active\": true,\r\n    \"validFrom\": \"{{currentDateTime}}\",\r\n    \"validTo\": \"{{futureDateTime}}\"\r\n  },\r\n  \"variables\": [\r\n   {\r\n     \"name\": \"search\",\r\n     \"required\": true\r\n   },\r\n   {\r\n     \"name\": \"lang\",\r\n     \"required\": true\r\n   }\r\n  ],\r\n  \"ports\": [\r\n    {\r\n      \"key\": \"clx_1\",\r\n      \"matcherType\": \"DEFAULT\",\r\n      \"location\": \"https://crealogix.com/ch/en/?s={$search}&lang={$lang}\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_deeplink}}/deeplink/registration/{{tenantId_deeplink}}/v1/link",
							"host": [
								"{{env_deeplink}}"
							],
							"path": [
								"deeplink",
								"registration",
								"{{tenantId_deeplink}}",
								"v1",
								"link"
							]
						}
					},
					"response": []
				},
				{
					"name": "registerLinkMandatoryFieldsOnly",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
								"exec": [
									"// Execute standard tests from PrS using eval()\r",
									"//eval(globals.commonTests)();\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Link is registered successfully and assertions are passed\", function () {\r",
									"\r",
									"    pm.test(\"Command is executed\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"\r",
									"    //Determine if assertion passed at whole\r",
									"    pm.response.to.have.status(201); \r",
									"});\r",
									"\r",
									"// check if link is registered\r",
									"if (pm.response.to.have.status(201)){\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    let url = responseData.link;    \r",
									"    url = url.replace(\"lang={$1}\", \"lang=en\");\r",
									"    url = url.replace(\"lang={$2}\", \"lang=en\");\r",
									"    url = url.replace(\"search={$2}\", \"search=payments\");\r",
									"    url = url.replace(\"search={$1}\", \"search=payments\");\r",
									"    pm.globals.set(\"deepLinkRedirectUrl\", url);\r",
									"    console.log(\"New redirect URL: \" + pm.globals.get(\"deepLinkRedirectUrl\"));\r",
									"    //request link\r",
									"    let requestBody = JSON.parse(request.data);\r",
									"    let location = requestBody.ports[0].location;\r",
									"    location = location.replace(\"{$search}\", \"payments\");\r",
									"    location = location.replace(\"{$lang}\", \"en\");\r",
									"    pm.globals.set(\"deepLinkRedirectLocation\", location);\r",
									"    console.log(\"New redirect location: \" + pm.globals.get(\"deepLinkRedirectLocation\"));\r",
									"    // DeepLink UUID\r",
									"    let n = url.lastIndexOf(\"/\");\r",
									"    uuid = url.substr(n + 1, url.length - n - 1);\r",
									"    pm.globals.set(\"deepLink_uuid\", uuid);\r",
									"    console.log(\"New DeepLink UUID: \" + pm.globals.get(\"deepLink_uuid\"));\r",
									"}\r",
									"else {\r",
									"    console.log(\"Failed to register link\");\r",
									"    pm.globals.unset(\"deepLinkRedirectUrl\");\r",
									"    pm.globals.unset(\"deepLinkRedirectLocation\");\r",
									"    pm.globals.unset(\"deepLink_uuid\");\r",
									"}\r",
									"\r",
									"//time when link becomes available is 60 seconds in future thus test needs to be paused the same ammount of time\r",
									"setTimeout(function(){}, 60000); \r",
									"\r",
									"eval(globals.sessionNavigate)();\r",
									"\r",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
								"exec": [
									"let currentDateTime = eval(globals.calculateTimeAndDate)(0);",
									"pm.environment.set(\"currentDateTime\",currentDateTime);",
									"let futureDateTime30 = eval(globals.calculateTimeAndDate)(30);",
									"pm.environment.set(\"futureDateTime\",futureDateTime30)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"key\": {\r\n    \"businessDomain\": \"onetpl\",\r\n    \"linkName\": \"Secure do onet - {{$timestamp}}\"\r\n  },\r\n  \"registrationType\": \"FREELINK\",\r\n  \"ports\": [\r\n    {\r\n      \"key\": \"clx_1\",\r\n      \"matcherType\": \"DEFAULT\",\r\n      \"location\": \"https://crealogix.com/ch/en\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_deeplink}}/deeplink/registration/{{tenantId_deeplink}}/v1/link",
							"host": [
								"{{env_deeplink}}"
							],
							"path": [
								"deeplink",
								"registration",
								"{{tenantId_deeplink}}",
								"v1",
								"link"
							]
						}
					},
					"response": []
				},
				{
					"name": "registerLinkMandatoryFieldsDateFromOnly",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
								"exec": [
									"// Execute standard tests from PrS using eval()\r",
									"//eval(globals.commonTests)();\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Link is registered successfully and assertions are passed\", function () {\r",
									"\r",
									"    pm.test(\"Command is executed\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"\r",
									"\r",
									"    //Determine if assertion passed at whole\r",
									"    pm.response.to.have.status(201); \r",
									"});\r",
									"\r",
									"// check if link is registered\r",
									"if (pm.response.to.have.status(201)){\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    let url = responseData.link;    \r",
									"    url = url.replace(\"lang={$1}\", \"lang=en\");\r",
									"    url = url.replace(\"lang={$2}\", \"lang=en\");\r",
									"    url = url.replace(\"search={$2}\", \"search=payments\");\r",
									"    url = url.replace(\"search={$1}\", \"search=payments\");\r",
									"    pm.globals.set(\"deepLinkRedirectUrl\", url);\r",
									"    console.log(\"New redirect URL: \" + pm.globals.get(\"deepLinkRedirectUrl\"));\r",
									"    //request link\r",
									"    let requestBody = JSON.parse(request.data);\r",
									"    let location = requestBody.ports[0].location;\r",
									"    location = location.replace(\"{$search}\", \"payments\");\r",
									"    location = location.replace(\"{$lang}\", \"en\");\r",
									"    pm.globals.set(\"deepLinkRedirectLocation\", location);\r",
									"    console.log(\"New redirect location: \" + pm.globals.get(\"deepLinkRedirectLocation\"));\r",
									"    // DeepLink UUID\r",
									"    let n = url.lastIndexOf(\"/\");\r",
									"    uuid = url.substr(n + 1, url.length - n - 1);\r",
									"    pm.globals.set(\"deepLink_uuid\", uuid);\r",
									"    console.log(\"New DeepLink UUID: \" + pm.globals.get(\"deepLink_uuid\"));\r",
									"}\r",
									"else {\r",
									"    console.log(\"Failed to register link\");\r",
									"    pm.globals.unset(\"deepLinkRedirectUrl\");\r",
									"    pm.globals.unset(\"deepLinkRedirectLocation\");\r",
									"    pm.globals.unset(\"deepLink_uuid\");\r",
									"}\r",
									"\r",
									"//time when link becomes available is 60 seconds in future thus test needs to be paused the same ammount of time\r",
									"setTimeout(function(){}, 60000); \r",
									"\r",
									"eval(globals.sessionNavigate)();\r",
									"\r",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
								"exec": [
									"let currentDateTime = eval(globals.calculateTimeAndDate)(0);",
									"pm.environment.set(\"currentDateTime\",currentDateTime);",
									"let futureDateTime30 = eval(globals.calculateTimeAndDate)(30);",
									"pm.environment.set(\"futureDateTime\",futureDateTime30)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"key\": {\r\n    \"businessDomain\": \"shop.crealogix.com\",\r\n    \"linkName\": \"Crealogix shop with lang valid forever - {{$timestamp}}\"\r\n  },\r\n  \"registrationType\": \"FREELINK\",\r\n  \"settings\": {\r\n    \"active\": true,\r\n    \"validFrom\": \"{{currentDateTime}}\"\r\n  },\r\n  \"ports\": [\r\n    {\r\n      \"key\": \"clx_1.1\",\r\n      \"matcherType\": \"DEFAULT\",\r\n      \"location\": \"https://crealogix.com/ch/en\"\r\n    },\r\n    {\r\n      \"key\": \"clx_1.2\",\r\n      \"matcherType\": \"MC\",\r\n      \"location\": \"https://crealogix.com/ch/gb\"\r\n    }\r\n    \r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_deeplink}}/deeplink/registration/{{tenantId_deeplink}}/v1/link",
							"host": [
								"{{env_deeplink}}"
							],
							"path": [
								"deeplink",
								"registration",
								"{{tenantId_deeplink}}",
								"v1",
								"link"
							]
						}
					},
					"response": []
				},
				{
					"name": "registerLinkInactive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
								"exec": [
									"// Execute standard tests from PrS using eval()\r",
									"//eval(globals.commonTests)();\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Link is registered successfully (as inactive) and assertions are passed\", function () {\r",
									"\r",
									"    pm.test(\"Command is executed\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"\r",
									"    //Determine if assertion passed at whole\r",
									"    pm.response.to.have.status(201); \r",
									"});\r",
									"\r",
									"// check if link is registered\r",
									"if (pm.response.to.have.status(201)){\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    let url = responseData.link;    \r",
									"    url = url.replace(\"lang={$1}\", \"lang=en\");\r",
									"    url = url.replace(\"lang={$2}\", \"lang=en\");\r",
									"    url = url.replace(\"search={$2}\", \"search=payments\");\r",
									"    url = url.replace(\"search={$1}\", \"search=payments\");\r",
									"    pm.globals.set(\"deepLinkRedirectUrl\", url);\r",
									"    console.log(\"New redirect URL: \" + pm.globals.get(\"deepLinkRedirectUrl\"));\r",
									"    //request link\r",
									"    let requestBody = JSON.parse(request.data);\r",
									"    let location = requestBody.ports[0].location;\r",
									"    location = location.replace(\"{$search}\", \"payments\");\r",
									"    location = location.replace(\"{$lang}\", \"en\");\r",
									"    pm.globals.set(\"deepLinkRedirectLocation\", location);\r",
									"    console.log(\"New redirect location: \" + pm.globals.get(\"deepLinkRedirectLocation\"));\r",
									"    // DeepLink UUID\r",
									"    let n = url.lastIndexOf(\"/\");\r",
									"    uuid = url.substr(n + 1, url.length - n - 1);\r",
									"    pm.globals.set(\"deepLink_uuid\", uuid);\r",
									"    console.log(\"New DeepLink UUID: \" + pm.globals.get(\"deepLink_uuid\"));\r",
									"}\r",
									"else {\r",
									"    console.log(\"Failed to register link\");\r",
									"    pm.globals.unset(\"deepLinkRedirectUrl\");\r",
									"    pm.globals.unset(\"deepLinkRedirectLocation\");\r",
									"    pm.globals.unset(\"deepLink_uuid\");\r",
									"}\r",
									"\r",
									"//time when link becomes available is 60 seconds in future thus test needs to be paused the same ammount of time\r",
									"setTimeout(function(){}, 60000); \r",
									"\r",
									"eval(globals.sessionNavigate)();\r",
									"\r",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
								"exec": [
									"let currentDateTime = eval(globals.calculateTimeAndDate)(0);",
									"pm.environment.set(\"currentDateTime\",currentDateTime);",
									"let futureDateTime30 = eval(globals.calculateTimeAndDate)(30);",
									"pm.environment.set(\"futureDateTime\",futureDateTime30)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"key\": {\r\n    \"businessDomain\": \"crealogix.com\",\r\n    \"linkName\": \"Search in CLX website  {{$timestamp}}\"\r\n  },\r\n  \"registrationType\": \"FREELINK\",\r\n  \"settings\": {\r\n    \"active\": false,\r\n    \"validFrom\": \"{{currentDateTime}}\",\r\n    \"validTo\": \"{{futureDateTime}}\"\r\n  },\r\n  \"variables\": [\r\n     \r\n   {\r\n     \"name\": \"search\",\r\n     \"required\": true\r\n   },\r\n   {\r\n     \"name\": \"lang\",\r\n     \"required\": true\r\n   }\r\n  ],\r\n  \"ports\": [\r\n    {\r\n      \"key\": \"clx_1\",\r\n      \"matcherType\": \"DEFAULT\",\r\n      \"location\": \"https://crealogix.com/ch/en/?s={$search}&lang={$lang}\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_deeplink}}/deeplink/registration/{{tenantId_deeplink}}/v1/link",
							"host": [
								"{{env_deeplink}}"
							],
							"path": [
								"deeplink",
								"registration",
								"{{tenantId_deeplink}}",
								"v1",
								"link"
							]
						}
					},
					"response": []
				},
				{
					"name": "registerLinkErrorDateToOnly",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
								"exec": [
									"// Execute standard tests from PrS using eval()\r",
									"//eval(globals.commonTests)();\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Link is registered successfully and assertions are passed\", function () {\r",
									"\r",
									"    pm.test(\"Command is executed\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"\r",
									"\r",
									"    //Determine if assertion passed at whole\r",
									"    pm.response.to.have.status(201); \r",
									"});\r",
									"\r",
									"\r",
									"eval(globals.sessionNavigate)();\r",
									"\r",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
								"exec": [
									"let currentDateTime = eval(globals.calculateTimeAndDate)(0);",
									"pm.environment.set(\"currentDateTime\",currentDateTime);",
									"let futureDateTime30 = eval(globals.calculateTimeAndDate)(30);",
									"pm.environment.set(\"futureDateTime\",futureDateTime30)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"key\": {\r\n    \"businessDomain\": \"hop.crealogix.com\",\r\n    \"linkName\": \"Crealogix shop with lang valid forever - {{$timestamp}}\"\r\n  },\r\n  \"registrationType\": \"FREELINK\",\r\n  \"settings\": {\r\n    \"active\": true,\r\n    \"validTo\": \"{{futureDateTime}}\"\r\n  },\r\n  \"ports\": [\r\n    {\r\n      \"key\": \"clx_1.3\",\r\n      \"matcherType\": \"DEFAULT\",\r\n      \"location\": \"https://crealogix.com/ch/en\"\r\n    },\r\n    {\r\n      \"key\": \"clx_1.4\",\r\n      \"matcherType\": \"MC\",\r\n      \"location\": \"https://crealogix.com/ch/gb\"\r\n    }\r\n    \r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_deeplink}}/deeplink/registration/{{tenantId_deeplink}}/v1/link",
							"host": [
								"{{env_deeplink}}"
							],
							"path": [
								"deeplink",
								"registration",
								"{{tenantId_deeplink}}",
								"v1",
								"link"
							]
						}
					},
					"response": []
				},
				{
					"name": "registerLinkErrorFakeTenantId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
								"exec": [
									"// Execute standard tests from PrS using eval()\r",
									"//eval(globals.commonTests)();\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Link registering is failed if fake tenant ID is provided\", function () {\r",
									"\r",
									"    pm.test(\"Command is failed with validation error\", function () {\r",
									"        pm.response.to.have.status(500);\r",
									"    });\r",
									"\r",
									"    let jsonData = pm.response.json();    \r",
									"    pm.test(\"'Tenant ID '19901' not match with request tenant ID' is in error description\", function () {\r",
									"        pm.expect(jsonData.body._messages[0].text.indexOf(\"Tenant ID '19901' not match with request tenant ID\")).to.not.be.eql(-1);\r",
									"    });\r",
									"    \r",
									"    //Determine if assertion passed at whole\r",
									"    pm.response.to.have.status(500) &&\r",
									"    pm.expect(jsonData.body._messages[0].text.indexOf(\"Tenant ID '19901' not match with request tenant ID\")).to.not.be.eql(-1); \r",
									"});\r",
									"\r",
									"\r",
									"eval(globals.sessionNavigate)();\r",
									"\r",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
								"exec": [
									"let currentDateTime = eval(globals.calculateTimeAndDate)(0);",
									"pm.environment.set(\"currentDateTime\",currentDateTime);",
									"let futureDateTime30 = eval(globals.calculateTimeAndDate)(30);",
									"pm.environment.set(\"futureDateTime\",futureDateTime30)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"key\": {\r\n    \"businessDomain\": \"crealogix.com\",\r\n    \"linkName\": \"Search in CLX website  {{$timestamp}}\"\r\n  },\r\n  \"registrationType\": \"FREELINK\",\r\n  \"settings\": {\r\n    \"active\": true,\r\n    \"validFrom\": \"{{currentDateTime}}\",\r\n    \"validTo\": \"{{futureDateTime}}\"\r\n  },\r\n  \"variables\": [\r\n     \r\n   {\r\n     \"name\": \"search\",\r\n     \"required\": true\r\n   },\r\n   {\r\n     \"name\": \"lang\",\r\n     \"required\": true\r\n   }\r\n  ],\r\n  \"ports\": [\r\n    {\r\n      \"key\": \"clx_1\",\r\n      \"matcherType\": \"DEFAULT\",\r\n      \"location\": \"https://crealogix.com/ch/en/?s={$search}&lang={$lang}\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_deeplink}}/deeplink/registration/999999/v1/link",
							"host": [
								"{{env_deeplink}}"
							],
							"path": [
								"deeplink",
								"registration",
								"999999",
								"v1",
								"link"
							]
						}
					},
					"response": []
				},
				{
					"name": "registerLinkErrorTenantIdIsMissed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
								"exec": [
									"// Execute standard tests from PrS using eval()\r",
									"//eval(globals.commonTests)();\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Link registering is failed if fake tenant ID is provided\", function () {\r",
									"\r",
									"    pm.test(\"Command is failed with validation error\", function () {\r",
									"        pm.response.to.have.status(500);\r",
									"    });\r",
									"\r",
									"    let jsonData = pm.response.json();    \r",
									"    pm.test(\"'Tenant ID '19901' not match with request tenant ID' is in error description\", function () {\r",
									"        pm.expect(jsonData.body._messages[0].text.indexOf(\"Tenant ID '19901' not match with request tenant ID\")).to.not.be.eql(-1);\r",
									"    });\r",
									"    \r",
									"    //Determine if assertion passed at whole\r",
									"    pm.response.to.have.status(500) &&\r",
									"    pm.expect(jsonData.body._messages[0].text.indexOf(\"Tenant ID '19901' not match with request tenant ID\")).to.not.be.eql(-1); \r",
									"});\r",
									"\r",
									"\r",
									"eval(globals.sessionNavigate)();\r",
									"\r",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
								"exec": [
									"let currentDateTime = eval(globals.calculateTimeAndDate)(0);",
									"pm.environment.set(\"currentDateTime\",currentDateTime);",
									"let futureDateTime30 = eval(globals.calculateTimeAndDate)(30);",
									"pm.environment.set(\"futureDateTime\",futureDateTime30)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"key\": {\r\n    \"businessDomain\": \"crealogix.com\",\r\n    \"linkName\": \"Search in CLX website  {{$timestamp}}\"\r\n  },\r\n  \"registrationType\": \"FREELINK\",\r\n  \"settings\": {\r\n    \"active\": true,\r\n    \"validFrom\": \"{{currentDateTime}}\",\r\n    \"validTo\": \"{{futureDateTime}}\"\r\n  },\r\n  \"variables\": [\r\n     \r\n   {\r\n     \"name\": \"search\",\r\n     \"required\": true\r\n   },\r\n   {\r\n     \"name\": \"lang\",\r\n     \"required\": true\r\n   }\r\n  ],\r\n  \"ports\": [\r\n    {\r\n      \"key\": \"clx_1\",\r\n      \"matcherType\": \"DEFAULT\",\r\n      \"location\": \"https://crealogix.com/ch/en/?s={$search}&lang={$lang}\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_deeplink}}/deeplink/registration/v1/link",
							"host": [
								"{{env_deeplink}}"
							],
							"path": [
								"deeplink",
								"registration",
								"v1",
								"link"
							]
						}
					},
					"response": []
				},
				{
					"name": "registerLinkErrorPortIsMissed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Link registering is failed no ports are provided\", function () {\r",
									"\r",
									"    pm.test(\"Command is failed with validation error\", function () {\r",
									"        pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"    let jsonData = pm.response.json();    \r",
									"    pm.test(\"Validation error: At least one port should be provided\", function () {\r",
									"        pm.expect(jsonData._messages[0].text.indexOf(\"Validation error. Some fields have problems: At least one port should be provided\")).to.not.be.eql(-1);\r",
									"    });\r",
									"    \r",
									"    //Determine if assertion passed at whole\r",
									"    pm.response.to.have.status(422) &&\r",
									"    pm.expect(jsonData._messages[0].text.indexOf(\"Validation error. Some fields have problems: At least one port should be provided\")).to.not.be.eql(-1); \r",
									"});\r",
									"\r",
									"\r",
									"eval(globals.sessionNavigate)();\r",
									"\r",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
								"exec": [
									"let currentDateTime = eval(globals.calculateTimeAndDate)(0);",
									"pm.environment.set(\"currentDateTime\",currentDateTime);",
									"let futureDateTime30 = eval(globals.calculateTimeAndDate)(30);",
									"pm.environment.set(\"futureDateTime\",futureDateTime30)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"key\": {\r\n    \"businessDomain\": \"crealogix.com\",\r\n    \"linkName\": \"Search in CLX website  {{$timestamp}}\"\r\n  },\r\n  \"registrationType\": \"FREELINK\",\r\n  \"settings\": {\r\n    \"active\": true,\r\n    \"validFrom\": \"{{currentDateTime}}\",\r\n    \"validTo\": \"{{futureDateTime}}\"\r\n  },\r\n  \"variables\": [\r\n     \r\n   {\r\n     \"name\": \"search\",\r\n     \"required\": true\r\n   },\r\n   {\r\n     \"name\": \"lang\",\r\n     \"required\": true\r\n   }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_deeplink}}/deeplink/registration/{{tenantId_deeplink}}/v1/link",
							"host": [
								"{{env_deeplink}}"
							],
							"path": [
								"deeplink",
								"registration",
								"{{tenantId_deeplink}}",
								"v1",
								"link"
							]
						}
					},
					"response": []
				},
				{
					"name": "registerLinkErrorMandatoryFieldsNotProvided",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
								"exec": [
									"// Execute standard tests from PrS using eval()\r",
									"//eval(globals.commonTests)();\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Link registering is failed if mandatory filed is not provided\", function () {\r",
									"\r",
									"    pm.test(\"Command is failed with validation error\", function () {\r",
									"        pm.response.to.have.status(422);\r",
									"    });\r",
									"\r",
									"    let jsonData = pm.response.json();    \r",
									"    pm.test(\"'Link registration field required' is in error description\", function () {\r",
									"        pm.expect(jsonData._messages[0].text.indexOf(\"Link registration field required\")).to.not.be.eql(-1);\r",
									"    });\r",
									"    \r",
									"    //Determine if assertion passed at whole\r",
									"    pm.response.to.have.status(422) &&\r",
									"    pm.expect(jsonData._messages[0].text.indexOf(\"Link registration field required\")).to.not.be.eql(-1); \r",
									"});\r",
									"\r",
									"\r",
									"eval(globals.sessionNavigate)();\r",
									"\r",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
								"exec": [
									"let currentDateTime = eval(globals.calculateTimeAndDate)(0);",
									"pm.environment.set(\"currentDateTime\",currentDateTime);",
									"let futureDateTime30 = eval(globals.calculateTimeAndDate)(30);",
									"pm.environment.set(\"futureDateTime\",futureDateTime30)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"registrationType\": \"FREELINK\",\r\n  \"settings\": {\r\n    \"active\": true,\r\n    \"validFrom\": \"{{currentDateTime}}\",\r\n    \"validTo\": \"{{futureDateTime}}\"\r\n  },\r\n  \"variables\": [\r\n     \r\n   {\r\n     \"name\": \"search\",\r\n     \"required\": true\r\n   },\r\n   {\r\n     \"name\": \"lang\",\r\n     \"required\": true\r\n   }\r\n  ],\r\n  \"ports\": [\r\n    {\r\n      \"key\": \"clx_1\",\r\n      \"matcherType\": \"DEFAULT\",\r\n      \"location\": \"https://crealogix.com/ch/en/?s={$search}&lang={$lang}\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_deeplink}}/deeplink/registration/{{tenantId_deeplink}}/v1/link",
							"host": [
								"{{env_deeplink}}"
							],
							"path": [
								"deeplink",
								"registration",
								"{{tenantId_deeplink}}",
								"v1",
								"link"
							]
						}
					},
					"response": []
				},
				{
					"name": "getLinkResolve",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "380b3871-2a51-43bf-a0a6-e3c32104f2e9",
								"exec": [
									"// Execute standard tests from PrS using eval()\r",
									"//eval(globals.commonTests)();\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Link is resolved and redirected\", \r",
									"    function () {\r",
									"\r",
									"    //let jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Status 308 Permanent Redirect is displayed\", function () {\r",
									"        pm.response.to.have.status(308);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response header indicates the URL to redirect a page to\", function () {\r",
									"        pm.response.to.have.header(\"Location\", pm.globals.get(\"deepLinkRedirectLocation\"));\r",
									"    });\r",
									"\r",
									"/*\r",
									"    schemaValidationPassed = eval(globals.schemaValidator)(\"registeredDomainsSchema\",jsonData);\r",
									"    pm.test(\"Response schema is correct\", () => {\r",
									"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
									"    }); \r",
									"\r",
									"    // Find the array index for the domain with domainPattern = {{_tmp_domainPattern}}\r",
									"    var domainNameIndex = jsonData.domains.map(\r",
									"            function (index) {\r",
									"            return index.domainPattern; // <-- HERE is the name of the property\r",
									"        }).indexOf(pm.environment.get(\"_tmp_domainPattern\")); // <-- HERE is the value we are searching for\r",
									"    console.log(\"It found: \" + domainNameIndex);\r",
									"    \r",
									"    // Get the domain object by using the index calculated above\r",
									"    var domain = jsonData.domains[domainNameIndex];\r",
									"*/\r",
									"    //Determine if assertion passed at whole\r",
									"    pm.response.to.have.status(308) &&\r",
									"    pm.response.to.have.header(\"Location\", pm.globals.get(\"deepLinkRedirectLocation\"));\r",
									"/*    &&\r",
									"    pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
									"    pm.expect(jsonData.domains).to.be.an('array').that.is.not.empty &&\r",
									"    pm.expect(domain).to.exist &&\r",
									"    pm.expect(domain.id).to.be.eql(pm.globals.get(\"domainID\")); \r",
									"*/    \r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"eval(globals.sessionNavigate)();\r",
									"\r",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4554baa7-4766-4c0d-bd99-4fc6e4de5c1b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_deeplink}}/deeplink/resolve/{{tenantId_deeplink}}/v1/link/{{deepLink_uuid}}",
							"host": [
								"{{env_deeplink}}"
							],
							"path": [
								"deeplink",
								"resolve",
								"{{tenantId_deeplink}}",
								"v1",
								"link",
								"{{deepLink_uuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getLinkResolveErrorTenantIdIsMissed",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{env_deeplink}}/deeplink/resolve/v1/link/{{deepLink_uuid}}",
							"host": [
								"{{env_deeplink}}"
							],
							"path": [
								"deeplink",
								"resolve",
								"v1",
								"link",
								"{{deepLink_uuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getLinkResolveErrorWrongTenantId",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{env_deeplink}}/deeplink/resolve/1001/v1/link/{{deepLink_uuid}}",
							"host": [
								"{{env_deeplink}}"
							],
							"path": [
								"deeplink",
								"resolve",
								"1001",
								"v1",
								"link",
								"{{deepLink_uuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getLinkResolveErrorUuidIsMissed",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{env_deeplink}}/deeplink/resolve/{{tenantId_deeplink}}/v1/link",
							"host": [
								"{{env_deeplink}}"
							],
							"path": [
								"deeplink",
								"resolve",
								"{{tenantId_deeplink}}",
								"v1",
								"link"
							]
						}
					},
					"response": []
				},
				{
					"name": "getLinkResolveErrorWrongUuid",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{env_deeplink}}/deeplink/resolve/{{tenantId_deeplink}}/v1/link/55c778fa-ed76-4cc9-80d3-01a25ae13670?search=payments&lang=en",
							"host": [
								"{{env_deeplink}}"
							],
							"path": [
								"deeplink",
								"resolve",
								"{{tenantId_deeplink}}",
								"v1",
								"link",
								"55c778fa-ed76-4cc9-80d3-01a25ae13670"
							],
							"query": [
								{
									"key": "search",
									"value": "payments"
								},
								{
									"key": "lang",
									"value": "en"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getLinkResolveErrorTenantIdAndUuidAreMissed",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{env_deeplink}}/deeplink/resolve/v1/link",
							"host": [
								"{{env_deeplink}}"
							],
							"path": [
								"deeplink",
								"resolve",
								"v1",
								"link"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "cc52a1da-bedb-499b-9889-bd5c4a2f665c",
				"type": "text/javascript",
				"exec": [
					"//************************************************************************************************",
					"// variable initialization************************************************************************",
					"//************************************************************************************************",
					"var test = pm.environment.get(\"testRailTestsInRun\");",
					"if( !test) {",
					"    pm.environment.set(\"testRailTestsInRun\",\"\");",
					"}",
					"",
					"//************************************************************************************************",
					"// DEPRECATED !!!",
					"// set access token ******************************************************************************",
					"//************************************************************************************************",
					"//pm.environment.set(\"token\",data.accessToken);",
					"",
					"//************************************************************************************************",
					"// set contract number ***************************************************************************",
					"//************************************************************************************************",
					"var contractNumber = data.contractNumber;",
					"if (contractNumber){ ",
					"    pm.environment.set(\"contract\",JSON.parse(data.contractNumber));",
					"    console.log(\"dataFile/contractNumber: \" + contractNumber);",
					"}",
					"",
					"//************************************************************************************************",
					"// set parameters ********************************************************************************",
					"//************************************************************************************************",
					"var paymentType = data.paymentType;",
					"if (paymentType){ ",
					"    pm.environment.set(\"paymentType\",JSON.parse(data.paymentType));",
					"    console.log(\"dataFile/paymentType: \" + paymentType);",
					"}",
					"var beneficiaryAccount = data.beneficiaryAccount;",
					"if (beneficiaryAccount){ ",
					"    pm.environment.set(\"beneficiaryAccount\",JSON.parse(data.beneficiaryAccount));",
					"    console.log(\"dataFile/beneficiaryAccount: \" + beneficiaryAccount);",
					"}",
					"",
					"",
					"//************************************************************************************************",
					"// connect to TestRail ***************************************************************************",
					"//************************************************************************************************",
					"pm.globals.set(\"TESTRAIL_DOMAIN\",\"testrail.ebs.crealogix.net\");",
					"pm.globals.set(\"TESTRAIL_USERNAME\",\"milan.karadeglic@crealogix.com\"); ",
					"pm.globals.set(\"TESTRAIL_APIKEY\",\"Q4MlDw1e70Kxh1g1YPq9-Dg0abDWer.pSWcVWcxO4\");",
					"pm.globals.set(\"TESTRAIL_PROJECTID\",8); ",
					"pm.globals.set(\"TESTRAIL_TITLE\",\"Postman API Tests\");",
					"",
					"//************************************************************************************************",
					"// Schema for 'registered domains' ***************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const registeredDomainsSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_status\",",
					"    \"_messages\",",
					"    \"domains\",",
					"    \"_links\"",
					"  ],",
					"  \"properties\": {",
					"    \"_status\": {",
					"      \"$id\": \"#/properties/_status\",",
					"      \"type\": \"boolean\",",
					"      \"title\": \"The _status Schema\",",
					"      \"default\": false,",
					"      \"examples\": [",
					"        true",
					"      ]",
					"    },",
					"    \"_messages\": {",
					"      \"$id\": \"#/properties/_messages\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The _messages Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"domains\": {",
					"      \"$id\": \"#/properties/domains\",",
					"      \"type\": \"array\",",
					"      \"title\": \"The Domains Schema\",",
					"      \"items\": {",
					"        \"$id\": \"#/properties/domains/items\",",
					"        \"type\": \"object\",",
					"        \"title\": \"The Items Schema\",",
					"        \"required\": [",
					"          \"id\",",
					"          \"name\",",
					"          \"domainPattern\",",
					"          \"loginRequired\",",
					"          \"state\"",
					"        ],",
					"        \"properties\": {",
					"          \"id\": {",
					"            \"$id\": \"#/properties/domains/items/properties/id\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Id Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"1000001\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"name\": {",
					"            \"$id\": \"#/properties/domains/items/properties/name\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Name Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"crealogix - sarch\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"domainPattern\": {",
					"            \"$id\": \"#/properties/domains/items/properties/domainPattern\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Domainpattern Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"crealogix.com\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"loginRequired\": {",
					"            \"$id\": \"#/properties/domains/items/properties/loginRequired\",",
					"            \"type\": \"boolean\",",
					"            \"title\": \"The Loginrequired Schema\",",
					"            \"default\": false,",
					"            \"examples\": [",
					"              false",
					"            ]",
					"          },",
					"          \"state\": {",
					"            \"$id\": \"#/properties/domains/items/properties/state\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The State Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"ALLOWED\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"_links\": {",
					"      \"$id\": \"#/properties/_links\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _links Schema\",",
					"      \"required\": [",
					"        \"details\"",
					"      ],",
					"      \"properties\": {",
					"        \"details\": {",
					"          \"$id\": \"#/properties/_links/properties/details\",",
					"          \"type\": \"object\",",
					"          \"title\": \"The Details Schema\",",
					"          \"required\": [",
					"            \"href\"",
					"          ],",
					"          \"properties\": {",
					"            \"href\": {",
					"              \"$id\": \"#/properties/_links/properties/details/properties/href\",",
					"              \"type\": \"string\",",
					"              \"title\": \"The Href Schema\",",
					"              \"default\": \"\",",
					"              \"examples\": [",
					"                \"http://deeplink.mdb-master-demo.k8s-demo.ebs.crealogix.net/deeplink/admin/19901/v1/domains\"",
					"              ],",
					"              \"pattern\": \"^(.*)$\"",
					"            }",
					"          }",
					"        }",
					"      }",
					"    }",
					"  }",
					"};",
					"pm.environment.set(\"registeredDomainsSchema\", registeredDomainsSchema);",
					"",
					"//************************************************************************************************",
					"//global function to determine next day/next working day *****************************************",
					"//************************************************************************************************",
					"var moment = require('moment');",
					"let nextDay = moment().add(\"days\",1).format(\"YYYY-MM-DD\"); //next day in specified format",
					"switch (moment().add(\"days\",1).format(\"dddd\")){",
					"    case \"Sunday\":",
					"        var nextWorkingDay = moment().add(\"days\",2).format(\"YYYY-MM-DD\");",
					"        break;",
					"    case \"Saturday\":",
					"        var nextWorkingDay = moment().add(\"days\",3).format(\"YYYY-MM-DD\");",
					"        break;",
					"    default:",
					"        var nextWorkingDay = moment().add(\"days\",1).format(\"YYYY-MM-DD\");",
					"}",
					"pm.globals.set('PrS:nextDay', JSON.stringify(nextDay));",
					"pm.globals.set('PrS:nextWorkingDay', JSON.stringify(nextWorkingDay));",
					"",
					"postman.setGlobalVariable(\"calculateTimeAndDate\", (daystoAdd) => {",
					"    let moment = require('moment');",
					"    return moment().add(\"minutes\",1).add(\"days\",daystoAdd).format(\"DD/MM/YYYY:HHmm\");",
					"});",
					"/*",
					"// Define test data, setup configuration per environment",
					"var env = pm.environment.get(\"envName\");",
					"if (env === \"MDB-R191-TEST\") {",
					"//    var contractNumber = \"{{contractNumber}}\";",
					"//    var debtorAccountNo = \"{{debtorAccountNo}}\";",
					"//    var debtorAccountName = \"{{debtorAccountName}}\";",
					"//    var creditorAccountNo = \"{{creditorAccountNo}}\";",
					"    } else if (env === \"MDB-R191-LAT\") {",
					"} else {",
					"    throw new Error(\"Wrong environment selected, requests are skipped!\")",
					"}",
					"//pm.globals.set('PrS:contractNumber', JSON.stringify(contractNumber));",
					"//pm.globals.set('PrS:debtorAccountNo', JSON.stringify(debtorAccountNo));",
					"//pm.globals.set('PrS:debtorAccountName', JSON.stringify(debtorAccountName));",
					"//pm.globals.set('PrS:creditorAccountNo', JSON.stringify(creditorAccountNo));",
					"*/",
					"",
					"// Save the object as a variable.",
					"// JSON.stringify will serialize the object so that Postman can save it",
					"",
					"//pm.globals.set('PrS:tags', JSON.stringify(tags));",
					"//pm.environment.set(\"testGroup\",\"Patient Zero\") //set environment variable if/when needed",
					"",
					"                //pm.response.to.be.ok;         - Status code must be 200",
					"                //pm.response.to.be.error       - Checks 4XX or 5XX",
					"                //pm.response.to.be.serverError - Checks 5XX",
					"                //pm.response.to.be.clientError - Checks 4XX status code",
					"",
					"// Save common tests in a global variable",
					"postman.setGlobalVariable(\"commonTests\", () => {",
					"    pm.test(\"Response must be valid with/with out a body and with proper status code\", function () {",
					"        if ([\"GET\",\"POST\",\"PUT\"].indexOf(request.method) > -1) {",
					"            pm.response.to.not.be.error;",
					"            pm.response.to.be.withBody;",
					"            pm.response.to.be.json;",
					"            pm.response.to.have.jsonBody();",
					"            pm.response.to.not.have.jsonBody('error');",
					"            pm.response.to.have.header('Content-Type', 'application/json;charset=UTF-8');",
					"        } else {",
					"            pm.response.to.not.be.withBody;",
					"        }",
					"        switch(request.method){",
					"            case \"POST\":",
					"                pm.response.to.have.status(201);",
					"                break;",
					"            case \"PUT\":",
					"                pm.response.to.have.status(200);",
					"                break;",
					"            case \"GET\":",
					"                pm.response.to.have.status(200);",
					"                break;",
					"            case \"DELETE\":",
					"                pm.response.to.have.status(204);",
					"                break;",
					"        }        ",
					"    });",
					"    //pm.test(\"Response time is below 1000ms\", function () {",
					"    //    pm.expect(pm.response.responseTime).to.be.below(1000);",
					"    //});",
					"});",
					"",
					"postman.setGlobalVariable(\"assertValidCreditorAgent\", () => {",
					"    pm.expect(address).to.be.an('object').with.keys('name1', 'name2', 'street', 'city', 'country');",
					"    pm.expect(address.name1).to.be.a('string').and.not.empty;",
					"    pm.expect(address.name2).to.be.a('string').and.not.empty;",
					"    pm.expect(address.street).to.be.a('string').and.not.empty;",
					"    pm.expect(address.city).to.be.a('string').and.not.empty;",
					"    pm.expect(address.country).to.be.a('string').with.lengthOf(2).and.match(/[A-Z]+/);",
					"});",
					"",
					"postman.setGlobalVariable(\"sessionInit\", (testSession, sessionName) => {",
					"    //session init section",
					"    console.log(request.name + \", initialization: \" + testSession + \", global var: \" + sessionName);",
					"    console.log(request.name + \", executing: \" + testSession[0]);",
					"    ",
					"    // Select first test from session to be executed",
					"    postman.setNextRequest(testSession[0]); ",
					"    testSession.shift();",
					"    if (testSession.length === 0) {",
					"        console.log(request.name + \", test session is empty, unset \" + sessionName);",
					"        pm.globals.unset(sessionName);",
					"        console.log(request.name + \", terminate tests execution list\");",
					"    } else {",
					"        pm.globals.set(sessionName, testSession);",
					"        console.log(request.name + \" for \" + sessionName + \", updated list of tests to be executed: \" + testSession);",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"sessionNavigate\", () => {",
					"    console.log(request.name + \", entering ...\");",
					"    if (pm.globals.get(\"requestsToRun\") === undefined){",
					"        console.log(request.name + \", requestsToRun is undefined\");",
					"        pm.globals.set(\"testRailTestCases\",\"\");",
					"        console.log(request.name + \", reset global var: testRailTestCases\");    ",
					"        if (pm.globals.get(\"testSession\") === undefined){",
					"            console.log(request.name + \", testSession is undefined\");",
					"            //here >> export list of tests executed",
					"            var tests = pm.environment.get(\"testRailTestsInRun\");",
					"            tests = tests.replace(/C/g, \"\");",
					"            tests = tests.replace(/ /g, \", \");",
					"            tests = tests.replace(/,,/g, \",\");",
					"            console.log(\"TestRail tests executed executed in this run: \" + tests);",
					"            console.log(\"The end\");",
					"            postman.setNextRequest(null);",
					"        } else {",
					"        var testSession = pm.globals.get(\"testSession\");",
					"        console.log(request.name + \", checking what to run: \" + testSession[0]);",
					"        postman.setNextRequest(testSession[0]); // Run: GET SWIFT payment",
					"        testSession.shift();",
					"        if (testSession.length === 0) {",
					"            pm.globals.unset(\"testSession\");",
					"            console.log(request.name + \", terminate execution list\");",
					"        } else {",
					"            pm.globals.set(\"testSession\", testSession);",
					"            console.log(request.name + \", updated list of tests to be executed: \" + testSession);",
					"        }}",
					"    } else {",
					"    var requestsToRun = pm.globals.get(\"requestsToRun\");",
					"    console.log(request.name + \", checking what to run: \" + requestsToRun[0]);",
					"    postman.setNextRequest(requestsToRun[0]); ",
					"    requestsToRun.shift();",
					"    if (requestsToRun.length === 0) {",
					"        pm.globals.unset(\"requestsToRun\");",
					"        console.log(request.name + \", terminate requests execution list\");",
					"    } else {",
					"        pm.globals.set(\"requestsToRun\", requestsToRun);",
					"        console.log(request.name + \", updated list of requests to be executed: \" + requestsToRun);",
					"    }}",
					"});",
					"",
					"postman.setGlobalVariable(\"cleanup\", () => {",
					"    const clean = [\"requestsToRun\", \"testSession\"];",
					"    for(let i = 0; i < clean.length; ++i){",
					"        pm.globals.unset(clean[i]);",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"testsExecuted\", (listOfExecutedTests) => {",
					"    let tests =  pm.environment.get(\"testRailTestsInRun\");",
					"    //console.log(\"TestRail tests stored in 'testRailTestsInRun': \" + tests);",
					"    if (tests.length > 0) {",
					"        tests = tests + \" \"",
					"    }",
					"    tests = tests + listOfExecutedTests;",
					"    //console.log(\"TestRail tests to be stored to 'testRailTestsInRun': \" + tests);",
					"    pm.environment.set(\"testRailTestsInRun\",tests);",
					"    //console.log(\"TestRail tests executed so far: \" + tests);",
					"});",
					"",
					"postman.setGlobalVariable(\"extractTestCaseIDFromRequestName\", () => {",
					"    let n = request.name.lastIndexOf(\"(\");",
					"    return request.name.substr(n + 1, request.name.length - n - 2);",
					"});",
					"",
					"postman.setGlobalVariable(\"schemaValidator\", (schema, jsonData) => {",
					"    //old, deprecated schema validationimplementation",
					"    //pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;",
					"    ",
					"    //new schema validation implementation",
					"    ",
					"    var schemaValidationPassed = true;",
					"    var serviceSchema = pm.environment.get(schema);",
					"    //var jsonData = JSON.parse(pm.responseBody);",
					"",
					"    var validationResult = tv4.validateMultiple(jsonData, serviceSchema, true, true);",
					"    for(var i =0; i<validationResult.errors.length;i++){",
					"        console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  ",
					"        //Skipping all \"Invalid type\" errors as they are expected with current service implementations",
					"        schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);",
					"        //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);",
					"    }    ",
					"    return schemaValidationPassed;",
					"}); "
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7e7d41ba-50b0-48b0-bc52-53d4e572706a",
				"type": "text/javascript",
				"exec": [
					"// check if test is executed",
					"pm.test(\"'\" + request.name +\"' is initiated\", function () {",
					"    //pm.response.to.have.status(200);",
					"    //pm.response.to.be.success ",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"id": "86da7834-4b3a-4093-9599-9667c569b8c8",
			"key": "EPIC",
			"value": "PRODUCT-6323",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}