{
	"info": {
		"_postman_id": "43ba41e5-d472-4b27-aa1f-14ef5f521d97",
		"name": "MODULE: Assets (orig, Sasa)",
		"description": "Asset API:\n\n- Custody account API\n- Assets account\n- Portfolio API\n \nGlobal functions:\n- generateAccessToken //generate access token\n- assetsSearchFunction //list accounts, stores {{_tmp_accountId}}, {{_tmp_accountId2}}, {{_tmp_accountIdAlias}}, \n\t{{_tmp_accountNumber1}}, {{_tmp_accountNumber2}}, {{_tmp_iban1}}, {{_tmp_iban2}}, {{_tmp_id1}}, {{_tmp_id2}} and  {{_tmp_contractId}} \n- portfolioRequest //lists portfolios, stores {{_tmp_customerId}} and {{_tmp_portfolioId}}\n- getCustodyAccounts //list custody accounts, stores {{_tmp_cuacsId}}\n- getPositionsByCustodyAccount //list positions for custody account, stores {{_tmp_positionsId}}\n- getTransactionsByCustodyAccount //list transactions for custody account, stores {{_tmp_transactionsId}}\n- getAssetsList // lisls assets for portfolio, stores {{_tmp_assetsId}}",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "#INIT",
			"item": [
				{
					"name": "_Test session",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c6a05367-4c42-4e01-802a-065121b01d97",
								"exec": [
									"//reset global variables for controling execution flow",
									"eval(globals.cleanup)();",
									"//clear list of executed TestRail tests",
									"pm.environment.set(\"testRailTestsInRun\", \"\");",
									"",
									"//specify list of tests to be executed in exact order",
									"//const testsScope = \"Full\"; [Full|Core|Full+TestRail]",
									"let testsScope = data.testsScope;",
									"//console.log(testsScope); ",
									"",
									"switch (testsScope) {",
									"    case \"Full\":",
									"        var testSession = [",
									"            \"_Generate access token K8S\",",
									"            \"Accounts_Search (C41736193)\",",
									"            \"Accounts_Search_BIC (C41939550)\",",
									"            \"Accounts_Search_contract iban desc (C38950549)\",",
									"            \"Accounts_Search_contract iban asc (C38950548)\",",
									"            \"Accounts_Search_Account_Number (C37972701)\",",
									"            \"Accounts_Search_Multiple_Names (C38950539)\",",
									"            \"Accounts_Search_AccountType_Current (C38950541)\",",
									"            \"Accounts_Search_AccountType_SAVINGS (C38950542)\",",
									"            \"Accounts_Search_Multiple_Account_Number (C38950540)\",",
									"            \"Accounts_Search_AccountType_Multiple (C41083339)\",",
									"            \"Accounts_Search_AccountType_Other (C41083337)\",",
									"            \"Accounts_Search_iban (C38950543)\",",
									"            \"Accounts_Search_multiple_iban (C38950544)\",",
									"            \"Accounts_Search_contractId (C38950547)\",",
									"            \"List of custody accounts (C41736189)\",",
									"            \"List of portfolios (C43024137)\",",
									"            \"Portfolio details (C43024139)\",",
									"            \"Portfolio performance details (C43181629)\",",
									"            \"Portfolio assets details (C43181622)\",",
									"            \"Maturity details (C43181624)\",",
									"            \"Check proper custody account (C41853576)\",",
									"            \"Check proper custody account searched by PortfolioId (C41853577)\",",
									"            \"Custody account details (C41853582)\",",
									"            \"Search_by_startdate (C37786354)\",",
									"            \"Order_by_amount_asc (C37972704)\",",
									"            \"Order_by_amount_desc (C38719010)\",",
									"            \"Order_by_multiple_criteria (C38763407)\",",
									"            \"Transaction details search by amountForm (C37905040)\",",
									"            \"Transaction details search by amountTo (C37905041)\",",
									"            \"Transaction details search by amountTo-amountFrom (C37905042)\",",
									"            \"Individual transaction (C33706455)\",",
									"            \"Checking pagination (C47473979)\",",
									"            \"Transaction_search overview (C38763410)\",",
									"            \"AccountId Transactions 400 (C38763416)\",",
									"            \"AccountId Transactions 401 (C38763419)\",",
									"            \"set new alias (C37905058)\",",
									"            \"update alias (C37905064)\",",
									"            \"delete alias (C37905066)\",",
									"            \"AccountId Permissions (C36212106)\",",
									"            \"AccountId Permissions 400 (C38778991)\",",
									"            \"AccountId Permissions 401 (C38920771)\",",
									"            \"INCOMING transaction flow (C37905043)\",",
									"            \"OUTGOING transaction flow (C37905044)\",",
									"            \"BOTH transaction flow (C37905045)\",",
									"            \"BOTH transaction type (C37905048)\",",
									"            \"BOOKED transaction type (C37905046)\",",
									"            \"UNBOOKED transaction type (C37905047)\",",
									"            \"AccountId Balance (C35075337)\",",
									"            \"AccountId Balance 400 (C38920909)\",",
									"            \"AccountId Balance 401 (C38920911)\",",
									"            \"Search by accountName (C37949168)\",",
									"            \"List of custody accounts (C41736189)\",",
									"            \"List of portfolios (C43024137)\",",
									"            \"Portfolio details (C43024139)\",",
									"            \"Portfolio performance details (C43181629)\",",
									"            ",
									"            \"Check proper custody account (C41853576)\",",
									"            ",
									"            \"Custody account details (C41853582)\"",
									"            ];",
									"        break;",
									"    case \"Core\":",
									"        var testSession = [",
									"            \"List of custody accounts (C41736189)\",",
									"            \"Custody account position list (C41853583)\",",
									"            \"Custody account position details (C42065196)\",",
									"            \"Get transactions for cuacsId (C42065197)\",",
									"            \"Custody account details (C41853582)\",",
									"            \"Custody account transactions details (C43024136)\",",
									"            \"Account_Search (C41736193)\",",
									"            \"Account_Search_Multiple_criteria_iban_asc (C38950548)\",",
									"            \"Account_Search_Multiple_criteria_iban_desc (C38950549)\",",
									"            \"Account_Search_BIC (C41939550)\",",
									"            \"Account_Search_Account number (C37972701)\",",
									"            \"Account_Search_Multiple names (C38950539)\",",
									"            \"Account_Search_Multiple_Account_number (C38950540)\",",
									"            \"Account_Search_AccountType_Current (C38950541)\",",
									"            \"Account_Search_AccountType_SAVINGS (C38950542)\",",
									"            \"AccountId_Search_startDate&endDate (C379050538)\",",
									"            \"Account_Search_AccountType_Multiple (C41083339)\",",
									"            \"Account_Search_AccountType_Other (C41083337)\",",
									"            \"Account_Search_iban (C38950543)\",",
									"            \"Account_Search_multiple_iban (C38950544)\",",
									"            \"Account_Search_ContractId (C38950547)\",",
									"            \"Account_Search_account_Name (C37949168)\",",
									"            \"Account_Search_id (C38950545)\",            ",
									"            \"AccountId Transaction Search (C37972704)\",",
									"            \"AccountId Transaction Search Overview\",",
									"            \"Get Portfolio List (C43024137)\",",
									"            \"Get Portfolio Details List (C43034139)\",",
									"            \"Get Assets List (C43181622)\",",
									"            \"Get Assets List Details\",",
									"            \"Get Maturity  List (C43181624)\",",
									"            \"Get Performance Details (C43181629)\",",
									"            \"INCOMING transaction flow (C37905043)\",",
									"            \"OUTGOING transaction flow (C37905044)\",",
									"            \"BOTH transaction flow (C37905045)\",",
									"            \"BOTH transaction type (C37905048)\",",
									"            \"BOOKED transaction type (C37905046)\",",
									"            \"UNBOOKED transaction type (C37905047)\"",
									"            ];",
									"        break;",
									"    case \"ToDo\":",
									"        var testSession = [",
									"            \"get_single_transaction\",",
									"            \"Portfolio assets details (C43181622)\",",
									"            \"Maturity details (C43181624)\",",
									"            \"Check proper custody account searched by PortfolioId (C41853577)\"",
									"            ];",
									"        break;",
									"    case \"TestRailClean\":",
									"        var testSession = [",
									"            \"_Test session close\"",
									"        ];",
									"        break;",
									"    default:",
									"        throw new Error(\"No tests selected for execution!\")",
									"}",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(testSession, \"testSession\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6cc3b775-5928-45a3-9d73-16546db2a38d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "_Generate access token K8S",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3a621d7b-f8c1-436a-96e5-ad8e29a61775",
								"exec": [
									"var requestsToRun = [",
									"        \"getAuthTestTokenK8S\"",
									"    ]; ",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4aee02b8-5735-44bc-a16d-0c62e31273ca",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "Assets",
					"item": [
						{
							"name": "Account_Search (C41736193)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac3371b6-64a1-4073-9881-f16f8bb33d3a",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema is validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Save values in the environment variables\r",
											"    if (pm.response.code === 200) {\r",
											"        pm.environment.set(\"_tmp_accountId\", jsonData.accountList[jsonData.page.totalElements - 1].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_accountId\");\r",
											"    }\r",
											"    if (pm.response.code === 200) {\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"        pm.environment.set(\"_tmp_accountId2\", jsonData.accountList[1].id);\r",
											"        pm.environment.set(\"_tmp_accountIdAlias\", jsonData.accountList[2].id);\r",
											"        pm.environment.set(\"_tmp_accountNumber1\", jsonData.accountList[0].accountNumber);\r",
											"        pm.environment.set(\"_tmp_accountNumber2\", jsonData.accountList[1].accountNumber);\r",
											"        pm.environment.set(\"_tmp_iban1\", jsonData.accountList[0].iban);\r",
											"        pm.environment.set(\"_tmp_iban2\", jsonData.accountList[1].iban);\r",
											"        pm.environment.set(\"_tmp_id1\", jsonData.accountList[0].id);\r",
											"        pm.environment.set(\"_tmp_id2\", jsonData.accountList[1].id);\r",
											"        pm.environment.set(\"_tmp_contractId\", jsonData.accountList[0].permissions[0].contractId);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_accountId2\");\r",
											"        pm.environment.unset(\"_tmp_accountIdAlias\");\r",
											"        pm.environment.unset(\"_tmp_accountNumber1\");\r",
											"        pm.environment.unset(\"_tmp_accountNumber2\");\r",
											"        pm.environment.unset(\"_tmp_iban1\");\r",
											"        pm.environment.unset(\"_tmp_iban2\");\r",
											"        pm.environment.unset(\"_tmp_id1\");\r",
											"        pm.environment.unset(\"_tmp_id2\");\r",
											"        pm.environment.unset(\"_tmp_contractId\");\r",
											"    }\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7ce2b567-8981-4147-9456-204d9f04703a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=30",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "30"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple_criteria_iban_asc (C38950548)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a940b6f8-b2ee-462c-943a-3de98879a2d7",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account number\r",
											"    result = result && (jsonData.accountList[0].iban < jsonData.accountList[1].iban);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a78afe81-01a0-4689-85fd-5c9753ec88f6",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"orderBy\": [\r\n{\r\n\"field\": \"IBAN\",\r\n\"sortOrder\": \"ASC\"\r\n}\r\n],\r\n\"criteria\": {\r\n\"iban\": [\r\n\"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"\r\n]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple_criteria_iban_desc (C38950549)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d884121-9fa2-4078-a6c0-fee2c6088683",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account order\r",
											"    result = result && (jsonData.accountList[0].iban > jsonData.accountList[1].iban);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "131f2422-2fc5-48a0-b8e7-ee9752a1c2bb",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"orderBy\": [\r\n{\r\n\"field\": \"IBAN\",\r\n\"sortOrder\": \"DESC\"\r\n}\r\n],\r\n\"criteria\": {\r\n\"iban\": [\r\n\"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"\r\n]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_BIC (C41939550)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a627456-3949-4913-b2af-c6b1693489dd",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let bic = \"CLXNCHZZMDB\";\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper BIC\r",
											"    result = result && (jsonData.accountList[0].bank.bic === bic);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4fb83c0e-e302-41d8-8aa7-a2f71d9ee9c6",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=30",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "30"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Account number (C37972701)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e3e65b2-495a-4884-b644-b71eb07670bf",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accNumber = pm.environment.get(\"_tmp_accountNumber1\")\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account number\r",
											"    result = result && (jsonData.accountList[0].accountNumber === accNumber);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b3fada84-4fc2-428d-814b-fc725187f2ba",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\n    \"accountNumber\": [\n      {{_tmp_accountNumber1}}\n    ]\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple names (C38950539)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "502089c7-d403-4506-b25a-7feb4bb3479c",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accName = \"1704 USD\";\r",
											"    let accName1 = \"1501 CHF\";\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account name\r",
											"    result = result && (jsonData.accountList[0].accountName === accName);\r",
											"    result = result && (jsonData.accountList[1].accountName === accName1);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39ede48f-2714-429f-b3ee-5976ee1302f8",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountName\": [\r\n      \"1704 USD\",\"1501 CHF\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple_Account_number (C38950540)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9dd34004-8f41-4d42-97aa-405d10df7cbf",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accNumber1 = pm.environment.get(\"_tmp_accountNumber1\")\r",
											"    let accNumber2 = pm.environment.get(\"_tmp_accountNumber2\")\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account number\r",
											"    result = result && (jsonData.accountList[0].accountNumber === accNumber1);\r",
											"    result = result && (jsonData.accountList[1].accountNumber === accNumber2);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "afc87f6d-bf10-429b-8222-f96253c41a97",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountNumber\": [\r\n      {{_tmp_accountNumber1}},{{_tmp_accountNumber2}}\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_Current (C38950541)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c4d8098-1863-41ef-95e0-8447b6aca376",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType = \"CURRENT\";\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account type   \r",
											"    result = result && (jsonData.accountList[0].accountType === accType);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "85d31dcd-8355-42b1-badd-1a63a2ed6fc0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"CURRENT\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_SAVINGS (C38950542)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48a29e61-1fa1-48d4-afea-cc5f9fde3eb8",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType = \"SAVINGS\";\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account type\r",
											"    result = result && (jsonData.accountList[0].accountType === accType);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8a5ef85b-23a0-485a-acc6-ee7ad078fa33",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"SAVINGS\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Search_startDate&endDate (C379050538)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88e10615-2722-412c-a8be-c1d309a286ac",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "37481164-30a1-43e6-80b4-7046023ddc94",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_Multiple (C41083339)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "94c647d4-30ef-4062-8e50-f9b095893e5c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9cc3ae65-1cd0-4859-b79d-d8375b3573a8",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType1 = \"CURRENT\";\r",
											"    let accType2 = \"OTHER\";\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account types\r",
											"    var list=jsonData.accountList;\r",
											"    for(var i=0; i<list.length;i++){\r",
											"        if(list[i].accountType!=accType1 && list[i].accountType!=accType2){\r",
											"            pm.expect(false).to.be.eql(true);\r",
											"        }\r",
											"    }\r",
											"\r",
											" /*   result = result && (jsonData.accountList[0].accountType === accType1);\r",
											"    result = result && (jsonData.accountList[1].accountType === accType2);\r",
											"    pm.expect(result).to.be.eql(true);*/\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"OTHER\",\"CURRENT\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_Other (C41083337)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7312312e-62e9-445f-9282-fb9f712560d1",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType = \"OTHER\";\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account type\r",
											"    result = result && (jsonData.accountList[0].accountType === accType);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6320fd9a-4d4f-4cf3-8795-eb0ebd0a99be",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"OTHER\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_iban (C38950543)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "98e86769-545c-4165-92d6-3f2be223a280",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let iban = pm.environment.get(\"_tmp_iban1\")\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account iban\r",
											"    result = result && (jsonData.accountList[0].iban === iban);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "867a11d8-ea69-4d32-805e-9476aec3f5e7",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"iban\": [\r\n      \"{{_tmp_iban1}}\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_multiple_iban (C38950544)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59fa667b-b715-4bb3-9fe5-50417e6c378b",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let iban1 = pm.environment.get(\"_tmp_iban1\")\r",
											"    let iban2 = pm.environment.get(\"_tmp_iban2\")\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account ibans\r",
											"    result = result && (jsonData.accountList[0].iban === iban1);\r",
											"    result = result && (jsonData.accountList[1].iban === iban2);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9a63eabb-ab20-451f-b4f9-d4876afc8d9d",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"iban\": [\r\n      \"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"\r\n    ]\r\n\r\n}\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_ContractId (C38950547)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cdd8ca4-8cb3-4184-bf9c-fa1af11107b3",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    // store last securityNumber as environment variable\r",
											"    if (pm.response.code === 200) {\r",
											"       var jsonData = JSON.parse(responseBody);\r",
											"       pm.environment.set(\"_tmp_accountId\", jsonData.accountList[0].id);\r",
											"      } else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"    }    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1b4bc92f-9e9d-4800-a4d5-619df608ae5f",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"contractId\": [\r\n      \"{{_tmp_contractId}}\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_account_Name (C37949168)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19701107-e234-4125-858f-00be162b3700",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accName = \"1704 USD\";\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account name\r",
											"    result = result && (jsonData.accountList[0].accountName === accName);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2a16438d-ec5a-44f5-9021-160735cc07d5",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountName\": [\r\n      \"1704 USD\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_id (C38950545)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65821d7a-37df-4a13-98ee-d587501ef1f4",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "344ffef6-4154-4377-b2d0-077fda835e8a",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"id\": [\r\n      \"{{_tmp_id2}}\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId Transaction Search (C37972704)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7dd2db23-75d2-4114-8dab-fbc04a5da8a9",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.transactionGroups === undefined || jsonData.transactionGroups.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of transactions is retrieved (based on criteria specified) and response schema is validated\", function () {\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Status is ok\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    var schemaValidationPassed = true;\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"    if (pm.response.code === 200) {\r",
											"        pm.environment.set(\"_tmp_transactionsId\",jsonData.transactionGroups[0].transactions[0].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_transactionsId\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dcdd298d-3512-4dfb-969f-a76f81295a78",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2020-06-01\"\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId Transaction Search Overview",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5fc509d0-f638-4f06-ad97-eba7aa25dbf2",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.transactionGroups === undefined || jsonData.transactionGroups.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of transactions is retrieved (based on criteria specified) and response schema is validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"  \r",
											"    //Validate the response code \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "98965638-b980-44f2-9fff-4da71f64e3e8",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"orderBy\": [{\r\n        \"field\": \"AMOUNT\",\r\n        \"sortOrder\": \"DESC\"\r\n    }],\r\n    \"criteria\": {\r\n        \"startDate\": \"2020-01-01\",\r\n        \"endDate\": \"2020-06-01\",\r\n        \"transactionFlow\": \"OUTGOING\",\r\n        \"transactionType\": \"BOTH\",\r\n        \"amountFrom\": \"999.00\",\r\n        \"amountTo\": \"51001.01\"\r\n    }\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Portfolios",
					"item": [
						{
							"name": "Get Portfolio List (C43024137)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "22ab5b93-fe74-45a2-8fcc-6996b2ac29a9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "12cc8113-72e9-4a6c-8370-954ecd1d4e72",
										"exec": [
											"//Validate results\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of portfolios and response schema is validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    var schemaValidationPassed = true;\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"    \r",
											"    if (pm.response.code === 200) {\r",
											"        var jsonData = JSON.parse(responseBody)._embedded;\r",
											"        pm.environment.set(\"_tmp_portfolioId\", jsonData.portfolios[1].id);\r",
											"        pm.environment.set(\"_tmp_customerId\", jsonData.portfolios[1].customerId);\r",
											"    \r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_portfolioId\");\r",
											"        pm.environment.unset(\"_tmp_customerId\");\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Portfolio Details List (C43034139)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1be51e82-7577-4413-a96f-4d1297e71101",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2c805036-2ee5-4c05-897f-b1bbbb014e56",
										"exec": [
											"//Validate results\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of portfolio details and response schema is validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioDetailsSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"    //Validate that the orders belong to the appropriate customer\r",
											"    let portId = pm.environment.get(\"_tmp_portfolioId\");\r",
											"    jsonData.id === portId\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Assets List (C43181622)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "05602111-b87a-4258-9a29-ac76d10d53a1",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "976a03c3-0779-46ea-8e3c-0dee95614992",
										"exec": [
											"//Validate results\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"assetsList\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"    if (pm.response.code === 200) {\r",
											"        pm.environment.set(\"_tmp_assetsId\", jsonData._embedded.assets[0].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_assetsId\");\r",
											"    }\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/assets",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"assets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Assets List Details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6286262b-c907-4b15-9a76-2bdcd2607d1f",
										"exec": [
											"eval(globals.portfolioRequest)();",
											"setTimeout(function(){eval(globals.getAssetsList)();}, 2000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6af01524-180c-455f-8208-ff2a10e96aff",
										"exec": [
											"//Validate results\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"assetsListDetails\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/assets/{{_tmp_assetsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"assets",
										"{{_tmp_assetsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Maturity  List (C43181624)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98c2aa1b-efbd-4b62-bc92-e86cb7f32a45",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6136a57c-57a9-4202-8f7e-ba5a8e396256",
										"exec": [
											"//Validate results\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData._embedded.maturities === undefined || jsonData._embedded.maturities.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    var schemaValidationPassed = true;\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioDetailsSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/maturities",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"maturities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Performance Details (C43181629)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "953f6b09-5d51-4d74-b99b-b10f8dec6ccd",
										"exec": [
											"eval(globals.portfolioRequest)(); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "873b6865-bff5-4d4b-bb0f-4e26b0d978f5",
										"exec": [
											"//Validate results\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioPerformanceSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/performance",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"performance"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Custody accounts",
					"item": [
						{
							"name": "List of custody accounts (C41736189)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd0cbd73-8ed8-4d49-b99e-c97fb343e52a",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsSchema = pm.environment.get(\"cuacsSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Save custody account id as environment variable\r",
											"    if (pm.response.code === 200) {\r",
											"        pm.environment.set(\"_tmp_cuacsId\",jsonData._embedded.cuacs[0].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_cuacsId\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "71c71463-cfaa-4f2c-8eaf-3f9754c8d652",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Custody account position list (C41853583)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73c68f02-21c6-47ba-a9de-d833e0d2fe07",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Position details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsPositionSchema = pm.environment.get(\"cuacsPositionSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsPositionSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"   \r",
											"    //Save position id as environment variable\r",
											"    if (pm.response.code === 200) {\r",
											"        pm.environment.set(\"_tmp_positionsId\",jsonData._embedded.positions[0].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_positionsId\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0ef7f63a-e261-483f-b2c1-97d13d50b3ee",
										"exec": [
											"eval(globals.getCustodyAccounts)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/positions",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Custody account position details (C42065196)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "11497d8a-9f22-4df9-bb14-898e0539f606",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Position details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var positionIdSchema = pm.environment.get(\"positionIdSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"positionIdSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"    \r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cd35cc68-dff4-47bb-a04b-a2a9ff4061a8",
										"exec": [
											"eval(globals.getCustodyAccounts)();",
											"setTimeout(function(){eval(globals.getPositionsByCustodyAccount)();}, 2000);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/positions/{{_tmp_positionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"positions",
										"{{_tmp_positionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get transactions for cuacsId (C42065197)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "108e335b-f93a-448c-8182-bd2a02d92c81",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Transactions details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsPositionSchema = pm.environment.get(\"cuacsPositionSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"   \r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsIdSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"   \r",
											"    //Save transaction id as environament variable\r",
											"    if (pm.response.code === 200) {\r",
											"        pm.environment.set(\"_tmp_transactionsId\",jsonData._embedded.transactions[0].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_transactionsId\");\r",
											"    }\r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "59d540f0-c115-405e-a92c-7f89722ec727",
										"exec": [
											"eval(globals.getCustodyAccounts)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/transactions/",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"transactions",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Custody account details (C41853582)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c805e16a-a864-4bf0-a841-e3b4ed28f564",
										"exec": [
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"    let cuacsId = pm.environment.get(\"_tmp_cuacsId\");",
											"    let result = true;",
											"    ",
											"    //Validate if execution status is correct",
											"    pm.response.to.have.status(200);",
											"    ",
											"    //Validate if response schema is correct",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsDetSchema\", jsonData);",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    ",
											"    //Validate if custody account is correct in the response",
											"    result = result && (jsonData.id === cuacsId);",
											"    pm.expect(result).to.be.eql(true);",
											"});",
											"",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ecbac8c-7f7b-475f-9cfb-37385ea566c3",
										"exec": [
											"eval(globals.getCustodyAccounts)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Custody account transactions details (C43024136)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e3f788f-76fa-4fa9-9ae5-982669c58c51",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Transactions details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var positionIdSchema = pm.environment.get(\"positionIdSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsIdDetailsSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4474995a-fbbf-48ea-82c2-a1198ca06fd8",
										"exec": [
											"eval(globals.getCustodyAccounts)();",
											"setTimeout(function(){eval(globals.getTransactionsByCustodyAccount)();}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/transactions/{{_tmp_transactionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"transactions",
										"{{_tmp_transactionsId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "565a251a-17e8-47d5-aa4c-3cfe96cfea0c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "df067c1f-c332-4bb7-bc77-2e53a42a0a34",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Transactions",
					"item": [
						{
							"name": "INCOMING transaction flow (C37905043)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c456e938-1c38-48d2-96fd-d4209451e3c8",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of transactions with flow 'INCOMING' is retrieved and response schema validated\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e07c0c00-3792-4251-ab14-3199c306d18e",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionFlow\":\"INCOMING\"\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OUTGOING transaction flow (C37905044)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad8a09e6-b049-47b4-b0cd-19f3d5051b36",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List transactions with flow 'OUTGOING' is retrieved and response schema is validated\", function () {\r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9bda514b-a6d8-44ab-a22c-ed18c0525842",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionFlow\":\"OUTGOING\"\r\n\t}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BOTH transaction flow (C37905045)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c4f32ccf-62d1-4f77-b145-65be83a2326f",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of transactions with flow 'BOTH' is retrieved and response schema is validated\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3be87d31-8709-4402-81a5-f6473d90244a",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionFlow\":\"BOTH\"\r\n\t}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BOTH transaction type (C37905048)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f327ccd-f772-49d3-87dc-8a91af41e7b2",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of transactions with type 'BOTH' is retrieved and response schema is validated\", function () {\r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "51895258-5d70-457e-8bdb-d790ba271ae5",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionType\":\"BOTH\"\r\n\t}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BOOKED transaction type (C37905046)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c7c5f91d-7fad-45c1-8971-2dcc312f75f7",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of transactions with type 'BOOKED' is retrieved and response schema is validated\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "35add9aa-f4f2-427d-aeab-959599b9f4ad",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionType\":\"BOOKED\"\r\n\t}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "UNBOOKED transaction type (C37905047)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9c5088f-99d0-4818-8981-cb516aadb302",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6c80c1d2-aec5-47ce-abac-3dbf47e5239e",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionType\":\"UNBOOKED\"\r\n\t}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_single_transaction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "595ba919-6959-445b-8f75-b22925342167",
										"exec": [
											"//pm.environment.unset(\"_tmp_accountId\");",
											"",
											"//eval(globals.assetsSearchFunction)(\"assetsTransactionSearchFunction\");",
											"eval(globals.assetsSearchFunction)();",
											"setTimeout(function(){eval(globals.assetsTransactionSearchFunction)();}, 10000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c2ec0a97-9cb3-4436-89ea-8d4da8f95311",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"singleTransactions\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/transactions/{{_tmp_transactionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"transactions",
										"{{_tmp_transactionsId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5cccd8ac-c597-4df3-aedd-45479f13a46e",
						"type": "text/javascript",
						"exec": [
							"/*determine test case ID from request name*/",
							"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
							"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
							"",
							"/*add current test case ID to list of already executed tests*/",
							"eval(globals.testsExecuted)(testRailTestCases);",
							"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
							"",
							"//store test case ID of current request for linking with Test Rail",
							"pm.globals.set(\"_tr_\" + request.name, testRailTestCases);",
							"",
							"//call global function to generate access token",
							"eval(globals.generateAccessToken)();"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4dd5c2a4-acd7-4f59-8972-73031aa9d12f",
						"type": "text/javascript",
						"exec": [
							"//eval(globals.sessionNavigate)();",
							"//pm.globals.unset(\"_tr_\" + request.name);"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Requests",
			"item": [
				{
					"name": "portfolio request",
					"item": [
						{
							"name": "Get_portfolios_list (C43024137)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81bc2dd4-afb1-4b26-87bb-1e47e7a87a15",
										"exec": [
											"\r",
											"\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of portfolios and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let portId = pm.environment.get(\"_tmp_portfolioId\");\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioSchema\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_portfolioId\",jsonData.portfolios[1].id);\r",
											"    pm.environment.set(\"_tmp_customerId\",jsonData.portfolios[1].customerId);\r",
											"\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_portfolioId\");\r",
											"    pm.environment.unset(\"_tmp_customerId\");\r",
											"\r",
											"}\r",
											"});\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0ab681cd-5072-40f2-b54f-0cdb1ac2fb9b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_portfolios_details_list (C43024139)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3ee62b5f-9276-417c-9b50-40ed2e6822fc",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b6e3b9d3-67c1-4646-92da-fef7099ab7bd",
										"exec": [
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let portId = pm.environment.get(\"_tmp_portfolioId\");\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioDetailsSchema\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returned orders match to specified cuacsId\", () => {\r",
											"  \r",
											"        result = result && (jsonData.id === portId);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"});\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_assets_list (C43181622)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46f6dbbe-8192-490a-83b5-c89adc315560",
										"exec": [
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"assetsList\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    \r",
											"    if (pm.response.code === 200) {\r",
											"    pm.environment.set(\"_tmp_assetsId\",jsonData._embedded.assets[0].id);\r",
											"    \r",
											"\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_assetsId\");\r",
											"    \r",
											"}\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8b55f599-55ce-4164-a3dc-9e138cf5d1ac",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/assets",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"assets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_assets_list_details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71f533ab-821e-4313-86b8-ba63a8459098",
										"exec": [
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"assetsListDetails\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"});\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3ee8beb9-17d9-4070-b3b0-233189992c2b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/assets/{{_tmp_assetsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"assets",
										"{{_tmp_assetsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_maturity_list (C43181624)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a2758be-955b-46e0-bb7c-940d81e47c2b",
										"exec": [
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"  \r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioDetailsSchema\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"});\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "919176a1-ccb7-4a88-8f1f-4883a4c68386",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/maturities",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"maturities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_performance_details (C43181629)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cbcd7ee2-8aa8-4296-90da-8c3e01d357d6",
										"exec": [
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let assetNo = pm.environment.get(\"_tmp_portfolioId\");\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioPerformanceSchema\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"});\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0109b221-2d6f-47d7-aace-7be0af1652ec",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/performance",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"performance"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Custody accounts",
					"item": [
						{
							"name": "Get custody accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0aa0acd-8766-40d5-843d-1df01bb316ff",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsSchema = pm.environment.get(\"cuacsSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_cuacsId\",jsonData.cuacs[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_cuacsId\");\r",
											"}\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ab63409b-ccd7-4a53-b7f8-15c75307c33b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get positons for cuacsId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76851661-5b5c-429e-90dd-c26beb1659a0",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Position details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsPositionSchema = pm.environment.get(\"cuacsPositionSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsPositionSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"   }); \r",
											"   \r",
											" // store last securityNumber as environment variable\r",
											"    if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_positionsId\",jsonData.positions[0].id);\r",
											"    } else {\r",
											"    pm.environment.unset(\"_tmp_positionsId\");\r",
											"}\r",
											"\r",
											"    \r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4d8fdb8f-a092-4c39-b400-2837ec0d4d44",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/positions",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get custody account positions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e1fbb0f-e629-4404-ba84-08b949bae078",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Position details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var positionIdSchema = pm.environment.get(\"positionIdSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"positionIdSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"   }); \r",
											"   \r",
											"\r",
											"    \r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4f46e417-5e74-4036-aa74-b415cbe850b0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/positions/{{_tmp_positionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"positions",
										"{{_tmp_positionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get transactions for cuacsId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b135e525-a940-4369-94a4-a5bb9b7afaee",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Transactions details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsPositionSchema = pm.environment.get(\"cuacsPositionSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsIdSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"   }); \r",
											"   \r",
											" // store last securityNumber as environment variable\r",
											"    if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_transactionsId\",jsonData.transactions[0].id);\r",
											"    } else {\r",
											"    pm.environment.unset(\"_tmp_transactionsId\");\r",
											"}\r",
											"\r",
											"    \r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "04c30bb4-da20-4fc3-84e8-af4a5c72b02d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/transactions/",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"transactions",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get custody account positions details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0245fbc1-2846-400b-8b9b-38e25e5f5dc5",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Position details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var positionIdSchema = pm.environment.get(\"positionIdSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"positionIdSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"   }); \r",
											"   \r",
											"\r",
											"    \r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "09bb6958-66be-45cb-9c7f-fdfd1e8db1d2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/positions/{{_tmp_positionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"positions",
										"{{_tmp_positionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get custody account transactions details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4390d41e-6ecd-42ef-9f59-11afb3917c0a",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Transactions details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var positionIdSchema = pm.environment.get(\"positionIdSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsIdDetailsSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"   }); \r",
											"   \r",
											"\r",
											"    \r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "846a0912-e180-4c9d-abd5-2c953bc04155",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/transactions/{{_tmp_transactionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"transactions",
										"{{_tmp_transactionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_customer_info_by_his_ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01433b93-a070-4473-bdb2-ac5e7a0c1dde",
										"exec": [
											"eval(globals.commonTests)();",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"    let cuacsId = pm.environment.get(\"_tmp_cuacsId\");",
											"    let result = true;",
											"",
											"    pm.test(\"Status 200 OK is displayed\", function() {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsDetSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"",
											"    pm.test(\"Returned orders match to specified cuacsId\", () => {",
											"  ",
											"        result = result && (jsonData.id === cuacsId);",
											"        ",
											"        pm.expect(result).to.be.eql(true);",
											"    });",
											"",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&",
											"        pm.expect(result).to.be.eql(true);",
											"});",
											"",
											"eval(globals.sessionNavigate)();",
											"pm.globals.unset(\"_tr_\" + request.name);",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "98b8caa9-b573-405d-8903-06bde0625b96",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Assets",
					"item": [
						{
							"name": "Account_Search (C41736193)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09eef3d5-c63a-43b7-82dc-a53082e19afc",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[jsonData.page.totalElements-1].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId2\",jsonData.accountList[1].id);\r",
											"    pm.environment.set(\"_tmp_accountIdAlias\",jsonData.accountList[2].id);\r",
											"    pm.environment.set(\"_tmp_accountNumber1\",jsonData.accountList[0].accountNumber);\r",
											"    pm.environment.set(\"_tmp_accountNumber2\",jsonData.accountList[1].accountNumber);\r",
											"    pm.environment.set(\"_tmp_iban1\",jsonData.accountList[0].iban);\r",
											"    pm.environment.set(\"_tmp_iban2\",jsonData.accountList[1].iban);\r",
											"    pm.environment.set(\"_tmp_id1\",jsonData.accountList[0].id);\r",
											"    pm.environment.set(\"_tmp_id2\",jsonData.accountList[1].id);\r",
											"    pm.environment.set(\"_tmp_contractId\",jsonData.accountList[0].permissions[0].contractId);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId2\");\r",
											"    pm.environment.unset(\"_tmp_accountIdAlias\");\r",
											"    pm.environment.unset(\"_tmp_accountNumber1\");\r",
											"    pm.environment.unset(\"_tmp_accountNumber2\");\r",
											"    pm.environment.unset(\"_tmp_iban1\");\r",
											"    pm.environment.unset(\"_tmp_iban2\");\r",
											"    pm.environment.unset(\"_tmp_id1\");\r",
											"    pm.environment.unset(\"_tmp_id2\");\r",
											"    pm.environment.unset(\"_tmp_contractId\");\r",
											"}\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5216415e-9301-4e67-ac65-f070f7a54eeb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=30",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "30"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple_criteria_iban_asc (C38950548)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ccc39dd6-9979-42b9-9687-d0efd85f4b4d",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].iban < jsonData.accountList[1].iban);\r",
											"   \r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "12d6144f-ae79-4ed2-a2d0-60a5999a6cf4",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"orderBy\": [\r\n{\r\n\"field\": \"IBAN\",\r\n\"sortOrder\": \"ASC\"\r\n}\r\n],\r\n\"criteria\": {\r\n\"iban\": [\r\n\"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"\r\n]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple_criteria_iban_desc (C38950549)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a5f9df4-7b79-494c-8550-9f414a789ce5",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account order\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].iban > jsonData.accountList[1].iban);\r",
											"   \r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2e73d032-4080-493a-a51f-9e7b6e8397ff",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"orderBy\": [\r\n{\r\n\"field\": \"IBAN\",\r\n\"sortOrder\": \"DESC\"\r\n}\r\n],\r\n\"criteria\": {\r\n\"iban\": [\r\n\"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"\r\n]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_BIC (C41939550)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "caca9543-b02c-4b77-b525-0ceb0fe4a285",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let bic = \"CLXNCHZZMDB\"\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].bank.bic === bic);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b2e4873b-b34a-46d4-b125-19248635b620",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=30",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "30"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Account number (C37972701)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef0e49e3-9722-4754-9c2f-8261406d7be2",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accNumber = pm.environment.get(\"_tmp_accountNumber1\")\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountNumber=== accNumber);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0d8b840a-f2f6-44f2-ae45-38db4c55a1f1",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\n    \"accountNumber\": [\n      {{_tmp_accountNumber1}}\n    ]\n\t}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple names (C38950539)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3ec5e2b5-8037-460a-8133-9505ddb5e9b5",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accName = \"1704 USD\";\r",
											"    let accName1 = \"1501 CHF\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"       \r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"    pm.test(\"Returned proper account name\", () => {\r",
											"  \r",
											"    result = result && (jsonData.accountList[0].accountName === accName);\r",
											"    result = result && (jsonData.accountList[1].accountName === accName1);\r",
											"        \r",
											"    pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "522a3d7a-fcce-4683-bf3e-d05d5eca4fa1",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountName\": [\r\n      \"1704 USD\",\"1501 CHF\"\r\n    ]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple_Account_number (C38950540)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed8f1223-bd25-4c36-adfe-fd623ca43ba8",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accNumber1 = pm.environment.get(\"_tmp_accountNumber1\")\r",
											"    let accNumber2 = pm.environment.get(\"_tmp_accountNumber2\")\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountNumber=== accNumber1);\r",
											"        result = result && (jsonData.accountList[1].accountNumber=== accNumber2);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "df6164a4-9048-41fe-8d2c-2f88a9e75496",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountNumber\": [\r\n      {{_tmp_accountNumber1}},{{_tmp_accountNumber2}}\r\n    ]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_Current (C38950541)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1ea2efe-1c77-459d-8141-c4f90b77cc49",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType = \"CURRENT\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountType=== accType);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "99249a57-18aa-4cb3-aebb-45482a2cf7e4",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"CURRENT\"\r\n    ]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_SAVINGS (C38950542)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36685923-036d-4d66-a55c-9334afe4a56f",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType = \"SAVINGS\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountType=== accType);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41e05ade-199b-4704-bb9f-960dd74ec806",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"SAVINGS\"\r\n    ]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Search_startDate&endDate (C379050538)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff65ce7e-6f1b-4afc-b6da-c1ff34ca1cab",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e715947f-8860-46ca-81c8-71dd30c70831",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_Multiple (C41083339)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "91d64c85-3bc3-414f-a991-0088deb08508",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b1717061-1ece-47e9-955a-a4a107251916",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType1 = \"CURRENT\";\r",
											"    let accType2 = \"OTHER\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account type\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountType=== accType1);\r",
											"        result = result && (jsonData.accountList[3].accountType=== accType2);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"OTHER\",\"CURRENT\"\r\n    ]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_Other  (C41083337)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8649650-3660-4254-9ed1-c1f23a9f99b2",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType = \"OTHER\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountType=== accType);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5d197cda-eb63-4f23-b020-1d0da2009cc5",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"OTHER\"\r\n    ]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_iban (C38950543)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28d14043-8ddf-456b-a161-80a0e9d6912d",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let iban = pm.environment.get(\"_tmp_iban1\")\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].iban === iban);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "74b70b11-ae4e-4927-ab15-373cde0f161a",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"iban\": [\r\n      \"{{_tmp_iban1}}\"\r\n    ]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_multiple_iban (C38950544)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c16c2262-4255-47ba-a69e-783fd06458de",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let iban1 = pm.environment.get(\"_tmp_iban1\")\r",
											"    let iban2 = pm.environment.get(\"_tmp_iban2\")\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].iban === iban1);\r",
											"        result = result && (jsonData.accountList[1].iban === iban2);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "91f70c79-cc16-4b79-8adf-7ebe146080a6",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"iban\": [\r\n      \"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"\r\n    ]\r\n\r\n}\r\n}\r\n\r\n\r\n"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_ContractId (C38950547)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48e62492-50d2-43df-aaa1-077c9b1daeca",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a7311d6c-8987-4f27-b6d8-10578d6547a2",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"contractId\": [\r\n      \"{{_tmp_contractId}}\"\r\n    ]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_account_Name (C37949168)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "941ddc75-8136-4c3c-9341-33362e5d5e90",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accName = \"1704 USD\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"    pm.test(\"Returned proper account name\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountName === accName);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"        \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "714e3b16-6bef-4330-9e19-97106d0b462b",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountName\": [\r\n      \"1704 USD\"\r\n    ]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_id (C38950545)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97f8ec66-4f1f-4c45-8133-7548f78b8b7a",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2f95869b-4acc-4031-9ba5-df7fbc81f718",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"iban\": [\r\n      \"{{_tmp_id2}}\"\r\n    ]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search (C37972704)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b6a9139c-a4e3-4dc0-88b6-a5eb37155ec8",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"    \r",
											"    if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_transactionsId\",jsonData.transactionGroups[0].transactions[0].id);\r",
											"\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_transactionsId\");\r",
											"\r",
											"}\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c9ba83ea-827e-4706-b227-8e4d0fd4d694",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2020-06-01\"\n}\n}\n"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_overview",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6748f6f-f8a7-4161-97f1-9beab7cb7f65",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"  \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"    \r",
											"    if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_transactionsId\");\r",
											"\r",
											"}\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0fc2b5bb-3114-42b7-9a02-1323b2155a4e",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2020-01-01\",\n\"endDate\": \"2020-06-01\",\n\"transactionFlow\": \"OUTGOING\",\n\"transactionType\": \"BOTH\",\n\"amountFrom\": \"999.00\",\n\"amountTo\": \"51001.01\"\n\n}\n}\n"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_validation 400 (C38763416)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0a42016-1bab-4d9e-999c-5033c452ddc5",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 400 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"    \r",
											"    if (pm.response.code === 400) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_transactionsId\");\r",
											"\r",
											"}\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"error400\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(400)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1a392818-53fe-4a4c-8814-877e4acd1b21",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2020-01-01\",\n\"endDate\": \"2020-06-01\",\n\"transactionFlow\": \"OUTGOING\",\n\"transactionType\": \"BOTH\",\n\"amountFrom\": \"999.00\",\n\"amountTo\": \"51001.01\"\n\n}\n}\n"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{oldAccountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{oldAccountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_transaction 401 validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a100f057-fff2-4e65-babf-68568717eeb8",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 401 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(401);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"    \r",
											"    if (pm.response.code === 401) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_transactionsId\");\r",
											"\r",
											"}\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"error400\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(401)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "adf60e4b-4df2-43ee-b4a3-f36f774c1826",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{insufficient_token_value}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2020-01-01\",\n\"endDate\": \"2020-06-01\",\n\"transactionFlow\": \"OUTGOING\",\n\"transactionType\": \"BOTH\",\n\"amountFrom\": \"999.00\",\n\"amountTo\": \"51001.01\"\n\n}\n}\n"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_multiple_criteria (C38763407)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b18f80e3-5252-4286-8f08-10f6bfa8f3dc",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var transactionDate = new Date('2019-01-01').getTime();\r",
											"    var endDate = new Date('2019-04-18').getTime();\r",
											"    let amountFrom = pm.environment.get(\"100.01\");\r",
											"    let amountTo = pm.environment.get(\"5001.21\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Returned orders match to specified transactions startDate 2019-01-01 \", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (transactionDate < convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Returned orders match to specified transactions endDate 2019-04-18 and after\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (endDate > convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont from\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountFrom <= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont to\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountTo <= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4ee24616-ac73-45e8-8c50-4e892c8d36eb",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-04-18\",\n\n\"amountFrom\": 100.01,\n\"amountTo\": 50001.21\n}\n}\n"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_desc  (C38719010)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c9f56c0-e8ef-414f-b800-1ee8f803fcc3",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f0f18229-c09a-4a10-af5f-987c1cc963ef",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_pagination (C47473070)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "982aa672-41ae-45c1-a840-4139ea89095e",
										"exec": [
											"\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let number = 25;\r",
											"    let size = 3;\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"  \r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper response size\", () => {\r",
											"        result = result && (jsonData.page.size === size);\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"        pm.test(\"Returned proper number\", () => {\r",
											"        result = result && (jsonData.page.number === number);\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "855da026-54d6-4260-bb2e-896ff4d664e1",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": {{PrS:nextWorkingDay}}\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?page=25&size=3",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "25"
										},
										{
											"key": "size",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_size (C47473979)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b05eb0fa-592e-4fe0-8f96-2549cdacb306",
										"exec": [
											"\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let number = 10;\r",
											"    let size = 4;\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"  \r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper response size\", () => {\r",
											"        result = result && (jsonData.page.size === size);\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"        pm.test(\"Returned proper number\", () => {\r",
											"        result = result && (jsonData.page.number === number);\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "35f4a8a4-bee1-45e5-be87-e2522faa7dcd",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": {{PrS:nextWorkingDay}}\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?page=10&size=4",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10"
										},
										{
											"key": "size",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_startDate (C37786354)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47edd5fc-61ce-4354-8eca-5bb464bf26ca",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var transactionDate = new Date('2019-01-01').getTime();\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-01-01 and after\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (transactionDate < convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "df2955c6-e0f8-448c-a408-85f37ae7cb8d",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\"\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_Reference_Text (C37905050)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ee93683-7a40-4d07-bb0d-c3743e0a28c3",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var referenceText = null;\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"reference text is null\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var refText = new Date(jsonData.transactionGroups[0].transactions[0].referenceText[x].referenceText);\r",
											"            result = result && (referenceText === refText);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8a55af47-8d98-40dd-b25d-f5a4edab3b04",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"referenceText\":null\n\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_amountFrom (C37905040)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a7cee757-5bd4-4688-9cdd-5750689e547d",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"       let amountFrom = pm.environment.get(\"1000.01\");\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont from\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountFrom <= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c4e560f8-61e6-4f45-a076-78da64dbde9f",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"criteria\": {\r\n\"startDate\": \"2019-01-01\",\r\n\"amountFrom\":\"1000.01\"\r\n}\r\n}\r\n'date is set if contract don`t have transactions in last 30 days'"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "set_alias (C37905058)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95d8edd6-e406-4949-8584-bcdb49f5ab59",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"aliasSet\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e5ab3216-8b66-4174-bb1b-197d892a3ead",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"alias\": \"test\"\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountIdAlias}}/alias",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountIdAlias}}",
										"alias"
									]
								}
							},
							"response": []
						},
						{
							"name": "update alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc94654e-aa6a-4bdb-8db2-0df1aefe46a0",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"aliasSet\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "25578a34-1479-44d8-a6d7-0dbd6fc3fd08",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"alias\": \"test2\"\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountIdAlias}}/alias",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountIdAlias}}",
										"alias"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82fe2bb2-67ef-4fa0-b065-9ecd4e712212",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"aliasSet\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c0c6b9ab-85ce-4e62-9abe-a79b0ef56a15",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountIdAlias}}/alias",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountIdAlias}}",
										"alias"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2de3c224-a869-4e4f-a592-4e67d226e563",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accName = \"test\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"    pm.test(\"Returned proper account name\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountName === accName);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"        \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c59626fa-e5da-4d2d-8af9-c566190b639f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\n    \"accountName\": [\n      \"test\"\n    ]\n\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=20",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_updated_alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b365143-3487-4a70-87db-25595ad6685e",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accName = \"test2\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"    pm.test(\"Returned proper account name\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountName === accName);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"        \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9c6d4533-2467-4ed8-a1de-461d9b1709c3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\n    \"accountName\": [\n      \"test2\"\n    ]\n\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=20",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_alias_Postconditions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "98ec738f-469e-4817-abc1-b0f4bd24b2c8",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accName = \"1704 USD\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"    pm.test(\"Returned proper account name\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountName === accName);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"        \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d96d4745-e0a2-439d-8e9f-b59c4e276424",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\n    \"accountName\": null\n\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=20",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_amountTo (C37905041)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "efa0e4f0-886a-49e9-8be8-212aa2ce4db3",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bd6e0f4-b068-4bc3-a66c-93ab36ed5863",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"       let amountTo = pm.environment.get(\"150000.01\");\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont from\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountTo >= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"criteria\": {\r\n\"startDate\": \"2019-01-01\",\r\n\"amountTo\":\"150000.01\"\r\n}\r\n}\r\n'date is set if contract don`t have transactions in last 30 days'"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_endDate (C62786800)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "987bca23-ee6b-4306-b919-b773fae3cad1",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var transactionDate = new Date(\"2019-12-32\");\r",
											"    var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions endDate 2019-12-31\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (convertedtransactionDate > convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "49a13497-78b8-446d-beea-89e8b31ac963",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"endDate\": \"2019-12-31\"\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Search_endDate (C37786407)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c92cf18-dc4c-4439-a338-78f799503682",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c06697a8-0bda-4607-aa83-58f7313c7fa2",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"endDate\": \"2019-12-31\"\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_multiple_amontFrom_amountTo (C37905042)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa88b727-0129-48fb-b6c8-cdc1117cd221",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var transactionDate = new Date('2019-01-01').getTime();\r",
											"    var endDate = new Date('2019-04-18').getTime();\r",
											"    let amountFrom = pm.environment.get(\"100.01\");\r",
											"    let amountTo = pm.environment.get(\"1000.01\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"     pm.test(\"Check proper value for transactions amont from\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountFrom >= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont to\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountTo <= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cd0c69f2-3e73-40fe-9780-04d1d20c0adb",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"amountFrom\": 100.01,\n\"amountTo\": 1001.21\n}\n}\n"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_startDate&endDate (C37905042)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6d2c35a-9d92-486c-be54-ae70aa99ca2b",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var startDate = new Date('2019-01-01').getTime();\r",
											"    var endDate = new Date('2019-10-29').getTime();\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-01-01\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (startDate <= convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-10-29\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (endDate >= convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    });\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9c3d4e58-168a-44a7-b49c-b6bd859ba8a0",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": {{PrS:nextWorkingDay}}\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12f8dfbe-ec7b-4897-ba40-7dcd5e82cda0",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var startDate = new Date('2019-01-01').getTime();\r",
											"    var endDate = new Date('2019-10-29').getTime();\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-01-01\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (startDate <= convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-10-29\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (endDate >= convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    });\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "724f4ab0-0514-4bd7-acd2-181bfd0c985a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/permissions",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_permissions 400 validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b11a1acb-cf08-417d-9224-31f0fb991b23",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 400 Bad request is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"error400\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    pm.response.to.have.status(400)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "47ed4526-ad37-4f90-9535-e1dd9dc089a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{insufficient_token_value}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{oldAccountId}}/permissions",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{oldAccountId}}",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_permissions 401 validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53aa882d-c686-4dd5-a5c6-9e3d8d72cb28",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 403  is displayed\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"error400\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    pm.response.to.have.status(403)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7fcbd64e-380b-4ccb-8eda-d0ef9829d885",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{insufficient_token_value}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/permissions",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_details_get",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "737c281f-32c5-4426-bc2e-a98c22b80eee",
										"exec": [
											"\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of permissions is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountIdDetails\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3e2bf16c-8207-46e5-9dcf-7b6f68efb435",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-10-29\"\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84ad012b-1fa5-40e7-a9d6-489a5ff149a8",
										"exec": [
											"\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of balance is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"balanceSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e37e3ab-e632-4d2e-9a55-efce8256d041",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-10-29\"\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/balance",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"balance"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_balance 400 validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "820025ec-603d-442b-b575-ef7f9e911bde",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 400 Bad request is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"error400\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    pm.response.to.have.status(400)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d8a132bb-d1f7-43d0-8179-6787ccf3d2fe",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{oldAccountId}}/balance",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{oldAccountId}}",
										"balance"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_balance 401 validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de3ca080-8860-4fa7-b80d-03a9d4fe95ba",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 401  is displayed\", function () {\r",
											"        pm.response.to.have.status(401);\r",
											"    });\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"error400\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    pm.response.to.have.status(401)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1f685273-fafc-40e3-8808-7361eb16fc23",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{insufficient_token_value}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{oldAccountId}}/balance",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{oldAccountId}}",
										"balance"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_list_of_all_accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b842d033-e48a-4785-bded-e132fde30e80",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of portfolios is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsSchema = pm.environment.get(\"portfolioSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, portfolioSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last portfolioId as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_portfolioId\",jsonData.portfolios[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_portfolioId\");\r",
											"}\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "72fe38c1-d4c8-4ab4-83a4-e9be9f5dce0f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "camt",
					"item": [
						{
							"name": "(C39248697) camt053 download with endDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "87e2814a-c4be-4203-a071-9925f048fdbe",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(400)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cd582a36-c6d9-41de-85b7-176569411ddc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT053&endDate=2019-12-01",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT053"
										},
										{
											"key": "endDate",
											"value": "2019-12-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248700) camt053 download with startDate and endDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf3521a9-8c99-4390-8a6b-1d85bf7ee185",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(400)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13929e85-999c-4a07-bb4a-b15a39598efd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}\n"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/__ID__4f784e474f5a6e44796f485532613845314188387337d58602a8f88557af9ab6fdc09e727eb0b3/transactions/camt?isoType=CAMT053&startDate=2019-12-01&endDate=2020-03-01",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"__ID__4f784e474f5a6e44796f485532613845314188387337d58602a8f88557af9ab6fdc09e727eb0b3",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT053"
										},
										{
											"key": "startDate",
											"value": "2019-12-01"
										},
										{
											"key": "endDate",
											"value": "2020-03-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248701) camt053 download WDETAIL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bf05dd5-80c8-49d3-9e3a-c7e104d5947f",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(400)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9b353311-3543-4a8c-86ce-338caf1346d2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}\n"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT053&details=WDETAIL",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT053"
										},
										{
											"key": "details",
											"value": "WDETAIL"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248701) camt053 download WDETAIL Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f9c8890-e6db-48a2-bd06-01a8e7ba3f41",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(400)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4c5574d7-20c1-490e-b8f5-334dd98a9cda",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}\n"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT053&details=WDETAIL",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT053"
										},
										{
											"key": "details",
											"value": "WDETAIL"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248702) camt052 download",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee997964-cb9b-4c7f-b9bf-6fa06848a9d2",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bb421ec2-e7b6-457f-881b-446e0c482ee0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/banking-api/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT053",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"banking-api",
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT053"
										},
										{
											"key": "startDate",
											"value": "2020-03-01",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248698) camt052 download with startDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2d9d126-fbf1-47a6-9b0b-030607fb1b03",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d687c521-427c-4dc4-b796-5ca816bf4d61",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/transactions/camt?isoType=CAMT052&startDate=2020-01-01",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT052"
										},
										{
											"key": "startDate",
											"value": "2020-01-01"
										},
										{
											"key": "endDate",
											"value": "2020-03-09",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248705) camt052 download with startDate and endDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "31af9153-6e0c-4b02-bd49-d7b0f5965180",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b974fbe0-f721-42cb-8f32-e9f9b1f2cfd8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}\n"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT053&startDate=2019-01-06&endDate=2020-03-09",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT053"
										},
										{
											"key": "startDate",
											"value": "2019-01-06"
										},
										{
											"key": "endDate",
											"value": "2020-03-09"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248706) camt054 download",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09ba2883-cc00-459d-bf84-3882bd9f3350",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "917e14b9-6e34-4c15-8e15-04c16ecb25f3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT054",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT054"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248706) camt054 download Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81b39625-9e76-48bf-949a-ae12b0e8c0cf",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "736bce5c-c63c-4949-a10e-d3e57a1815e7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT054",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT054"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248710) camt053 download",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cde66a98-21a4-4a47-97b4-613117c016a0",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "29ed665c-557a-4a93-9601-0a163f79a3a9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT052",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT052"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Filter_account_by_customerId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8c94d31-abe9-41de-93a5-eac67b9d5dec",
								"exec": [
									"// Execute standard tests from PrS using eval()\r",
									"eval(globals.commonTests)();\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of portfolios is retrieved and response schema i validated\", function () {\r",
									"\r",
									"    var schemaValidationPassed = true;\r",
									"    //var cuacsSchema = pm.environment.get(\"portfolioSchema\");\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									"    \r",
									"    pm.test(\"Status 200 OK is displayed\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response schema is correct\", () => {\r",
									"\r",
									"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioSchema\",jsonData);\r",
									"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
									"    }); \r",
									"    \r",
									"    pm.response.to.have.status(200)\r",
									"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, portfolioSchema)).to.be.true;\r",
									"});\r",
									"\r",
									"// store last portfolioId as environment variable\r",
									"if (pm.response.code === 200) {\r",
									"    var jsonData = JSON.parse(responseBody)._embedded;\r",
									"    pm.environment.set(\"_tmp_portfolioId\",jsonData.portfolios[0].id);\r",
									"} else {\r",
									"    pm.environment.unset(\"_tmp_portfolioId\");\r",
									"}\r",
									"\r",
									"\r",
									"// Session navigate from PrS using eval()\r",
									"eval(globals.sessionNavigate)();\r",
									"\r",
									"// Reset reference to TR test cases\r",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bb00061e-0dce-422e-a23d-f018d2b08a7a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json; charset=UTF-8"
							},
							{
								"key": "accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios",
							"host": [
								"{{env_assets}}"
							],
							"path": [
								"assets",
								"portfolios",
								"{{tenantId_assets}}",
								"v1",
								"portfolios"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a0d37f69-9720-47f3-a6d4-6117079d8a1a",
						"type": "text/javascript",
						"exec": [
							"///*determine test case ID from request name*/",
							"//var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
							"////console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
							"//",
							"///*add current test case ID to list of already executed tests*/",
							"//eval(globals.testsExecuted)(testRailTestCases);",
							"//pm.globals.set(\"testRailTestCases\",testRailTestCases);",
							"//",
							"////store test case ID of current request for linking with Test Rail",
							"//pm.globals.set(\"_tr_\" + request.name, testRailTestCases);",
							"//",
							"////call global function to generate access token",
							"//eval(globals.generateAccessToken)();"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "286d87f0-9e2d-4062-b105-c02729476aa7",
						"type": "text/javascript",
						"exec": [
							"//eval(globals.sessionNavigate)();"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tools",
			"item": [
				{
					"name": "Generate token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a2ec4a0b-168e-406c-982c-17b39a4883c7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dbf5392c-58b7-4974-bdc8-0a92b1b68bb9",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.environment.set(\"access_token\", pm.response.text());",
									"});",
									"",
									"",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"tenant_id\": 19901,\n\"acsKey\": \"i6PiNObtdp2rCNW7mlV51BDSY4zAliSvBCyVsuML1000203567\",\n\"tenant_name\": \"CLX EBS\",\n\"user_name\": \"1284991501\",\n\"contractNo\": \"15054\",\n\"languageCode\": \"en\",\n\"bcNo\": \"12312\",\n\"authorities\": [\"DBAN_ADMIN\", \"DBAN_USER\"],\n\"client_id\": \"postman\",\n\"user_id\": 1284991501,\n\"scope\": [\n\"https://api.crealogix.com/dban\",\n\"read\",\n\"write\",\n\"https://api.crealogix.com/contracts/contract.advisor.readonly\",\n\"https://api.crealogix.com/contracts/contract.metadata.readonly\",\n\"https://api.crealogix.com/contracts/contract.person.readonly\",\n\"https://api.crealogix.com/payments/payment.initiate\",\n\"https://api.crealogix.com/payments/payment.read\",\n\"https://api.crealogix.com/payments/payment.write\",\n\"https://api.crealogix.com/assets/account.balance.readonly\",\n\"https://api.crealogix.com/assets/account.transaction.readonly\",\n\"https://api.crealogix.com/assets/account.permission.readonly\",\n\"https://api.crealogix.com/assets/account.metadata.readonly\",\n\"https://api.crealogix.com/assets/account.accountname.write\",\n\"https://api.crealogix.com/assets/account.accountimage.write\",\n\"https://api.crealogix.com/assets/cuac.readonly\",\n\"https://api.crealogix.com/assets/portfolio.readonly\",\n\"https://api.crealogix.com/messages/securemail.write\",\n\"https://api.crealogix.com/messages/securemail.read\",\n\"https://api.crealogix.com/messages/document.category.read\",\n\"https://api.crealogix.com/messages/document.category.write\",\n\"https://api.crealogix.com/messages/document.write\",\n\"https://api.crealogix.com/messages/document.read\",\n\"https://api.crealogix.com/brokerage/security.readonly\",\n\"https://api.crealogix.com/brokerage/tradingplace.readonly\",\n\"https://api.crealogix.com/brokerage/depository.readonly\",\n\"https://api.crealogix.com/brokerage/order.readonly\",\n\"https://api.crealogix.com/brokerage/order.write\",\n\"https://api.crealogix.com/deeplink/domains\",\n\"https://api.crealogix.com/deeplink/links\"\n],\n\"loginName\": \"1284991501\",\n\"exp\": 32479694642,\n\"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\n\"iat\": 1553855569\n}"
						},
						"url": {
							"raw": "{{env_security_testToken}}",
							"host": [
								"{{env_security_testToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAuthTestTokenK8S",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "10f4661c-516c-4860-9d7f-fe17e3737c01",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3c206a08-ed6c-42b5-88a1-c251d59f6825",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.environment.set(\"access_token\", pm.response.text());",
									"});",
									"",
									"",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"tenant_id\": {{tenantId_security}},\n\"tenant_name\": \"CLX EBS\",\n\"user_name\": \"{{userId_security}}\",\n\"contractNo\": \"{{contractNo_security}}\",\n\"languageCode\": \"en\",\n\"bcNo\": \"{{bcNo_security}}\",\n\"authorities\": [\"DBAN_ADMIN\", \"DBAN_USER\"],\n\"client_id\": \"postman\",\n\"user_id\": {{userId_security}},\n\"scope\": [\n\"https://api.crealogix.com/dban\",\n\"read\",\n\"write\",\n\"https://api.crealogix.com/contracts/contract.advisor.readonly\",\n\"https://api.crealogix.com/contracts/contract.metadata.readonly\",\n\"https://api.crealogix.com/contracts/contract.person.readonly\",\n\"https://api.crealogix.com/payments/payment.initiate\",\n\"https://api.crealogix.com/payments/payment.read\",\n\"https://api.crealogix.com/payments/payment.write\",\n\"https://api.crealogix.com/assets/account/read\",\n\"https://api.crealogix.com/assets/account.transaction/read\",\n\"https://api.crealogix.com/assets/account.name\",\n\"https://api.crealogix.com/assets/account.image\",\n\"https://api.crealogix.com/assets/cuac/read\",\n\"https://api.crealogix.com/assets/portfolio/read\",\n\"https://api.crealogix.com/messages/securemail.write\",\n\"https://api.crealogix.com/messages/securemail.read\",\n\"https://api.crealogix.com/messages/document.category.read\",\n\"https://api.crealogix.com/messages/document.category.write\",\n\"https://api.crealogix.com/messages/document.write\",\n\"https://api.crealogix.com/messages/document.read\",\n\"https://api.crealogix.com/brokerage/security/read\",\n\"https://api.crealogix.com/brokerage/tradingplace/read\",\n\"https://api.crealogix.com/brokerage/depository/read\",\n\"https://api.crealogix.com/brokerage/order/read\",\n\"https://api.crealogix.com/brokerage/order\",\n\"https://api.crealogix.com/deeplink/domains\",\n\"https://api.crealogix.com/deeplink/links\"\n],\n\"loginName\": \"{{userId_security}}\",\n\"exp\": 32479694642,\n\"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\n\"iat\": 1553855569\n}"
						},
						"url": {
							"raw": "{{env_security_testToken}}",
							"host": [
								"{{env_security_testToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAuthTestTokenK8S old&new scope",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cd70ea3b-8a1b-48ea-83fa-1134a06682e5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cbb3292e-edeb-4a0d-a385-8e9509b35077",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.environment.set(\"access_token\", pm.response.text());",
									"});",
									"",
									"",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"tenant_id\": {{tenantId_security}},\n\"tenant_name\": \"CLX EBS\",\n\"user_name\": \"{{userId_security}}\",\n\"contractNo\": \"{{contractNo_security}}\",\n\"languageCode\": \"en\",\n\"bcNo\": \"{{bcNo_security}}\",\n\"authorities\": [\"DBAN_ADMIN\", \"DBAN_USER\"],\n\"client_id\": \"postman\",\n\"user_id\": {{userId_security}},\n\"scope\": [\n\"https://api.crealogix.com/dban\",\n\"read\",\n\"write\",\n\"https://api.crealogix.com/contracts/contract.advisor.readonly\",\n\"https://api.crealogix.com/contracts/contract.metadata.readonly\",\n\"https://api.crealogix.com/contracts/contract.person.readonly\",\n\"https://api.crealogix.com/payments/payment.initiate\",\n\"https://api.crealogix.com/payments/payment.read\",\n\"https://api.crealogix.com/payments/payment.write\",\n\"https://api.crealogix.com/assets/account.balance.readonly\",\n\"https://api.crealogix.com/assets/account.transaction.readonly\",\n\"https://api.crealogix.com/assets/account.permission.readonly\",\n\"https://api.crealogix.com/assets/account.metadata.readonly\",\n\"https://api.crealogix.com/assets/account.accountname.write\",\n\"https://api.crealogix.com/assets/account.accountimage.write\",\n\"https://api.crealogix.com/assets/account/read\",\n\"https://api.crealogix.com/assets/account.transaction/read\",\n\"https://api.crealogix.com/assets/account.name\",\n\"https://api.crealogix.com/assets/account.image\",\n\"https://api.crealogix.com/assets/cuac/read\",\n\"https://api.crealogix.com/assets/portfolio/read\",\n\"https://api.crealogix.com/messages/securemail.write\",\n\"https://api.crealogix.com/messages/securemail.read\",\n\"https://api.crealogix.com/messages/document.category.read\",\n\"https://api.crealogix.com/messages/document.category.write\",\n\"https://api.crealogix.com/messages/document.write\",\n\"https://api.crealogix.com/messages/document.read\",\n\"https://api.crealogix.com/brokerage/security/read\",\n\"https://api.crealogix.com/brokerage/tradingplace/read\",\n\"https://api.crealogix.com/brokerage/depository/read\",\n\"https://api.crealogix.com/brokerage/order/read\",\n\"https://api.crealogix.com/brokerage/order\",\n\"https://api.crealogix.com/brokerage/security.readonly\",\n\"https://api.crealogix.com/brokerage/tradingplace.readonly\",\n\"https://api.crealogix.com/brokerage/depository.readonly\",\n\"https://api.crealogix.com/brokerage/order.readonly\",\n\"https://api.crealogix.com/brokerage/order.write\",\n\"https://api.crealogix.com/deeplink/domains\",\n\"https://api.crealogix.com/deeplink/links\"\n],\n\"loginName\": \"{{userId_security}}\",\n\"exp\": 32479694642,\n\"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\n\"iat\": 1553855569\n}"
						},
						"url": {
							"raw": "{{env_security_testToken}}",
							"host": [
								"{{env_security_testToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAuthTestTokenK8S Oldscope",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f1d9bc20-3c6b-4e12-b91e-150bcde6dd03",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1b081d94-2ea9-459d-a4a7-4a90fd8f9054",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.environment.set(\"access_token\", pm.response.text());",
									"});",
									"",
									"",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"tenant_id\": {{tenantId_security}},\n\"tenant_name\": \"CLX EBS\",\n\"user_name\": \"{{userId_security}}\",\n\"contractNo\": \"{{contractNo_security}}\",\n\"languageCode\": \"en\",\n\"bcNo\": \"{{bcNo_security}}\",\n\"authorities\": [\"DBAN_ADMIN\", \"DBAN_USER\"],\n\"client_id\": \"postman\",\n\"user_id\": {{userId_security}},\n\"scope\": [\n    \"https://api.crealogix.com/dban\",\n    \"read\",\n    \"https://api.crealogix.com/contracts/contract.advisor.readonly\",\n    \"https://api.crealogix.com/assets/account.balance.readonly\",\n    \"https://api.crealogix.com/contracts/contract.metadata.readonly\",\n    \"https://api.crealogix.com/contracts/contract.person.readonly\",\n    \"https://api.crealogix.com/payments/payment.initiate\",\n    \"https://api.crealogix.com/assets/account.transaction.readonly\",\n    \"https://api.crealogix.com/assets/account.permission.readonly\",\n    \"write\",\n    \"https://api.crealogix.com/assets/account.metadata.readonly\",\n    \"https://api.crealogix.com/referencedata/countries\",\n    \"https://api.crealogix.com/referencedata/currencies\",\n    \"https://api.crealogix.com/referencedata/organisation-units\"\n  ],\n\"loginName\": \"{{userId_security}}\",\n\"exp\": 32479694642,\n\"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\n\"iat\": 1553855569\n}"
						},
						"url": {
							"raw": "{{env_security_testToken}}",
							"host": [
								"{{env_security_testToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAuthTestTokenK8S_insufficientToken",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "29386ded-43e2-41e3-b216-dae310b90347",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9fcd700d-6222-4662-b8fd-0e1a917840cd",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.environment.set(\"access_token\", pm.response.text());",
									"});",
									"",
									"",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"tenant_id\": {{tenantId_security}},\n\"tenant_name\": \"CLX EBS\",\n\"user_name\": \"{{userId_security}}\",\n\"contractNo\": \"{{contractNo_security}}\",\n\"languageCode\": \"en\",\n\"bcNo\": \"{{bcNo_security}}\",\n\"authorities\": [\"DBAN_ADMIN\", \"DBAN_USER\"],\n\"client_id\": \"postman\",\n\"user_id\": {{userId_security}},\n\"scope\": [\n\"https://api.crealogix.com/dban\",\n\"read\",\n\"write\",\n\"https://api.crealogix.com/contracts/contract.advisor.readonly\",\n\"https://api.crealogix.com/contracts/contract.metadata.readonly\",\n\"https://api.crealogix.com/contracts/contract.person.readonly\",\n\"https://api.crealogix.com/payments/payment.initiate\",\n\"https://api.crealogix.com/payments/payment.read\",\n\"https://api.crealogix.com/payments/payment.write\",\n\"https://api.crealogix.com/assets/account.balance.readonly\",\n\"https://api.crealogix.com/assets/account.transaction.readonly\",\n\"https://api.crealogix.com/assets/account.permission.readonly\",\n\"https://api.crealogix.com/assets/account.metadata.readonly\",\n\"https://api.crealogix.com/assets/account.accountname.write\",\n\"https://api.crealogix.com/assets/account.accountimage.write\",\n\"https://api.crealogix.com/assets/cuac.readonly\",\n\"https://api.crealogix.com/assets/portfolio.readonly\",\n\"https://api.crealogix.com/messages/securemail.write\",\n\"https://api.crealogix.com/messages/securemail.read\",\n\"https://api.crealogix.com/messages/document.category.read\",\n\"https://api.crealogix.com/messages/document.category.write\",\n\"https://api.crealogix.com/messages/document.write\",\n\"https://api.crealogix.com/messages/document.read\",\n\"https://api.crealogix.com/brokerage/security.readonly\",\n\"https://api.crealogix.com/brokerage/tradingplace.readonly\",\n\"https://api.crealogix.com/brokerage/depository.readonly\",\n\"https://api.crealogix.com/brokerage/order.readonly\",\n\"https://api.crealogix.com/brokerage/order.write\",\n\"https://api.crealogix.com/deeplink/domains\",\n\"https://api.crealogix.com/deeplink/links\"\n],\n\"loginName\": \"{{userId_security}}\",\n\"exp\": 32479694642,\n\"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\n\"iat\": 1553855569\n}"
						},
						"url": {
							"raw": "{{env_security_testToken}}",
							"host": [
								"{{env_security_testToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clean TestRail Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96759b80-4bfe-417e-953a-39c819302107",
								"exec": [
									"// Prepare list of TestRail tests for 'Clean TestRail Run' request",
									"//var execTests = pm.globals.get(\"testRailTestsInRun\");",
									"var execTests = data.executedTests;",
									"console.log(\"TestRail, tests executed in last run: \" + execTests);",
									"execTests = execTests.replace(/C/g, \"\");",
									"//console.log(\"TestRail, first cleanup: \" + execTests);",
									"execTests = execTests.replace(/ /g, \", \");",
									"//console.log(\"TestRail, second cleanup: \" + execTests);",
									"execTests = execTests.replace(/,,/g, \",\");",
									"pm.globals.set(\"testRailTestsInRun\", execTests); ",
									"",
									"var array = JSON.parse(\"[\" + execTests + \"]\"); //convert string to array",
									"for(let i = 0; i < 10; i++){",
									"    let runId = JSON.parse(responseBody)[i].id;",
									"    let runName = JSON.parse(responseBody)[i].name;",
									"    let runSuiteId = JSON.parse(responseBody)[i].suite_id;",
									"    if (runName === \"Postman API Tests\") { //determine proper run",
									"        //console.log(runId);   ",
									"        console.log(\"TestRail run '\" + runId + \"' updating for tests: \" + execTests);",
									"        pm.sendRequest({",
									"            url: \"https://testrail.ebs.crealogix.net/index.php?/api/v2/update_run/\" + runId,",
									"            method: \"POST\",",
									"            header: {",
									"                \"Authorization\": \"Basic bWlsYW4ua2FyYWRlZ2xpY0BjcmVhbG9naXguY29tOlNTQ25hcG9saTEyMzQ1Njc4OQ==\",",
									"                \"Content-Type\": \"application/json\"",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ include_all: false, case_ids: array })",
									"        \t}",
									"        });",
									"        break;",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "91c4cbb9-29ed-48d4-8927-8b1d8080b90f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "SSCnapoli123456789",
									"type": "string"
								},
								{
									"key": "username",
									"value": "milan.karadeglic@crealogix.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json; charset=UTF-8"
							},
							{
								"key": "accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://testrail.ebs.crealogix.net/index.php?/api/v2/get_runs/8",
							"protocol": "https",
							"host": [
								"testrail",
								"ebs",
								"crealogix",
								"net"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "/api/v2/get_runs/8",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tests.old",
			"item": [
				{
					"name": "Accounts_Search (C41736193)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4b7b799d-e106-4391-89a5-c6bb0fb7d351",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search\"",
									"    ]; ",
									"    pm.environment.set(\"request_body\", ('{}'));",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6bce59c4-3f14-4157-92d3-545676e72096",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_BIC (C41939550)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c3c643c3-2a00-4fe6-bc8d-873ff4306cff",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search\",",
									"        \"Account_Search_BIC\"",
									"    ]; ",
									"    pm.environment.set(\"request_body\", ('{}'));",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Account_Search_BIC\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "63ea257c-e1db-454f-99f6-a165c7c93f5a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_contract iban desc (C38950549)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c70d04b0-ea5b-4d1b-8540-f6a16b7e7fa2",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_Multiple_criteria_iban_desc\"",
									"    ]; ",
									"",
									"    pm.globals.set(\"_tr_Account_Search_Multiple_criteria_iban_desc\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6b581df0-0d84-46a0-b9aa-d024707cf6fd",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_contract iban asc (C38950548)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "95632933-44a9-4f5f-9b91-adbe339645d4",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_Multiple_criteria_iban_asc\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_Multiple_criteria_iban_asc\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4a0f7040-d929-42c0-8835-72a57904df78",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_Account_Number (C37972701)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ccfab234-cb5f-4152-af6e-1de6c5006888",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"Account_Search_Account number\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Account_Search_Account number\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "acd427ee-43cb-45c1-a932-5a32f42f7869",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_Multiple_Names (C38950539)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4291fbe0-cf49-48c1-9d05-634ca6edcd06",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_Multiple names\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_Multiple names\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "beaaf80c-c932-4db3-96f7-22087495f1f4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_AccountType_Current (C38950541)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e31f3020-949a-47a0-8ac0-491ad8bd8514",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_AccountType_Current\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_AccountType_Current\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3d968af3-9624-4214-bc5c-5b41e2dbaf11",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_AccountType_SAVINGS (C38950542)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b98ea911-16a6-4adf-9b76-053a45b91ac8",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_AccountType_SAVINGS\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_AccountType_SAVINGS\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f04da337-db4a-418c-84af-f09078d31a4c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_Multiple_Account_Number (C38950540)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f13e6e83-f9c2-4c76-9cf6-54a247945b6f",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"Account_Search_Multiple_Account_number\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Account_Search_Multiple_Account_number\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "95eaa8c5-c686-452b-b07b-39fee36920da",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_EndDate (C37786407)?????",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dc658e14-8a14-42d8-94cc-28e8ba7ed77b",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"Account_Search_Multiple_Account_number\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Account_Search_Multiple_Account_number\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a0ba7296-d8eb-4936-bd39-8b56c9ba64a3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_startDate&EndDate (C379050538)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "24920518-b15f-4439-9da4-386ec73b3001",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_Search_startDate&endDate\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_AccountId_Search_startDate&endDate\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "423ad7d8-0922-4451-b3fb-74fec42e3603",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_AccountType_Multiple (C41083339)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "771d1650-b851-4244-a84f-d5942e7abed8",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_AccountType_Multiple\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_AccountType_Multiple\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a1cc0f6a-f96d-40be-891f-177b3f148df3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_AccountType_Other (C41083337)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4c45fe49-572a-4310-a300-56baa8906ddc",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_AccountType_Current\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_AccountType_Current\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "519f3546-7e1e-473e-bb14-c72d3ebd9529",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_iban (C38950543)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fd539c0b-16ea-4a9d-adb7-af57ba70242c",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"Account_Search_iban\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Account_Search_iban\",testRailTestCases);",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6cfb094a-a1f2-434a-a15a-9ecce6050c26",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_multiple_iban (C38950544)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bb4ca9aa-102d-4732-b370-9aae7b870020",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_multiple_iban\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_multiple_iban\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "449578ac-45de-4ebc-89a1-8af384454219",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_contractId (C38950547)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "352cf57a-4be1-4bfd-a086-04fb4fa0aec7",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"Account_Search_ContractId\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Account_Search_ContractId\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5467cf9d-a5e2-4437-8374-2b9c52aa1475",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "transactions search pagination (C47473070)/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5f933441-20c0-4e70-abfd-c98007e8e95d",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_Transaction_Search_pagination\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_AccountId_Search_startDate&endDate\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a1a036e6-780c-4809-8aea-173fd34f7dae",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search_by_startdate (C37786354)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b812b252-1924-4951-874b-17dfc026ecb1",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search_startDate\"",
									"    ]; ",
									"",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_startDate\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dde97787-0d72-4677-9343-67ef9a454076",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order_by_amount_asc (C37972704)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bde2179e-d967-465c-81c1-7ba45c7dc0b7",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "04cd9ef4-199a-4e09-8876-512b789b3583",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order_by_amount_desc (C38719010)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d3f677d2-9eaf-419a-9329-9bd801e24323",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search_desc\"",
									"    ]; ",
									"",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_desc\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c6d1d3d1-83aa-44fd-b96f-094925ee6c2c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "List of custody accounts (C41736189)///",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5359ac9c-5399-4144-a54c-2f90b5f0c6f1",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get custody accounts\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get custody accounts\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "82267b8c-86ae-4443-991e-cb191bf0ce45",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "List of portfolios (C43024137)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1c8a358b-ca57-4fa3-ae6d-0e8611316a88",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_portfolios_list\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_portfolios_list\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bc69ff2c-01d2-4d57-a9e6-80329c7c7413",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Portfolio details (C43024139)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5bfa82a0-2f5a-46e1-80e3-5e45a56ae612",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_portfolios_details_list\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_portfolios_details_list\",testRailTestCases);",
									"",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3916be6c-aee7-4dfa-b46f-3c7d0c8d8e84",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Portfolio performance details (C43181629)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7b801584-396f-48b0-829c-ed32955a13ac",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_portfolios_list\",",
									"        \"Get_performance_details\"",
									"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_portfolios_list\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Get_performance_details\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c46e70d3-2219-4ad5-8a8a-8c77ede7979f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Portfolio assets details (C43181622)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ad871072-ad6b-495c-b5cd-94a0576fe45f",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_portfolios_list\",",
									"        \"Get_assets_list\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_portfolios_list\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Get_assets_list\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ceb07844-6935-485f-97c5-f69d141fe1a0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Maturity details (C43181624)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "85a5807e-ff99-4656-8695-78989b7d8b83",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_maturity_list\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_maturity_list\",testRailTestCases);",
									" ",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bb9c1245-c4b3-44df-86e7-f2b54827cf78",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check proper custody account (C41853576)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0ef0573b-4bb3-47e0-9ebb-55d076f98184",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get custody accounts\",",
									"        \"Get_customer_info_by_his_ID\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get custody accounts\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Get_customer_info_by_his_ID\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "93d1f904-672d-4368-ae7b-24f39537b73c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check proper custody account searched by PortfolioId (C41853577)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "07ecee2b-f5a4-4304-97a0-72151147aa50",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get custody accounts\",",
									"        \"Get_customer_info_by_his_ID\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get custody accounts\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Get_customer_info_by_his_ID\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7dd3ac73-b799-4b90-9860-611acb5761c2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Custody account details (C41853582)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "24c8d27f-bb6b-4e4b-8b7b-9faa5e2bfeee",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_customer_info_by_his_ID\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_customer_info_by_his_ID\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3e244e40-f82a-48e1-b62f-793e8ef9a04f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Individual transaction (C33706455)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4d5813cf-af48-497a-ab15-f9bc29fe6089",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search\",",
									"        \"get_single_transaction\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_get_single_transaction\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "025c9253-ed2f-49d4-b9d5-802c29f16941",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Checking pagination (C47473979)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b2d40889-8129-4fcc-920e-9488dd3b7925",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search_pagination\",",
									"        \"AccountId_Transaction_Search_size\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_pagination\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_size\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9914d532-1a6d-4e85-b883-d1b0894f8a98",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Transaction_search overview (C38763410)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dd997a33-b259-4921-8e1a-d98b1372238d",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search\",",
									"        \"get_single_transaction\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_get_single_transaction\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a639177f-ad36-47ea-a10b-75ed87076c7f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Transactions 400 (C38763416)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b595a4-fea6-4f19-9411-21876b4f5afe",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_Transaction_Search_validation 400\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_validation 400\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cb9da4a5-d176-4ab0-8ec9-6491299d6df3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Transactions 401 (C38763419)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "36e91ad2-02f1-41c8-9cf7-ff663ab457d9",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestTokenK8S_insuficientToken\",",
									"        \"AccountId_transaction 401 validation\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_getAuthTestTokenK8S_insuficientToken\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_transaction 401 validation\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "00032355-174a-408c-b40d-3379413b4db8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "set new alias (C37905058)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dcd0ae20-3345-4d51-88de-665d86c5c58f",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"set_alias\",",
									"        \"Account_Search_alias\",",
									"        \"Account_Search_alias_Postconditions\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_set_alias\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Account_Search_alias\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Account_Search_alias_Postconditions\",testRailTestCases);",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "488f2edd-426e-43d6-a142-83d0d65924ce",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "update alias (C37905064)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0acd41b9-4e51-4a2a-8f2b-658b585ac51d",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"set_alias\",",
									"        \"update alias\",",
									"        \"Account_Search_updated_alias\",",
									"        \"Account_Search_alias_Postconditions\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_set_alias\",testRailTestCases);",
									"    pm.globals.set(\"_tr_update alias\",testRailTestCases);",
									"",
									"    pm.globals.set(\"_tr_Account_Search_updated_alias\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Account_Search_alias_Postconditions\",testRailTestCases);",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b56fb90a-0283-4a89-9532-a0cb8516b777",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete alias (C37905066)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3e39029f-794b-49a5-bad0-a6a4ba4e8ca8",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"set_alias\",",
									"        \"delete alias\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_set_alias\",testRailTestCases);",
									"    pm.globals.set(\"_tr_delete alias\",testRailTestCases);",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d63d8fdb-2956-4c5b-b077-c6331429b9e3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Permissions (C36212106)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "32ae6289-bbd1-4923-9b13-0f3096ea29f8",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_permissions\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_permissions\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e72b92a6-faab-45f0-b38a-a72a3f2531a3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Permissions 400 (C38778991)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3137dcc6-b0fd-43ba-98f4-01ea67a17cc8",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_permissions 400 validation\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_permissions 400 validation\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4e3f1821-d562-42c5-a804-8aa0c4deafcf",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Permissions 401 (C38920771)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fc322aab-53ec-46f3-a7d9-703cd619c7b6",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestTokenK8S_insuficientToken\",",
									"        \"AccountId_permissions 401 validation\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_getAuthTestTokenK8S_insuficientToken\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_permissions 401 validation\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1aa27a46-ca0a-4098-a215-6ea83a8e73f3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "INCOMING transaction flow(C37905043).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "aeede468-c3ea-4ab4-8a02-084987305c96",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"Incoming transactions\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Incoming transactions\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "61f2adaf-8b57-4859-8baa-343bf71b5f7c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "OUTGOING transaction flow(C37905044).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "66d17d6e-4991-4be6-8572-e13971e225d9",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"OUTGOING transactions\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_OUTGOING transactions\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6677ab35-2dac-4f2e-bee5-09ea51ea22ad",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "BOTH transaction flow (C37905045).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "414025e6-4252-4556-b018-ff3faf2ed9d0",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"BOTH transactions\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_BOTH transactions\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a467df20-d861-4508-b717-cae02d126257",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "BOTH transactionType (C37905048).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "37c6dd17-0fb2-4b01-b575-f03a68fb9634",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"BOTH transactionsType\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_BOTH transactionsType\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "13ed9701-f194-48d5-89b6-9c418fc07e06",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "BOOKED transactionType (C37905046).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dba86cf1-d6b3-47d8-b315-838b01e7c342",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"BOOKED transactions\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_BOOKED transactions\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "21bbd8ff-b77a-4f6c-b9bd-7f333070265c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "UNBOOKED transaction type (C37905047).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "831f7aa7-b605-46a1-be09-508f6ddd4d52",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"UNBOOKED transactions\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_UNBOOKED transactions\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c15ab930-db82-4120-81aa-4b5445498acf",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Balance (C35075337)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "03b7945d-97a5-4d8e-a34c-ec0b8b3b8e7b",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_balance\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_balance\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7165e661-7f1e-4ec0-89ca-29dc21fe487c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Balance 400 (C38920909)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7ddab69e-1bfc-4bd3-94e1-f92ebc19c22e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_balance 400 validation\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_balance 400 validation\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "918dc839-5bec-4c72-bdf7-af67acfa73b4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Balance 401 (C38920911)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8dd7384-aab3-4ed0-ad1d-52a03ce31834",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestTokenK8S_insuficientToken\",",
									"        \"AccountId_balance 401 validation\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_getAuthTestTokenK8S_insuficientToken\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_balance 401 validation\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "df321e57-d551-4117-8602-023606024658",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by accountName (C37949168)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "26e3bec5-871c-473d-b3bf-a18d546804b6",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_balance\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_balance\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "047016a3-67eb-4056-8600-f698637efd51",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Transaction details search by reference text (C37905050)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c27ec311-d4b3-44f9-ad44-5ac506ad2d4f",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search_Reference_Text\"",
									"    ]; ",
									"",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_Reference_Text\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4e66bc03-00c3-446d-ae59-3d2be77be55e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Custody account transactions details (C43024136)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0103a781-a593-4e9b-b04e-f91ead6e8049",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get custody account transactions details\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get custody account transactions details\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d5dac159-7e40-4be3-8bd6-01619f50e74d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Custody account position list (C41853583)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cf2a3f1c-a230-42e9-99d4-75294af8340f",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get positons for cuacsId\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get positons for cuacsId\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "697371a1-40ec-447f-8dbc-ea67ee094df4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Custody account position details (C42065196)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "06282468-14cd-455c-aaf0-51f19b1f8033",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get custody account positions\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get custody account positions\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aded960e-a88c-415e-976e-e04440bb58a4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Display listing by listing ID (C43995816)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "40c611e6-146d-4b27-80b9-a51e28c442c5",
								"exec": [
									"//testRailTestCases = \"C43995816\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get listings\",",
									"        \"Get listing by listing ID\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get listings\",\"[precondition]\");",
									"    pm.globals.set(\"_tr_Get listing by listing ID\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Account transaction sorted by amount (C37972704)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c2980909-af6e-4417-84ed-87a17b24bece",
								"exec": [
									"//testRailTestCases = \"C43995816\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    \"Account_Searchs\",",
									"    \"AccountId_Transaction_Search\"",
									"];",
									"pm.globals.set(\"_tr_Account_Search\");",
									"pm.globals.set(\"_tr_AccountId_Transaction_Search\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\", testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "List trading places (C43995818)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1d43f3ad-74a4-4bd2-aa3d-5fb0bc0b742b",
								"exec": [
									"//var testRailTestCases = \"C43995818\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get trading places\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get trading places\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ff19fce8-d96b-4663-a7bc-c8476d4d6e46",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Display trading place by tradingPlaceId (C43995821)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "906be9d1-b2a0-484c-924a-ac0443e442af",
								"exec": [
									"//testRailTestCases = \"C43995821\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get trading places\",",
									"        \"Get trading place by tradingPlaceId\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get trading places\",\"[precondition]\");",
									"    pm.globals.set(\"_tr_Get trading place by tradingPlaceId\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5e0ccfa6-aeb8-4531-acc5-5c9736870d3c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "_Test session close",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2371138b-c90a-41fc-b042-d18785d7b25a",
								"exec": [
									"var requestsToRun = ",
									"    [",
									"        \"Clean TestRail Run\"",
									"    ]; ",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "188d854f-c658-4530-9245-86dec63fb6cd",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "cc5a8bfe-6f0e-4fb1-bc26-4a554d68c885",
						"type": "text/javascript",
						"exec": [
							"/*determine test case ID from request name*/",
							"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
							"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
							"",
							"/*add current test case ID to list of already executed tests*/",
							"eval(globals.testsExecuted)(testRailTestCases);",
							"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
							"",
							"//store test case ID of current request for linking with Test Rail",
							"pm.globals.set(\"_tr_\" + request.name, testRailTestCases);",
							"",
							"//call global function to generate access token",
							"eval(globals.generateAccessToken)();"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5bfa77c2-5b3c-4b60-977c-0c16db27e334",
						"type": "text/javascript",
						"exec": [
							"eval(globals.sessionNavigate)();"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Manual tests",
			"item": [],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "82e43c4e-b4b4-4dca-87e5-6216c22fb32b",
				"type": "text/javascript",
				"exec": [
					"//************************************************************************************************",
					"// variable initialization************************************************************************",
					"//************************************************************************************************",
					"var test = pm.environment.get(\"testRailTestsInRun\");",
					"if( !test) {",
					"    pm.environment.set(\"testRailTestsInRun\",\"\");",
					"}",
					"",
					"//************************************************************************************************",
					"// connect to TestRail ***************************************************************************",
					"//************************************************************************************************",
					"pm.globals.set(\"TESTRAIL_DOMAIN\",\"testrail.ebs.crealogix.net\");",
					"pm.globals.set(\"TESTRAIL_USERNAME\",\"milan.karadeglic@crealogix.com\"); ",
					"pm.globals.set(\"TESTRAIL_APIKEY\",\"Q4MlDw1e70Kxh1g1YPq9-Dg0abDWer.pSWcVWcxO4\");",
					"pm.globals.set(\"TESTRAIL_PROJECTID\",8); ",
					"pm.globals.set(\"TESTRAIL_TITLE\",\"Postman API Tests\");",
					"",
					"",
					"",
					"//************************************************************************************************",
					"//global function to determine next day/next working day *****************************************",
					"//************************************************************************************************",
					"var moment = require('moment');",
					"let nextDay = moment().add(\"days\",1).format(\"YYYY-MM-DD\"); //next day in specified format",
					"switch (moment().add(\"days\",1).format(\"dddd\")){",
					"    case \"Sunday\":",
					"        var nextWorkingDay = moment().add(\"days\",2).format(\"YYYY-MM-DD\");",
					"        break;",
					"    case \"Saturday\":",
					"        var nextWorkingDay = moment().add(\"days\",3).format(\"YYYY-MM-DD\");",
					"        break;",
					"    default:",
					"        var nextWorkingDay = moment().add(\"days\",1).format(\"YYYY-MM-DD\");",
					"}",
					"pm.globals.set('PrS:nextDay', JSON.stringify(nextDay));",
					"pm.globals.set('PrS:nextWorkingDay', JSON.stringify(nextWorkingDay));",
					"",
					"",
					"/* function for making assets search*/",
					"postman.setGlobalVariable(\"assetsSearchFunction\", (NextPrecondition) => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/accounts/${pm.environment.get(\"tenantId_assets\")}/v4/accounts/search?size=30`,",
					"        method: \"POST\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"               ",
					"                       ",
					"            })",
					"        }",
					"    ",
					"}, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"_tmp_accountId\",res.json().accountList[res.json().page.totalElements-1].id);",
					"            console.log(\"New account ID: \" + pm.environment.get(\"_tmp_accountId\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_accountId2\",res.json().accountList[1].id);",
					"\t\t\tconsole.log(\"New account ID2: \" + pm.environment.get(\"_tmp_accountId2\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_accountIdAlias\",res.json().accountList[2].id);",
					"\t\t\tconsole.log(\"New account _tmp_accountIdAlias: \" + pm.environment.get(\"_tmp_accountIdAlias\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_accountNumber1\",res.json().accountList[0].accountNumber);",
					"\t\t\tconsole.log(\"New _tmp_accountNumber1: \" + pm.environment.get(\"_tmp_accountNumber1\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_accountNumber2\",res.json().accountList[1].accountNumber);",
					"\t\t\tconsole.log(\"New _tmp_accountNumber2: \" + pm.environment.get(\"_tmp_accountNumber2\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_iban1\",res.json().accountList[0].iban);",
					"\t\t\tconsole.log(\"New _tmp_iban1: \" + pm.environment.get(\"_tmp_iban1\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_iban2\",res.json().accountList[1].iban);",
					"\t\t\tconsole.log(\"New _tmp_iban2: \" + pm.environment.get(\"_tmp_iban2\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_id1\",res.json().accountList[0].id);",
					"\t\t\tconsole.log(\"New _tmp_id1: \" + pm.environment.get(\"_tmp_id1\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_id2\",res.json().accountList[1].id);",
					"\t\t\tconsole.log(\"New _tmp_id2: \" + pm.environment.get(\"_tmp_id2\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_contractId\",res.json().accountList[0].permissions[0].contractId);",
					"\t\t\tconsole.log(\"New _tmp_contractId: \" + pm.environment.get(\"_tmp_contractId\"));",
					"",
					"            switch (NextPrecondition){",
					"                case \"assetsTransactionSearchFunction\":",
					"                    eval(globals.assetsTransactionSearchFunction)();",
					"                    break;",
					"                default:",
					"            }",
					"        }                          ",
					"    });",
					"});",
					"",
					"/* function for making cuacs request*/",
					"postman.setGlobalVariable(\"cuacsRequest\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/cuacs/${pm.environment.get(\"tenantId_assets\")}/v1/cuacs`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"               ",
					"                       ",
					"            })",
					"        }",
					"    ",
					"}, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json()._embedded);",
					"            ",
					"        } else {",
					"            pm.environment.set(\"_tmp_cuacsId\",res.json.cuacs[0].id);",
					"            console.log(\"New custody account ID: \" + pm.environment.get(\"_tmp_cuacsId\"));",
					"\t\t\t",
					"\t\t\t",
					"\t\t\t",
					"        }                          ",
					"    });",
					"});",
					"",
					"/* function for making portfolio request*/",
					"postman.setGlobalVariable(\"portfolioRequest\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/portfolios/${pm.environment.get(\"tenantId_assets\")}/v1/portfolios`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"               ",
					"                       ",
					"            })",
					"        }",
					"    ",
					"}, function(err, res) {",
					"        if (err) {",
					"            //console.log(\"First:\");",
					"            //console.log(err);",
					"            //console.log(\"Second:\");",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"_tmp_portfolioId\",res.json()._embedded.portfolios[1].id);",
					"            console.log(\"New portfolio ID: \" + pm.environment.get(\"_tmp_portfolioId\"));",
					"\t\t\tpm.environment.set(\"_tmp_customerId\",res.json()._embedded.portfolios[1].customerId);",
					"            console.log(\"New customer ID: \" + pm.environment.get(\"_tmp_customerId\"));",
					"        }                          ",
					"    });",
					"});",
					"",
					"/* function for making assets transaction search*/",
					"postman.setGlobalVariable(\"assetsTransactionSearchFunction\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/accounts/${pm.environment.get(\"tenantId_assets\")}/v4/accounts/${pm.environment.get(\"_tmp_accountId\")}/transactions/search`,",
					"        method: \"POST\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw:JSON.stringify({ ",
					"\t    \torderBy: [",
					"\t\t\t\t{",
					"\t\t\t\t\tfield: \"AMOUNT\",",
					"\t\t\t\t\tsortOrder:\"ASC\"",
					"\t\t\t\t}]",
					"\t\t\t,",
					"\t\t\tcriteria: {",
					"\t\t\t\t\tstartDate:\"2019-01-01\",",
					"\t\t\t\t\tendDate:\"2020-06-01\"",
					"\t\t\t\t\t\t}         \t",
					"            })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            let noData = (res.json.transactionGroups === undefined || res.json.transactionGroups.length === 0);     ",
					"            if(!noData){",
					"                pm.environment.set(\"_tmp_transactionsId\",res.json.transactionGroups[0].transactions[0].id);",
					"                console.log(\"New transaction ID is set: \" + pm.environment.get(\"_tmp_transactionsId\"));",
					"            } else {",
					"                pm.environment.unset(\"_tmp_transactionsId\");",
					"                console.log(\"!ERROR!: Response is empty, no transaction ID to store!\");",
					"            }",
					"        }              ",
					"    });",
					"});",
					"",
					"postman.setGlobalVariable(\"commonTests\", () => {",
					"    pm.test(\"Response must be valid with/with out a body and with proper status code\", function () {",
					"        if ([\"GET\",\"POST\",\"PUT\"].indexOf(request.method) > -1) {",
					"            pm.response.to.not.be.error;",
					"            pm.response.to.be.withBody;",
					"            pm.response.to.be.json;",
					"            pm.response.to.have.jsonBody();",
					"            pm.response.to.not.have.jsonBody('error');",
					"            pm.response.to.have.header('Content-Type', 'application/hal+json;charset=UTF-8');",
					"        } else {",
					"            pm.response.to.not.be.withBody;",
					"        }",
					"        switch(request.method){",
					"            case \"POST\":",
					"                pm.response.to.have.status(201);",
					"                break;",
					"            case \"PUT\":",
					"                pm.response.to.have.status(200);",
					"                break;",
					"            case \"GET\":",
					"                pm.response.to.have.status(200);",
					"                break;",
					"            case \"DELETE\":",
					"                pm.response.to.have.status(204);",
					"                break;",
					"        }        ",
					"    });",
					"    //pm.test(\"Response time is below 1000ms\", function () {",
					"    //    pm.expect(pm.response.responseTime).to.be.below(1000);",
					"    //});",
					"});",
					"",
					"postman.setGlobalVariable(\"assertValidCreditorAgent\", () => {",
					"    pm.expect(address).to.be.an('object').with.keys('name1', 'name2', 'street', 'city', 'country');",
					"    pm.expect(address.name1).to.be.a('string').and.not.empty;",
					"    pm.expect(address.name2).to.be.a('string').and.not.empty;",
					"    pm.expect(address.street).to.be.a('string').and.not.empty;",
					"    pm.expect(address.city).to.be.a('string').and.not.empty;",
					"    pm.expect(address.country).to.be.a('string').with.lengthOf(2).and.match(/[A-Z]+/);",
					"});",
					"",
					"",
					"",
					"postman.setGlobalVariable(\"sessionInit\", (testSession, sessionName) => {",
					"    //session init section",
					"    console.log(request.name + \", initialization: \" + testSession + \", global var: \" + sessionName);",
					"    console.log(request.name + \", executing: \" + testSession[0]);",
					"    ",
					"    // Select first test from session to be executed",
					"    postman.setNextRequest(testSession[0]); ",
					"    testSession.shift();",
					"    if (testSession.length === 0) {",
					"        console.log(request.name + \", test session is empty, unset \" + sessionName);",
					"        pm.globals.unset(sessionName);",
					"        console.log(request.name + \", terminate tests execution list\");",
					"    } else {",
					"        pm.globals.set(sessionName, testSession);",
					"        console.log(request.name + \" for \" + sessionName + \", updated list of tests to be executed: \" + testSession);",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"sessionNavigate\", () => {",
					"    console.log(request.name + \", entering ...\");",
					"    if (pm.globals.get(\"requestsToRun\") === undefined){",
					"        console.log(request.name + \", requestsToRun is undefined\");",
					"        pm.globals.set(\"testRailTestCases\",\"\");",
					"        console.log(request.name + \", reset global var: testRailTestCases\");    ",
					"        if (pm.globals.get(\"testSession\") === undefined){",
					"            console.log(request.name + \", testSession is undefined\");",
					"            //here >> export list of tests executed",
					"            var tests = pm.environment.get(\"testRailTestsInRun\");",
					"            tests = tests.replace(/C/g, \"\");",
					"            tests = tests.replace(/ /g, \", \");",
					"            tests = tests.replace(/,,/g, \",\");",
					"            console.log(\"TestRail tests executed executed in this run: \" + tests);",
					"            console.log(\"The end\");",
					"            postman.setNextRequest(null);",
					"        } else {",
					"        var testSession = pm.globals.get(\"testSession\");",
					"        console.log(request.name + \", checking what to run: \" + testSession[0]);",
					"        postman.setNextRequest(testSession[0]); // Run: GET SWIFT payment",
					"        testSession.shift();",
					"        if (testSession.length === 0) {",
					"            pm.globals.unset(\"testSession\");",
					"            console.log(request.name + \", terminate execution list\");",
					"        } else {",
					"            pm.globals.set(\"testSession\", testSession);",
					"            console.log(request.name + \", updated list of tests to be executed: \" + testSession);",
					"        }}",
					"    } else {",
					"    var requestsToRun = pm.globals.get(\"requestsToRun\");",
					"    console.log(request.name + \", checking what to run: \" + requestsToRun[0]);",
					"    postman.setNextRequest(requestsToRun[0]); ",
					"    requestsToRun.shift();",
					"    if (requestsToRun.length === 0) {",
					"        pm.globals.unset(\"requestsToRun\");",
					"        console.log(request.name + \", terminate requests execution list\");",
					"    } else {",
					"        pm.globals.set(\"requestsToRun\", requestsToRun);",
					"        console.log(request.name + \", updated list of requests to be executed: \" + requestsToRun);",
					"    }}",
					"});",
					"",
					"postman.setGlobalVariable(\"cleanup\", () => {",
					"    const clean = [\"requestsToRun\", \"testSession\"];",
					"    for(let i = 0; i < clean.length; ++i){",
					"        pm.globals.unset(clean[i]);",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"testsExecuted\", (listOfExecutedTests) => {",
					"    let tests =  pm.environment.get(\"testRailTestsInRun\");",
					"    //console.log(\"TestRail tests stored in 'testRailTestsInRun': \" + tests);",
					"    if (tests.length > 0) {",
					"        tests = tests + \" \"",
					"    }",
					"    tests = tests + listOfExecutedTests;",
					"    //console.log(\"TestRail tests to be stored to 'testRailTestsInRun': \" + tests);",
					"    pm.environment.set(\"testRailTestsInRun\",tests);",
					"    //console.log(\"TestRail tests executed so far: \" + tests);",
					"});",
					"",
					"postman.setGlobalVariable(\"extractTestCaseIDFromRequestName\", () => {",
					"    let n = request.name.lastIndexOf(\"(\");",
					"    return request.name.substr(n + 1, request.name.length - n - 2);",
					"});",
					"",
					"postman.setGlobalVariable(\"schemaValidator\", (schema, jsonData) => {",
					"    //old, deprecated schema validationimplementation",
					"    //pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;",
					"    ",
					"    //new schema validation implementation",
					"    ",
					"    var schemaValidationPassed = true;",
					"    var serviceSchema = pm.environment.get(schema);",
					"    //var jsonData = JSON.parse(pm.responseBody);",
					"",
					"    var validationResult = tv4.validateMultiple(jsonData, serviceSchema, true, true);",
					"    for(var i =0; i<validationResult.errors.length;i++){",
					"        console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  ",
					"        //Skipping all \"Invalid type\" errors as they are expected with current service implementations",
					"        schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);",
					"        //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);",
					"    }    ",
					"    return schemaValidationPassed;",
					"}); ",
					"",
					"postman.setGlobalVariable(\"isTest\", () => {",
					"    let reqPurpose = pm.globals.get(\"_tr_\" + request.name);",
					"    //console.log(request.name + \" has purpose: \" + reqPurpose);",
					"    if ([\"[cleanUp]\",\"[preCondition]\",\"[postCondition]\"].indexOf(reqPurpose) > -1) {",
					"        //console.log(\"Conclusion: NOT a test\");",
					"        return false;",
					"    } else {",
					"        //console.log(\"Conclusion: IS a test\");",
					"        return true;",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"getQueryParams\", (uri) => {",
					"  var vars = [];",
					"",
					"  // Get the start index of the query string",
					"  var qsi = uri.indexOf('?');",
					"  if (qsi == -1)",
					"    return vars;",
					"",
					"  // Get the query string",
					"  var qs = uri.slice(qsi + 1);",
					"",
					"  // Check if there is a subsection reference",
					"  sri = qs.indexOf('#');",
					"  if (sri >= 0)",
					"    qs = qs.slice(0, sri);",
					"",
					"  // Build the associative array",
					"  var hashes = qs.split('&');",
					"  for (var i = 0; i < hashes.length; i++) {",
					"    var sep = hashes[i].indexOf('=');",
					"    if (sep <= 0)",
					"      continue;",
					"    var key = decodeURIComponent(hashes[i].slice(0, sep));",
					"    var val = decodeURIComponent(hashes[i].slice(sep + 1));",
					"    vars[key] = val;",
					"  }",
					"  const jar = pm.cookies.jar();",
					"",
					"  jar.clear(pm.request.url, function (error) {",
					"  // error - <Error>",
					"  });",
					"",
					"  return vars;",
					"  ",
					"});",
					"",
					"postman.setGlobalVariable(\"randomizeVariables\", () => {",
					"    let newmanRun = pm.globals.get(\"newmanRun\");",
					"    if (newmanRun != 1) {",
					"        console.log(\"Randomizing variables ...\");",
					"        pm.environment.set(\"endToEndId\",JSON.stringify(pm.variables.replaceIn(\"{{$randomLoremSlug}}\")));",
					"        pm.environment.set(\"unstructured\",JSON.stringify(pm.variables.replaceIn(\"{{$guid}}\")));",
					"        pm.environment.set(\"instructionIdentification\",JSON.stringify(pm.variables.replaceIn(\"{{$randomBitcoin}}\")));",
					"        pm.environment.set(\"name\",JSON.stringify(pm.variables.replaceIn(\"{{$randomFullName}}\")));",
					"        pm.environment.set(\"adrLine1\",JSON.stringify(pm.variables.replaceIn(\"{{$randomStreetName}}\")));",
					"        pm.environment.set(\"adrLine2\",JSON.stringify(pm.variables.replaceIn(\"{{$randomStreetAddress}}\")));",
					"        pm.environment.set(\"streetName\",JSON.stringify(pm.variables.replaceIn(\"{{$randomStreetName}}\")));",
					"        pm.environment.set(\"townName\",JSON.stringify(pm.variables.replaceIn(\"{{$randomCity}}\")));",
					"        pm.environment.set(\"country\",JSON.stringify(pm.variables.replaceIn(\"{{$randomCountryCode}}\")));",
					"        pm.environment.set(\"buildingNm\",pm.variables.replaceIn('{{$randomInt}}'));",
					"        pm.environment.set(\"postalCode\",pm.variables.replaceIn('{{$randomInt}}'));",
					"        pm.environment.set(\"buildingNmStr\",JSON.stringify(pm.variables.replaceIn('{{$randomInt}}')));",
					"        pm.environment.set(\"postalCodeStr\",JSON.stringify(pm.variables.replaceIn('{{$randomInt}}')));",
					"        console.log(\"... randomize is finished\");",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"generateAccessToken\", () => {",
					"    const getAccessTokenRequest = {",
					"        url: pm.environment.get(\"env_security_testToken\"),",
					"        method: \"POST\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json'",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"                tenant_id: pm.environment.get(\"tenantId_security\"), ",
					"                acsKey: \"i6PiNObtdp2rCNW7mlV51BDSY4zAliSvBCyVsuML1000203567\",",
					"                tenant_name: pm.environment.get(\"tenantName_security\"),",
					"                user_name: pm.environment.get(\"userId_security\"),",
					"                contractNo: pm.environment.get(\"contractNo_security\"),",
					"                language: \"en\",",
					"                bcNo: pm.environment.get(\"bcNo_security\"),",
					"                authorities: [\"DBAN_ADMIN\", \"DBAN_USER\"],",
					"                client_id: \"postman\",",
					"                user_id: pm.environment.get(\"userId_security\"),",
					"                loginName: pm.environment.get(\"userId_security\"),",
					"                exp: 32479694642,   ",
					"                jti: \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\", ",
					"                iat: 1553855569,   ",
					"                scope: [",
					"                    \"https://api.crealogix.com/dban\",",
					"                    \"read\",",
					"                    \"write\",",
					"                    \"https://api.crealogix.com/contracts/contract.advisor.readonly\",",
					"                    \"https://api.crealogix.com/contracts/contract.metadata.readonly\",",
					"                    \"https://api.crealogix.com/contracts/contract.person.readonly\",",
					"                    \"https://api.crealogix.com/payments/payment.initiate\",",
					"                    \"https://api.crealogix.com/payments/payment.read\",",
					"                    \"https://api.crealogix.com/payments/payment.write\",",
					"                    \"https://api.crealogix.com/assets/account/read\",",
					"                    \"https://api.crealogix.com/assets/account.transaction/read\",",
					"                    \"https://api.crealogix.com/assets/account.name\",",
					"                    \"https://api.crealogix.com/assets/account.image\",",
					"                    \"https://api.crealogix.com/assets/cuac/read\",",
					"                    \"https://api.crealogix.com/assets/portfolio/read\",",
					"                    \"https://api.crealogix.com/messages/securemail.write\",",
					"                    \"https://api.crealogix.com/messages/securemail.read\",",
					"                    \"https://api.crealogix.com/messages/document.category.read\",",
					"                    \"https://api.crealogix.com/messages/document.category.write\",",
					"                    \"https://api.crealogix.com/messages/document.write\",",
					"                    \"https://api.crealogix.com/messages/document.read\",",
					"                    \"https://api.crealogix.com/brokerage/security/read\",",
					"                    \"https://api.crealogix.com/brokerage/tradingplace/read\",",
					"                    \"https://api.crealogix.com/brokerage/depository/read\",",
					"                    \"https://api.crealogix.com/brokerage/order/read\",",
					"                    \"https://api.crealogix.com/brokerage/order\",",
					"                    \"https://api.crealogix.com/deeplink/domains\",",
					"                    \"https://api.crealogix.com/deeplink/links\"",
					"                ]",
					"            })",
					"        }",
					"    };",
					"    pm.environment.set(\"request\", JSON.stringify(getAccessTokenRequest));",
					"    ",
					"    pm.sendRequest(getAccessTokenRequest, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"access_token\", res.text());",
					"        }         ",
					"        /*",
					"        pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
					"            pm.expect(err).to.not.be.ok;",
					"            pm.expect(res).to.have.property('code', 200);",
					"            pm.expect(res).to.have.property('status', 'OK');          ",
					"        });",
					"        */",
					"    });",
					"});",
					"",
					"",
					"",
					"/* function for creating Swift payment*/",
					"postman.setGlobalVariable(\"paymentSwiftCreate\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"environment\")}/banking-api/payment/swift/${pm.environment.get(\"tenant\")}/v2/credittransfer`,",
					"        method: \"POST\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"                storeOnly: false, ",
					"                locked: false,",
					"                categoryPurposeCode: \"SALA\",",
					"                paymentInformation: {",
					"                    endToEndId: JSON.parse(pm.environment.get(\"endToEndId\")),",
					"                    instructedAmount: {",
					"                        currency: {",
					"                            code: \"GBP\"",
					"                        },",
					"                        value: 1",
					"                    },",
					"                    remittanceInformation: {",
					"                        \"unstructured\": JSON.parse(pm.environment.get(\"unstructured\")),",
					"                        \"structured\": JSON.parse(pm.environment.get(\"structuredRemittanceRF\"))",
					"                    },",
					"                    instructionIdentification: JSON.parse(pm.environment.get(\"instructionIdentification\")),",
					"                    requestedExecutionDate: JSON.parse(pm.globals.get(\"PrS:nextWorkingDay\")),",
					"                    instructionPriority: \"NORMAL\",",
					"                    creditor: {",
					"                        \"name\": JSON.parse(pm.environment.get(\"name\")),",
					"                        \"address\": {",
					"                            \"adrLine1\": JSON.parse(pm.environment.get(\"adrLine1\")),",
					"                            \"adrLine2\": JSON.parse(pm.environment.get(\"adrLine2\")),",
					"                            \"streetName\": JSON.parse(pm.environment.get(\"streetName\")),",
					"                            \"buildingNm\": pm.environment.get(\"buildingNm\"),",
					"                            \"postalCode\": pm.environment.get(\"postalCode\"),",
					"                            \"townName\": JSON.parse(pm.environment.get(\"townName\")),",
					"                            \"country\": JSON.parse(pm.environment.get(\"country\"))",
					"                        }",
					"                    },",
					"                    creditorAccountNo: JSON.parse(pm.environment.get(\"creditorAccountNoSWIFT\")),",
					"                    creditorAgent: {",
					"                        bic: JSON.parse(pm.environment.get(\"creditorAgentBicSWIFT\"))",
					"                    },",
					"                    debtor: {",
					"                        name: JSON.parse(pm.environment.get(\"debtorAccountName\")),",
					"                        address: {",
					"                            streetName: JSON.parse(pm.environment.get(\"debtorStreetName\")),",
					"                            postalCode: JSON.parse(pm.environment.get(\"debtorPostalCode\")),",
					"                            townName: JSON.parse(pm.environment.get(\"debtorTownName\"))",
					"                        }",
					"                    },",
					"                    debtorAccountNo: JSON.parse( pm.environment.get(\"debtorAccountNo\"))",
					"                }         ",
					"            })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"newPaymentSwiftID\", res.json().paymentId);",
					"            console.log(\"New payment ID: \" + pm.environment.get(\"newPaymentSwiftID\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for deleting Swift payment*/",
					"postman.setGlobalVariable(\"paymentSwiftDelete\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"environment\")}/banking-api/payment/swift/${pm.environment.get(\"tenant\")}/v2/credittransfer/${pm.environment.get(\"newPaymentSwiftID\")}`,",
					"        method: \"DELETE\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.unset(\"newPaymentSwiftID\");",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for creating Sepa payment*/",
					"postman.setGlobalVariable(\"paymentSepaCreate\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"environment\")}/banking-api/payment/sepa/${pm.environment.get(\"tenant\")}/v2/credittransfer`,",
					"        method: \"POST\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"                storeOnly: false, ",
					"                locked: false,",
					"                categoryPurposeCode: \"SALA\",",
					"                paymentInformation: {",
					"                    endToEndId: JSON.parse(pm.environment.get(\"endToEndId\")),",
					"                    instructedAmount: {",
					"                        currency: {",
					"                            code: \"EUR\"",
					"                        },",
					"                        value: 312.00",
					"                    },",
					"                    remittanceInformation: {",
					"                        \"unstructured\": JSON.parse(pm.environment.get(\"unstructured\")),",
					"                        \"structured\": JSON.parse(pm.environment.get(\"structuredRemittanceRF\"))",
					"                    },",
					"                    instructionIdentification: JSON.parse(pm.environment.get(\"instructionIdentification\")),",
					"                    requestedExecutionDate: JSON.parse(pm.globals.get(\"PrS:nextWorkingDay\")),",
					"                    instructionPriority: \"NORMAL\",",
					"                    creditor: {",
					"                        \"name\": JSON.parse(pm.environment.get(\"name\")),",
					"                        \"address\": {",
					"                            \"adrLine1\": JSON.parse(pm.environment.get(\"adrLine1\")),",
					"                            \"adrLine2\": JSON.parse(pm.environment.get(\"adrLine2\")),",
					"                            \"streetName\": JSON.parse(pm.environment.get(\"streetName\")),",
					"                            \"buildingNm\": pm.environment.get(\"buildingNm\"),",
					"                            \"postalCode\": pm.environment.get(\"postalCode\"),",
					"                            \"townName\": JSON.parse(pm.environment.get(\"townName\")),",
					"                            \"country\": JSON.parse(pm.environment.get(\"country\"))",
					"                        }",
					"                    },",
					"                    creditorAccountNo: JSON.parse(pm.environment.get(\"creditorAccountNoSEPA\")),",
					"                    creditorAgent: {",
					"                        bic: JSON.parse(pm.environment.get(\"creditorAgentBicSEPA\"))",
					"                    },",
					"                    debtor: {",
					"                        name: JSON.parse(pm.environment.get(\"debtorAccountName\")),",
					"                        address: {",
					"                            streetName: JSON.parse(pm.environment.get(\"debtorStreetName\")),",
					"                            postalCode: JSON.parse(pm.environment.get(\"debtorPostalCode\")),",
					"                            townName: JSON.parse(pm.environment.get(\"debtorTownName\"))",
					"                        }",
					"                    },",
					"                    debtorAccountNo: JSON.parse( pm.environment.get(\"debtorAccountNo\"))",
					"                }         ",
					"            })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"newPaymentSepaID\", res.json().paymentId);",
					"            console.log(\"New payment ID: \" + pm.environment.get(\"newPaymentSepaID\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for creating Sepa (standing order) payment*/",
					"postman.setGlobalVariable(\"paymentSepaSoCreate\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"environment\")}/banking-api/payment/sepa/${pm.environment.get(\"tenant\")}/v2/credittransfer`,",
					"        method: \"POST\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"                storeOnly: false, ",
					"                locked: false,",
					"                categoryPurposeCode: \"SALA\",",
					"                paymentInformation: {",
					"                    instructedAmount: {",
					"                        currency: {",
					"                            code: \"EUR\"",
					"                        },",
					"                        value: 9.99",
					"                    },",
					"                    remittanceInformation: {",
					"                        \"unstructured\": JSON.parse(pm.environment.get(\"unstructured\")),",
					"                        \"structured\": JSON.parse(pm.environment.get(\"structuredRemittanceRF\"))",
					"                    },",
					"                    instructionIdentification: JSON.parse(pm.environment.get(\"instructionIdentification\")),",
					"                    requestedExecutionDate: JSON.parse(pm.globals.get(\"PrS:nextWorkingDay\")),",
					"                    instructionPriority: \"NORMAL\",",
					"                    creditor: {",
					"                        \"name\": JSON.parse(pm.environment.get(\"name\")),",
					"                        \"address\": {",
					"                            \"adrLine1\": JSON.parse(pm.environment.get(\"adrLine1\")),",
					"                            \"adrLine2\": JSON.parse(pm.environment.get(\"adrLine2\")),",
					"                            \"streetName\": JSON.parse(pm.environment.get(\"streetName\")),",
					"                            \"buildingNm\": pm.environment.get(\"buildingNm\"),",
					"                            \"postalCode\": pm.environment.get(\"postalCode\"),",
					"                            \"townName\": JSON.parse(pm.environment.get(\"townName\")),",
					"                            \"country\": JSON.parse(pm.environment.get(\"country\"))",
					"                        }",
					"                    },",
					"                    creditorAccountNo: JSON.parse(pm.environment.get(\"creditorAccountNoSEPA\")),",
					"                    creditorAgent: {",
					"                        bic: JSON.parse(pm.environment.get(\"creditorAgentBicSEPA\"))",
					"                    },",
					"                    debtor: {",
					"                        name: JSON.parse(pm.environment.get(\"debtorAccountName\")),",
					"                        address: {",
					"                            streetName: JSON.parse(pm.environment.get(\"debtorStreetName\")),",
					"                            postalCode: JSON.parse(pm.environment.get(\"debtorPostalCode\")),",
					"                            townName: JSON.parse(pm.environment.get(\"debtorTownName\"))",
					"                        }",
					"                    },",
					"                    debtorAccountNo: JSON.parse(pm.environment.get(\"debtorAccountNo\")),",
					"                    standingOrder: {",
					"                        firstOn: JSON.parse(pm.globals.get(\"PrS:futureWorkingDay\")),",
					"                        lastOn: JSON.parse(pm.globals.get(\"PrS:futurePlusWorkingDay\")),",
					"                        beforeHoliday: true,",
					"                        interval: \"WEEKLY\",",
					"                        active: true,",
					"                        ultimo: false",
					"                    }",
					"                }         ",
					"            })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"newPaymentSepaID\", res.json().paymentId);",
					"            console.log(\"New payment ID: \" + pm.environment.get(\"newPaymentSepaID\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for deleting Sepa payment*/",
					"postman.setGlobalVariable(\"paymentSepaDelete\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"environment\")}/banking-api/payment/sepa/${pm.environment.get(\"tenant\")}/v2/credittransfer/${pm.environment.get(\"newPaymentSepaID\")}`,",
					"        method: \"DELETE\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.unset(\"newPaymentSepaID\");",
					"        }              ",
					"    });",
					"});",
					"",
					"",
					"//************************************************************************************************",
					"// Schema for 'assetsListDetails'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const assetsListDetails = ",
					"{",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"    \"$id\": \"http://example.com/example.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The Root Schema\",",
					"    \"description\": \"The root schema comprises the entire JSON document.\",",
					"    \"required\": [",
					"        \"id\",",
					"        \"assetNumber\",",
					"        \"assetType\",",
					"        \"amount\"",
					"    ],",
					"    \"properties\": {",
					"        \"id\": {",
					"            \"$id\": \"#/properties/id\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Id Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"__ID__736666683854316a6b494f784436514f89eb3c7e757e6e6cce6ef081dbd7fd929f2dc9\"",
					"            ]",
					"        },",
					"        \"assetNumber\": {",
					"            \"$id\": \"#/properties/assetNumber\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Assetnumber Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"1000001704\"",
					"            ]",
					"        },",
					"        \"assetType\": {",
					"            \"$id\": \"#/properties/assetType\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Assettype Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"ACCOUNT\"",
					"            ]",
					"        },",
					"        \"amount\": {",
					"            \"$id\": \"#/properties/amount\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Amount Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"                {",
					"                    \"value\": 123493.65,",
					"                    \"currencyIsoCode\": \"USD\"",
					"                }",
					"            ],",
					"            \"required\": [",
					"                \"currencyIsoCode\",",
					"                \"value\"",
					"            ],",
					"            \"properties\": {",
					"                \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/amount/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"USD\"",
					"                    ]",
					"                },",
					"                \"value\": {",
					"                    \"$id\": \"#/properties/amount/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": 0,",
					"                    \"examples\": [",
					"                        123493.65",
					"                    ]",
					"                }",
					"            }",
					"        }",
					"    }",
					"}",
					"pm.environment.set(\"assetsListDetails\", assetsListDetails);",
					"",
					"",
					"//************************************************************************************************",
					"// Schema for 'assetsList'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const assetsList = ",
					"{",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"    \"$id\": \"http://example.com/example.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The Root Schema\",",
					"    \"description\": \"The root schema comprises the entire JSON document.\",",
					"    \"required\": [",
					"        \"_embedded\",",
					"        \"page\"",
					"    ],",
					"    \"properties\": {",
					"        \"_embedded\": {",
					"            \"$id\": \"#/properties/_embedded\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The _embedded Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"                {",
					"                    \"assets\": [",
					"                        {",
					"                            \"amount\": {",
					"                                \"currencyIsoCode\": \"GBP\",",
					"                                \"value\": 30308022.29",
					"                            },",
					"                            \"id\": \"__ID__306e513838756c61716c39766b6c3555bb32d1ccd955ff7aab9ac3e08bcea348da8e483186f4c4\",",
					"                            \"assetNumber\": \"1286841506\",",
					"                            \"assetType\": \"ACCOUNT\"",
					"                        },",
					"                        {",
					"                            \"amount\": {",
					"                                \"value\": 9959.94,",
					"                                \"currencyIsoCode\": \"USD\"",
					"                            },",
					"                            \"id\": \"__ID__306e513838756c61716c39766b6c3555bb32d1ccd955fd8b6a4035b48babb2e18a7b6cbb4beb0b\",",
					"                            \"assetNumber\": \"1286841517\",",
					"                            \"assetType\": \"ACCOUNT\"",
					"                        },",
					"                        {",
					"                            \"id\": \"__ID__306e513838756c61716c39766b6c3555bb33d5cddd5cfd2818088a0d01e714013dd045ffaaf1fa\",",
					"                            \"assetNumber\": \"771286841506\",",
					"                            \"assetType\": \"CUSTODY_ACCOUNT\",",
					"                            \"amount\": {",
					"                                \"value\": 7718.65,",
					"                                \"currencyIsoCode\": \"GBP\"",
					"                            }",
					"                        }",
					"                    ]",
					"                }",
					"            ],",
					"            \"required\": [",
					"                \"assets\"",
					"            ],",
					"            \"properties\": {",
					"                \"assets\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/assets\",",
					"                    \"type\": \"array\",",
					"                    \"title\": \"The Assets Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": [],",
					"                    \"items\": {",
					"                        \"$id\": \"#/properties/_embedded/properties/assets/items\",",
					"                        \"type\": \"object\",",
					"                        \"title\": \"The Items Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": {},",
					"                        \"examples\": [",
					"                            {",
					"                                \"id\": \"__ID__306e513838756c61716c39766b6c3555bb32d1ccd955ff7aab9ac3e08bcea348da8e483186f4c4\",",
					"                                \"assetNumber\": \"1286841506\",",
					"                                \"assetType\": \"ACCOUNT\",",
					"                                \"amount\": {",
					"                                    \"value\": 30308022.29,",
					"                                    \"currencyIsoCode\": \"GBP\"",
					"                                }",
					"                            },",
					"                            {",
					"                                \"assetType\": \"ACCOUNT\",",
					"                                \"amount\": {",
					"                                    \"value\": 9959.94,",
					"                                    \"currencyIsoCode\": \"USD\"",
					"                                },",
					"                                \"id\": \"__ID__306e513838756c61716c39766b6c3555bb32d1ccd955fd8b6a4035b48babb2e18a7b6cbb4beb0b\",",
					"                                \"assetNumber\": \"1286841517\"",
					"                            },",
					"                            {",
					"                                \"amount\": {",
					"                                    \"currencyIsoCode\": \"GBP\",",
					"                                    \"value\": 7718.65",
					"                                },",
					"                                \"id\": \"__ID__306e513838756c61716c39766b6c3555bb33d5cddd5cfd2818088a0d01e714013dd045ffaaf1fa\",",
					"                                \"assetNumber\": \"771286841506\",",
					"                                \"assetType\": \"CUSTODY_ACCOUNT\"",
					"                            }",
					"                        ],",
					"                        \"required\": [",
					"                            \"id\",",
					"                            \"assetNumber\",",
					"                            \"assetType\",",
					"                            \"amount\"",
					"                        ],",
					"                        \"properties\": {",
					"                            \"id\": {",
					"                                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/id\",",
					"                                \"type\": \"string\",",
					"                                \"title\": \"The Id Schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": \"\",",
					"                                \"examples\": [",
					"                                    \"__ID__306e513838756c61716c39766b6c3555bb32d1ccd955ff7aab9ac3e08bcea348da8e483186f4c4\"",
					"                                ]",
					"                            },",
					"                            \"assetNumber\": {",
					"                                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/assetNumber\",",
					"                                \"type\": \"string\",",
					"                                \"title\": \"The Assetnumber Schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": \"\",",
					"                                \"examples\": [",
					"                                    \"1286841506\"",
					"                                ]",
					"                            },",
					"                            \"assetType\": {",
					"                                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/assetType\",",
					"                                \"type\": \"string\",",
					"                                \"title\": \"The Assettype Schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": \"\",",
					"                                \"examples\": [",
					"                                    \"ACCOUNT\"",
					"                                ]",
					"                            },",
					"                            \"amount\": {",
					"                                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount\",",
					"                                \"type\": \"object\",",
					"                                \"title\": \"The Amount Schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": {},",
					"                                \"examples\": [",
					"                                    {",
					"                                        \"value\": 30308022.29,",
					"                                        \"currencyIsoCode\": \"GBP\"",
					"                                    }",
					"                                ],",
					"                                \"required\": [",
					"                                    \"currencyIsoCode\",",
					"                                    \"value\"",
					"                                ],",
					"                                \"properties\": {",
					"                                    \"currencyIsoCode\": {",
					"                                        \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount/properties/currencyIsoCode\",",
					"                                        \"type\": \"string\",",
					"                                        \"title\": \"The Currencyisocode Schema\",",
					"                                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                                        \"default\": \"\",",
					"                                        \"examples\": [",
					"                                            \"GBP\"",
					"                                        ]",
					"                                    },",
					"                                    \"value\": {",
					"                                        \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount/properties/value\",",
					"                                        \"type\": \"number\",",
					"                                        \"title\": \"The Value Schema\",",
					"                                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                                        \"default\": 0,",
					"                                        \"examples\": [",
					"                                            30308022.29",
					"                                        ]",
					"                                    }",
					"                                }",
					"                            }",
					"                        }",
					"                    }",
					"                }",
					"            }",
					"        },",
					"        \"page\": {",
					"            \"$id\": \"#/properties/page\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Page Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"                {",
					"                    \"number\": 0.0,",
					"                    \"totalPages\": 1.0,",
					"                    \"totalElements\": 3.0,",
					"                    \"size\": 20.0",
					"                }",
					"            ],",
					"            \"required\": [",
					"                \"number\",",
					"                \"size\",",
					"                \"totalElements\",",
					"                \"totalPages\"",
					"            ],",
					"            \"properties\": {",
					"                \"number\": {",
					"                    \"$id\": \"#/properties/page/properties/number\",",
					"                    \"type\": \"integer\",",
					"                    \"title\": \"The Number Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": 0,",
					"                    \"examples\": [",
					"                        0",
					"                    ]",
					"                },",
					"                \"size\": {",
					"                    \"$id\": \"#/properties/page/properties/size\",",
					"                    \"type\": \"integer\",",
					"                    \"title\": \"The Size Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": 0,",
					"                    \"examples\": [",
					"                        20",
					"                    ]",
					"                },",
					"                \"totalElements\": {",
					"                    \"$id\": \"#/properties/page/properties/totalElements\",",
					"                    \"type\": \"integer\",",
					"                    \"title\": \"The Totalelements Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": 0,",
					"                    \"examples\": [",
					"                        3",
					"                    ]",
					"                },",
					"                \"totalPages\": {",
					"                    \"$id\": \"#/properties/page/properties/totalPages\",",
					"                    \"type\": \"integer\",",
					"                    \"title\": \"The Totalpages Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": 0,",
					"                    \"examples\": [",
					"                        1",
					"                    ]",
					"                }",
					"            }",
					"        }",
					"    }",
					"}",
					"pm.environment.set(\"assetsList\", assetsList);",
					"",
					"",
					"//************************************************************************************************",
					"// Schema for 'singleTransactions'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const singleTransactions = ",
					"{",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"    \"$id\": \"http://example.com/example.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The Root Schema\",",
					"    \"description\": \"The root schema comprises the entire JSON document.\",",
					"    \"required\": [",
					"        \"id\",",
					"        \"accountId\",",
					"        \"valutaDate\",",
					"        \"bookingDate\",",
					"        \"booked\",",
					"        \"amount\",",
					"        \"creditorAccount\",",
					"        \"debtorAccount\",",
					"        \"end2endID\",",
					"        \"referenceNumber\",",
					"        \"bookingText\",",
					"        \"referenceText\"",
					"    ],",
					"    \"properties\": {",
					"        \"id\": {",
					"            \"$id\": \"#/properties/id\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Id Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"__ID__505237616d485741324e4339683554694ab1600a787e7c4213d74be5d7df5aa6720d6982bbcd73\"",
					"            ]",
					"        },",
					"        \"accountId\": {",
					"            \"$id\": \"#/properties/accountId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accountid Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"__ID__505237616d485741324e43396835546949b463067c737ed9bc3ddbe7d5ad67a4b38b0931b81881\"",
					"            ]",
					"        },",
					"        \"valutaDate\": {",
					"            \"$id\": \"#/properties/valutaDate\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Valutadate Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"2019-12-23\"",
					"            ]",
					"        },",
					"        \"bookingDate\": {",
					"            \"$id\": \"#/properties/bookingDate\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Bookingdate Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"2019-12-23\"",
					"            ]",
					"        },",
					"        \"booked\": {",
					"            \"$id\": \"#/properties/booked\",",
					"            \"type\": \"boolean\",",
					"            \"title\": \"The Booked Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": false,",
					"            \"examples\": [",
					"                true",
					"            ]",
					"        },",
					"        \"amount\": {",
					"            \"$id\": \"#/properties/amount\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Amount Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"                {",
					"                    \"value\": 2.0,",
					"                    \"currencyIsoCode\": \"CHF\"",
					"                }",
					"            ],",
					"            \"required\": [",
					"                \"currencyIsoCode\",",
					"                \"value\"",
					"            ],",
					"            \"properties\": {",
					"                \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/amount/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"CHF\"",
					"                    ]",
					"                },",
					"                \"value\": {",
					"                    \"$id\": \"#/properties/amount/properties/value\",",
					"                    \"type\": \"integer\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": 0,",
					"                    \"examples\": [",
					"                        2",
					"                    ]",
					"                }",
					"            }",
					"        },",
					"        \"creditorAccount\": {",
					"            \"$id\": \"#/properties/creditorAccount\",",
					"            \"title\": \"The Creditoraccount Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"debtorAccount\": {",
					"            \"$id\": \"#/properties/debtorAccount\",",
					"            \"title\": \"The Debtoraccount Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"end2endID\": {",
					"            \"$id\": \"#/properties/end2endID\",",
					"            \"title\": \"The End2endid Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"referenceNumber\": {",
					"            \"$id\": \"#/properties/referenceNumber\",",
					"            \"title\": \"The Referencenumber Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"bookingText\": {",
					"            \"$id\": \"#/properties/bookingText\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Bookingtext Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"Payment 2\"",
					"            ]",
					"        },",
					"        \"referenceText\": {",
					"            \"$id\": \"#/properties/referenceText\",",
					"            \"title\": \"The Referencetext Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        }",
					"    }",
					"}",
					"pm.environment.set(\"singleTransactions\", singleTransactions);",
					"",
					"//************************************************************************************************",
					"// Schema for '400 error'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const error400 = ",
					"{",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"    \"$id\": \"http://example.com/example.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The Root Schema\",",
					"    \"description\": \"The root schema comprises the entire JSON document.\",",
					"    \"required\": [",
					"        \"_status\",",
					"        \"_messages\",",
					"        \"_timestamp\"",
					"    ],",
					"    \"properties\": {",
					"        \"_status\": {",
					"            \"$id\": \"#/properties/_status\",",
					"            \"type\": \"boolean\",",
					"            \"title\": \"The _status Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": false,",
					"            \"examples\": [",
					"                false",
					"            ]",
					"        },",
					"        \"_messages\": {",
					"            \"$id\": \"#/properties/_messages\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The _messages Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": [],",
					"            \"items\": {",
					"                \"$id\": \"#/properties/_messages/items\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Items Schema\",",
					"                \"description\": \"An explanation about the purpose of this instance.\",",
					"                \"default\": {},",
					"                \"examples\": [",
					"                    {",
					"                        \"category\": \"ERROR\",",
					"                        \"code\": \"ERROR_ARGUMENT_MISMATCH\",",
					"                        \"text\": \"Argument mismatch: __ID__505237616d485741324e43396835546949b463067c71799107b8d02d69a0300452557cf19dd4f7\",",
					"                        \"path\": \"/assets/accounts/19901/v4/accounts/__ID__505237616d485741324e43396835546949b463067c71799107b8d02d69a0300452557cf19dd4f7/permissions\"",
					"                    }",
					"                ],",
					"                \"required\": [",
					"                    \"category\",",
					"                    \"code\",",
					"                    \"text\",",
					"                    \"path\"",
					"                ],",
					"                \"properties\": {",
					"                    \"category\": {",
					"                        \"$id\": \"#/properties/_messages/items/properties/category\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Category Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"ERROR\"",
					"                        ]",
					"                    },",
					"                    \"code\": {",
					"                        \"$id\": \"#/properties/_messages/items/properties/code\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Code Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"ERROR_ARGUMENT_MISMATCH\"",
					"                        ]",
					"                    },",
					"                    \"text\": {",
					"                        \"$id\": \"#/properties/_messages/items/properties/text\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Text Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"Argument mismatch: __ID__505237616d485741324e43396835546949b463067c71799107b8d02d69a0300452557cf19dd4f7\"",
					"                        ]",
					"                    },",
					"                    \"path\": {",
					"                        \"$id\": \"#/properties/_messages/items/properties/path\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Path Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"/assets/accounts/19901/v4/accounts/__ID__505237616d485741324e43396835546949b463067c71799107b8d02d69a0300452557cf19dd4f7/permissions\"",
					"                        ]",
					"                    }",
					"                }",
					"            }",
					"        },",
					"        \"_timestamp\": {",
					"            \"$id\": \"#/properties/_timestamp\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The _timestamp Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"2020-03-24T13:26:15.546+01:00\"",
					"            ]",
					"        }",
					"    }",
					"}",
					"pm.environment.set(\"error400\", error400);",
					"",
					"//************************************************************************************************",
					"// Schema for 'Alias set'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const aliasSet = ",
					"{",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"    \"$id\": \"http://example.com/example.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The Root Schema\",",
					"    \"description\": \"The root schema comprises the entire JSON document.\",",
					"    \"required\": [",
					"        \"_timestamp\",",
					"        \"_status\",",
					"        \"_messages\"",
					"    ],",
					"    \"properties\": {",
					"        \"_timestamp\": {",
					"            \"$id\": \"#/properties/_timestamp\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The _timestamp Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"2020-03-18T11:48:50.275\"",
					"            ]",
					"        },",
					"        \"_status\": {",
					"            \"$id\": \"#/properties/_status\",",
					"            \"type\": \"boolean\",",
					"            \"title\": \"The _status Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": false,",
					"            \"examples\": [",
					"                true",
					"            ]",
					"        },",
					"        \"_messages\": {",
					"            \"$id\": \"#/properties/_messages\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The _messages Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": [],",
					"            \"items\": {",
					"                \"$id\": \"#/properties/_messages/items\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Items Schema\",",
					"                \"description\": \"An explanation about the purpose of this instance.\",",
					"                \"default\": {},",
					"                \"examples\": [",
					"                    {",
					"                        \"text\": \"Account alias set\",",
					"                        \"path\": \"/assets/accounts/{tenantId}/v4/accounts/{accountId}/alias\",",
					"                        \"category\": \"NORMAL\",",
					"                        \"code\": \"200\"",
					"                    }",
					"                ],",
					"                \"required\": [",
					"                    \"code\",",
					"                    \"category\",",
					"                    \"text\",",
					"                    \"path\"",
					"                ],",
					"                \"properties\": {",
					"                    \"code\": {",
					"                        \"$id\": \"#/properties/_messages/items/properties/code\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Code Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"200\"",
					"                        ]",
					"                    },",
					"                    \"category\": {",
					"                        \"$id\": \"#/properties/_messages/items/properties/category\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Category Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"NORMAL\"",
					"                        ]",
					"                    },",
					"                    \"text\": {",
					"                        \"$id\": \"#/properties/_messages/items/properties/text\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Text Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"Account alias set\"",
					"                        ]",
					"                    },",
					"                    \"path\": {",
					"                        \"$id\": \"#/properties/_messages/items/properties/path\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Path Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"/assets/accounts/{tenantId}/v4/accounts/{accountId}/alias\"",
					"                        ]",
					"                    }",
					"                }",
					"            }",
					"        }",
					"    }",
					"}",
					"pm.environment.set(\"aliasSet\", aliasSet);",
					"",
					"",
					"//************************************************************************************************",
					"// Schema for 'Account ID get response'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const accountIdDetails = ",
					"{",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"    \"$id\": \"http://example.com/example.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The Root Schema\",",
					"    \"description\": \"The root schema comprises the entire JSON document.\",",
					"    \"required\": [",
					"        \"accountName\",",
					"        \"accountType\",",
					"        \"accountNumber\",",
					"        \"advisorId\",",
					"        \"bank\",",
					"        \"balances\",",
					"        \"contractId\",",
					"        \"creditInterest\",",
					"        \"currencyIsoCode\",",
					"        \"customerName\",",
					"        \"debtInterest\",",
					"        \"defaultDebtAccount\",",
					"        \"description\",",
					"        \"formattedAccountNumber\",",
					"        \"iban\",",
					"        \"id\",",
					"        \"overdraftInterest\",",
					"        \"overdraftLimit\",",
					"        \"portfolioId\",",
					"        \"permissions\"",
					"    ],",
					"    \"properties\": {",
					"        \"accountName\": {",
					"            \"$id\": \"#/properties/accountName\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accountname Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"1501 CHF\"",
					"            ]",
					"        },",
					"        \"accountType\": {",
					"            \"$id\": \"#/properties/accountType\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accounttype Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"CURRENT\"",
					"            ]",
					"        },",
					"        \"accountNumber\": {",
					"            \"$id\": \"#/properties/accountNumber\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accountnumber Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"1000001501\"",
					"            ]",
					"        },",
					"        \"advisorId\": {",
					"            \"$id\": \"#/properties/advisorId\",",
					"            \"title\": \"The Advisorid Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"bank\": {",
					"            \"$id\": \"#/properties/bank\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Bank Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"                {",
					"                    \"institutionId\": \"12312\",",
					"                    \"bic\": \"CLXNCHZZMDB\",",
					"                    \"name\": \"CLX EBS\"",
					"                }",
					"            ],",
					"            \"required\": [",
					"                \"bic\",",
					"                \"institutionId\",",
					"                \"name\"",
					"            ],",
					"            \"properties\": {",
					"                \"bic\": {",
					"                    \"$id\": \"#/properties/bank/properties/bic\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Bic Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"CLXNCHZZMDB\"",
					"                    ]",
					"                },",
					"                \"institutionId\": {",
					"                    \"$id\": \"#/properties/bank/properties/institutionId\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Institutionid Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"12312\"",
					"                    ]",
					"                },",
					"                \"name\": {",
					"                    \"$id\": \"#/properties/bank/properties/name\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Name Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"CLX EBS\"",
					"                    ]",
					"                }",
					"            }",
					"        },",
					"        \"balances\": {",
					"            \"$id\": \"#/properties/balances\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Balances Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"                {",
					"                    \"availableAmount\": {",
					"                        \"value\": 20365239.25,",
					"                        \"currencyIsoCode\": \"CHF\"",
					"                    },",
					"                    \"balance\": {",
					"                        \"value\": 20365239.25,",
					"                        \"currencyIsoCode\": \"CHF\"",
					"                    }",
					"                }",
					"            ],",
					"            \"required\": [",
					"                \"availableAmount\",",
					"                \"balance\"",
					"            ],",
					"            \"properties\": {",
					"                \"availableAmount\": {",
					"                    \"$id\": \"#/properties/balances/properties/availableAmount\",",
					"                    \"type\": \"object\",",
					"                    \"title\": \"The Availableamount Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": {},",
					"                    \"examples\": [",
					"                        {",
					"                            \"value\": 20365239.25,",
					"                            \"currencyIsoCode\": \"CHF\"",
					"                        }",
					"                    ],",
					"                    \"required\": [",
					"                        \"currencyIsoCode\",",
					"                        \"value\"",
					"                    ],",
					"                    \"properties\": {",
					"                        \"currencyIsoCode\": {",
					"                            \"$id\": \"#/properties/balances/properties/availableAmount/properties/currencyIsoCode\",",
					"                            \"type\": \"string\",",
					"                            \"title\": \"The Currencyisocode Schema\",",
					"                            \"description\": \"An explanation about the purpose of this instance.\",",
					"                            \"default\": \"\",",
					"                            \"examples\": [",
					"                                \"CHF\"",
					"                            ]",
					"                        },",
					"                        \"value\": {",
					"                            \"$id\": \"#/properties/balances/properties/availableAmount/properties/value\",",
					"                            \"type\": \"number\",",
					"                            \"title\": \"The Value Schema\",",
					"                            \"description\": \"An explanation about the purpose of this instance.\",",
					"                            \"default\": 0,",
					"                            \"examples\": [",
					"                                20365239.25",
					"                            ]",
					"                        }",
					"                    }",
					"                },",
					"                \"balance\": {",
					"                    \"$id\": \"#/properties/balances/properties/balance\",",
					"                    \"type\": \"object\",",
					"                    \"title\": \"The Balance Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": {},",
					"                    \"examples\": [",
					"                        {",
					"                            \"currencyIsoCode\": \"CHF\",",
					"                            \"value\": 20365239.25",
					"                        }",
					"                    ],",
					"                    \"required\": [",
					"                        \"currencyIsoCode\",",
					"                        \"value\"",
					"                    ],",
					"                    \"properties\": {",
					"                        \"currencyIsoCode\": {",
					"                            \"$id\": \"#/properties/balances/properties/balance/properties/currencyIsoCode\",",
					"                            \"type\": \"string\",",
					"                            \"title\": \"The Currencyisocode Schema\",",
					"                            \"description\": \"An explanation about the purpose of this instance.\",",
					"                            \"default\": \"\",",
					"                            \"examples\": [",
					"                                \"CHF\"",
					"                            ]",
					"                        },",
					"                        \"value\": {",
					"                            \"$id\": \"#/properties/balances/properties/balance/properties/value\",",
					"                            \"type\": \"number\",",
					"                            \"title\": \"The Value Schema\",",
					"                            \"description\": \"An explanation about the purpose of this instance.\",",
					"                            \"default\": 0,",
					"                            \"examples\": [",
					"                                20365239.25",
					"                            ]",
					"                        }",
					"                    }",
					"                }",
					"            }",
					"        },",
					"        \"contractId\": {",
					"            \"$id\": \"#/properties/contractId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Contractid Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"__ID__4b3261526f43483250734f78384c3965cf4fbd0c52c6f98e68435eec4a20241839a18c\"",
					"            ]",
					"        },",
					"        \"creditInterest\": {",
					"            \"$id\": \"#/properties/creditInterest\",",
					"            \"title\": \"The Creditinterest Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"currencyIsoCode\": {",
					"            \"$id\": \"#/properties/currencyIsoCode\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Currencyisocode Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"CHF\"",
					"            ]",
					"        },",
					"        \"customerName\": {",
					"            \"$id\": \"#/properties/customerName\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Customername Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"Freddy Hinz\"",
					"            ]",
					"        },",
					"        \"debtInterest\": {",
					"            \"$id\": \"#/properties/debtInterest\",",
					"            \"title\": \"The Debtinterest Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"defaultDebtAccount\": {",
					"            \"$id\": \"#/properties/defaultDebtAccount\",",
					"            \"type\": \"boolean\",",
					"            \"title\": \"The Defaultdebtaccount Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": false,",
					"            \"examples\": [",
					"                false",
					"            ]",
					"        },",
					"        \"description\": {",
					"            \"$id\": \"#/properties/description\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Description Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"Current account\"",
					"            ]",
					"        },",
					"        \"formattedAccountNumber\": {",
					"            \"$id\": \"#/properties/formattedAccountNumber\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Formattedaccountnumber Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"CH5112312001000001501\"",
					"            ]",
					"        },",
					"        \"iban\": {",
					"            \"$id\": \"#/properties/iban\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Iban Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"CH5112312001000001501\"",
					"            ]",
					"        },",
					"        \"id\": {",
					"            \"$id\": \"#/properties/id\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Id Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"__ID__4b3261526f43483250734f78384c3965cf4dbab1755ff09f5775670adce3198e17d1b1\"",
					"            ]",
					"        },",
					"        \"overdraftInterest\": {",
					"            \"$id\": \"#/properties/overdraftInterest\",",
					"            \"title\": \"The Overdraftinterest Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"overdraftLimit\": {",
					"            \"$id\": \"#/properties/overdraftLimit\",",
					"            \"title\": \"The Overdraftlimit Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"portfolioId\": {",
					"            \"$id\": \"#/properties/portfolioId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Portfolioid Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"__ID__4b3261526f43483250734f78384c3965cf48bc95bbfd7bf68b4908f97c8f3b59f5acfd\"",
					"            ]",
					"        },",
					"        \"permissions\": {",
					"            \"$id\": \"#/properties/permissions\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The Permissions Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": [],",
					"            \"items\": {",
					"                \"$id\": \"#/properties/permissions/items\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Items Schema\",",
					"                \"description\": \"An explanation about the purpose of this instance.\",",
					"                \"default\": {},",
					"                \"examples\": [",
					"                    {",
					"                        \"permissions\": [",
					"                            \"PAYM_DOM_INI\",",
					"                            \"PAYM_TRANSFER_INI\",",
					"                            \"PAYM_STN_ODR_INI\",",
					"                            \"PAYM_INTL_INI\"",
					"                        ],",
					"                        \"accountId\": \"__ID__4b3261526f43483250734f78384c3965cf4dbab1755ff09f5775670adce3198e17d1b1\",",
					"                        \"contractId\": \"__ID__4b3261526f43483250734f78384c3965cf4fbd0c52c6f98e68435eec4a20241839a18c\"",
					"                    }",
					"                ],",
					"                \"required\": [",
					"                    \"accountId\",",
					"                    \"contractId\",",
					"                    \"permissions\"",
					"                ],",
					"                \"properties\": {",
					"                    \"accountId\": {",
					"                        \"$id\": \"#/properties/permissions/items/properties/accountId\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Accountid Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"__ID__4b3261526f43483250734f78384c3965cf4dbab1755ff09f5775670adce3198e17d1b1\"",
					"                        ]",
					"                    },",
					"                    \"contractId\": {",
					"                        \"$id\": \"#/properties/permissions/items/properties/contractId\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Contractid Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"__ID__4b3261526f43483250734f78384c3965cf4fbd0c52c6f98e68435eec4a20241839a18c\"",
					"                        ]",
					"                    },",
					"                    \"permissions\": {",
					"                        \"$id\": \"#/properties/permissions/items/properties/permissions\",",
					"                        \"type\": \"array\",",
					"                        \"title\": \"The Permissions Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": [],",
					"                        \"items\": {",
					"                            \"$id\": \"#/properties/permissions/items/properties/permissions/items\",",
					"                            \"type\": \"string\",",
					"                            \"title\": \"The Items Schema\",",
					"                            \"description\": \"An explanation about the purpose of this instance.\",",
					"                            \"default\": \"\",",
					"                            \"examples\": [",
					"                                \"PAYM_DOM_INI\",",
					"                                \"PAYM_TRANSFER_INI\",",
					"                                \"PAYM_STN_ODR_INI\",",
					"                                \"PAYM_INTL_INI\"",
					"                            ]",
					"                        }",
					"                    }",
					"                }",
					"            }",
					"        }",
					"    }",
					"}",
					"pm.environment.set(\"accountIdDetails\", accountIdDetails);",
					"",
					"//************************************************************************************************",
					"// Schema for 'Balance scheme'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const balanceSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"availableAmount\",",
					"    \"balance\"",
					"  ],",
					"  \"properties\": {",
					"    \"availableAmount\": {",
					"      \"$id\": \"#/properties/availableAmount\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Availableamount Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/availableAmount/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/availableAmount/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0.0,",
					"          \"examples\": [",
					"            20365239.25",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"balance\": {",
					"      \"$id\": \"#/properties/balance\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Balance Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/balance/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/balance/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0.0,",
					"          \"examples\": [",
					"            20365239.25",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"balanceSchema\", balanceSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'Permission scheme'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const permissionSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"accountPermissions\"",
					"  ],",
					"  \"properties\": {",
					"    \"accountPermissions\": {",
					"      \"$id\": \"#/properties/accountPermissions\",",
					"      \"type\": \"array\",",
					"      \"title\": \"The Accountpermissions Schema\",",
					"      \"items\": {",
					"        \"$id\": \"#/properties/accountPermissions/items\",",
					"        \"type\": \"object\",",
					"        \"title\": \"The Items Schema\",",
					"        \"required\": [",
					"          \"accountId\",",
					"          \"contractId\",",
					"          \"permissions\"",
					"        ],",
					"        \"properties\": {",
					"          \"accountId\": {",
					"            \"$id\": \"#/properties/accountPermissions/items/properties/accountId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accountid Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"__ID__4b3261526f43483250734f78384c3965cf4eb38cdc28f72d342f4298166b0b84a7bfef\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"contractId\": {",
					"            \"$id\": \"#/properties/accountPermissions/items/properties/contractId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Contractid Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"__ID__4b3261526f43483250734f78384c3965cb4b99ac8b91244e464770e8894ac7b4c779\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"permissions\": {",
					"            \"$id\": \"#/properties/accountPermissions/items/properties/permissions\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The Permissions Schema\",",
					"            \"items\": {",
					"              \"$id\": \"#/properties/accountPermissions/items/properties/permissions/items\",",
					"              \"type\": \"string\",",
					"              \"title\": \"The Items Schema\",",
					"              \"default\": \"\",",
					"              \"examples\": [",
					"                \"PAYM_DOM_INI\",",
					"                \"PAYM_INTL_INI\",",
					"                \"PAYM_STN_ODR_INI\",",
					"                \"PAYM_TRANSFER_INI\"",
					"              ],",
					"              \"pattern\": \"^(.*)$\"",
					"            }",
					"          }",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"permissionSchema\", permissionSchema);",
					"",
					"",
					"//************************************************************************************************",
					"// Schema for 'Custody accounts'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const cuacsSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"cuacs\"",
					"      ],",
					"      \"properties\": {",
					"        \"cuacs\": {",
					"          \"$id\": \"#/properties/_embedded/properties/cuacs\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Cuacs Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/cuacs/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"id\",",
					"              \"custodyAccountNumber\",",
					"              \"lastChangeAt\",",
					"              \"valueCustodyCurrency\",",
					"              \"valueCustomerCurrency\",",
					"              \"valuePortfolioCurrency\",",
					"              \"yearEndValue\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__35695a31497042534976574d443565538b03820c945d6ab2c410438ef238fdba2c7e\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"custodyAccountNumber\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/custodyAccountNumber\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Custodyaccountnumber Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"771000061502\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"lastChangeAt\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/lastChangeAt\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Lastchangeat Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"2013-06-25T17:16:49\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"valueCustodyCurrency\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustodyCurrency\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Valuecustodycurrency Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustodyCurrency/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustodyCurrency/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      24558.32",
					"                    ]",
					"                  }",
					"                }",
					"              },",
					"              \"valueCustomerCurrency\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustomerCurrency\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Valuecustomercurrency Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustomerCurrency/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustomerCurrency/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      24558.32",
					"                    ]",
					"                  }",
					"                }",
					"              },",
					"              \"valuePortfolioCurrency\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valuePortfolioCurrency\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Valueportfoliocurrency Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valuePortfolioCurrency/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valuePortfolioCurrency/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      24558.32",
					"                    ]",
					"                  }",
					"                }",
					"              },",
					"              \"yearEndValue\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/yearEndValue\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Yearendvalue Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/yearEndValue/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/yearEndValue/properties/value\",",
					"                    \"type\": \"null\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": null,",
					"                    \"examples\": [",
					"                      null",
					"                    ]",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            3",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"};",
					"pm.environment.set(\"cuacsSchema\", cuacsSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'Assets details'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const assetsDetails = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/example.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"checked\",",
					"    \"dimensions\",",
					"    \"id\",",
					"    \"name\",",
					"    \"price\",",
					"    \"tags\"",
					"  ],",
					"  \"properties\": {",
					"    \"checked\": {",
					"      \"$id\": \"/properties/checked\",",
					"      \"type\": \"boolean\",",
					"      \"title\": \"The Checked Schema\",",
					"      \"default\": false,",
					"      \"examples\": [",
					"        false",
					"      ]",
					"    },",
					"    \"dimensions\": {",
					"      \"$id\": \"/properties/dimensions\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Dimensions Schema\",",
					"      \"required\": [",
					"        \"width\",",
					"        \"height\"",
					"      ],",
					"      \"properties\": {",
					"        \"width\": {",
					"          \"$id\": \"/properties/dimensions/properties/width\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Width Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            5",
					"          ]",
					"        },",
					"        \"height\": {",
					"          \"$id\": \"/properties/dimensions/properties/height\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Height Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"id\": {",
					"      \"$id\": \"/properties/id\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        1",
					"      ]",
					"    },",
					"    \"name\": {",
					"      \"$id\": \"/properties/name\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Name Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"A green door\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"price\": {",
					"      \"$id\": \"/properties/price\",",
					"      \"type\": \"number\",",
					"      \"title\": \"The Price Schema\",",
					"      \"default\": 0.0,",
					"      \"examples\": [",
					"        12.5",
					"      ]",
					"    },",
					"    \"tags\": {",
					"      \"$id\": \"/properties/tags\",",
					"      \"type\": \"array\",",
					"      \"title\": \"The Tags Schema\",",
					"      \"items\": {",
					"        \"$id\": \"/properties/tags/items\",",
					"        \"type\": \"string\",",
					"        \"title\": \"The 0 Schema\",",
					"        \"default\": \"\",",
					"        \"examples\": [",
					"          \"home\",",
					"          \"green\"",
					"        ],",
					"        \"pattern\": \"^(.*)$\"",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"assetsDetails\", assetsDetails);",
					"//************************************************************************************************",
					"// Schema for 'DetailAssets'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const DetailAssets = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"assets\"",
					"      ],",
					"      \"properties\": {",
					"        \"assets\": {",
					"          \"$id\": \"#/properties/_embedded/properties/assets\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Assets Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/assets/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"id\",",
					"              \"assetNumber\",",
					"              \"assetType\",",
					"              \"amount\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__4b3261526f43483250734f78384c3965cf43b264b6ab4c579325cbffc35ebda4ee4eae\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"assetNumber\": {",
					"                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/assetNumber\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Assetnumber Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"1000001704\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"assetType\": {",
					"                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/assetType\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Assettype Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"ACCOUNT\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"amount\": {",
					"                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Amount Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"USD\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      123493.65",
					"                    ]",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            20",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"DetailAssets\", DetailAssets);",
					"",
					"//************************************************************************************************",
					"// Schema for 'cuacs detail Schema' *************************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const cuacsDetSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"custodyAccountNumber\",",
					"    \"lastChangeAt\",",
					"    \"valueCustodyCurrency\",",
					"    \"valueCustomerCurrency\",",
					"    \"valuePortfolioCurrency\",",
					"    \"yearEndValue\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d443565538a54737638399ab0eef3b93ecb4eec4c5f\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"custodyAccountNumber\": {",
					"      \"$id\": \"#/properties/custodyAccountNumber\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Custodyaccountnumber Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"771000061502\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"lastChangeAt\": {",
					"      \"$id\": \"#/properties/lastChangeAt\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Lastchangeat Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2013-06-25T17:16:49\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"valueCustodyCurrency\": {",
					"      \"$id\": \"#/properties/valueCustodyCurrency\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Valuecustodycurrency Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/valueCustodyCurrency/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/valueCustodyCurrency/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0.0,",
					"          \"examples\": [",
					"            24558.32",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"valueCustomerCurrency\": {",
					"      \"$id\": \"#/properties/valueCustomerCurrency\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Valuecustomercurrency Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/valueCustomerCurrency/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/valueCustomerCurrency/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0.0,",
					"          \"examples\": [",
					"            24558.32",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"valuePortfolioCurrency\": {",
					"      \"$id\": \"#/properties/valuePortfolioCurrency\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Valueportfoliocurrency Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/valuePortfolioCurrency/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/valuePortfolioCurrency/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0.0,",
					"          \"examples\": [",
					"            24558.32",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"yearEndValue\": {",
					"      \"$id\": \"#/properties/yearEndValue\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Yearendvalue Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/yearEndValue/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/yearEndValue/properties/value\",",
					"          \"type\": \"null\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": null,",
					"          \"examples\": [",
					"            null",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"cuacsDetSchema\", cuacsDetSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'custody account positions' ********************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const cuacsPositionSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"positions\"",
					"      ],",
					"      \"properties\": {",
					"        \"positions\": {",
					"          \"$id\": \"#/properties/_embedded/properties/positions\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Positions Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/positions/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"id\",",
					"              \"amount\",",
					"              \"calculationFrom\",",
					"              \"exportTime\",",
					"              \"maturityDate\",",
					"              \"salePermitted\",",
					"              \"timeToMaturity\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__35695a31497042534976574d443565538a54737638399ab0eef3b93ecb4eec4c5f\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"amount\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/amount\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Amount Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"calculationFrom\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/calculationFrom\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Calculationfrom Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"exportTime\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/exportTime\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Exporttime Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"2019-11-04T23:11:08\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"maturityDate\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/maturityDate\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Maturitydate Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"salePermitted\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/salePermitted\",",
					"                \"type\": \"boolean\",",
					"                \"title\": \"The Salepermitted Schema\",",
					"                \"default\": false,",
					"                \"examples\": [",
					"                  false",
					"                ]",
					"              },",
					"              \"timeToMaturity\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/timeToMaturity\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Timetomaturity Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            8",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"cuacsPositionSchema\", cuacsPositionSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'accountSearch' ********************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const accountSearchSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"accountList\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"accountList\": {",
					"      \"$id\": \"#/properties/accountList\",",
					"      \"type\": \"array\",",
					"      \"title\": \"The Accountlist Schema\",",
					"      \"items\": {",
					"        \"$id\": \"#/properties/accountList/items\",",
					"        \"type\": \"object\",",
					"        \"title\": \"The Items Schema\",",
					"        \"required\": [",
					"          \"accountName\",",
					"          \"accountType\",",
					"          \"accountNumber\",",
					"          \"advisorId\",",
					"          \"bank\",",
					"          \"balances\",",
					"          \"contractId\",",
					"          \"creditInterest\",",
					"          \"currencyIsoCode\",",
					"          \"customerName\",",
					"          \"debtInterest\",",
					"          \"defaultDebtAccount\",",
					"          \"description\",",
					"          \"formattedAccountNumber\",",
					"          \"iban\",",
					"          \"id\",",
					"          \"overdraftInterest\",",
					"          \"overdraftLimit\",",
					"          \"portfolioId\",",
					"          \"permissions\"",
					"        ],",
					"        \"properties\": {",
					"          \"accountName\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/accountName\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accountname Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"1704 USD\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"accountType\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/accountType\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accounttype Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"CURRENT\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"accountNumber\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/accountNumber\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accountnumber Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"1000001704\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"advisorId\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/advisorId\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Advisorid Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"bank\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/bank\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Bank Schema\",",
					"            \"required\": [",
					"              \"bic\",",
					"              \"institutionId\",",
					"              \"name\"",
					"            ],",
					"            \"properties\": {",
					"              \"bic\": {",
					"                \"$id\": \"#/properties/accountList/items/properties/bank/properties/bic\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Bic Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"CLXNCHZZMDB\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"institutionId\": {",
					"                \"$id\": \"#/properties/accountList/items/properties/bank/properties/institutionId\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Institutionid Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"12312\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"name\": {",
					"                \"$id\": \"#/properties/accountList/items/properties/bank/properties/name\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Name Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"CLX EBS\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              }",
					"            }",
					"          },",
					"          \"balances\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/balances\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Balances Schema\",",
					"            \"required\": [",
					"              \"availableAmount\",",
					"              \"balance\"",
					"            ],",
					"            \"properties\": {",
					"              \"availableAmount\": {",
					"                \"$id\": \"#/properties/accountList/items/properties/balances/properties/availableAmount\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Availableamount Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/accountList/items/properties/balances/properties/availableAmount/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"USD\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/accountList/items/properties/balances/properties/availableAmount/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      123493.65",
					"                    ]",
					"                  }",
					"                }",
					"              },",
					"              \"balance\": {",
					"                \"$id\": \"#/properties/accountList/items/properties/balances/properties/balance\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Balance Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/accountList/items/properties/balances/properties/balance/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"USD\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/accountList/items/properties/balances/properties/balance/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      123493.65",
					"                    ]",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          },",
					"          \"contractId\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/contractId\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Contractid Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"creditInterest\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/creditInterest\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Creditinterest Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"currencyIsoCode\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/currencyIsoCode\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Currencyisocode Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"USD\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"customerName\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/customerName\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Customername Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"Harry Hasler\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"debtInterest\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/debtInterest\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Debtinterest Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"defaultDebtAccount\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/defaultDebtAccount\",",
					"            \"type\": \"boolean\",",
					"            \"title\": \"The Defaultdebtaccount Schema\",",
					"            \"default\": false,",
					"            \"examples\": [",
					"              false",
					"            ]",
					"          },",
					"          \"description\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/description\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Description Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"Foreign Currency Account\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"formattedAccountNumber\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/formattedAccountNumber\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Formattedaccountnumber Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"CH0212312001000001704\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"iban\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/iban\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Iban Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"CH0212312001000001704\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"id\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/id\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Id Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"__ID__4b3261526f43483250734f78384c3965cc48b362e94b60cd080a60990c2efce58ee3e0\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"overdraftInterest\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/overdraftInterest\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Overdraftinterest Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"overdraftLimit\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/overdraftLimit\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Overdraftlimit Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"portfolioId\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/portfolioId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Portfolioid Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"__ID__4b3261526f43483250734f78384c3965ca49b8b0f88c4c4ed50ead239f733eaef42f42\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"permissions\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/permissions\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The Permissions Schema\",",
					"            \"items\": {",
					"              \"$id\": \"#/properties/accountList/items/properties/permissions/items\",",
					"              \"type\": \"object\",",
					"              \"title\": \"The Items Schema\",",
					"              \"required\": [",
					"                \"accountId\",",
					"                \"contractId\",",
					"                \"permissions\"",
					"              ],",
					"              \"properties\": {",
					"                \"accountId\": {",
					"                  \"$id\": \"#/properties/accountList/items/properties/permissions/items/properties/accountId\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Accountid Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"__ID__4b3261526f43483250734f78384c3965cc48b362e94b60cd080a60990c2efce58ee3e0\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"contractId\": {",
					"                  \"$id\": \"#/properties/accountList/items/properties/permissions/items/properties/contractId\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Contractid Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"__ID__4b3261526f43483250734f78384c3965cf4fbd0c52c6f98e68435eec4a20241839a18c\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"permissions\": {",
					"                  \"$id\": \"#/properties/accountList/items/properties/permissions/items/properties/permissions\",",
					"                  \"type\": \"array\",",
					"                  \"title\": \"The Permissions Schema\",",
					"                  \"items\": {",
					"                    \"$id\": \"#/properties/accountList/items/properties/permissions/items/properties/permissions/items\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Items Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"PAYM_STN_ODR_INI\",",
					"                      \"PAYM_DOM_INI\",",
					"                      \"PAYM_INTL_INI\",",
					"                      \"PAYM_TRANSFER_INI\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            30",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            17",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"accountSearchSchema\", accountSearchSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'positionId details' ***************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const positionIdSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"amount\",",
					"    \"calculationFrom\",",
					"    \"exportTime\",",
					"    \"maturityDate\",",
					"    \"salePermitted\",",
					"    \"timeToMaturity\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d443565538a54737638399ab0eef3b93ecb4eec4c5f\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"amount\": {",
					"      \"$id\": \"#/properties/amount\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Amount Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"calculationFrom\": {",
					"      \"$id\": \"#/properties/calculationFrom\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Calculationfrom Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"exportTime\": {",
					"      \"$id\": \"#/properties/exportTime\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Exporttime Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2019-11-04T23:11:08\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"maturityDate\": {",
					"      \"$id\": \"#/properties/maturityDate\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Maturitydate Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"salePermitted\": {",
					"      \"$id\": \"#/properties/salePermitted\",",
					"      \"type\": \"boolean\",",
					"      \"title\": \"The Salepermitted Schema\",",
					"      \"default\": false,",
					"      \"examples\": [",
					"        false",
					"      ]",
					"    },",
					"    \"timeToMaturity\": {",
					"      \"$id\": \"#/properties/timeToMaturity\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Timetomaturity Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"positionIdSchema\", positionIdSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'transactionsId list' **************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const transactionsIdSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"transactions\"",
					"      ],",
					"      \"properties\": {",
					"        \"transactions\": {",
					"          \"$id\": \"#/properties/_embedded/properties/transactions\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Transactions Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/transactions/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"id\",",
					"              \"amount\",",
					"              \"bookedAt\",",
					"              \"bookingText\",",
					"              \"debitCreditCode\",",
					"              \"narrative\",",
					"              \"narrativeTextType\",",
					"              \"transactionKey\",",
					"              \"transactionNumber\",",
					"              \"valueDate\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__35695a31497042534976574d443565538509674406aa950ce346395913df5663780586\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"amount\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/amount\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Amount Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/amount/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/amount/properties/value\",",
					"                    \"type\": \"integer\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0,",
					"                    \"examples\": [",
					"                      200",
					"                    ]",
					"                  }",
					"                }",
					"              },",
					"              \"bookedAt\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/bookedAt\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Bookedat Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"2019-09-26\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"bookingText\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/bookingText\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Bookingtext Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"Split\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"debitCreditCode\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/debitCreditCode\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Debitcreditcode Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"DEBIT\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"narrative\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/narrative\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Narrative Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"narrativeTextType\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/narrativeTextType\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Narrativetexttype Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"transactionKey\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/transactionKey\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Transactionkey Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"900.100006.990028402\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"transactionNumber\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/transactionNumber\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Transactionnumber Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"16\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"valueDate\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/valueDate\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Valuedate Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"2019-09-26\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            3",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"transactionsIdSchema\", transactionsIdSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'transactionsId details' ***********************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const transactionsIdDetailsSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"amount\",",
					"    \"bookedAt\",",
					"    \"bookingText\",",
					"    \"debitCreditCode\",",
					"    \"narrative\",",
					"    \"narrativeTextType\",",
					"    \"transactionKey\",",
					"    \"transactionNumber\",",
					"    \"valueDate\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d4435655385046899cd9b77906150fee2f5be2c36f32c38\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"amount\": {",
					"      \"$id\": \"#/properties/amount\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Amount Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/amount/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/amount/properties/value\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            200",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"bookedAt\": {",
					"      \"$id\": \"#/properties/bookedAt\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Bookedat Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2019-09-26\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"bookingText\": {",
					"      \"$id\": \"#/properties/bookingText\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Bookingtext Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"Split\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"debitCreditCode\": {",
					"      \"$id\": \"#/properties/debitCreditCode\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Debitcreditcode Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"DEBIT\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"narrative\": {",
					"      \"$id\": \"#/properties/narrative\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Narrative Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"narrativeTextType\": {",
					"      \"$id\": \"#/properties/narrativeTextType\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Narrativetexttype Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"transactionKey\": {",
					"      \"$id\": \"#/properties/transactionKey\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Transactionkey Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"900.100006.990028402\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"transactionNumber\": {",
					"      \"$id\": \"#/properties/transactionNumber\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Transactionnumber Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"16\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"valueDate\": {",
					"      \"$id\": \"#/properties/valueDate\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Valuedate Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2019-09-26\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"transactionsIdDetailsSchema\", transactionsIdDetailsSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'portfolio schema' *****************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const portfolioSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"portfolios\"",
					"      ],",
					"      \"properties\": {",
					"        \"portfolios\": {",
					"          \"$id\": \"#/properties/_embedded/properties/portfolios\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Portfolios Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/portfolios/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"id\",",
					"              \"customerId\",",
					"              \"name\",",
					"              \"amount\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__35695a31497042534976574d443565538c1bf563cdd82c8db3cff41a82f5047a4b\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"customerId\": {",
					"                \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/customerId\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Customerid Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__35695a31497042534976574d44356553850438747409aafd55561799f639493d1665\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"name\": {",
					"                \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/name\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Name Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"77_1502 / Freddy Hinz 01\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"amount\": {",
					"                \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/amount\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Amount Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/amount/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/amount/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      259730.59",
					"                    ]",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            5",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"portfolioSchema\", portfolioSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'portfolio details schema' *****************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const portfolioDetailsSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"customerId\",",
					"    \"name\",",
					"    \"amount\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d443565538c1bf563cdd82c8db3cff41a82f5047a4b\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"customerId\": {",
					"      \"$id\": \"#/properties/customerId\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Customerid Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d44356553850438747409aafd55561799f639493d1665\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"name\": {",
					"      \"$id\": \"#/properties/name\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Name Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"77_1502 / Freddy Hinz 01\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"amount\": {",
					"      \"$id\": \"#/properties/amount\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Amount Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/amount/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/amount/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0.0,",
					"          \"examples\": [",
					"            259730.59",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"portfolioDetailsSchema\", portfolioDetailsSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'portfolio performance schema' *****************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const portfolioPerformanceSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"performancePeriod\",",
					"    \"accruedInterestBalance\",",
					"    \"accruedInterestChange\",",
					"    \"netIncome\",",
					"    \"tax\",",
					"    \"startDate\",",
					"    \"endDate\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d443565538c0365390f45bc8e11a4f9f29a255617de9b4244\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"performancePeriod\": {",
					"      \"$id\": \"#/properties/performancePeriod\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Performanceperiod Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"YTD\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"accruedInterestBalance\": {",
					"      \"$id\": \"#/properties/accruedInterestBalance\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Accruedinterestbalance Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        40",
					"      ]",
					"    },",
					"    \"accruedInterestChange\": {",
					"      \"$id\": \"#/properties/accruedInterestChange\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Accruedinterestchange Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        40",
					"      ]",
					"    },",
					"    \"netIncome\": {",
					"      \"$id\": \"#/properties/netIncome\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Netincome Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        141",
					"      ]",
					"    },",
					"    \"tax\": {",
					"      \"$id\": \"#/properties/tax\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Tax Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        47",
					"      ]",
					"    },",
					"    \"startDate\": {",
					"      \"$id\": \"#/properties/startDate\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Startdate Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2019-01-01\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"endDate\": {",
					"      \"$id\": \"#/properties/endDate\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Enddate Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2019-12-06\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"portfolioPerformanceSchema\", portfolioPerformanceSchema);",
					"",
					"",
					"//************************************************************************************************",
					"// Schema for 'transaction list schema' *****************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const transactionsListSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"transactionGroups\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"transactionGroups\": {",
					"      \"$id\": \"#/properties/transactionGroups\",",
					"      \"type\": \"array\",",
					"      \"title\": \"The Transactiongroups Schema\",",
					"      \"items\": {",
					"        \"$id\": \"#/properties/transactionGroups/items\",",
					"        \"type\": \"object\",",
					"        \"title\": \"The Items Schema\",",
					"        \"required\": [",
					"          \"balance\",",
					"          \"date\",",
					"          \"transactions\"",
					"        ],",
					"        \"properties\": {",
					"          \"balance\": {",
					"            \"$id\": \"#/properties/transactionGroups/items/properties/balance\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Balance Schema\",",
					"            \"required\": [",
					"              \"currencyIsoCode\",",
					"              \"value\"",
					"            ],",
					"            \"properties\": {",
					"              \"currencyIsoCode\": {",
					"                \"$id\": \"#/properties/transactionGroups/items/properties/balance/properties/currencyIsoCode\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Currencyisocode Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"CHF\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"value\": {",
					"                \"$id\": \"#/properties/transactionGroups/items/properties/balance/properties/value\",",
					"                \"type\": \"number\",",
					"                \"title\": \"The Value Schema\",",
					"                \"default\": 0.0,",
					"                \"examples\": [",
					"                  5451805.25",
					"                ]",
					"              }",
					"            }",
					"          },",
					"          \"date\": {",
					"            \"$id\": \"#/properties/transactionGroups/items/properties/date\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Date Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"2019-11-29\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"transactions\": {",
					"            \"$id\": \"#/properties/transactionGroups/items/properties/transactions\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The Transactions Schema\",",
					"            \"items\": {",
					"              \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items\",",
					"              \"type\": \"object\",",
					"              \"title\": \"The Items Schema\",",
					"              \"required\": [",
					"                \"id\",",
					"                \"accountId\",",
					"                \"valutaDate\",",
					"                \"bookingDate\",",
					"                \"booked\",",
					"                \"amount\",",
					"                \"creditorAccount\",",
					"                \"debtorAccount\",",
					"                \"end2endID\",",
					"                \"referenceNumber\",",
					"                \"bookingText\",",
					"                \"referenceText\"",
					"              ],",
					"              \"properties\": {",
					"                \"id\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/id\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Id Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"__ID__4b3261526f43483250734f78384c3965cc49b2e4f7cbe47097468e80074831cef8013b46\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"accountId\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/accountId\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Accountid Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"__ID__4b3261526f43483250734f78384c3965cf4aba2d610eb44b9e8acefccdfc6fdeabe3a6\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"valutaDate\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/valutaDate\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Valutadate Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"2019-11-29\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"bookingDate\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/bookingDate\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Bookingdate Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"2019-11-29\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"booked\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/booked\",",
					"                  \"type\": \"boolean\",",
					"                  \"title\": \"The Booked Schema\",",
					"                  \"default\": false,",
					"                  \"examples\": [",
					"                    true",
					"                  ]",
					"                },",
					"                \"amount\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/amount\",",
					"                  \"type\": \"object\",",
					"                  \"title\": \"The Amount Schema\",",
					"                  \"required\": [",
					"                    \"currencyIsoCode\",",
					"                    \"value\"",
					"                  ],",
					"                  \"properties\": {",
					"                    \"currencyIsoCode\": {",
					"                      \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/amount/properties/currencyIsoCode\",",
					"                      \"type\": \"string\",",
					"                      \"title\": \"The Currencyisocode Schema\",",
					"                      \"default\": \"\",",
					"                      \"examples\": [",
					"                        \"CHF\"",
					"                      ],",
					"                      \"pattern\": \"^(.*)$\"",
					"                    },",
					"                    \"value\": {",
					"                      \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/amount/properties/value\",",
					"                      \"type\": \"integer\",",
					"                      \"title\": \"The Value Schema\",",
					"                      \"default\": 0,",
					"                      \"examples\": [",
					"                        929012",
					"                      ]",
					"                    }",
					"                  }",
					"                },",
					"                \"creditorAccount\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/creditorAccount\",",
					"                  \"type\": \"null\",",
					"                  \"title\": \"The Creditoraccount Schema\",",
					"                  \"default\": null,",
					"                  \"examples\": [",
					"                    null",
					"                  ]",
					"                },",
					"                \"debtorAccount\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/debtorAccount\",",
					"                  \"type\": \"null\",",
					"                  \"title\": \"The Debtoraccount Schema\",",
					"                  \"default\": null,",
					"                  \"examples\": [",
					"                    null",
					"                  ]",
					"                },",
					"                \"end2endID\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/end2endID\",",
					"                  \"type\": \"null\",",
					"                  \"title\": \"The End2endid Schema\",",
					"                  \"default\": null,",
					"                  \"examples\": [",
					"                    null",
					"                  ]",
					"                },",
					"                \"referenceNumber\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/referenceNumber\",",
					"                  \"type\": \"null\",",
					"                  \"title\": \"The Referencenumber Schema\",",
					"                  \"default\": null,",
					"                  \"examples\": [",
					"                    null",
					"                  ]",
					"                },",
					"                \"bookingText\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/bookingText\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Bookingtext Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"ESR Payment Entry  10000019\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"referenceText\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/referenceText\",",
					"                  \"type\": \"null\",",
					"                  \"title\": \"The Referencetext Schema\",",
					"                  \"default\": null,",
					"                  \"examples\": [",
					"                    null",
					"                  ]",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            189",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            19",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"transactionsListSchema\", transactionsListSchema);",
					"",
					"",
					"/* function for getting custody accounts*/",
					"postman.setGlobalVariable(\"getCustodyAccounts\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/cuacs/${pm.environment.get(\"tenantId_assets\")}/v1/cuacs`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json; charset=UTF-8',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            console.log(res.json());",
					"            pm.environment.set(\"_tmp_cuacsId\", res.json()._embedded.cuacs[0].id);",
					"            console.log(\"Custody account ID: \" + pm.environment.get(\"_tmp_cuacsId\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"",
					"/* function for getting positions by custody account*/",
					"postman.setGlobalVariable(\"getPositionsByCustodyAccount\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/cuacs/${pm.environment.get(\"tenantId_assets\")}/v1/cuacs/${pm.environment.get(\"_tmp_cuacsId\")}/positions`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json; charset=UTF-8',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            console.log(res.json());",
					"            pm.environment.set(\"_tmp_positionsId\", res.json()._embedded.positions[0].id);",
					"            console.log(\"Position ID: \" + pm.environment.get(\"_tmp_positionsId\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"",
					"",
					"/* function for getting transactions by custody account*/",
					"postman.setGlobalVariable(\"getTransactionsByCustodyAccount\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/cuacs/${pm.environment.get(\"tenantId_assets\")}/v1/cuacs/${pm.environment.get(\"_tmp_cuacsId\")}/transactions`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json; charset=UTF-8',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            console.log(res.json());",
					"            pm.environment.set(\"_tmp_transactionsId\", res.json()._embedded.transactions[0].id);",
					"            console.log(\"Transaction ID: \" + pm.environment.get(\"_tmp_transactionsId\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for getting asset id from asset list request*/",
					"postman.setGlobalVariable(\"getAssetsList\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/portfolios/${pm.environment.get(\"tenantId_assets\")}/v1/portfolios/${pm.environment.get(\"_tmp_portfolioId\")}/assets`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"            })",
					"        }    ",
					"}, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            console.log(res.json());\t\t\t",
					"            pm.environment.set(\"_tmp_assetsId\", res.json()._embedded.assets[0].id);",
					"            console.log(\"New asset ID: \" + pm.environment.get(\"_tmp_assetsId\"));",
					"        }                          ",
					"    });",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "13817d3e-d589-4cd5-8f78-8ed203831cb3",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "4fd771e9-4717-4d2f-8ac4-e9cb88837d31",
			"key": "EPIC",
			"value": "PRODUCT-6323",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}