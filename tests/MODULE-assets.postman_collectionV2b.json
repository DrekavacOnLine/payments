{
	"info": {
		"_postman_id": "08bd9a51-ad87-424c-ac0e-55891dabe016",
		"name": "MODULE: Assets (wip)",
		"description": "Asset API:\n\n- Custody account API\n- Assets account\n- Portfolio API\n\nGlobal functions:\n- generateAccessToken //generate access token\n- assetsSearchFunction //list accounts, stores {{_tmp_accountId}}, {{_tmp_accountId2}}, {{_tmp_accountIdAlias}}, \n\t{{_tmp_accountNumber1}}, {{_tmp_accountNumber2}}, {{_tmp_iban1}}, {{_tmp_iban2}}, {{_tmp_id1}}, {{_tmp_id2}} and  {{_tmp_contractId}} \n- portfolioRequest //lists portfolios, stores {{_tmp_customerId}} and {{_tmp_portfolioId}}\n- getCustodyAccounts //list custody accounts, stores {{_tmp_cuacsId}}\n- getPositionsByCustodyAccount //list positions for custody account, stores {{_tmp_positionsId}}\n- getTransactionsByCustodyAccount //list transactions for custody account, stores {{_tmp_transactionsId}}\n- getAssetsList // lisls assets for portfolio, stores {{_tmp_assetsId}}\n\nTest Data needed for:\nAccount Search AccountType SAVINGS (C38950542)\nAccount Search account Name (C37949168)\nAccountId Transaction Search (C37972704)\nAccountId Transaction Search startDate (C37786354)\nAccountId Transaction Search Amount Desc (C38719010)\nAccountId Transaction Search multiple criteria (C38763407)\nAccountId Transaction Search amountFrom (C37905040)\nAccountId Transaction Search amountTo (C37905041)\nAccountId Transaction Search multiple amontFrom amountTo (C37905042)\nGet Maturity List (C43181624)\nUNBOOKED transaction type (C37905047)\nBOOKED transaction type (C37905046)\n---- fixed ---\nAccount Search Multiple names (C38950539) - Done\nGet Portfolio List (C43024137) - Done\nAccount Search (C41736193)\n\nTests to verify (see comments):\nSet New Alias (C37905058)\nUpdate alias (C37905064)\nDelete alias (C37905066)\nAccountId Transaction Search Overview\nCheck custody account for portfolioid (C41853576)\nCheck proper custody account searched by PortfolioId (C41853577)\ncamt053 download with endDate (C39248697)\ncamt053 download with startDate and endDate (C39248700)\ncamt053 download WDETAIL (C39248701)\ncamt052 download (C39248702)\ncamt052 download with startDate (C39248698)\ncamt052 download with startDate and endDate (C39248705)\ncamt054 download (C39248706)\ncamt053 download (C39248710)\n---- fixed ----\nGet transactions for cuacsId (C42065197)\nCustody account position list (C41853583)\nList of custody accounts (C41736189)\nINCOMING transaction flow (C37905043)\nOUTGOING transaction flow (C37905044)\nBOTH transaction flow (C37905045)\nBOTH transaction type (C37905048)\nGet Assets List (C43181622)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Config",
			"item": [
				{
					"name": "_Test session",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//reset global variables for controling execution flow",
									"eval(globals.cleanup)();",
									"//clear list of executed TestRail tests",
									"pm.environment.set(\"testRailTestsInRun\", \"\");",
									"",
									"var userId_security = data.userId_security;",
									"if (userId_security){ ",
									"    pm.environment.set(\"userId_security\",data.userId_security);",
									"    console.log(\"dataFile/userId_security: \" + userId_security);",
									"}",
									"",
									"//specify list of tests to be executed in exact order",
									"//const testsScope = \"Full\"; [Full|Core|Full+TestRail]",
									"let testsScope = data.testsScope;",
									"//console.log(testsScope); ",
									"",
									"switch (testsScope) {",
									"    case \"Full\":",
									"        var testSession = [",
									"            \"_Generate access token K8S\",",
									"            \"Accounts_Search (C33529902)\",",
									"            \"Accounts_Search_contract iban desc (C38950549)\",",
									"            \"Accounts_Search_contract iban asc (C38950548)\",",
									"            \"Accounts_Search_Account_Number (C37972701)\",",
									"            \"Accounts_Search_Multiple_Names (C38950539)\",",
									"            \"Accounts_Search_AccountType_Current (C38950541)\",",
									"            \"Accounts_Search_Multiple_Account_Number (C38950540)\",",
									"            \"Accounts_Search_AccountType_Multiple (C41083339)\",",
									"            \"Accounts_Search_AccountType_Other (C41083337)\",",
									"            \"Accounts_Search_iban (C38950543)\",",
									"            \"Accounts_Search_multiple_iban (C38950544)\",",
									"            \"Accounts_Search_contractId (C38950547)\",",
									"            \"List of custody accounts (C41736189)\",",
									"            \"List of portfolios (C43024137)\",",
									"            \"Portfolio details (C43024139)\",",
									"            \"Portfolio performance details (C43181629)\",",
									"            \"Portfolio assets details (C43181622)\",",
									"            \"Maturity details (C43181624)\",",
									"            \"Check proper custody account (C41853576)\",",
									"            \"Check proper custody account searched by PortfolioId (C41853577)\",",
									"            \"Custody account details (C41853582)\",",
									"            \"Order_by_amount_asc (C37972704)\",",
									"            \"Order_by_amount_desc (C38719010)\",",
									"            \"Order_by_multiple_criteria (C38763407)\",",
									"            \"Transaction details search by amountForm (C37905040)\",",
									"            \"Transaction details search by amountTo (C37905041)\",",
									"            \"Transaction details search by amountTo-amountFrom (C37905042)\",",
									"            \"set new alias (C37905058)\",",
									"            \"update alias (C37905064)\",",
									"            \"delete alias (C37905066)\"",
									"        ];",
									"        break;",
									"    case \"Core\":",
									"        var testSession = [",
									"            //Assets",
									"            \"Account Search (C41736193)\",",
									"            \"Account Search Multiple criteria iban asc (C38950548)\",",
									"            \"Account Search Multiple criteria iban desc (C38950549)\",",
									"            \"Account Search Account number (C37972701)\",",
									"            \"Account Search Multiple names (C38950539)\",",
									"            \"Account Search Multiple Account number (C38950540)\",",
									"            \"Account Search AccountType Current (C38950541)\",",
									"            \"Account Search AccountType SAVINGS (C38950542)\",",
									"            \"Account Search startDate&endDate (C379050538)\",",
									"            \"Account Search AccountType Multiple (C41083339)\",",
									"            \"Account Search AccountType Other (C41083337)\",",
									"            \"Account Search iban (C38950543)\",",
									"            \"Account_Search_multiple_iban (C38950544)\",",
									"            \"Account Search ContractId (C38950547)\",",
									"            \"Account Search account Name (C37949168)\",",
									"            \"Account Search id (C38950545)\",",
									"            \"AccountId Transaction Search (C37972704)\",",
									"            \"AccountId Transaction Search startDate (C37786354)\",",
									"            \"AccountId Transaction Search Amount Desc (C38719010)\",",
									"            \"AccountId Transaction Search multiple criteria (C38763407)\",",
									"            \"AccountId Transaction Search amountFrom (C37905040)\",",
									"            \"AccountId Transaction Search amountTo (C37905041)\",",
									"            \"AccountId Transaction Search multiple amontFrom amountTo (C37905042)\",",
									"            //Portfolios",
									"            \"Get Portfolio List (C43024137)\",",
									"            \"Get Portfolio Details List (C43024139)\",",
									"            \"Get Assets List (C43181622)\",",
									"            \"Get Maturity List (C43181624)\",",
									"            \"Get Performance Details (C43181629)\",",
									"            \"Get Assets List Details (C43181623)\",",
									"            //Transactions",
									"            \"INCOMING transaction flow (C37905043)\",",
									"            \"OUTGOING transaction flow (C37905044)\",",
									"            \"BOTH transaction flow (C37905045)\",",
									"            \"BOTH transaction type (C37905048)\",",
									"            \"BOOKED transaction type (C37905046)\",",
									"            \"UNBOOKED transaction type (C37905047)\",",
									"            //Custody accounts",
									"            \"List of custody accounts (C41736189)\",",
									"            \"Check custody account for portfolioid (C41853576)\",",
									"            \"Check proper custody account searched by CuacsId (C41853577)\",",
									"            \"Custody account position list (C41853583)\",",
									"            \"Custody account position details (C42065196)\",",
									"            \"Get transactions for cuacsId (C42065197)\",",
									"            \"Custody account details (C41853582)\",",
									"            \"Custody account transactions details (C43024136)\"",
									"            ];",
									"        break;",
									"    case \"ToDo\":",
									"        var testSession = [",
									"            \"Portfolio assets details (C43181622)\",",
									"            \"Maturity details (C43181624)\",",
									"            \"Check proper custody account searched by PortfolioId (C41853577)\"",
									"            ];",
									"        break;",
									"    case \"Core.old\":",
									"        var testSession = [",
									"            \"_Generate access token K8S\",",
									"            \"Accounts_Search (C33529902)\",",
									"            \"Accounts_Search_contract iban desc (C38950549)\",",
									"            \"Accounts_Search_contract iban asc (C38950548)\",",
									"            \"Accounts_Search_Account_Number (C37972701)\",",
									"            \"Accounts_Search_Multiple_Names (C38950539)\",",
									"            \"Accounts_Search_AccountType_Current (C38950541)\",",
									"            \"Accounts_Search_Multiple_Account_Number (C38950540)\",",
									"            \"Accounts_Search_AccountType_Multiple (C41083339)\",",
									"            \"Accounts_Search_AccountType_Other (C41083337)\",",
									"            \"Accounts_Search_iban (C38950543)\",",
									"            \"Accounts_Search_multiple_iban (C38950544)\",",
									"            \"Accounts_Search_contractId (C38950547)\",",
									"            \"List of custody accounts (C41736189)\",",
									"            \"List of portfolios (C43024137)\",",
									"            \"Portfolio details (C43024139)\",",
									"            //\"Portfolio performance details (C43181629)\",",
									"            \"Portfolio assets details (C43181622)\",",
									"            \"Maturity details (C43181624)\",",
									"            \"Check proper custody account (C41853576)\",",
									"            \"Check proper custody account searched by PortfolioId (C41853577)\",",
									"            \"Custody account details (C41853582)\",",
									"            \"Order_by_amount_asc (C37972704)\",",
									"            \"Order_by_amount_desc (C38719010)\",",
									"            //\"Order_by_multiple_criteria (C38763407)\",",
									"            \"Transaction details search by amountForm (C37905040)\",",
									"            \"Transaction details search by amountTo (C37905041)\",",
									"            \"Transaction details search by amountTo-amountFrom (C37905042)\",",
									"            \"set new alias (C37905058)\",",
									"            \"update alias (C37905064)\",",
									"            \"delete alias (C37905066)\"",
									"            ];",
									"        break;",
									"    case \"TestRailClean\":",
									"        var testSession = [",
									"            \"_Test session close\"",
									"        ];",
									"        break;",
									"    case \"Quick\":",
									"        var testSession = [",
									"            \"Account Search (C41736193)\"",
									"        ];",
									"        break;",
									"    default:",
									"        throw new Error(\"No tests selected for execution!\");",
									"}",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(testSession, \"testSession\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tests.v2",
			"item": [
				{
					"name": "Assets",
					"item": [
						{
							"name": "Account Search (C41736193)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a86d7f30-f258-4129-bd6d-eac78d1f09f4",
										"exec": [
											"eval(globals.generateAccessToken)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "63208c86-cd8e-4481-8bef-daea08e65b75",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema validated\", function () {\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"accountSearchSchema\"));\r",
											"\r",
											"    //Save values in the environment variables\r",
											"    if (pm.response.code === 200) {\r",
											"        pm.environment.set(\"_tmp_accountId\", jsonData.accountList[jsonData.page.totalElements - 13].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_accountId\");\r",
											"    }\r",
											"    if (pm.response.code === 200) {\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"        pm.environment.set(\"_tmp_accountId2\", jsonData.accountList[0].id);\r",
											"        pm.environment.set(\"_tmp_accountIdAlias\", jsonData.accountList[2].id);\r",
											"        pm.environment.set(\"_tmp_accountNumber1\", jsonData.accountList[0].accountNumber);\r",
											"        pm.environment.set(\"_tmp_accountNumber2\", jsonData.accountList[1].accountNumber);\r",
											"        pm.environment.set(\"_tmp_iban1\", jsonData.accountList[0].iban);\r",
											"        pm.environment.set(\"_tmp_iban2\", jsonData.accountList[1].iban);\r",
											"        pm.environment.set(\"_tmp_id1\", jsonData.accountList[0].id);\r",
											"        pm.environment.set(\"_tmp_id2\", jsonData.accountList[1].id);\r",
											"        pm.environment.set(\"_tmp_contractId\", jsonData.accountList[0].permissions[0].contractId);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_accountId2\");\r",
											"        pm.environment.unset(\"_tmp_accountIdAlias\");\r",
											"        pm.environment.unset(\"_tmp_accountNumber1\");\r",
											"        pm.environment.unset(\"_tmp_accountNumber2\");\r",
											"        pm.environment.unset(\"_tmp_iban1\");\r",
											"        pm.environment.unset(\"_tmp_iban2\");\r",
											"        pm.environment.unset(\"_tmp_id1\");\r",
											"        pm.environment.unset(\"_tmp_id2\");\r",
											"        pm.environment.unset(\"_tmp_contractId\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/search?size=30",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "30"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search Multiple criteria iban asc (C38950548)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fdfbd010-aecc-489f-85cc-349c90d3f30e",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.accountList === undefined || jsonData.accountList.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of ASC sorted accountSearch for multiple criteria is retrieved and response schema validated\", function () {\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"accountSearchSchema\"));    \r",
											"\r",
											"    //Returned proper account number\r",
											"    let result = true;\r",
											"    result = result && (jsonData.accountList[0].iban < jsonData.accountList[1].iban);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5af94279-7df1-45bd-a3c4-d87f025ff6b7",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"orderBy\": [{\r\n\t\t\"field\": \"IBAN\",\r\n\t\t\"sortOrder\": \"ASC\"\r\n\t}],\r\n\t\"criteria\": {\r\n\t\t\"iban\": [\"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"]\r\n\r\n\t}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search Multiple criteria iban desc (C38950549)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cbd64399-b67d-4cee-83e0-e48f4bb94970",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.accountList === undefined || jsonData.accountList.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of DESC sorted accountSearch for multiple criteria is retrieved and response schema validated\", function (){\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"accountSearchSchema\"));\r",
											"\r",
											"    //Returned proper account order\r",
											"    result = result && (jsonData.accountList[0].iban > jsonData.accountList[1].iban);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0cbff7a8-9e52-4580-9df3-18ddc8ffbbf7",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"orderBy\": [{\r\n\t\t\"field\": \"IBAN\",\r\n\t\t\"sortOrder\": \"DESC\"\r\n\t}],\r\n\t\"criteria\": {\r\n\t\t\"iban\": [\"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"]\r\n\r\n\t}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search BIC (C41939550)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ca86756-fa41-48cd-9488-84abe9c82f60",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.accountList === undefined || jsonData.accountList.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch with proper BIC is retrieved and response schema validated\", function () {\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"accountSearchSchema\"));\r",
											"\r",
											"    //Returned proper BIC\r",
											"    let bic = \"CLXNCHZZMDB\";\r",
											"    let result = true;\r",
											"    result = result && (jsonData.accountList[0].bank.bic === bic);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0b14a8ac-7411-4306-9d3e-4603dc658484",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/search?size=30",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "30"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search Account number (C37972701)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aec858c8-b90d-4199-9192-4aed94e40927",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.accountList === undefined || jsonData.accountList.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch for account number is retrieved and response schema validated\", function () {\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"accountSearchSchema\"));\r",
											"\r",
											"    //Returned proper account number\r",
											"    let accNumber = pm.environment.get(\"_tmp_accountNumber1\");\r",
											"    let result = true;\r",
											"    result = result && (jsonData.accountList[0].accountNumber === accNumber);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1c72d0bb-4b76-4dfc-95c1-bdc3db1247e0",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\n    \"accountNumber\": [\n      {{_tmp_accountNumber1}}\n    ]\n\t}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search Multiple names (C38950539)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "078894bc-b63b-4cad-b97d-fedd5da8c48f",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.accountList === undefined || jsonData.accountList.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch for multiple names is retrieved and response schema validated\", function () {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accName = \"1704 USD\";\r",
											"    let accName1 = \"1501 CHF\";\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"accountSearchSchema\"));\r",
											"    \r",
											"    //Returned proper account name\r",
											"    result = result && (jsonData.accountList[0].accountName === accName);\r",
											"    result = result && (jsonData.accountList[1].accountName === accName1);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5df44927-fdbb-4e29-a0ad-38194201a064",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountName\": [\"1704 USD\",\"1501 CHF\"],\r\n    \"startDate\":\"2019-01-01\"\r\n\t}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search Multiple Account number (C38950540)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69cd2c9b-68b2-4969-b7d9-0def1e75db9f",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.accountList === undefined || jsonData.accountList.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch for multiple account numbers is retrieved and response schema validated\", function () {\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accNumber1 = pm.environment.get(\"_tmp_accountNumber1\");\r",
											"    let accNumber2 = pm.environment.get(\"_tmp_accountNumber2\");\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"accountSearchSchema\"));\r",
											"    \r",
											"    //Returned proper account number\r",
											"    result = result && (jsonData.accountList[0].accountNumber === accNumber1);\r",
											"    result = result && (jsonData.accountList[1].accountNumber === accNumber2);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "15ffcf2b-c332-40e6-890f-206f21e3fa3c",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountNumber\": [\r\n      {{_tmp_accountNumber1}},{{_tmp_accountNumber2}}]\r\n\t}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search AccountType Current (C38950541)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bb6017bd-e060-4d2e-9914-b0a76a194f02",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.accountList === undefined || jsonData.accountList.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch for account type 'CURRENT' is retrieved and response schema validated\", function () {\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType = \"CURRENT\";\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"accountSearchSchema\"));\r",
											"\r",
											"    //Returned proper account type   \r",
											"    result = result && (jsonData.accountList[0].accountType === accType);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2715a2e8-8f11-4bcf-aa4a-2eb406d09ee0",
										"exec": [
											"eval(globals.generateAccessToken)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"CURRENT\"\r\n    ]\r\n  } \r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search AccountType SAVINGS (C38950542)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "414eb151-6f12-40ab-9909-83afc40349b7",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.accountList === undefined || jsonData.accountList.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch for account type 'SAVINGS' is retrieved and response schema validated\", function () {\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType = \"SAVINGS\";\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"accountSearchSchema\"));\r",
											"\r",
											"    //Returned proper account type\r",
											"    result = result && (jsonData.accountList[0].accountType === accType);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "aa2ce189-91e7-4973-8d6f-fed6cc32a5c7",
										"exec": [
											"eval(globals.generateAccessToken)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"SAVINGS\"\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search startDate&endDate (C379050538)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fa79500-24ce-4c40-b675-96d2ac1b16b5",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.accountList === undefined || jsonData.accountList.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch for start and end date period is retrieved and response schema validated\", function () {\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"accountSearchSchema\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8380d409-385a-4953-bbd4-8cf0adf78894",
										"exec": [
											"eval(globals.generateAccessToken)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"orderBy\": [{\n\t  \"field\": \"AMOUNT\",\n\t  \"sortOrder\": \"DESC\"\n\t}\n  ],\n  \"criteria\": {\n\t  \"startDate\": \"2019-01-01\",\n\t  \"endDate\": \"2019-12-31\"\n    }\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search AccountType Multiple (C41083339)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "97c924bf-551a-4e8e-8f1f-af546b05f15b",
										"exec": [
											"eval(globals.generateAccessToken)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e679cbcb-c34e-40ed-89ee-2bc494ec157c",
										"exec": [
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.accountList === undefined || jsonData.accountList.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch for multiple account types is retrieved and response schema validated\", function () {\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType1 = \"CURRENT\";\r",
											"    let accType2 = \"OTHER\";\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"accountSearchSchema\"));\r",
											"\r",
											"    //Returned proper account types\r",
											"    var list=jsonData.accountList;\r",
											"    for(var i=0; i<list.length;i++){\r",
											"        if(list[i].accountType!=accType1 && list[i].accountType!=accType2){\r",
											"            pm.expect(false).to.be.eql(true);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"criteria\": {\r\n    \"accountType\": [\r\n      \"OTHER\",\"CURRENT\"\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search AccountType Other (C41083337)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ea72fdc-54b7-45c2-8264-f58394330647",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.accountList === undefined || jsonData.accountList.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch for account type 'OTHER' is retrieved and response schema validated\", function () {\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType = \"OTHER\";\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"accountSearchSchema\"));\r",
											"\r",
											"    //Returned proper account type\r",
											"    result = result && (jsonData.accountList[0].accountType === accType);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9311390f-ce83-4a01-8122-0bd12c5004ea",
										"exec": [
											"eval(globals.generateAccessToken)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"criteria\": {\r\n    \"accountType\": [\r\n      \"OTHER\"\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search iban (C38950543)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f4ae2b0-9437-455e-a437-0a8cca32d46b",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.accountList === undefined || jsonData.accountList.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch by iban value is retrieved and response schema validated\", function () {\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let iban = pm.environment.get(\"_tmp_iban1\");\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"accountSearchSchema\"));\r",
											"\r",
											"    //Returned proper account iban\r",
											"    result = result && (jsonData.accountList[0].iban === iban);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "835a2613-a145-4c71-a64b-abc481f431ab",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"criteria\": {\r\n    \"iban\": [\r\n      \"{{_tmp_iban1}}\"\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_multiple_iban (C38950544)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d52b52a4-6542-4ac2-bfe3-5abd43207364",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.accountList === undefined || jsonData.accountList.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch by multiple iban values is retrieved and response schema validated\", function () {\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let iban1 = pm.environment.get(\"_tmp_iban1\");\r",
											"    let iban2 = pm.environment.get(\"_tmp_iban2\");\r",
											"    let result = true;\r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate if response schema is correct\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"accountSearchSchema\"));\r",
											"\r",
											"    result = result && (jsonData.accountList[0].iban === iban1);\r",
											"    result = result && (jsonData.accountList[1].iban === iban2);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cf6fa800-c84a-48a2-9efc-81ee156b4eb1",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"criteria\": {\r\n    \"iban\": [\r\n      \"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search ContractId (C38950547)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "410e21e3-5495-463f-9a42-f9d4c647223f",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.accountList === undefined || jsonData.accountList.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch by contract Id is retrieved and response schema validated\", function () {\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"accountSearchSchema\"));\r",
											"\r",
											"    // store last securityNumber as environment variable\r",
											"    if (pm.response.code === 200) {\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"        pm.environment.set(\"_tmp_accountId\", jsonData.accountList[0].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_accountId\");\r",
											"    }    \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "49079361-6c4f-4f4c-848f-f8203cf2974b",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"criteria\": {\r\n    \"contractId\": [\r\n      \"{{_tmp_contractId}}\"\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search account Name (C37949168)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "61151cd5-81b8-4585-b21f-b5aead426c4a",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.accountList === undefined || jsonData.accountList.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch by account name is retrieved and response schema validated\", function () {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accName = \"1704 USD\";\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"accountSearchSchema\"));\r",
											"\r",
											"    //Returned proper account name\r",
											"    result = result && (jsonData.accountList[0].accountName === accName);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "303fe61e-95e1-4605-8cdb-e0885ab7f7bc",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"criteria\": {\r\n    \"accountName\": [\r\n      \"1704 USD\"\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search id (C38950545)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "261708fe-a417-44e3-97c0-bf8cd207fc0a",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.accountList === undefined || jsonData.accountList.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch by Id is retrieved and response schema validated\", function () {\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"accountSearchSchema\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c5268779-6b16-4d75-80b0-d30eaf9e50cd",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"criteria\": {\r\n    \"id\": [\r\n      \"{{_tmp_id2}}\"\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId Transaction Search (C37972704)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cfc4accc-3a1f-4c3d-8c1f-471d86d88cf6",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.transactionGroups === undefined || jsonData.transactionGroups.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of transactions is retrieved (based on simple criteria specified) and response schema validated\", function () {\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Status is ok\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate if response schema is correct\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"transactionsListSchema\"));    \r",
											"    \r",
											"    if (pm.response.code === 200) {\r",
											"        pm.environment.set(\"_tmp_transactionsId\",jsonData.transactionGroups[0].transactions[0].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_transactionsId\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5af3a8cb-acb8-415b-a2df-ff728fd07392",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"orderBy\": [\n\t{\n\t  \"field\": \"AMOUNT\",\n\t  \"sortOrder\": \"ASC\"\n\t}\n  ],\n  \"criteria\": {\n\t  \"startDate\": \"2019-01-01\",\n      \"endDate\": \"2020-06-01\"\n  }\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId Transaction Search startDate (C37786354)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "41c17813-7e31-4bd0-a085-0d7fda9e64f3",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.transactionGroups === undefined || jsonData.transactionGroups.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of transactions is retrieved (from startDate) and response schema validated\", function () {\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var transactionDate = new Date('2019-01-01').getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate if response schema is correct\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"transactionsListSchema\"));   \r",
											" \r",
											"    for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"        var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"        var convertedTime = placedAtTime.getTime();\r",
											"        result = result && (transactionDate < convertedTime);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8003d766-b323-46fc-ac3b-58e359e1f054",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"orderBy\": [{\n\t \"field\": \"AMOUNT\",\n\t \"sortOrder\": \"DESC\"\n  }],\n  \"criteria\": {\n\t\"startDate\": \"2019-01-01\"\n  }\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId Transaction Search Amount Desc (C38719010)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8fb764e8-e959-4d04-be03-ed328b41bf87",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.transactionGroups === undefined || jsonData.transactionGroups.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of transactions is retrieved (sorted by amount) and response schema validated\", function () {\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"transactionsListSchema\"));   \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "354903ce-d9a4-465a-8861-41a8451f3153",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"orderBy\": [{\n\t\"field\": \"AMOUNT\",\n\t\"sortOrder\": \"DESC\"\n  }],\n  \"criteria\": {\n\t\"startDate\": \"2019-01-01\",\n\t\"endDate\": {{PrS:today}}\n  }\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId Transaction Search multiple criteria (C38763407)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3e99ccb-0ad2-471c-a1c0-cc9c4b26e87e",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.transactionGroups === undefined || jsonData.transactionGroups.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of transactions is retrieved (by multiple criteria) and response schema validated\", function () {\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var transactionDate = new Date('2019-01-01').getTime();\r",
											"    var endDate = new Date('PrS:today').getTime();\r",
											"    let amountFrom = pm.environment.get(\"100.01\");\r",
											"    let amountTo = pm.environment.get(\"5001.21\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate if response schema is correct\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"transactionsListSchema\"));   \r",
											"    \r",
											"    for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"        var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"        var convertedTime = placedAtTime.getTime();\r",
											"        result = result && (transactionDate < convertedTime);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"     \r",
											"    for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"        var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"        var convertedTime = placedAtTime.getTime();\r",
											"        result = result && (endDate > convertedTime);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"     \r",
											"    for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"        var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"        result = result && (amountFrom <= valueAmount);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"     \r",
											"    for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"        var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"        result = result && (amountTo <= valueAmount);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef052875-2549-4a5f-b3bc-01b68a0d4cdf",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"orderBy\": [{\n\t\"field\": \"AMOUNT\",\n\t\"sortOrder\": \"DESC\"\n  }],\n  \"criteria\": {\n\t\"startDate\": \"2019-01-01\",\n\t\"endDate\": {{PrS:today}},\n\t\"amountFrom\": 100.01,\n\t\"amountTo\": 50001.21\n  }\n}\n"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId Transaction Search amountFrom (C37905040)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4434e0d-5ff7-4b2d-b1fa-3f68ef3177e3",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.transactionGroups === undefined || jsonData.transactionGroups.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \"  List of transactions is retrieved (from startDate and amountFrom) and response schema validated\", function () {\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let amountFrom = pm.environment.get(\"1000.01\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"transactionsListSchema\"));   \r",
											"    \r",
											"    for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"        var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"        result = result && (amountFrom <= valueAmount);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c5777d26-6629-45b3-b462-545dc30a3e39",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"criteria\": {\r\n\t\"startDate\": \"2019-01-01\",\r\n\t\"amountFrom\":\"1000.01\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId Transaction Search amountTo (C37905041)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7bbec360-c8c4-428d-8268-35833345481a",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8bd70317-d5b1-41b2-afc6-274b26c008f2",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.transactionGroups === undefined || jsonData.transactionGroups.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \"  List of transactions is retrieved (from startDate and amountTo) and response schema validated\", function () {\r",
											"    \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let amountTo = pm.environment.get(\"150000.01\");\r",
											"    let result = true; \r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"transactionsListSchema\"));   \r",
											"    \r",
											"    for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"        var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"        result = result && (amountTo >= valueAmount);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"criteria\": {\r\n\t\"startDate\": \"2019-01-01\",\r\n\t\"amountTo\":\"150000.01\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId Transaction Search multiple amontFrom amountTo (C37905042)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea9b2dce-72cc-4081-bfd4-f8b4f999ecba",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.transactionGroups === undefined || jsonData.transactionGroups.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \"  List of transactions is retrieved (from startDate and amountFrom to amountTo) and response schema validated\", function () {\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var transactionDate = new Date('2019-01-01').getTime();\r",
											"    var endDate = new Date('2019-04-18').getTime();\r",
											"    let amountFrom = pm.environment.get(\"100.01\");\r",
											"    let amountTo = pm.environment.get(\"1000.01\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate if response schema is correct\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"transactionsListSchema\"));   \r",
											"\r",
											"    for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"        var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"        result = result && (amountFrom >= valueAmount);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"    for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"        var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"        result = result && (amountTo <= valueAmount);\r",
											"    }\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0742875e-25d8-44ab-b1a7-db2284c09a98",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"criteria\": {\n\t\"startDate\": \"2019-01-01\",\n\t\"amountFrom\": 100.01,\n\t\"amountTo\": 1001.21\n  }\n}\n"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set New Alias (C37905058)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c934dccb-e230-44ef-b3db-d525ca76da75",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Alias is created for specified account and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"aliasSet\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "98f2b68b-d767-43e7-8997-2762e3ca33eb",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"alias\": \"test\"\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/{{_tmp_accountIdAlias}}/alias",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"{{_tmp_accountIdAlias}}",
										"alias"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update alias (C37905064)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9a8c000-c54d-4ca7-b068-a4a750d2a7f7",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \"  Alias is updated for specified account and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"aliasSet\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "34fc3bd0-f77d-4e46-af88-2b17258251f9",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"alias\": \"test2\"\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/{{_tmp_accountIdAlias}}/alias",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"{{_tmp_accountIdAlias}}",
										"alias"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete alias (C37905066)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82a6f57a-f41a-4f47-bfa3-e799bc1a813d",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Alias is removed for specified account and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"aliasSet\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1bdb63ce-8aa5-4a12-b727-1f645d683bd8",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/{{_tmp_accountIdAlias}}/alias",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"{{_tmp_accountIdAlias}}",
										"alias"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId Transaction Search Overview",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6813d6b9-8319-453e-b404-30f33f34b6ad",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.transactionGroups === undefined || jsonData.transactionGroups.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of transactions is retrieved (based on complex criteria specified) and response schema is validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"  \r",
											"    //Validate the response code \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b5e929d8-5818-439d-9da2-75dc7d351b38",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"orderBy\": [{\r\n        \"field\": \"AMOUNT\",\r\n        \"sortOrder\": \"DESC\"\r\n    }],\r\n    \"criteria\": {\r\n        \"startDate\": \"2020-01-01\",\r\n        \"endDate\": \"2020-06-01\",\r\n        \"transactionFlow\": \"OUTGOING\",\r\n        \"transactionType\": \"BOTH\",\r\n        \"amountFrom\": \"999.00\",\r\n        \"amountTo\": \"51001.01\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Portfolios",
					"item": [
						{
							"name": "Get Portfolio List (C43024137)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e7e198f0-1117-4bb9-a8b4-a6e7fc44e80d",
										"exec": [
											"eval(globals.generateAccessToken)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "de884037-2d6a-4276-9b97-7d91365a0822",
										"exec": [
											"//Validate results\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of portfolios is retrieved and response schema validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"portfolioSchema\"));  \r",
											"    \r",
											"    if (pm.response.code === 200) {\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"        pm.environment.set(\"_tmp_portfolioId\", jsonData.portfolios[1].id);\r",
											"        pm.environment.set(\"_tmp_customerId\", jsonData.portfolios[1].customerId);\r",
											"    \r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_portfolioId\");\r",
											"        pm.environment.unset(\"_tmp_customerId\");\r",
											"    }\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/portfolios",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"portfolios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Portfolio Details List (C43024139)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e49fdd1-981f-4509-9753-bd7d0bc781c0",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.portfolioRequest)();}, 1000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b8a6df05-c2b7-489d-bb6f-46d1e7e3c171",
										"exec": [
											"//Validate results\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of portfolio details is retrieved and response schema validated\", function() {\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"portfolioDetailsSchema\"));\r",
											"    \r",
											"    //Validate that the orders belong to the appropriate customer\r",
											"    let portId = pm.environment.get(\"_tmp_portfolioId\");\r",
											"    jsonData.id === portId;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/portfolios/{{_tmp_portfolioId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"portfolios",
										"{{_tmp_portfolioId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Assets List (C43181622)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e252e696-a7a2-4fcb-8426-e178456aa15e",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.portfolioRequest)();}, 1000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fbe75a44-004b-40cf-8349-83fedad43bd3",
										"exec": [
											"//Validate results\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of assets by portfolio Id is retrieved and response schema validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"assetsList\"));\r",
											"    \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    if (pm.response.code === 200) {\r",
											"        pm.environment.set(\"_tmp_assetsId\", jsonData.assets[0].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_assetsId\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/portfolios/{{_tmp_portfolioId}}/assets",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"assets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Maturity List (C43181624)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4adfa2c2-3dad-4ba8-94af-d5b11d22354a",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.portfolioRequest)();}, 1000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a5714f4d-db67-46fe-a882-6b41f586b490",
										"exec": [
											"//Validate results\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.maturities === undefined || jsonData.maturities.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of maturities by portfolio Id is retrieved and response schema validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"portfolioDetailsSchema\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/portfolios/{{_tmp_portfolioId}}/maturities",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"maturities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Performance Details (C43181629)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cbfc85c6-8387-4390-ba42-d96e6c0da01f",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.portfolioRequest)();}, 1000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "73cf6a47-41b0-49e8-bb12-e66e28aeb213",
										"exec": [
											"//Validate results\r",
											"let noData = pm.response.status === 404;\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" Performance details by portfolio Id is retrieved and response schema validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"portfolioPerformanceSchema\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/portfolios/{{_tmp_portfolioId}}/performance",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"performance"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Assets List Details (C43181623)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4f875c31-5604-46c4-be21-758f3d4f980e",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.portfolioRequest)();}, 1000);",
											"setTimeout(function(){eval(globals.getAssetsList)();}, 5000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8c5c5d40-d8ec-4045-870e-aa03024e0502",
										"exec": [
											"//Validate results\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Assets details by portfolio and asset Id is retrieved and response schema validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"assetsListDetailsSchema\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/portfolios/{{_tmp_portfolioId}}/assets/{{_tmp_assetsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"assets",
										"{{_tmp_assetsId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Transactions",
					"item": [
						{
							"name": "INCOMING transaction flow (C37905043)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9233037d-1bd0-4e18-bf60-ad17c959f7d0",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of transactions with flow 'INCOMING' is retrieved and response schema validated\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"transactionsListSchema\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dd36f5cc-5b1e-4f92-bba3-ac1330a23a1d",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionFlow\":\"INCOMING\"\r\n\t}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OUTGOING transaction flow (C37905044)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8cb6170-af11-48e0-890c-a6aaaa95c1ef",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List transactions with flow 'OUTGOING' is retrieved and response schema validated\", function () {\r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"transactionsListSchema\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4db93016-8f9b-4131-bf98-57d99b2f4f5d",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionFlow\":\"OUTGOING\"\r\n\t}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BOTH transaction flow (C37905045)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8716587f-a208-455b-8b6e-4c587b232a94",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of transactions with flow 'BOTH' is retrieved and response schema validated\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"transactionsListSchema\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "79d9471b-ee24-4d82-8d27-7dd6025f4c46",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionFlow\":\"BOTH\"\r\n\t}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BOTH transaction type (C37905048)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4379afbf-cdbe-457d-a0c0-be4b01e77c2e",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of transactions with type 'BOTH' is retrieved and response schema validated\", function () {\r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"transactionsListSchema\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6db835ee-628c-4861-a06c-4b08c96e9401",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionType\":\"BOTH\"\r\n\t}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BOOKED transaction type (C37905046)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c57b05c-f7ac-463d-b299-02cf1f85cde4",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of transactions with type 'BOOKED' is retrieved and response schema validated\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"transactionsListSchema\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ef3afdc-7135-414f-ad29-3206cdaecdcb",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionType\":\"BOOKED\"\r\n\t}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "UNBOOKED transaction type (C37905047)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8bbc5a77-8dea-4bff-8edc-80b6f1900d94",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.transactionGroups === undefined || jsonData.transactionGroups.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of transactions with type 'UNBOOKED' is retrieved and response schema validated\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"transactionsListSchema\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1fac5566-1abc-4770-8e4f-6b375f902e13",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionType\":\"UNBOOKED\"\r\n\t}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_single_transaction (?)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ec09102d-6132-4a3c-b983-51e0d4fb5ae4",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);",
											"setTimeout(function(){eval(globals.assetsTransactionSearchFunction)();}, 5000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ef1ebc6b-b4c7-4cf0-920a-e1fbe1aff815",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"singleTransactions\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/transactions/{{_tmp_transactionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"transactions",
										"{{_tmp_transactionsId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Custody accounts",
					"item": [
						{
							"name": "List of custody accounts (C41736189)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c16a44bf-77b6-46d6-b65c-c9f0c448fa4a",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.cuacs === undefined || jsonData.cuacs.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts is retrieved and response schema validated\", function () {\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate if response schema is correct\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"cuacsSchema\"));\r",
											"\r",
											"    //Save custody account id as environment variable\r",
											"    if (pm.response.code === 200) {\r",
											"        pm.environment.set(\"_tmp_cuacsId\",jsonData.cuacs[0].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_cuacsId\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7a8bb28b-1baf-4070-b6ba-c77a450488c0",
										"exec": [
											"eval(globals.generateAccessToken)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/cuacs",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"cuacs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check custody account for portfolioid (C41853576)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2940ff64-9ae5-4057-a169-fd219d35f4d7",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"let noData = (jsonData.id === undefined);",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" Info for account by portfolioId is retrieved and response schema validated\", function() {",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"    let cuacsId = pm.environment.get(\"_tmp_customerId\");",
											"    let result = true;",
											"",
											"    pm.response.to.have.status(200);",
											"",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsDetSchema\", jsonData);",
											"    pm.expect(schemaValidationPassed,\"Schema validation\").to.be.eql(true);",
											"",
											"    result = result && (jsonData.id === cuacsId);",
											"    pm.expect(result).to.be.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3b4deced-3759-418a-9d72-cfed7f037536",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.portfolioRequest)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/cuacs?{{_tmp_portfolioId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"cuacs"
									],
									"query": [
										{
											"key": "{{_tmp_portfolioId}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check proper custody account searched by CuacsId (C41853577)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "716d6a3a-ef08-41f1-b9f4-ed582ebb8650",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"let noData = (jsonData.id === undefined);",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema validated\", function() {",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"    let cuacsId = pm.environment.get(\"_tmp_cuacsId\");",
											"    let result = true;",
											"",
											"    pm.response.to.have.status(200);",
											"",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsDetSchema\", jsonData);",
											"    pm.expect(schemaValidationPassed,\"Schema validation\").to.be.eql(true);",
											"",
											"    result = result && (jsonData.id === cuacsId);",
											"    pm.expect(result).to.be.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "851eecab-e9a9-4274-97d4-2984b6f42fc2",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.getCustodyAccounts)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/cuacs/{{_tmp_cuacsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"cuacs",
										"{{_tmp_cuacsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Custody account position list (C41853583)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7fe08dc-281a-4f7e-8e7f-f048d240ff18",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.positions === undefined || jsonData.positions.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" Custody account positios are retrieved by id and response schema validated\", function () {\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate if response schema is correct\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"cuacsPositionSchema\"));\r",
											"\r",
											"    //Save position id as environment variable\r",
											"    if (pm.response.code === 200) {\r",
											"        pm.environment.set(\"_tmp_positionsId\",jsonData.positions[0].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_positionsId\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5733df49-4b1c-40b4-885e-3415d456b63f",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.getCustodyAccounts)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/cuacs/{{_tmp_cuacsId}}/positions",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Custody account position details (C42065196)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6464819c-5a13-4165-9061-e6affa04355c",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.id === undefined);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" Custody account position details are retrieved by id and response schema validated\", function () {\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"positionIdSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed,\"Schema validation\").to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d6f38792-db7d-468f-9cea-994cf1adc705",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.getCustodyAccounts)();}, 1000);",
											"setTimeout(function(){eval(globals.getPositionsByCustodyAccount)();}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/cuacs/{{_tmp_cuacsId}}/positions/{{_tmp_positionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"positions",
										"{{_tmp_positionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get transactions for cuacsId (C42065197)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57699fba-1ad0-4c3c-a8d7-41d56e17c7da",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.transactions === undefined || jsonData.transactions.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" Custody account transaction details is retrieved by id and response schema validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsPositionSchema = pm.environment.get(\"cuacsPositionSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"   \r",
											"    //Validate if response schema is correct\r",
											"    // --- old approach ----\r",
											"    //schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsIdSchema\",jsonData);\r",
											"    //pm.expect(schemaValidationPassed,\"Schema validation\").to.be.eql(true);\r",
											"    //\r",
											"    // --- new approach ---\r",
											"    // 1. generate schema manually based on response, looks like below one, store it in collection instead old one\r",
											"    /*\r",
											"    const schema = {\r",
											"        \"type\": \"object\",\r",
											"        \"required\": [\r",
											"            \"transactions\", \r",
											"            \"page\"\r",
											"        ],\r",
											"        \"properties\": {\r",
											"            \"transactions\": {\r",
											"                \"type\": \"array\",\r",
											"                \"items\": {\r",
											"                    \"type\": \"object\",\r",
											"                    \"required\": [\r",
											"                        \"id\", \r",
											"                        \"amount\", \r",
											"                        \"bookedAt\", \r",
											"                        \"bookingText\", \r",
											"                        \"debitCreditCode\", \r",
											"                        \"transactionKey\",\r",
											"                        \"transactionNumber\",\r",
											"                        \"valueDate\"\r",
											"                    ],\r",
											"                    \"properties\": {\r",
											"                        \"id\": {\r",
											"                            \"type\": \"string\"\r",
											"                        },\r",
											"                        \"amount\": {\r",
											"                            \"type\": \"object\",\r",
											"                            \"required\": [\r",
											"                                \"currencyIsoCode\",\r",
											"                                \"value\"\r",
											"                            ],\r",
											"                            \"properties\": {\r",
											"                                \"currencyIsoCode\": {\r",
											"                                    \"type\": \"string\"\r",
											"                                },\r",
											"                                \"value\": {\r",
											"                                    \"type\": \"number\"\r",
											"                                }\r",
											"                            }\r",
											"                        },\r",
											"                        \"bookedAt\":{\r",
											"                            \"type\": \"string\"\r",
											"                        },\r",
											"                        \"bookingText\": {\r",
											"                            \"type\": \"string\"\r",
											"                        },\r",
											"                        \"debitCreditCode\": {\r",
											"                            \"type\": \"string\"\r",
											"                        },\r",
											"                        \"transactionKey\": {\r",
											"                            \"type\": \"string\"\r",
											"                        },\r",
											"                        \"transactionNumber\": {\r",
											"                            \"type\": \"string\"\r",
											"                        },\r",
											"                        \"valueDate\": {\r",
											"                            \"type\": \"string\"\r",
											"                        }  \r",
											"                    }\r",
											"                }\r",
											"            },\r",
											"            \"page\": {\r",
											"                \"type\": \"object\",\r",
											"                \"required\": [\r",
											"                    \"number\", \r",
											"                    \"numberOfElements\",\r",
											"                    \"size\",\r",
											"                    \"totalElements\",\r",
											"                    \"totalPages\"\r",
											"                ],                \r",
											"                \"properties\": {\r",
											"                    \"number\": {\r",
											"                        \"type\": \"number\"\r",
											"                    },\r",
											"                    \"numberOfElements\": {\r",
											"                        \"type\": \"number\"\r",
											"                    },\r",
											"                    \"size\": {\r",
											"                        \"type\": \"number\"\r",
											"                    },\r",
											"                    \"totalElements\": {\r",
											"                        \"type\": \"number\"\r",
											"                        },\r",
											"                    \"totalPages\": {\r",
											"                        \"type\": \"number\"\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    };\r",
											"    */\r",
											"    // 2. retrive from used environment variable then use for validation\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"transactionsIdSchema\"));\r",
											"   \r",
											"    //Save transaction id as environament variable\r",
											"    if (pm.response.code === 200) {\r",
											"        pm.environment.set(\"_tmp_transactionsId\",jsonData.transactions[0].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_transactionsId\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1095691b-d59d-4524-afa8-d551b713812a",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.getCustodyAccounts)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/cuacs/{{_tmp_cuacsId}}/transactions/",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"transactions",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Custody account details (C41853582)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc45fd0b-da0a-49b6-b3f4-cb03028c53ad",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"let noData = (jsonData.id === undefined);",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" Custody account details by are is retrieved and response schema validated\", function() {",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"    let cuacsId = pm.environment.get(\"_tmp_cuacsId\");",
											"    let result = true;",
											"    ",
											"    //Validate if execution status is correct",
											"    pm.response.to.have.status(200);",
											"    ",
											"    //Validate if response schema is correct",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsDetSchema\", jsonData);",
											"    pm.expect(schemaValidationPassed,\"Schema validation\").to.be.eql(true);",
											"    ",
											"    //Validate if custody account is correct in the response",
											"    result = result && (jsonData.id === cuacsId);",
											"    pm.expect(result,\"Custody account is correct in the response\").to.be.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b739c3cc-93c1-4166-aff5-23f7198cffd5",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.getCustodyAccounts)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/cuacs/{{_tmp_cuacsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"cuacs",
										"{{_tmp_cuacsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Custody account transactions details (C43024136)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2dce57ab-c292-4b25-b6dd-d05877094c0c",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.id === undefined);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" Custody account transactions details are retrieved by id and response schema validated\", function () {\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate if response schema is correct\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"transactionsIdDetailsSchema\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "529512a0-3b1e-47a6-ba6e-a38a2e8da56a",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.getCustodyAccounts)();}, 1000);",
											"setTimeout(function(){eval(globals.getTransactionsByCustodyAccount)();}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/cuacs/{{_tmp_cuacsId}}/transactions/{{_tmp_transactionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"transactions",
										"{{_tmp_transactionsId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Camt",
					"item": [
						{
							"name": "camt053 download with endDate (C39248697)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f17326a6-dda4-4b13-81ac-b92267d397f6",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" camt053 file is downloadeded for the selected account and endDate, response schema is validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b857e9fe-e0eb-4c33-9417-08bbca5c96d3",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"orderBy\": [{\n\t\"field\": \"AMOUNT\",\n\t\"sortOrder\": \"ASC\"\n  }],\n  \"criteria\": {\n\t\"startDate\": \"2019-01-01\",\n\t\"endDate\": \"2019-12-31\"\n  }\n}\n"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT053&endDate=2019-12-01",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT053"
										},
										{
											"key": "endDate",
											"value": "2019-12-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "camt053 download with startDate and endDate (C39248700)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eff73dd4-720c-40bd-9ec7-9ef68a3bb868",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \"  camt053 file is downloadeded for the selected account, startDate and endDate, response schema is validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "81c6f0f9-304c-4671-b2a6-33335b665078",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"orderBy\": [\n  {\n\t\"field\": \"AMOUNT\",\n\t\"sortOrder\": \"ASC\"\n  }],\n  \"criteria\": {\n\t\"startDate\": \"2019-01-01\",\n\t\"endDate\": \"2019-12-31\"\n  }\n}\n"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT053&startDate=2019-12-01&endDate=2020-03-01",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT053"
										},
										{
											"key": "startDate",
											"value": "2019-12-01"
										},
										{
											"key": "endDate",
											"value": "2020-03-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "camt053 download WDETAIL (C39248701)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74cae225-802b-423a-8837-34e80a719d38",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" camt053 file is downloadeded for the selected account with wdetails, response schema is validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8219196b-dcf5-4ba5-89b7-9eb0ed3afa99",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"orderBy\": [\n  {\n\t\"field\": \"AMOUNT\",\n\t\"sortOrder\": \"ASC\"\n  }],\n  \"criteria\": {\n\t\"startDate\": \"2019-01-01\",\n\t\"endDate\": \"2019-12-31\"\n  }\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT053&details=WDETAIL",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT053"
										},
										{
											"key": "details",
											"value": "WDETAIL"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "camt052 download (C39248702)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4e86a82-885c-4133-b24e-095e30569f49",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" camt052 file is downloadeded for the selected account, response schema is validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "21085c2e-5840-4a46-b9cd-eb3028f5340d",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT052",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT052"
										},
										{
											"key": "startDate",
											"value": "2020-03-01",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "camt052 download with startDate (C39248698)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f829f98a-3585-4658-93d5-dd1d64707679",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" camt052 file is downloadeded for the selected account and startDate, response schema is validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "59b1ce6e-6090-44d4-8101-599690d067c5",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/transactions/camt?isoType=CAMT052&startDate=2020-01-01",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT052"
										},
										{
											"key": "startDate",
											"value": "2020-01-01"
										},
										{
											"key": "endDate",
											"value": "2020-03-09",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "camt052 download with startDate and endDate (C39248705)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e64b4e5-1d36-4583-b26d-7726ce81f9e1",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" camt052 file is downloadeded for the selected account, startDate and endDate, response schema is validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f5d17b59-4bc5-48ef-8310-2b3f67ab6ce3",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"orderBy\": [\n  {\n\t\"field\": \"AMOUNT\",\n\t\"sortOrder\": \"ASC\"\n  }],\n  \"criteria\": {\n\t\"startDate\": \"2019-01-01\",\n\t\"endDate\": \"2019-12-31\"\n  }\n}\n"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT052&startDate=2019-01-06&endDate=2020-03-09",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT052"
										},
										{
											"key": "startDate",
											"value": "2019-01-06"
										},
										{
											"key": "endDate",
											"value": "2020-03-09"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "camt054 download (C39248706)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a1c7a90b-5edb-41bc-9f90-4fee30ee06d1",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" camt054 file is downloadeded for the selected account, response schema is validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c721d249-cd4f-478f-a374-7aa812a3746d",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT054",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT054"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "camt053 download (C39248710)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8db6b302-d5df-4f49-bb4f-f3e6eacf1580",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" camt053 file is downloadeded for the selected account, response schema is validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1cc3ceab-ef75-4085-8d2e-7c70682f98c2",
										"exec": [
											"eval(globals.generateAccessToken)();",
											"setTimeout(function(){eval(globals.assetsSearchFunction)();}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"orderBy\": [\n  {\n\t\"field\": \"AMOUNT\",\n\t\"sortOrder\": \"ASC\"\n  }],\n  \"criteria\": {\n\t\"startDate\": \"2019-01-01\",\n\t\"endDate\": \"2019-12-31\"\n  }\n}\n"
								},
								"url": {
									"raw": "{{env_assets}}/assets/api/v2/{{tenantId_assets}}/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT053",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"api",
										"v2",
										"{{tenantId_assets}}",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT053"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c43d341f-0e46-49a2-a483-e01c73d665fe",
						"type": "text/javascript",
						"exec": [
							"/*determine test case ID from request name*/",
							"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
							"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
							"",
							"/*add current test case ID to list of already executed tests*/",
							"eval(globals.testsExecuted)(testRailTestCases);",
							"pm.globals.set(\"testRailTestCases\", testRailTestCases);",
							"",
							"//store test case ID of current request for linking with Test Rail",
							"pm.globals.set(\"_tr_\" + request.name, testRailTestCases);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d3b43903-ff8b-4dee-821b-2c5f48340f76",
						"type": "text/javascript",
						"exec": [
							"eval(globals.sessionNavigate)();"
						]
					}
				}
			]
		},
		{
			"name": "Requests",
			"item": [
				{
					"name": "portfolio request",
					"item": [
						{
							"name": "Get_portfolios_list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81b56885-cb8b-4a7b-866e-ba015f333cbc",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of portfolios and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let portId = pm.environment.get(\"_tmp_portfolioId\");\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioSchema\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"    if (pm.response.code === 200) {\r",
											"        var jsonData = JSON.parse(responseBody)._embedded;\r",
											"        pm.environment.set(\"_tmp_portfolioId\",jsonData.portfolios[0].id);\r",
											"        pm.environment.set(\"_tmp_customerId\",jsonData.portfolios[0].customerId);\r",
											"    \r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_portfolioId\");\r",
											"        pm.environment.unset(\"_tmp_customerId\");\r",
											"    \r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d873ed76-b449-4069-8385-ae5f6ad05400",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_portfolios_details_list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81b56885-cb8b-4a7b-866e-ba015f333cbc",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let portId = pm.environment.get(\"_tmp_portfolioId\");\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioDetailsSchema\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returned orders match to specified cuacsId\", () => {\r",
											"  \r",
											"        result = result && (jsonData.id === portId);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d873ed76-b449-4069-8385-ae5f6ad05400",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_assets_list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ffd52721-d3a2-4bf1-957a-44449ca6c1b8",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let assetNo = pm.environment.get(\"_tmp_portfolioId\");\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"DetailAssets\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "afb4d309-1006-4323-8b87-5ae18115f758",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/assets",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"assets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_assets_list_details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81b56885-cb8b-4a7b-866e-ba015f333cbc",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let assetNo = pm.environment.get(\"_tmp_portfolioId\");\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioDetailsSchema\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returned orders match to specified cuacsId\", () => {\r",
											"  \r",
											"        result = result && (jsonData.id === portId);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d873ed76-b449-4069-8385-ae5f6ad05400",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/assets",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"assets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_maturity_list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81b56885-cb8b-4a7b-866e-ba015f333cbc",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"(jsonData._embedded.maturities.length == 0 ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioDetailsSchema\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d873ed76-b449-4069-8385-ae5f6ad05400",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/maturities",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"maturities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_performance_details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81b56885-cb8b-4a7b-866e-ba015f333cbc",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let assetNo = pm.environment.get(\"_tmp_portfolioId\");\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioPerformanceSchema\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d873ed76-b449-4069-8385-ae5f6ad05400",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/performance",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"performance"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Custody accounts",
					"item": [
						{
							"name": "Get custody accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d015f9cb-901f-4329-bf5c-6cc126cd7e84",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsSchema = pm.environment.get(\"cuacsSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_cuacsId\",jsonData.cuacs[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_cuacsId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88299e46-4ade-4d4c-9252-685fa43e9953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get custody account positions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4611159-c904-440a-82a7-440505aad89f",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Position details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var positionIdSchema = pm.environment.get(\"positionIdSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"positionIdSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"   }); \r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cfcb4a6e-8a10-4683-90e6-a4bd72cfd96c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/positions/{{_tmp_positionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"positions",
										"{{_tmp_positionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get positons for cuacsId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4611159-c904-440a-82a7-440505aad89f",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Position details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsPositionSchema = pm.environment.get(\"cuacsPositionSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsPositionSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"   \r",
											" // store last securityNumber as environment variable\r",
											"    if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_positionsId\",jsonData.positions[0].id);\r",
											"    } else {\r",
											"    pm.environment.unset(\"_tmp_positionsId\");\r",
											"}\r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cfcb4a6e-8a10-4683-90e6-a4bd72cfd96c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/positions",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get transactions for cuacsId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4611159-c904-440a-82a7-440505aad89f",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Transactions details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsPositionSchema = pm.environment.get(\"cuacsPositionSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsIdSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"   \r",
											" // store last securityNumber as environment variable\r",
											"    if (pm.response.code === 200) {\r",
											"        var jsonData = JSON.parse(responseBody)._embedded;\r",
											"        pm.environment.set(\"_tmp_transactionsId\",jsonData.transactions[0].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_transactionsId\");\r",
											"    }\r",
											"\r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cfcb4a6e-8a10-4683-90e6-a4bd72cfd96c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/transactions/",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"transactions",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get custody account positions details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4611159-c904-440a-82a7-440505aad89f",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Position details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var positionIdSchema = pm.environment.get(\"positionIdSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"positionIdSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cfcb4a6e-8a10-4683-90e6-a4bd72cfd96c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/positions/{{_tmp_positionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"positions",
										"{{_tmp_positionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get custody account transactions details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4611159-c904-440a-82a7-440505aad89f",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Transactions details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var positionIdSchema = pm.environment.get(\"positionIdSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsIdDetailsSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cfcb4a6e-8a10-4683-90e6-a4bd72cfd96c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/transactions/{{_tmp_transactionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"transactions",
										"{{_tmp_transactionsId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Assets",
					"item": [
						{
							"name": "Account_Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[jsonData.page.totalElements-1].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId2\",jsonData.accountList[1].id);\r",
											"    pm.environment.set(\"_tmp_accountIdAlias\",jsonData.accountList[2].id);\r",
											"    pm.environment.set(\"_tmp_accountNumber1\",jsonData.accountList[0].accountNumber);\r",
											"    pm.environment.set(\"_tmp_accountNumber2\",jsonData.accountList[1].accountNumber);\r",
											"    pm.environment.set(\"_tmp_iban1\",jsonData.accountList[0].iban);\r",
											"    pm.environment.set(\"_tmp_iban2\",jsonData.accountList[1].iban);\r",
											"    pm.environment.set(\"_tmp_id1\",jsonData.accountList[0].id);\r",
											"    pm.environment.set(\"_tmp_id2\",jsonData.accountList[1].id);\r",
											"    pm.environment.set(\"_tmp_contractId\",jsonData.accountList[0].contractId);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId2\");\r",
											"    pm.environment.unset(\"_tmp_accountIdAlias\");\r",
											"    pm.environment.unset(\"_tmp_accountNumber1\");\r",
											"    pm.environment.unset(\"_tmp_accountNumber2\");\r",
											"    pm.environment.unset(\"_tmp_iban1\");\r",
											"    pm.environment.unset(\"_tmp_iban2\");\r",
											"    pm.environment.unset(\"_tmp_id1\");\r",
											"    pm.environment.unset(\"_tmp_id2\");\r",
											"    pm.environment.unset(\"_tmp_contractId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											"eval(globals.generateAccessToken)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=30",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "30"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_account_Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"(jsonData.accountList.length == 0 ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200 && jsonData.accountList.length > 0) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountName\": [\r\n      \"1704 USD\"\r\n    ]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple names",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"(jsonData.accountList.length == 0 ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200 && jsonData.accountList.length > 0) {\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountName\": [\r\n      \"1704 USD\",\"1501 CHF\"\r\n    ]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Account number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\n    \"accountNumber\": [\n      {{_tmp_accountNumber1}}\n    ]\n\t}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_Current",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"CURRENT\"\r\n    ]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_Other",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"OTHER\"\r\n    ]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_Multiple",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"OTHER\",\"CURRENT\"\r\n    ]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple_Account_number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountNumber\": [\r\n      {{_tmp_accountNumber1}},{{_tmp_accountNumber2}}\r\n    ]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_iban",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"iban\": [\r\n      \"{{_tmp_iban1}}\"\r\n    ]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_multiple_iban",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"iban\": [\r\n      \"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"\r\n    ]\r\n\r\n}\r\n}\r\n\r\n\r\n"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"iban\": [\r\n      \"{{_tmp_iban1}}\"\r\n    ]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_ContractId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"iban\": [\r\n      \"{{_tmp_iban1}}\"\r\n    ]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple_criteria_iban_asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"orderBy\": [\r\n{\r\n\"field\": \"AMOUNT\",\r\n\"sortOrder\": \"DESC\"\r\n}\r\n],\r\n\"criteria\": {\r\n\"iban\": [\r\n\"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"\r\n]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple_criteria_iban_desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"orderBy\": [\r\n{\r\n\"field\": \"AMOUNT\",\r\n\"sortOrder\": \"DESC\"\r\n}\r\n],\r\n\"criteria\": {\r\n\"iban\": [\r\n\"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"\r\n]\r\n\r\n}\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}\n"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_multiple_criteria",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var transactionDate = new Date('2019-01-01').getTime();\r",
											"    var endDate = new Date('2019-04-18').getTime();\r",
											"    let amountFrom = pm.environment.get(\"100.01\");\r",
											"    let amountTo = pm.environment.get(\"5001.21\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Returned orders match to specified transactions startDate 2019-01-01 \", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (transactionDate < convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Returned orders match to specified transactions endDate 2019-04-18 and after\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (endDate > convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont from\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountFrom <= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont to\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountTo <= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-04-18\",\n\n\"amountFrom\": 100.01,\n\"amountTo\": 50001.21\n}\n}\n"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"(jsonData.transactionGroups.length == 0 ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_startDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecd40e93-9b80-4437-b319-03809ab3c16d",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var transactionDate = new Date('2019-01-01').getTime();\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-01-01 and after\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (transactionDate < convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4c4df630-60fa-4d17-ab38-04e96c515c23",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\"\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_Reference_Text",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecd40e93-9b80-4437-b319-03809ab3c16d",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var referenceText = null;\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"reference text is null\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var refText = new Date(jsonData.transactionGroups[0].transactions[0].referenceText[x].referenceText);\r",
											"            result = result && (referenceText === refText);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4c4df630-60fa-4d17-ab38-04e96c515c23",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"referenceText\":null\n\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_amountFrom",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecd40e93-9b80-4437-b319-03809ab3c16d",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"(jsonData.transactionGroups.length == 0 ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    \r",
											"    let amountFrom = pm.environment.get(\"1000.01\");\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont from\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountFrom <= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4c4df630-60fa-4d17-ab38-04e96c515c23",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"criteria\": {\r\n\"startDate\": \"2019-01-01\",\r\n\"amountFrom\":\"1000.01\"\r\n}\r\n}\r\n'date is set if contract don`t have transactions in last 30 days'"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "set_alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecd40e93-9b80-4437-b319-03809ab3c16d",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"aliasSet\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											" \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4c4df630-60fa-4d17-ab38-04e96c515c23",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"alias\": \"test\"\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountIdAlias}}/alias",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountIdAlias}}",
										"alias"
									]
								}
							},
							"response": []
						},
						{
							"name": "update alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecd40e93-9b80-4437-b319-03809ab3c16d",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"aliasSet\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4c4df630-60fa-4d17-ab38-04e96c515c23",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"alias\": \"test2\"\r\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountIdAlias}}/alias",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountIdAlias}}",
										"alias"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecd40e93-9b80-4437-b319-03809ab3c16d",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"aliasSet\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4c4df630-60fa-4d17-ab38-04e96c515c23",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountIdAlias}}/alias",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountIdAlias}}",
										"alias"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"(jsonData.accountList.length == 0 ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    let accountNm = \"test\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"alias name is correct\", () => {\r",
											"        for(var x = 0;x<jsonData.accountList[0].accountName;x++) {\r",
											"            result = result && (jsonData.accountList[0].accountName[x].accountName === accountNm);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\n    \"accountName\": [\n      \"test\"\n    ]\n\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=20",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_updated_alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accountNm = \"test\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    for(var x = 0;x<jsonData.accountList[0].accountName;x++) {\r",
											"        result = result && (jsonData.accountList[0].accountName[x].accountName === accountNm);\r",
											"    }\r",
											"    pm.test(\"alias name is correct\", () => {\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    });    \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"    && pm.expect(result).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\n    \"accountName\": [\n      \"test\"\n    ]\n\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=20",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_alias_Postconditions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accountNm = \"test\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    for(var x = 0;x<jsonData.accountList[0].accountName;x++) {\r",
											"        result = result && (jsonData.accountList[0].accountName[x].accountName === accountNm);\r",
											"    }\r",
											"    pm.test(\"alias name is correct\", () => {\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"    && pm.expect(result).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\n    \"accountName\": null\n\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=20",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_amountTo",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecd40e93-9b80-4437-b319-03809ab3c16d",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"(jsonData.transactionGroups.length == 0 ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    let amountTo = pm.environment.get(\"7357519.45\");\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont from\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountTo >= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4c4df630-60fa-4d17-ab38-04e96c515c23",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"criteria\": {\r\n\"startDate\": \"2019-01-01\",\r\n\"amountFrom\":\"5000.01\"\r\n}\r\n}\r\n'date is set if contract don`t have transactions in last 30 days'"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_endDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9d13462-ee76-4199-8ab8-6e275e364db7",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var transactionDate = new Date(\"2019-12-32\");\r",
											"    var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions endDate 2019-12-31\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (convertedtransactionDate > convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6d8403be-621e-462e-aba3-4132a1aaa398",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"endDate\": \"2019-12-31\"\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_multiple_amontFrom_amountTo",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe77c6af-55b9-481e-a5e0-2616fb531b6a",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"(jsonData.transactionGroups.length == 0 ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var transactionDate = new Date('2019-01-01').getTime();\r",
											"    var endDate = new Date('2019-04-18').getTime();\r",
											"    let amountFrom = pm.environment.get(\"100.01\");\r",
											"    let amountTo = pm.environment.get(\"1000.01\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"     pm.test(\"Check proper value for transactions amont from\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountFrom >= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont to\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountTo <= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae3901f-9d1d-4fd6-bd4a-262c16bea9b3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"amountFrom\": 100.01,\n\"amountTo\": 1001.21\n}\n}\n"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_startDate&endDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecd40e93-9b80-4437-b319-03809ab3c16d",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var startDate = new Date('2019-01-01').getTime();\r",
											"    var endDate = new Date('2019-10-29').getTime();\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-01-01\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (startDate <= convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-10-29\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (endDate >= convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    });\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4c4df630-60fa-4d17-ab38-04e96c515c23",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-10-29\"\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecd40e93-9b80-4437-b319-03809ab3c16d",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var startDate = new Date('2019-01-01').getTime();\r",
											"    var endDate = new Date('2019-10-29').getTime();\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-01-01\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (startDate <= convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-10-29\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (endDate >= convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    });\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4c4df630-60fa-4d17-ab38-04e96c515c23",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-10-29\"\n}\n}"
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_list_of_all_accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81b56885-cb8b-4a7b-866e-ba015f333cbc",
										"exec": [
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of portfolios is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsSchema = pm.environment.get(\"portfolioSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, portfolioSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last portfolioId as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_portfolioId\",jsonData.portfolios[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_portfolioId\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d873ed76-b449-4069-8385-ae5f6ad05400",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Filter_account_by_customerId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "81b56885-cb8b-4a7b-866e-ba015f333cbc",
								"exec": [
									"//eval(globals.commonTests)();\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of portfolios is retrieved and response schema i validated\", function () {\r",
									"\r",
									"    var schemaValidationPassed = true;\r",
									"    //var cuacsSchema = pm.environment.get(\"portfolioSchema\");\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									"    \r",
									"    pm.test(\"Status 200 OK is displayed\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response schema is correct\", () => {\r",
									"\r",
									"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioSchema\",jsonData);\r",
									"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
									"    }); \r",
									"    \r",
									"    pm.response.to.have.status(200)\r",
									"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, portfolioSchema)).to.be.true;\r",
									"});\r",
									"\r",
									"// store last portfolioId as environment variable\r",
									"if (pm.response.code === 200) {\r",
									"    var jsonData = JSON.parse(responseBody)._embedded;\r",
									"    pm.environment.set(\"_tmp_portfolioId\",jsonData.portfolios[0].id);\r",
									"} else {\r",
									"    pm.environment.unset(\"_tmp_portfolioId\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d873ed76-b449-4069-8385-ae5f6ad05400",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json; charset=UTF-8"
							},
							{
								"key": "accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios",
							"host": [
								"{{env_assets}}"
							],
							"path": [
								"assets",
								"portfolios",
								"{{tenantId_assets}}",
								"v1",
								"portfolios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clean TestRail Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5d00dc8-f552-48c0-9a1c-2510df583464",
								"exec": [
									"// Prepare list of TestRail tests for 'Clean TestRail Run' request",
									"//var execTests = pm.globals.get(\"testRailTestsInRun\");",
									"var execTests = data.executedTests;",
									"console.log(\"TestRail, tests executed in last run: \" + execTests);",
									"execTests = execTests.replace(/C/g, \"\");",
									"//console.log(\"TestRail, first cleanup: \" + execTests);",
									"execTests = execTests.replace(/ /g, \", \");",
									"//console.log(\"TestRail, second cleanup: \" + execTests);",
									"execTests = execTests.replace(/,,/g, \",\");",
									"pm.globals.set(\"testRailTestsInRun\", execTests); ",
									"",
									"var array = JSON.parse(\"[\" + execTests + \"]\"); //convert string to array",
									"for(let i = 0; i < 10; i++){",
									"    let runId = JSON.parse(responseBody)[i].id;",
									"    let runName = JSON.parse(responseBody)[i].name;",
									"    let runSuiteId = JSON.parse(responseBody)[i].suite_id;",
									"    if (runName === \"Postman API Tests\") { //determine proper run",
									"        //console.log(runId);   ",
									"        console.log(\"TestRail run '\" + runId + \"' updating for tests: \" + execTests);",
									"        pm.sendRequest({",
									"            url: \"https://testrail.ebs.crealogix.net/index.php?/api/v2/update_run/\" + runId,",
									"            method: \"POST\",",
									"            header: {",
									"                \"Authorization\": \"Basic bWlsYW4ua2FyYWRlZ2xpY0BjcmVhbG9naXguY29tOlNTQ25hcG9saTEyMzQ1Njc4OQ==\",",
									"                \"Content-Type\": \"application/json\"",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ include_all: false, case_ids: array })",
									"        \t}",
									"        });",
									"        break;",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "22f2990b-adb1-4668-a6e9-92884e953577",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "SSCnapoli123456789",
									"type": "string"
								},
								{
									"key": "username",
									"value": "milan.karadeglic@crealogix.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json; charset=UTF-8"
							},
							{
								"key": "accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://testrail.ebs.crealogix.net/index.php?/api/v2/get_runs/8",
							"protocol": "https",
							"host": [
								"testrail",
								"ebs",
								"crealogix",
								"net"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "/api/v2/get_runs/8",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ccec0506-e73d-4d68-9d5f-9279cd293966",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ab58dd07-a10d-4922-b20e-d437367a281a",
						"type": "text/javascript",
						"exec": [
							"eval(globals.sessionNavigate)();",
							"pm.globals.unset(\"_tr_\" + request.name);"
						]
					}
				}
			]
		},
		{
			"name": "Tools",
			"item": [
				{
					"name": "Generate token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b9bc4495-a6f0-46ac-8545-7470d7df11ce",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e52f8e20-bd73-4f36-af86-6e4a5f9353f6",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
									"    pm.response.to.not.be.error;",
									"    //pm.response.to.be.withBody;",
									"    pm.environment.set(\"access_token\", pm.response.text());",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"tenant_id\": {{tenantId_assets}},\n  \"acsKey\": \"i6PiNObtdp2rCNW7mlV51BDSY4zAliSvBCyVsuML1000203567\",\n  \"tenant_name\": \"{{tenantName_security}}\",\n  \"user_name\": \"{{userId_security}}\",\n  \"contractNo\": \"{{contractNo_security}}\",\n  \"languageCode\": \"en\",\n  \"bcNo\": \"{{bcNo_security}}\",\n  \"authorities\": [],\n  \"client_id\": \"postman\",\n  \"user_id\": {{userId_security}},\n  \"scope\": [\n\t\"https://api.crealogix.com/dban\",\n\t\"read\",\n\t\"write\",\n\t\"https://api.crealogix.com/contracts/contract.advisor.readonly\",\n\t\"https://api.crealogix.com/contracts/contract.metadata.readonly\",\n\t\"https://api.crealogix.com/contracts/contract.person.readonly\",\n\t\"https://api.crealogix.com/payments/payment.initiate\",\n\t\"https://api.crealogix.com/payments/payment.read\",\n\t\"https://api.crealogix.com/payments/payment.write\",\n\t\"https://api.crealogix.com/assets/account#read\",\n\t\"https://api.crealogix.com/assets/account/read\",\n\t\"https://api.crealogix.com/assets/account.transaction#read\",\n\t\"https://api.crealogix.com/assets/account.name\",\n\t\"https://api.crealogix.com/assets/account.image\",\n\t\"https://api.crealogix.com/assets/cuac#read\",\n\t\"https://api.crealogix.com/assets/portfolio#read\",\n\t\"https://api.crealogix.com/messages/securemail.write\",\n\t\"https://api.crealogix.com/messages/securemail.read\",\n\t\"https://api.crealogix.com/messages/document.category.read\",\n\t\"https://api.crealogix.com/messages/document.category.write\",\n\t\"https://api.crealogix.com/messages/document.write\",\n\t\"https://api.crealogix.com/messages/document.read\",\n\t\"https://api.crealogix.com/brokerage/order\",\n    \"https://api.crealogix.com/brokerage/order#read\",\t\n\t\"https://api.crealogix.com/brokerage/security#read\",\n    \"https://api.crealogix.com/brokerage/tradingplace#read\",\t\n    \"https://api.crealogix.com/brokerage/depository#read\",\n\t\"https://api.crealogix.com/deeplink/domains\",\n\t\"https://api.crealogix.com/deeplink/links\"\n  ],\n  \"loginName\": \"{{userId_security}}\",\n  \"exp\": 32479694642,\n  \"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\n  \"iat\": 1553855569\n}"
						},
						"url": {
							"raw": "{{env_security_testToken}}",
							"host": [
								"{{env_security_testToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAuthTestTokenK8S",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9e77f489-363b-4a53-9c9f-58be8e9678c8",
								"exec": [
									"console.log(\"Test Token url is: \" + pm.environment.get(\"env_security_testToken\"));",
									"console.log(\"Contract is: \" + pm.environment.get(\"userId_security\"));",
									"",
									"// Set up pre-conditions with Chai Assertion library. https://www.chaijs.com/api/bdd/",
									"/*",
									"pm.expect(pm.environment.get(\"env_securemail\")).to.be.a('string', \"The env_securemail is not defined\");",
									"pm.expect(pm.environment.get(\"env_security_testToken\")).to.be.a('string', \"The testTokenUrl is not defined\");",
									"pm.expect(pm.environment.get(\"tenantId_security\")).to.be.a('string', \"The tenantId is not defined\");",
									"pm.expect(pm.environment.get(\"tenantName_security\")).to.be.a('string', \"The tenantName is not defined\");",
									"pm.expect(pm.environment.get(\"userName_security\")).to.be.a('string', \"The userName is not defined\");",
									"pm.expect(pm.environment.get(\"contractNo_security\")).to.be.a('string', \"The contractNo is not defined\");",
									"pm.expect(pm.environment.get(\"bcNo_security\")).to.be.a('string', \"The bcNo is not defined\");",
									"pm.expect(pm.environment.get(\"userId_security\")).to.be.a('string', \"The userId is not defined\");",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "095f7911-c115-4798-9cc5-f06e06819ef3",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
									"    pm.response.to.not.be.error;",
									"    //pm.response.to.be.withBody;",
									"    let token = pm.response.text();",
									"    pm.environment.set(\"access_token\", token);",
									"    pm.environment.set(\"dltoken\", token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"tenant_id\": {{tenantId_security}},\r\n  \"acsKey\": \"i6PiNObtdp2rCNW7mlV51BDSY4zAliSvBCyVsuML1000203567\",\r\n  \"tenant_name\": \"{{tenantName_security}}\",\r\n  \"user_name\": \"{{userId_security}}\",\r\n  \"contractNo\": \"{{contractNo_security}}\",\r\n  \"loginName\": \"{{userId_security}}\",  \r\n  \"sub\": \"{{bcNo}}:{{userId_security}}\",\r\n  \"preferred_user_name\": \"{{userId_security}}\",\r\n  \"languageCode\": \"{{language}}\",\r\n  \"bcNo\": \"{{bcNo_security}}\",\r\n  \"authorities\": [\"DBAN_ADMIN\", \"DBAN_USER\"],\r\n  \"aud\": [\"dban\"],\r\n  \"client_id\": \"postman\",\r\n  \"user_id\": {{userId_security}},\r\n  \"scope\": [\r\n\t\"https://api.crealogix.com/dban\",\r\n\t\"read\",\r\n\t\"write\",\r\n\t\"https://api.crealogix.com/contracts/contract.advisor.readonly\",\r\n\t\"https://api.crealogix.com/contracts/contract.metadata.readonly\",\r\n\t\"https://api.crealogix.com/contracts/contract.person.readonly\",\r\n\t\"https://api.crealogix.com/payments/payment.initiate\",\r\n\t\"https://api.crealogix.com/payments/payment.read\",\r\n\t\"https://api.crealogix.com/payments/payment.write\",\r\n\t\"https://api.crealogix.com/assets/account#read\",\r\n\t\"https://api.crealogix.com/assets/account/read\",\r\n\t\"https://api.crealogix.com/assets/account.transaction#read\",\r\n\t\"https://api.crealogix.com/assets/account.name\",\r\n\t\"https://api.crealogix.com/assets/account.image\",\r\n\t\"https://api.crealogix.com/assets/cuac#read\",\r\n\t\"https://api.crealogix.com/assets/portfolio#read\",\r\n\t\"https://api.crealogix.com/messages/securemail.write\",\r\n\t\"https://api.crealogix.com/messages/securemail.read\",\r\n\t\"https://api.crealogix.com/messages/document.category.read\",\r\n\t\"https://api.crealogix.com/messages/document.category.write\",\r\n\t\"https://api.crealogix.com/messages/document.write\",\r\n\t\"https://api.crealogix.com/messages/document.read\",\r\n\t\"https://api.crealogix.com/brokerage/order\",\r\n    \"https://api.crealogix.com/brokerage/order#read\",\t\r\n\t\"https://api.crealogix.com/brokerage/security#read\",\r\n    \"https://api.crealogix.com/brokerage/tradingplace#read\",\t\r\n    \"https://api.crealogix.com/brokerage/depository#read\",\r\n\t\"https://api.crealogix.com/deeplink/domains\",\r\n\t\"https://api.crealogix.com/deeplink/links\"\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{env_security_testToken}}",
							"host": [
								"{{env_security_testToken}}"
							]
						},
						"description": "Retrieve the test token"
					},
					"response": []
				},
				{
					"name": "_Test session close",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"var requestsToRun = ",
									"    [",
									"        \"Clean TestRail Run\"",
									"    ]; ",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clean TestRail Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7eb021c5-6cd1-4dcc-967d-4b2db34fc2a5",
								"exec": [
									"// Prepare list of TestRail tests for 'Clean TestRail Run' request",
									"var execTests = data.executedTests;",
									"console.log(\"TestRail, tests executed in last run: \" + execTests);",
									"execTests = execTests.replace(/C/g, \"\");",
									"//console.log(\"TestRail, first cleanup: \" + execTests);",
									"execTests = execTests.replace(/ /g, \", \");",
									"//console.log(\"TestRail, second cleanup: \" + execTests);",
									"execTests = execTests.replace(/,,/g, \",\");",
									"pm.globals.set(\"testRailTestsInRun\", execTests); ",
									"",
									"var array = JSON.parse(\"[\" + execTests + \"]\"); //convert string to array",
									"for(let i = 0; i < 10; i++){",
									"    let runId = JSON.parse(responseBody)[i].id;",
									"    let runName = JSON.parse(responseBody)[i].name;",
									"    let runSuiteId = JSON.parse(responseBody)[i].suite_id;",
									"    if (runName === \"MODULE-brokerage\") { //determine proper run",
									"        //console.log(runId);   ",
									"        console.log(\"TestRail run '\" + runId + \"' updating for tests: \" + execTests);",
									"        pm.sendRequest({",
									"            url: \"https://testrail.ebs.crealogix.net/index.php?/api/v2/update_run/\" + runId,",
									"            method: \"POST\",",
									"            header: {",
									"                \"Authorization\": \"Basic bWlsYW4ua2FyYWRlZ2xpY0BjcmVhbG9naXguY29tOlNTQ25hcG9saTEyMzQ1Njc4OQ==\",",
									"                \"Content-Type\": \"application/json\"",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ include_all: false, case_ids: array })",
									"        \t}",
									"        });",
									"        break;",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0af662f9-abd2-4768-892a-dafd9bbc73e2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "SSCnapoli123456789",
									"type": "string"
								},
								{
									"key": "username",
									"value": "milan.karadeglic@crealogix.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json; charset=UTF-8"
							},
							{
								"key": "accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://testrail.ebs.crealogix.net/index.php?/api/v2/get_runs/8=",
							"protocol": "https",
							"host": [
								"testrail",
								"ebs",
								"crealogix",
								"net"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "/api/v2/get_runs/8",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c965b63b-029c-48cf-9494-4e37e2127db6",
						"type": "text/javascript",
						"exec": [
							"eval(globals.sessionNavigate)();",
							"pm.globals.unset(\"_tr_\" + request.name);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e62f3264-5234-4570-92c4-0036d16168de",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "ToDo",
			"item": [
				{
					"name": "Display trading place by tradingPlaceId (C43995821)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//testRailTestCases = \"C43995821\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get trading places\",",
									"        \"Get trading place by tradingPlaceId\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get trading places\",\"[precondition]\");",
									"    pm.globals.set(\"_tr_Get trading place by tradingPlaceId\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "List trading places (C43995818)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"//var testRailTestCases = \"C43995818\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get trading places\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get trading places\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Display listing by listing ID (C43995816)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b9bc4495-a6f0-46ac-8545-7470d7df11ce",
								"exec": [
									"//testRailTestCases = \"C43995816\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get listings\",",
									"        \"Get listing by listing ID\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get listings\",\"[precondition]\");",
									"    pm.globals.set(\"_tr_Get listing by listing ID\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Transaction details search by reference text (C37905050)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9c925e79-cbc4-45c9-b49e-603c026695dc",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search_Reference_Text\"",
									"    ]; ",
									"",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_Reference_Text\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a0f68433-3cf6-4e03-beee-2db34084f897",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "cc52a1da-bedb-499b-9889-bd5c4a2f665c",
				"type": "text/javascript",
				"exec": [
					"//************************************************************************************************",
					"// variable initialization************************************************************************",
					"//************************************************************************************************",
					"var test = pm.environment.get(\"testRailTestsInRun\");",
					"if( !test) {",
					"    pm.environment.set(\"testRailTestsInRun\",\"\");",
					"}",
					"",
					"//************************************************************************************************",
					"// connect to TestRail ***************************************************************************",
					"//************************************************************************************************",
					"pm.globals.set(\"TESTRAIL_DOMAIN\",\"testrail.ebs.crealogix.net\");",
					"pm.globals.set(\"TESTRAIL_USERNAME\",\"milan.karadeglic@crealogix.com\"); ",
					"pm.globals.set(\"TESTRAIL_APIKEY\",\"Q4MlDw1e70Kxh1g1YPq9-Dg0abDWer.pSWcVWcxO4\");",
					"pm.globals.set(\"TESTRAIL_PROJECTID\",8); ",
					"pm.globals.set(\"TESTRAIL_TITLE\",\"Postman API Tests\");",
					"",
					"//************************************************************************************************",
					"// Schema for 'Custody accounts'******************************************************************",
					"// created manually ******************************************************************************",
					"//************************************************************************************************",
					"const cuacsSchema = {",
					"    \"type\": \"object\",",
					"    \"required\": [",
					"        \"cuacs\", ",
					"        \"page\"",
					"    ],",
					"    \"properties\": {",
					"        \"cuacs\": {",
					"            \"type\": \"array\",",
					"            \"items\": {",
					"                \"type\": \"object\",",
					"                \"required\": [",
					"                    \"id\", ",
					"                    \"custodyAccountNumber\", ",
					"                    \"lastChangeAt\", ",
					"                    \"valueCustodyCurrency\", ",
					"                    \"valueCustomerCurrency\", ",
					"                    \"valuePortfolioCurrency\",",
					"                    \"yearEndValue\"",
					"                ],",
					"                \"properties\": {",
					"                    \"id\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"                    \"custodyAccountNumber\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"                    \"lastChangeAt\": {",
					"                        \"type\": \"string\"",
					"                    },                        ",
					"                    \"valueCustodyCurrency\": {",
					"                        \"type\": \"object\",",
					"                        \"required\": [",
					"                            \"currencyIsoCode\",",
					"                            \"value\"",
					"                        ],",
					"                        \"properties\": {",
					"                            \"currencyIsoCode\": {",
					"                                \"type\": \"string\"",
					"                            },",
					"                            \"value\": {",
					"                                \"type\": \"number\"",
					"                            }",
					"                        }",
					"                    },",
					"                    \"valueCustomerCurrency\": {",
					"                        \"type\": \"object\",",
					"                        \"required\": [",
					"                            \"currencyIsoCode\",",
					"                            \"value\"",
					"                        ],",
					"                        \"properties\": {",
					"                            \"currencyIsoCode\": {",
					"                                \"type\": \"string\"",
					"                            },",
					"                            \"value\": {",
					"                                \"type\": \"number\"",
					"                            }",
					"                        }",
					"                    },",
					"                    \"valuePortfolioCurrency\": {",
					"                        \"type\": \"object\",",
					"                        \"required\": [",
					"                            \"currencyIsoCode\",",
					"                            \"value\"",
					"                        ],",
					"                        \"properties\": {",
					"                            \"currencyIsoCode\": {",
					"                                \"type\": \"string\"",
					"                            },",
					"                            \"value\": {",
					"                                \"type\": \"number\"",
					"                            }",
					"                        }",
					"                    },",
					"                    \"yearEndValue\": {",
					"                        \"type\": \"object\",",
					"                        \"required\": [",
					"                            \"currencyIsoCode\",",
					"                            \"value\"",
					"                        ],",
					"                        \"properties\": {",
					"                            \"currencyIsoCode\": {",
					"                                \"type\": \"string\"",
					"                            },",
					"                            \"value\": {",
					"                                \"type\": \"number\"",
					"                            }",
					"                        }",
					"                    }",
					"                }",
					"            }",
					"        },",
					"        \"page\": {",
					"            \"type\": \"object\",",
					"            \"required\": [",
					"                \"number\", ",
					"                \"numberOfElements\",",
					"                \"size\",",
					"                \"totalElements\",",
					"                \"totalPages\"",
					"            ],                ",
					"            \"properties\": {",
					"                \"number\": {",
					"                    \"type\": \"number\"",
					"                },",
					"                \"numberOfElements\": {",
					"                    \"type\": \"number\"",
					"                },",
					"                \"size\": {",
					"                    \"type\": \"number\"",
					"                },",
					"                \"totalElements\": {",
					"                    \"type\": \"number\"",
					"                    },",
					"                \"totalPages\": {",
					"                    \"type\": \"number\"",
					"                }",
					"            }",
					"        }",
					"    }",
					"};",
					"pm.environment.set(\"cuacsSchema\", cuacsSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'List of Assets' *******************************************************************",
					"// created manually ******************************************************************************",
					"//************************************************************************************************",
					"const assetsList = {",
					"    \"type\": \"object\",",
					"    \"required\": [",
					"        \"assets\", ",
					"        \"page\"",
					"    ],",
					"    \"properties\": {",
					"        \"assets\": {",
					"            \"type\": \"array\",",
					"            \"items\": {",
					"                \"type\": \"object\",",
					"                \"required\": [",
					"                    \"id\", ",
					"                    \"amount\", ",
					"                    \"assetNumber\", ",
					"                    \"assetType\"",
					"                ],",
					"                \"properties\": {",
					"                    \"id\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"                    \"amount\": {",
					"                        \"type\": \"object\",",
					"                        \"required\": [",
					"                            \"currencyIsoCode\",",
					"                            \"value\"",
					"                        ],",
					"                        \"properties\": {",
					"                            \"currencyIsoCode\": {",
					"                                \"type\": \"string\"",
					"                            },",
					"                            \"value\": {",
					"                                \"type\": \"number\"",
					"                            }",
					"                        }",
					"                    },",
					"                    \"assetNumber\":{",
					"                        \"type\": \"string\"",
					"                    },",
					"                    \"assetType\": {",
					"                        \"type\": \"string\"",
					"                    }  ",
					"                }",
					"            }",
					"        },",
					"        \"page\": {",
					"            \"type\": \"object\",",
					"            \"required\": [",
					"                \"number\", ",
					"                \"numberOfElements\",",
					"                \"size\",",
					"                \"totalElements\",",
					"                \"totalPages\"",
					"            ],                ",
					"            \"properties\": {",
					"                \"number\": {",
					"                    \"type\": \"number\"",
					"                },",
					"                \"numberOfElements\": {",
					"                    \"type\": \"number\"",
					"                },",
					"                \"size\": {",
					"                    \"type\": \"number\"",
					"                },",
					"                \"totalElements\": {",
					"                    \"type\": \"number\"",
					"                    },",
					"                \"totalPages\": {",
					"                    \"type\": \"number\"",
					"                }",
					"            }",
					"        }",
					"    }",
					"};",
					"pm.environment.set(\"assetsList\", assetsList);",
					"",
					"//************************************************************************************************",
					"// Schema for 'Assets details'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const assetsDetails = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/example.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"checked\",",
					"    \"dimensions\",",
					"    \"id\",",
					"    \"name\",",
					"    \"price\",",
					"    \"tags\"",
					"  ],",
					"  \"properties\": {",
					"    \"checked\": {",
					"      \"$id\": \"/properties/checked\",",
					"      \"type\": \"boolean\",",
					"      \"title\": \"The Checked Schema\",",
					"      \"default\": false,",
					"      \"examples\": [",
					"        false",
					"      ]",
					"    },",
					"    \"dimensions\": {",
					"      \"$id\": \"/properties/dimensions\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Dimensions Schema\",",
					"      \"required\": [",
					"        \"width\",",
					"        \"height\"",
					"      ],",
					"      \"properties\": {",
					"        \"width\": {",
					"          \"$id\": \"/properties/dimensions/properties/width\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Width Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            5",
					"          ]",
					"        },",
					"        \"height\": {",
					"          \"$id\": \"/properties/dimensions/properties/height\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Height Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"id\": {",
					"      \"$id\": \"/properties/id\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        1",
					"      ]",
					"    },",
					"    \"name\": {",
					"      \"$id\": \"/properties/name\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Name Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"A green door\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"price\": {",
					"      \"$id\": \"/properties/price\",",
					"      \"type\": \"number\",",
					"      \"title\": \"The Price Schema\",",
					"      \"default\": 0.0,",
					"      \"examples\": [",
					"        12.5",
					"      ]",
					"    },",
					"    \"tags\": {",
					"      \"$id\": \"/properties/tags\",",
					"      \"type\": \"array\",",
					"      \"title\": \"The Tags Schema\",",
					"      \"items\": {",
					"        \"$id\": \"/properties/tags/items\",",
					"        \"type\": \"string\",",
					"        \"title\": \"The 0 Schema\",",
					"        \"default\": \"\",",
					"        \"examples\": [",
					"          \"home\",",
					"          \"green\"",
					"        ],",
					"        \"pattern\": \"^(.*)$\"",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"assetsDetails\", assetsDetails);",
					"//************************************************************************************************",
					"// Schema for 'DetailAssets'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const DetailAssets = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"assets\"",
					"      ],",
					"      \"properties\": {",
					"        \"assets\": {",
					"          \"$id\": \"#/properties/_embedded/properties/assets\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Assets Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/assets/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"id\",",
					"              \"assetNumber\",",
					"              \"assetType\",",
					"              \"amount\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__4b3261526f43483250734f78384c3965cf43b264b6ab4c579325cbffc35ebda4ee4eae\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"assetNumber\": {",
					"                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/assetNumber\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Assetnumber Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"1000001704\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"assetType\": {",
					"                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/assetType\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Assettype Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"ACCOUNT\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"amount\": {",
					"                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Amount Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"USD\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      123493.65",
					"                    ]",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            20",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"DetailAssets\", DetailAssets);",
					"",
					"//************************************************************************************************",
					"// Schema for 'cuacs detail Schema' *************************************************************************",
					"//***********************************************************",
					"//************************************************************************************************",
					"const cuacsDetSchema = ",
					"{",
					"  \"type\": \"object\",",
					"  \"required\": [",
					"    \"id\",",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"type\": \"string\",",
					"    },",
					"\t\"custodyAccountNumber\": {",
					"\t  \"type\": \"string\",",
					"    },",
					"\t\"lastChangeAt\": {",
					"\t  \"type\": \"string\",",
					"    },",
					"    \"valueCustodyCurrency\": {",
					"      \"type\": \"object\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"type\": \"string\",",
					"        },",
					"        \"value\": {",
					"          \"type\": \"number\",",
					"        }",
					"      }",
					"    },",
					"    \"valueCustomerCurrency\": {",
					"      \"type\": \"object\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"type\": \"string\",",
					"        },",
					"        \"value\": {",
					"          \"type\": \"number\",",
					"        }",
					"      }",
					"    },",
					"    \"valuePortfolioCurrency\": {",
					"      \"type\": \"object\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"type\": \"string\",",
					"        },",
					"        \"value\": {",
					"          \"type\": \"number\",",
					"        }",
					"      }",
					"    },",
					"    \"yearEndValue\": {",
					"      \"type\": \"object\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"type\": \"string\",",
					"        },",
					"        \"value\": {",
					"          \"type\": \"number\",",
					"        }",
					"      }",
					"    },",
					"  }",
					"  ",
					"};",
					"pm.environment.set(\"cuacsDetSchema\", cuacsDetSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'custody account positions' ********************************************************",
					"// ***********************************************************",
					"//************************************************************************************************",
					"const cuacsPositionSchema = ",
					"{",
					"  \"type\": \"object\",",
					"  \"required\": [",
					"    \"positions\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"positions\": {",
					"      \"type\": \"array\",",
					"      \"items\": {",
					"        \"type\": \"object\",",
					"        \"required\": [",
					"          \"id\"",
					"        ],",
					"        \"properties\": {",
					"      \"id\": {",
					"      \"type\": \"string\",",
					"    },",
					"\t\"calculationFrom\": {",
					"\t  \"type\": [\"string\",\"null\"],",
					"    },",
					"\t\"exportTime\": {",
					"\t  \"type\": \"string\",",
					"    },",
					"    \"amount\": {",
					"      \"type\": [\"object\",\"null\"],",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"type\": \"string\",",
					"        },",
					"        \"value\": {",
					"          \"type\": \"number\",",
					"        }",
					"      }",
					"    },",
					"\t\"maturityDate\": {",
					"\t  \"type\": [\"string\",\"null\"],",
					"    },",
					"\t\"salePermitted\": {",
					"\t  \"type\": \"boolean\",",
					"    },",
					"\t\"timeToMaturity\": {",
					"\t  \"type\": [\"integer\",\"null\"],",
					"    },",
					"  }",
					"      }",
					"    },",
					"    \"page\": {",
					"        \"type\": \"object\",",
					"        \"required\": [",
					"            \"number\", ",
					"            \"numberOfElements\",",
					"            \"size\",",
					"            \"totalElements\",",
					"            \"totalPages\"",
					"        ],                ",
					"        \"properties\": {",
					"            \"number\": {",
					"                \"type\": \"number\"",
					"            },",
					"            \"numberOfElements\": {",
					"                \"type\": \"number\"",
					"            },",
					"            \"size\": {",
					"                \"type\": \"number\"",
					"            },",
					"            \"totalElements\": {",
					"                \"type\": \"number\"",
					"                },",
					"            \"totalPages\": {",
					"                \"type\": \"number\"",
					"            }",
					"        }",
					"    }",
					"  }",
					"};",
					"pm.environment.set(\"cuacsPositionSchema\", cuacsPositionSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'accountSearch' ********************************************************************",
					"// created manually ******************************************************************************",
					"//************************************************************************************************",
					"const accountSearchSchema = ",
					"{",
					"  \"type\": \"object\",",
					"  \"required\": [",
					"    \"accountList\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"accountList\": {",
					"      \"type\": \"array\",",
					"      \"items\": {",
					"        \"type\": \"object\",",
					"        \"required\": [",
					"          \"accountName\",",
					"          \"accountType\",",
					"          \"accountNumber\",",
					"          \"advisorId\",",
					"          \"bank\",",
					"          \"balances\",",
					"          \"contractId\",",
					"          \"creditInterest\",",
					"          \"currencyIsoCode\",",
					"          \"customerName\",",
					"          \"debtInterest\",",
					"          \"defaultDebtAccount\",",
					"          \"description\",",
					"          \"formattedAccountNumber\",",
					"          \"iban\",",
					"          \"id\",",
					"          \"overdraftInterest\",",
					"          \"overdraftLimit\",",
					"          \"portfolioId\",",
					"          \"permissions\"",
					"        ],",
					"        \"properties\": {",
					"          \"accountName\": {",
					"            \"type\": [\"string\",\"null\"],",
					"          },",
					"          \"accountType\": {",
					"            \"type\": \"string\",",
					"          },",
					"          \"accountNumber\": {",
					"            \"type\": \"string\",",
					"          },",
					"          \"advisorId\": {",
					"            \"type\": [\"string\",\"null\"],",
					"          },",
					"          \"bank\": {",
					"            \"type\": \"object\",",
					"            \"required\": [",
					"              \"bic\",",
					"              \"institutionId\",",
					"              \"name\"",
					"            ],",
					"            \"properties\": {",
					"              \"bic\": {",
					"                \"type\": \"string\",",
					"              },",
					"              \"institutionId\": {",
					"                \"type\": \"string\",",
					"              },",
					"              \"name\": {",
					"                \"type\": \"string\",",
					"              }",
					"            }",
					"          },",
					"          \"balances\": {",
					"            \"type\": \"object\",",
					"            \"required\": [",
					"              \"availableAmount\",",
					"              \"balance\"",
					"            ],",
					"            \"properties\": {",
					"              \"availableAmount\": {",
					"                \"type\": \"object\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"type\": \"string\",",
					"                  },",
					"                  \"value\": {",
					"                    \"type\": \"number\",",
					"                  }",
					"                }",
					"              },",
					"              \"balance\": {",
					"                \"type\": \"object\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"type\": \"string\",",
					"                  },",
					"                  \"value\": {",
					"                    \"type\": \"number\",",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          },",
					"          \"contractId\": {",
					"            \"type\": [\"string\",\"null\"],",
					"          },",
					"          \"creditInterest\": {",
					"            \"type\": [\"string\",\"null\"],",
					"          },",
					"          \"currencyIsoCode\": {",
					"            \"type\": \"string\",",
					"          },",
					"          \"customerName\": {",
					"            \"type\": \"string\",",
					"          },",
					"          \"debtInterest\": {",
					"            \"type\": [\"number\",\"null\"],",
					"          },",
					"          \"defaultDebtAccount\": {",
					"            \"type\": \"boolean\",",
					"          },",
					"          \"description\": {",
					"            \"type\": \"string\",",
					"          },",
					"          \"formattedAccountNumber\": {",
					"            \"type\": \"string\",",
					"          },",
					"          \"iban\": {",
					"            \"type\": \"string\",",
					"          },",
					"          \"id\": {",
					"            \"type\": \"string\",",
					"          },",
					"          \"overdraftInterest\": {",
					"            \"type\": [\"number\",\"null\"],",
					"          },",
					"          \"overdraftLimit\": {",
					"            \"type\": [\"number\",\"null\"],",
					"          },",
					"          \"portfolioId\": {",
					"            \"type\": \"string\",",
					"          },",
					"          \"permissions\": {",
					"            \"type\": \"array\",",
					"            \"items\": {",
					"              \"type\": \"object\",",
					"              \"required\": [",
					"                \"accountId\",",
					"                \"contractId\",",
					"                \"permissions\"",
					"              ],",
					"              \"properties\": {",
					"                \"accountId\": {",
					"                  \"type\": \"string\",",
					"                },",
					"                \"contractId\": {",
					"                  \"type\": \"string\",",
					"                },",
					"                \"permissions\": {",
					"                  \"type\": \"array\",",
					"                  \"items\": {",
					"                    \"type\": \"string\",",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"type\": \"object\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"type\": \"integer\",",
					"        },",
					"        \"size\": {",
					"          \"type\": \"integer\",",
					"        },",
					"        \"totalElements\": {",
					"          \"type\": \"integer\",",
					"        },",
					"        \"totalPages\": {",
					"          \"type\": \"integer\",",
					"        }",
					"      }",
					"    }",
					"  }",
					"};",
					"pm.environment.set(\"accountSearchSchema\", accountSearchSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'positionId details' ***************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const positionIdSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"amount\",",
					"    \"calculationFrom\",",
					"    \"exportTime\",",
					"    \"maturityDate\",",
					"    \"salePermitted\",",
					"    \"timeToMaturity\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d443565538a54737638399ab0eef3b93ecb4eec4c5f\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"amount\": {",
					"      \"$id\": \"#/properties/amount\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Amount Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"calculationFrom\": {",
					"      \"$id\": \"#/properties/calculationFrom\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Calculationfrom Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"exportTime\": {",
					"      \"$id\": \"#/properties/exportTime\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Exporttime Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2019-11-04T23:11:08\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"maturityDate\": {",
					"      \"$id\": \"#/properties/maturityDate\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Maturitydate Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"salePermitted\": {",
					"      \"$id\": \"#/properties/salePermitted\",",
					"      \"type\": \"boolean\",",
					"      \"title\": \"The Salepermitted Schema\",",
					"      \"default\": false,",
					"      \"examples\": [",
					"        false",
					"      ]",
					"    },",
					"    \"timeToMaturity\": {",
					"      \"$id\": \"#/properties/timeToMaturity\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Timetomaturity Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"positionIdSchema\", positionIdSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'transactionsId list' **************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const schema = {",
					"    \"type\": \"object\",",
					"    \"required\": [",
					"        \"transactions\", ",
					"        \"page\"",
					"    ],",
					"    \"properties\": {",
					"        \"transactions\": {",
					"            \"type\": \"array\",",
					"            \"items\": {",
					"                \"type\": \"object\",",
					"                \"required\": [",
					"                    \"id\", ",
					"                    \"amount\", ",
					"                    \"bookedAt\", ",
					"                    \"bookingText\", ",
					"                    \"debitCreditCode\", ",
					"                    \"transactionKey\",",
					"                    \"transactionNumber\",",
					"                    \"valueDate\"",
					"                ],",
					"                \"properties\": {",
					"                    \"id\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"                    \"amount\": {",
					"                        \"type\": \"object\",",
					"                        \"required\": [",
					"                            \"currencyIsoCode\",",
					"                            \"value\"",
					"                        ],",
					"                        \"properties\": {",
					"                            \"currencyIsoCode\": {",
					"                                \"type\": \"string\"",
					"                            },",
					"                            \"value\": {",
					"                                \"type\": \"number\"",
					"                            }",
					"                        }",
					"                    },",
					"                    \"bookedAt\":{",
					"                        \"type\": \"string\"",
					"                    },",
					"                    \"bookingText\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"                    \"debitCreditCode\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"                    \"transactionKey\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"                    \"transactionNumber\": {",
					"                        \"type\": \"string\"",
					"                    },",
					"                    \"valueDate\": {",
					"                        \"type\": \"string\"",
					"                    }  ",
					"                }",
					"            }",
					"        },",
					"        \"page\": {",
					"            \"type\": \"object\",",
					"            \"required\": [",
					"                \"number\",",
					"                \"numberOfElements\",",
					"                \"size\",",
					"                \"totalElements\",",
					"                \"totalPages\"",
					"            ],                ",
					"            \"properties\": {",
					"                \"number\": {",
					"                    \"type\": \"number\"",
					"                },",
					"                \"numberOfElements\": {",
					"                    \"type\": \"number\"",
					"                },",
					"                \"size\": {",
					"                    \"type\": \"number\"",
					"                },",
					"                \"totalElements\": {",
					"                    \"type\": \"number\"",
					"                    },",
					"                \"totalPages\": {",
					"                    \"type\": \"number\"",
					"                }",
					"            }",
					"        }",
					"    }",
					"};",
					"pm.environment.set(\"transactionsIdSchema\", schema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'transactionsId details' ***********************************************************",
					"// created manually ******************************************************************************",
					"//************************************************************************************************",
					"const transactionsIdDetailsSchema = ",
					"{",
					"  \"type\": \"object\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"amount\",",
					"    \"bookedAt\",",
					"    \"bookingText\",",
					"    \"debitCreditCode\",",
					"    \"narrative\",",
					"    \"narrativeTextType\",",
					"    \"transactionKey\",",
					"    \"transactionNumber\",",
					"    \"valueDate\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"type\": \"string\",",
					"    },",
					"    \"amount\": {",
					"      \"type\": \"object\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"type\": \"string\",",
					"        },",
					"        \"value\": {",
					"          \"type\": \"number\",",
					"        }",
					"      }",
					"    },",
					"    \"bookedAt\": {",
					"      \"type\": \"string\",",
					"    },",
					"    \"bookingText\": {",
					"      \"type\": \"string\",",
					"    },",
					"    \"debitCreditCode\": {",
					"      \"type\": \"string\",",
					"    },",
					"    \"narrative\": {",
					"      \"type\": [\"null\",\"string\"],",
					"    },",
					"    \"narrativeTextType\": {",
					"      \"type\": [\"null\",\"string\"],",
					"    },",
					"    \"transactionKey\": {",
					"      \"type\": \"string\",",
					"    },",
					"    \"transactionNumber\": {",
					"      \"type\": \"string\",",
					"    },",
					"    \"valueDate\": {",
					"      \"type\": \"string\",",
					"    }",
					"  }",
					"};",
					"pm.environment.set(\"transactionsIdDetailsSchema\", transactionsIdDetailsSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'portfolio schema' *****************************************************************",
					"//************************************************************************************************",
					"const portfolioSchema = ",
					"{",
					"    \"type\": \"object\",",
					"    \"required\": [",
					"        \"portfolios\",",
					"        \"page\"",
					"    ],",
					"    \"properties\": {",
					"        \"portfolios\": {",
					"          \"type\": \"array\",",
					"          \"items\": {",
					"            \"type\": \"object\",",
					"            \"required\": [",
					"              \"id\",",
					"              \"customerId\",",
					"              \"name\",",
					"              \"amount\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"type\": \"string\",",
					"              },",
					"              \"customerId\": {",
					"                \"type\": \"string\",",
					"              },",
					"              \"name\": {",
					"                \"type\": \"string\",",
					"              },",
					"              \"amount\": {",
					"                \"type\": \"object\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"type\": \"string\",",
					"                  },",
					"                  \"value\": {",
					"                    \"type\": \"number\",",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"    },",
					"    \"page\": {",
					"        \"type\": \"object\",",
					"        \"required\": [",
					"            \"number\", ",
					"            \"numberOfElements\",",
					"            \"size\",",
					"            \"totalElements\",",
					"            \"totalPages\"",
					"        ],                ",
					"        \"properties\": {",
					"            \"number\": {",
					"                \"type\": \"integer\"",
					"            },",
					"            \"numberOfElements\": {",
					"                \"type\": \"integer\"",
					"            },",
					"            \"size\": {",
					"                \"type\": \"integer\"",
					"            },",
					"            \"totalElements\": {",
					"                \"type\": \"integer\"",
					"                },",
					"            \"totalPages\": {",
					"                \"type\": \"integer\"",
					"            }",
					"        }",
					"    }",
					"};",
					"pm.environment.set(\"portfolioSchema\", portfolioSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'portfolio details schema' *********************************************************",
					"//************************************************************************************************",
					"const portfolioDetailsSchema = ",
					"{",
					"  \"type\": \"object\",",
					"  \"required\": [",
					"    \"id\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"type\": \"string\",",
					"    },",
					"    \"customerId\": {",
					"      \"type\": \"string\",",
					"    },",
					"    \"name\": {",
					"      \"type\": \"string\",",
					"    },",
					"    \"amount\": {",
					"      \"type\": \"object\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"type\": \"string\",",
					"        },",
					"        \"value\": {",
					"          \"type\": \"number\",",
					"        }",
					"      }",
					"    }",
					"  }",
					"};",
					"pm.environment.set(\"portfolioDetailsSchema\", portfolioDetailsSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'maturity details schema' *********************************************************",
					"//************************************************************************************************",
					"const maturityDetailsSchema = ",
					"{",
					"  \"type\": \"object\",",
					"  \"required\": [",
					"    \"maturities\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"maturities\": {",
					"      \"type\": \"array\",",
					"      \"items\": {",
					"        \"type\": \"object\",",
					"        \"required\": [",
					"          \"id\"",
					"        ],",
					"        \"properties\": {",
					"      \"id\": {",
					"      \"type\": \"string\",",
					"    },",
					"\t\"currencyIsoCode\": {",
					"\t  \"type\": \"string\",",
					"    },",
					"\t\"currencyEntryType\": {",
					"\t  \"type\": \"string\",",
					"    },",
					"\t\"onCall\": {",
					"\t  \"type\": \"number\",",
					"    },",
					"\t\"valueDate\t\": {",
					"\t  \"type\": \"string\",",
					"    }",
					"      }",
					"      }",
					"    },",
					"    \"page\": {",
					"        \"type\": \"object\",",
					"        \"required\": [",
					"            \"number\", ",
					"            \"numberOfElements\",",
					"            \"size\",",
					"            \"totalElements\",",
					"            \"totalPages\"",
					"        ],                ",
					"        \"properties\": {",
					"            \"number\": {",
					"                \"type\": \"number\"",
					"            },",
					"            \"numberOfElements\": {",
					"                \"type\": \"number\"",
					"            },",
					"            \"size\": {",
					"                \"type\": \"number\"",
					"            },",
					"            \"totalElements\": {",
					"                \"type\": \"number\"",
					"                },",
					"            \"totalPages\": {",
					"                \"type\": \"number\"",
					"            }",
					"        }",
					"    }",
					"  }",
					"};",
					"pm.environment.set(\"maturityDetailsSchema\", maturityDetailsSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'portfolio performance schema' *****************************************************",
					"//************************************************************************************************",
					"const portfolioPerformanceSchema = ",
					"{",
					"  \"type\": \"object\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"performancePeriod\",",
					"    \"accruedInterestBalance\",",
					"    \"accruedInterestChange\",",
					"    \"netIncome\",",
					"    \"tax\",",
					"    \"startDate\",",
					"    \"endDate\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"type\": \"string\",",
					"    },",
					"    \"performancePeriod\": {",
					"      \"type\": \"string\",",
					"    },",
					"    \"accruedInterestBalance\": {",
					"      \"type\": \"number\",",
					"    },",
					"    \"accruedInterestChange\": {",
					"      \"type\": \"number\",",
					"    },",
					"    \"netIncome\": {",
					"      \"type\": \"number\",",
					"    },",
					"    \"tax\": {",
					"      \"type\": \"number\",",
					"    },",
					"    \"startDate\": {",
					"      \"type\": \"string\",",
					"    },",
					"    \"endDate\": {",
					"      \"type\": \"string\",",
					"    }",
					"  }",
					"};",
					"pm.environment.set(\"portfolioPerformanceSchema\", portfolioPerformanceSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'transaction list schema' **********************************************************",
					"//************************************************************************************************",
					"const transactionsListSchema = ",
					"{",
					"  \"type\": \"object\",",
					"  \"required\": [",
					"    \"transactionGroups\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"transactionGroups\": {",
					"      \"type\": \"array\",",
					"      \"items\": {",
					"        \"type\": \"object\",",
					"        \"required\": [",
					"          \"balance\",",
					"          \"date\",",
					"          \"transactions\"",
					"        ],",
					"        \"properties\": {",
					"          \"balance\": {",
					"            \"type\": \"object\",",
					"            \"required\": [",
					"              \"currencyIsoCode\",",
					"              \"value\"",
					"            ],",
					"            \"properties\": {",
					"              \"currencyIsoCode\": {",
					"                \"type\": \"string\",",
					"              },",
					"              \"value\": {",
					"                \"type\": \"number\",",
					"              }",
					"            }",
					"          },",
					"          \"date\": {",
					"            \"type\": \"string\",",
					"          },",
					"          \"transactions\": {",
					"            \"type\": \"array\",",
					"            \"items\": {",
					"              \"type\": \"object\",",
					"              \"required\": [",
					"                \"id\",",
					"                \"accountId\",",
					"                \"valutaDate\",",
					"                \"bookingDate\",",
					"                \"booked\",",
					"                \"amount\",",
					"                \"creditorAccount\",",
					"                \"debtorAccount\",",
					"                \"end2endID\",",
					"                \"referenceNumber\",",
					"                \"bookingText\",",
					"                \"referenceText\"",
					"              ],",
					"              \"properties\": {",
					"                \"id\": {",
					"                  \"type\": \"string\",",
					"                },",
					"                \"accountId\": {",
					"                  \"type\": \"string\",",
					"                },",
					"                \"valutaDate\": {",
					"                  \"type\": \"string\",",
					"                },",
					"                \"bookingDate\": {",
					"                  \"type\": \"string\",",
					"                },",
					"                \"booked\": {",
					"                  \"type\": \"boolean\",",
					"                },",
					"                \"amount\": {",
					"                  \"type\": \"object\",",
					"                  \"required\": [",
					"                    \"currencyIsoCode\",",
					"                    \"value\"",
					"                  ],",
					"                  \"properties\": {",
					"                    \"currencyIsoCode\": {",
					"                      \"type\": \"string\",",
					"                    },",
					"                    \"value\": {",
					"                      \"type\": \"number\",",
					"                    }",
					"                  }",
					"                },",
					"                \"creditorAccount\": {",
					"                  \"type\": [\"string\",\"null\"],",
					"                },",
					"                \"debtorAccount\": {",
					"                  \"type\": [\"string\",\"null\"],",
					"                },",
					"                \"end2endID\": {",
					"                  \"type\": [\"string\",\"null\"],",
					"                },",
					"                \"referenceNumber\": {",
					"                  \"type\": [\"string\",\"null\"],",
					"                },",
					"                \"bookingText\": {",
					"                  \"type\": \"string\",",
					"                },",
					"                \"referenceText\": {",
					"                  \"type\": [\"string\",\"null\"],",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"        \"type\": \"object\",",
					"        \"required\": [",
					"            \"number\", ",
					"            \"numberOfElements\",",
					"            \"size\",",
					"            \"totalElements\",",
					"            \"totalPages\"",
					"        ],                ",
					"        \"properties\": {",
					"            \"number\": {",
					"                \"type\": \"number\"",
					"            },",
					"            \"numberOfElements\": {",
					"                \"type\": \"number\"",
					"            },",
					"            \"size\": {",
					"                \"type\": \"number\"",
					"            },",
					"            \"totalElements\": {",
					"                \"type\": \"number\"",
					"                },",
					"            \"totalPages\": {",
					"                \"type\": \"number\"",
					"            }",
					"        }",
					"    }",
					"  }",
					"};",
					"pm.environment.set(\"transactionsListSchema\", transactionsListSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'details for assets list schema' ***************************************************",
					"//************************************************************************************************",
					"const assetsListDetailsSchema = ",
					"{",
					"  \"type\": \"object\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"assetNumber\",",
					"    \"assetType\",",
					"    \"amount\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"type\": \"string\",",
					"    },",
					"    \"assetNumber\": {",
					"      \"type\": \"string\",",
					"    },",
					"    \"assetType\": {",
					"      \"type\": \"string\",",
					"    },",
					"    \"amount\": {",
					"      \"type\": \"object\",",
					"      \"required\":[",
					"          \"currencyIsoCode\",",
					"          \"value\"",
					"      ],",
					"      \"properties\": {",
					"          \"currencyIsoCode\": {",
					"              \"type\": \"string\"",
					"          },",
					"          \"value\": {",
					"              \"type\": \"number\"",
					"          }",
					"      }",
					"    }",
					"  }",
					"};",
					"pm.environment.set(\"assetsListDetailsSchema\", assetsListDetailsSchema);",
					"",
					"//************************************************************************************************",
					"//global function to determine next day/next working day *****************************************",
					"//************************************************************************************************",
					"var moment = require('moment');",
					"let nextDay = moment().add(\"days\",1).format(\"YYYY-MM-DD\");",
					"let todayIsDay = moment().add(\"days\",0).format(\"YYYY-MM-DD\");",
					"//next day in specified format",
					"switch (moment().add(\"days\",1).format(\"dddd\")){",
					"    case \"Sunday\":",
					"        var nextWorkingDay = moment().add(\"days\",2).format(\"YYYY-MM-DD\");",
					"        break;",
					"    case \"Saturday\":",
					"        var nextWorkingDay = moment().add(\"days\",3).format(\"YYYY-MM-DD\");",
					"        break;",
					"    default:",
					"        var nextWorkingDay = moment().add(\"days\",1).format(\"YYYY-MM-DD\");",
					"}",
					"pm.globals.set('PrS:nextDay', JSON.stringify(nextDay));",
					"pm.globals.set('PrS:nextWorkingDay', JSON.stringify(nextWorkingDay));",
					"pm.globals.set('PrS:today',JSON.stringify(todayIsDay));",
					"/*",
					"// Define test data, setup configuration per environment",
					"var env = pm.environment.get(\"envName\");",
					"if (env === \"MDB-R191-TEST\") {",
					"//    var contractNumber = \"{{contractNumber}}\";",
					"//    var debtorAccountNo = \"{{debtorAccountNo}}\";",
					"//    var debtorAccountName = \"{{debtorAccountName}}\";",
					"//    var creditorAccountNo = \"{{creditorAccountNo}}\";",
					"    } else if (env === \"MDB-R191-LAT\") {",
					"} else {",
					"    throw new Error(\"Wrong environment selected, requests are skipped!\")",
					"}",
					"//pm.globals.set('PrS:contractNumber', JSON.stringify(contractNumber));",
					"//pm.globals.set('PrS:debtorAccountNo', JSON.stringify(debtorAccountNo));",
					"//pm.globals.set('PrS:debtorAccountName', JSON.stringify(debtorAccountName));",
					"//pm.globals.set('PrS:creditorAccountNo', JSON.stringify(creditorAccountNo));",
					"*/",
					"",
					"// Save the object as a variable.",
					"// JSON.stringify will serialize the object so that Postman can save it",
					"",
					"//pm.globals.set('PrS:tags', JSON.stringify(tags));",
					"//pm.environment.set(\"testGroup\",\"Patient Zero\") //set environment variable if/when needed",
					"                //pm.response.to.be.ok;         - Status code must be 200",
					"                //pm.response.to.be.error       - Checks 4XX or 5XX",
					"                //pm.response.to.be.serverError - Checks 5XX",
					"                //pm.response.to.be.clientError - Checks 4XX status code",
					"",
					"postman.setGlobalVariable(\"uuidv4\", () => {",
					"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
					"        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
					"        return v.toString(16);",
					"    });",
					"});",
					"",
					"// Save common tests in a global variable",
					"postman.setGlobalVariable(\"commonTests\", () => {",
					"    pm.test(\"Response must be valid with/with out a body and with proper status code\", function () {",
					"        if ([\"GET\",\"POST\",\"PUT\"].indexOf(request.method) > -1) {",
					"            pm.response.to.not.be.error;",
					"            pm.response.to.be.withBody;",
					"            pm.response.to.be.json;",
					"            pm.response.to.have.jsonBody();",
					"            pm.response.to.not.have.jsonBody('error');",
					"            pm.response.to.have.header('Content-Type', 'application/hal+json;charset=UTF-8');",
					"        } else {",
					"            pm.response.to.not.be.withBody;",
					"        }",
					"        switch(request.method){",
					"            case \"POST\":",
					"                pm.response.to.have.status(201);",
					"                break;",
					"            case \"PUT\":",
					"                pm.response.to.have.status(200);",
					"                break;",
					"            case \"GET\":",
					"                pm.response.to.have.status(200);",
					"                break;",
					"            case \"DELETE\":",
					"                pm.response.to.have.status(204);",
					"                break;",
					"        }        ",
					"    });",
					"    //pm.test(\"Response time is below 1000ms\", function () {",
					"    //    pm.expect(pm.response.responseTime).to.be.below(1000);",
					"    //});",
					"});",
					"",
					"postman.setGlobalVariable(\"assertValidCreditorAgent\", () => {",
					"    pm.expect(address).to.be.an('object').with.keys('name1', 'name2', 'street', 'city', 'country');",
					"    pm.expect(address.name1).to.be.a('string').and.not.empty;",
					"    pm.expect(address.name2).to.be.a('string').and.not.empty;",
					"    pm.expect(address.street).to.be.a('string').and.not.empty;",
					"    pm.expect(address.city).to.be.a('string').and.not.empty;",
					"    pm.expect(address.country).to.be.a('string').with.lengthOf(2).and.match(/[A-Z]+/);",
					"});",
					"",
					"postman.setGlobalVariable(\"sessionInit\", (testSession, sessionName) => {",
					"    //session init section",
					"    console.log(request.name + \", initialization: \" + testSession + \", global var: \" + sessionName);",
					"    console.log(request.name + \", executing: \" + testSession[0]);",
					"    ",
					"    // Select first test from session to be executed",
					"    postman.setNextRequest(testSession[0]); ",
					"    testSession.shift();",
					"    if (testSession.length === 0) {",
					"        console.log(request.name + \", test session is empty, unset \" + sessionName);",
					"        pm.globals.unset(sessionName);",
					"        console.log(request.name + \", terminate tests execution list\");",
					"    } else {",
					"        pm.globals.set(sessionName, testSession);",
					"        console.log(request.name + \" for \" + sessionName + \", updated list of tests to be executed: \" + testSession);",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"sessionNavigate\", () => {",
					"    console.log(request.name + \", entering ...\");",
					"    if (pm.globals.get(\"requestsToRun\") === undefined){",
					"        console.log(request.name + \", requestsToRun is undefined\");",
					"        pm.globals.set(\"testRailTestCases\",\"\");",
					"        console.log(request.name + \", reset global var: testRailTestCases\");    ",
					"        if (pm.globals.get(\"testSession\") === undefined){",
					"            console.log(request.name + \", testSession is undefined\");",
					"            //here >> export list of tests executed",
					"            var tests = pm.environment.get(\"testRailTestsInRun\");",
					"            tests = tests.replace(/C/g, \"\");",
					"            tests = tests.replace(/ /g, \", \");",
					"            tests = tests.replace(/,,/g, \",\");",
					"            console.log(\"TestRail tests executed executed in this run: \" + tests);",
					"            console.log(\"The end\");",
					"            postman.setNextRequest(null);",
					"        } else {",
					"        var testSession = pm.globals.get(\"testSession\");",
					"        console.log(request.name + \", checking what to run: \" + testSession[0]);",
					"        postman.setNextRequest(testSession[0]); // Run: GET SWIFT payment",
					"        testSession.shift();",
					"        if (testSession.length === 0) {",
					"            pm.globals.unset(\"testSession\");",
					"            console.log(request.name + \", terminate execution list\");",
					"        } else {",
					"            pm.globals.set(\"testSession\", testSession);",
					"            console.log(request.name + \", updated list of tests to be executed: \" + testSession);",
					"        }}",
					"    } else {",
					"    var requestsToRun = pm.globals.get(\"requestsToRun\");",
					"    console.log(request.name + \", checking what to run: \" + requestsToRun[0]);",
					"    postman.setNextRequest(requestsToRun[0]); ",
					"    requestsToRun.shift();",
					"    if (requestsToRun.length === 0) {",
					"        pm.globals.unset(\"requestsToRun\");",
					"        console.log(request.name + \", terminate requests execution list\");",
					"    } else {",
					"        pm.globals.set(\"requestsToRun\", requestsToRun);",
					"        console.log(request.name + \", updated list of requests to be executed: \" + requestsToRun);",
					"    }}",
					"});",
					"",
					"postman.setGlobalVariable(\"cleanup\", () => {",
					"    const clean = [\"requestsToRun\", \"testSession\"];",
					"    for(let i = 0; i < clean.length; ++i){",
					"        pm.globals.unset(clean[i]);",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"testsExecuted\", (listOfExecutedTests) => {",
					"    let tests =  pm.environment.get(\"testRailTestsInRun\");",
					"    //console.log(\"TestRail tests stored in 'testRailTestsInRun': \" + tests);",
					"    if (tests.length > 0) {",
					"        tests = tests + \" \"",
					"    }",
					"    tests = tests + listOfExecutedTests;",
					"    //console.log(\"TestRail tests to be stored to 'testRailTestsInRun': \" + tests);",
					"    pm.environment.set(\"testRailTestsInRun\",tests);",
					"    //console.log(\"TestRail tests executed so far: \" + tests);",
					"});",
					"",
					"postman.setGlobalVariable(\"extractTestCaseIDFromRequestName\", () => {",
					"    let n = request.name.lastIndexOf(\"(\");",
					"    return request.name.substr(n + 1, request.name.length - n - 2);",
					"});",
					"",
					"postman.setGlobalVariable(\"schemaValidator\", (schema, jsonData) => {",
					"    //old, deprecated schema validationimplementation",
					"    //pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;",
					"    ",
					"    //new schema validation implementation",
					"    ",
					"    var schemaValidationPassed = true;",
					"    var serviceSchema = pm.environment.get(schema);",
					"    //var jsonData = JSON.parse(pm.responseBody);",
					"",
					"    var validationResult = tv4.validateMultiple(jsonData, serviceSchema, true, true);",
					"    for(var i =0; i<validationResult.errors.length;i++){",
					"        console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  ",
					"        //Skipping all \"Invalid type\" errors as they are expected with current service implementations",
					"        schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);",
					"        //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);",
					"    }    ",
					"    return schemaValidationPassed;",
					"}); ",
					"",
					"postman.setGlobalVariable(\"generateAccessToken\", () => {",
					"    const getAccessTokenRequest = {",
					"        url: pm.environment.get(\"env_security_testToken\"),",
					"        method: \"POST\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json'",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"                tenant_id: pm.environment.get(\"tenantId_security\"), ",
					"                acsKey: \"i6PiNObtdp2rCNW7mlV51BDSY4zAliSvBCyVsuML1000203567\",",
					"                tenant_name: pm.environment.get(\"tenantName_security\"),",
					"                user_name: `${pm.environment.get(\"userId_security\")}`,",
					"                contractNo: pm.environment.get(\"contractNo_security\"),",
					"                loginName: `${pm.environment.get(\"userId_security\")}`,",
					"                sub: `${pm.environment.get(\"bcNo\")}:${pm.environment.get(\"userId_security\")}`,",
					"                preferred_user_name: `${pm.environment.get(\"userId_security\")}`,",
					"                language: pm.environment.get(\"language\"),",
					"                bcNo: pm.environment.get(\"bcNo_security\"),",
					"                authorities: [\"DBAN_ADMIN\", \"DBAN_USER\"],",
					"                aud: [\"dban\"],",
					"                client_id: \"postman\",",
					"                user_id: `${pm.environment.get(\"userId_security\")}`,",
					"                scope: [",
					"                \t\"https://api.crealogix.com/dban\",",
					"                \t\"read\",",
					"                \t\"write\",",
					"                \t\"https://api.crealogix.com/contracts/contract.advisor.readonly\",",
					"                \t\"https://api.crealogix.com/contracts/contract.metadata.readonly\",",
					"                \t\"https://api.crealogix.com/contracts/contract.person.readonly\",",
					"                \t\"https://api.crealogix.com/payments/payment.initiate\",",
					"                \t\"https://api.crealogix.com/payments/payment.read\",",
					"                \t\"https://api.crealogix.com/payments/payment.write\",",
					"                \t\"https://api.crealogix.com/assets/account#read\",",
					"                \t\"https://api.crealogix.com/assets/account/read\",",
					"                \t\"https://api.crealogix.com/assets/account.transaction#read\",",
					"                \t\"https://api.crealogix.com/assets/account.name\",",
					"                \t\"https://api.crealogix.com/assets/account.image\",",
					"                \t\"https://api.crealogix.com/assets/cuac#read\",",
					"                \t\"https://api.crealogix.com/assets/portfolio#read\",",
					"                \t\"https://api.crealogix.com/messages/securemail.write\",",
					"                \t\"https://api.crealogix.com/messages/securemail.read\",",
					"                \t\"https://api.crealogix.com/messages/document.category.read\",",
					"                \t\"https://api.crealogix.com/messages/document.category.write\",",
					"                \t\"https://api.crealogix.com/messages/document.write\",",
					"                \t\"https://api.crealogix.com/messages/document.read\",",
					"                \t\"https://api.crealogix.com/brokerage/order\",",
					"                    \"https://api.crealogix.com/brokerage/order#read\",\t",
					"                \t\"https://api.crealogix.com/brokerage/security#read\",",
					"                    \"https://api.crealogix.com/brokerage/tradingplace#read\",\t",
					"                    \"https://api.crealogix.com/brokerage/depository#read\",",
					"                \t\"https://api.crealogix.com/deeplink/domains\",",
					"                \t\"https://api.crealogix.com/deeplink/links\"",
					"                ]",
					"            })",
					"        }",
					"    };",
					"    pm.environment.set(\"request\", JSON.stringify(getAccessTokenRequest));",
					"    ",
					"    pm.sendRequest(getAccessTokenRequest, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"access_token\", res.text());",
					"        }         ",
					"    });",
					"});",
					"",
					"",
					"/* function for making assets search*/",
					"postman.setGlobalVariable(\"assetsSearchFunction\", (NextPrecondition) => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/api/v2/${pm.environment.get(\"tenantId_assets\")}/accounts/search?size=30`,",
					"        method: \"POST\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({})",
					"        }",
					"    ",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"_tmp_accountId\",res.json().accountList[res.json().page.totalElements-13].id);",
					"            console.log(\"New account ID: \" + pm.environment.get(\"_tmp_accountId\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_accountId2\",res.json().accountList[2].id);",
					"\t\t\tconsole.log(\"New account ID2: \" + pm.environment.get(\"_tmp_accountId2\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_accountIdAlias\",res.json().accountList[2].id);",
					"\t\t\tconsole.log(\"New account _tmp_accountIdAlias: \" + pm.environment.get(\"_tmp_accountIdAlias\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_accountNumber1\",res.json().accountList[0].accountNumber);",
					"\t\t\tconsole.log(\"New _tmp_accountNumber1: \" + pm.environment.get(\"_tmp_accountNumber1\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_accountNumber2\",res.json().accountList[1].accountNumber);",
					"\t\t\tconsole.log(\"New _tmp_accountNumber2: \" + pm.environment.get(\"_tmp_accountNumber2\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_iban1\",res.json().accountList[0].iban);",
					"\t\t\tconsole.log(\"New _tmp_iban1: \" + pm.environment.get(\"_tmp_iban1\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_iban2\",res.json().accountList[1].iban);",
					"\t\t\tconsole.log(\"New _tmp_iban2: \" + pm.environment.get(\"_tmp_iban2\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_id1\",res.json().accountList[0].id);",
					"\t\t\tconsole.log(\"New _tmp_id1: \" + pm.environment.get(\"_tmp_id1\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_id2\",res.json().accountList[1].id);",
					"\t\t\tconsole.log(\"New _tmp_id2: \" + pm.environment.get(\"_tmp_id2\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_contractId\",res.json().accountList[0].permissions[0].contractId);",
					"\t\t\tconsole.log(\"New _tmp_contractId: \" + pm.environment.get(\"_tmp_contractId\"));",
					"",
					"            switch (NextPrecondition){",
					"                case \"assetsTransactionSearchFunction\":",
					"                    eval(globals.assetsTransactionSearchFunction)();",
					"                    break;",
					"                default:",
					"            }",
					"        }                          ",
					"    });",
					"});",
					"",
					"/* function for making cuacs request*/",
					"postman.setGlobalVariable(\"cuacsRequest\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/cuacs/${pm.environment.get(\"tenantId_assets\")}/v1/cuacs`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({})",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json()._embedded);",
					"            ",
					"        } else {",
					"            pm.environment.set(\"_tmp_cuacsId\",res.json.cuacs[0].id);",
					"            console.log(\"New custody account ID: \" + pm.environment.get(\"_tmp_cuacsId\"));",
					"        }                          ",
					"    });",
					"});",
					"",
					"/* function for getting custody accounts*/",
					"postman.setGlobalVariable(\"getCustodyAccounts\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/api/v2/${pm.environment.get(\"tenantId_assets\")}/cuacs`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json; charset=UTF-8',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            console.log(res.json());",
					"            pm.environment.set(\"_tmp_cuacsId\", res.json().cuacs[0].id);",
					"            console.log(\"Custody account ID: \" + pm.environment.get(\"_tmp_cuacsId\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for making portfolio request*/",
					"postman.setGlobalVariable(\"portfolioRequest\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/api/v2/${pm.environment.get(\"tenantId_assets\")}/portfolios`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({})",
					"        }",
					"    ",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"_tmp_portfolioId\",res.json().portfolios[1].id);",
					"            console.log(\"New portfolio ID: \" + pm.environment.get(\"_tmp_portfolioId\"));",
					"\t\t\tpm.environment.set(\"_tmp_customerId\",res.json().portfolios[1].customerId);",
					"            console.log(\"New customer ID: \" + pm.environment.get(\"_tmp_customerId\"));",
					"        }                          ",
					"    });",
					"});",
					"",
					"/* function for getting positions by custody account*/",
					"postman.setGlobalVariable(\"getPositionsByCustodyAccount\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/api/v2/${pm.environment.get(\"tenantId_assets\")}/cuacs/${pm.environment.get(\"_tmp_cuacsId\")}/positions`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json; charset=UTF-8',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            console.log(res.json());",
					"            pm.environment.set(\"_tmp_positionsId\", res.json().positions[0].id);",
					"            console.log(\"Position ID: \" + pm.environment.get(\"_tmp_positionsId\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for getting transactions by custody account*/",
					"postman.setGlobalVariable(\"getTransactionsByCustodyAccount\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/api/v2/${pm.environment.get(\"tenantId_assets\")}/cuacs/${pm.environment.get(\"_tmp_cuacsId\")}/transactions`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json; charset=UTF-8',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            console.log(res.json());",
					"            pm.environment.set(\"_tmp_transactionsId\", res.json().transactions[0].id);",
					"            console.log(\"Transaction ID: \" + pm.environment.get(\"_tmp_transactionsId\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for getting asset id from asset list request*/",
					"postman.setGlobalVariable(\"getAssetsList\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/api/v2/${pm.environment.get(\"tenantId_assets\")}/portfolios/${pm.environment.get(\"_tmp_portfolioId\")}/assets`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"            })",
					"        }    ",
					"}, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            console.log(res.json());\t\t\t",
					"            pm.environment.set(\"_tmp_assetsId\", res.json().assets[0].id);",
					"            console.log(\"New asset ID: \" + pm.environment.get(\"_tmp_assetsId\"));",
					"        }                          ",
					"    });",
					"});",
					"",
					"/* function for making assets transaction search*/",
					"postman.setGlobalVariable(\"assetsTransactionSearchFunction\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/accounts/${pm.environment.get(\"tenantId_assets\")}/v4/accounts/${pm.environment.get(\"_tmp_accountId\")}/transactions/search`,",
					"        method: \"POST\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw:JSON.stringify({ ",
					"\t    \torderBy: [",
					"\t\t\t\t{",
					"\t\t\t\t\tfield: \"AMOUNT\",",
					"\t\t\t\t\tsortOrder:\"ASC\"",
					"\t\t\t\t}]",
					"\t\t\t,",
					"\t\t\tcriteria: {",
					"\t\t\t\t\tstartDate:\"2019-01-01\",",
					"\t\t\t\t\tendDate:\"2020-06-01\"",
					"\t\t\t\t}         \t",
					"            })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            let noData = (res.json.transactionGroups === undefined || res.json.transactionGroups.length === 0);     ",
					"            if(!noData){",
					"                pm.environment.set(\"_tmp_transactionsId\",res.json.transactionGroups[0].transactions[0].id);",
					"                console.log(\"New transaction ID is set: \" + pm.environment.get(\"_tmp_transactionsId\"));",
					"            } else {",
					"                pm.environment.unset(\"_tmp_transactionsId\");",
					"                console.log(\"!ERROR!: Response is empty, no transaction ID to store!\");",
					"            }",
					"        }              ",
					"    });",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "a2a92431-e2ef-4c47-9453-ca4f4e8bec26",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "e36c7bdd-1050-49b6-9da9-0fc6cf23b340",
			"value": "",
			"type": "string",
			"disabled": true
		}
	]
}