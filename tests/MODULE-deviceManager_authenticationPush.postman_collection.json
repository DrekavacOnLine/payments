{
	"info": {
		"_postman_id": "b1d79409-a8d0-48cf-8ef1-f90ec5e30327",
		"name": "MODULE: Device Manager & Authentication Push",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Tests",
			"item": [
				{
					"name": "#INIT",
					"item": [
						{
							"name": "_Test session init",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
										"exec": [
											"//reset global variables for controling execution flow",
											"eval(globals.cleanup)();",
											"//clear list of executed TestRail tests",
											"pm.environment.set(\"testRailTestsInRun\",\"\");   ",
											"",
											"var contractNumber = data.contractNumber;",
											"if (contractNumber){ ",
											"    pm.environment.set(\"contract\",JSON.parse(data.contractNumber));",
											"    console.log(\"dataFile/contractNumber: \" + contractNumber);",
											"}",
											"",
											"var tenantId_security = data.tenantId_security;",
											"if (tenantId_security){ ",
											"    pm.environment.set(\"tenantId_security\",data.tenantId_security);",
											"    console.log(\"dataFile/tenantId_security: \" + tenantId_security);",
											"}",
											"",
											"var tenantName_security = data.tenantName_security;",
											"if (tenantName_security){ ",
											"    pm.environment.set(\"tenantName_security\",data.tenantName_security);",
											"    console.log(\"dataFile/tenantName_security: \" + tenantName_security);",
											"}",
											"",
											"var userName_security = data.userName_security;",
											"if (userName_security){ ",
											"    pm.environment.set(\"userName_security\",data.userName_security);",
											"    console.log(\"dataFile/userName_security: \" + userName_security);",
											"}",
											"",
											"var contractNo_security = data.contractNo_security;",
											"if (contractNo_security){ ",
											"    pm.environment.set(\"contractNo_security\",data.contractNo_security);",
											"    console.log(\"dataFile/contractNo_security: \" + contractNo_security);",
											"}",
											"",
											"var bcNo_security = data.bcNo_security;",
											"if (bcNo_security){ ",
											"    pm.environment.set(\"bcNo_security\",data.bcNo_security);",
											"    console.log(\"dataFile/bcNo_security: \" + bcNo_security);",
											"}",
											"",
											"var userId_security = data.contractNumber;",
											"if (userId_security){ ",
											"    pm.environment.set(\"userId_security\",JSON.parse(data.contractNumber));",
											"    console.log(\"dataFile/userId_security: \" + userId_security);",
											"}",
											"",
											"//specify list of tests to be executed in exact order",
											"//const testsScope = \"Full\"; [Full|Core|Full+TestRail]",
											"let testsScope = data.testsScope;",
											"",
											"switch(testsScope) {",
											"    case \"Full\":",
											"        var testSession = [",
											"            ]; ",
											"        break;",
											"    case \"Core\":",
											"        var testSession = [",
											"            \"generate TOKEN with SUB key (ToDo)\",",
											"            \"1. P Reg_Init (ToDo)\",",
											"            \"2. P MapRegister (ToDo)\",",
											"            \"3. P reg_Register (ToDo)\",",
											"            \"4. P Auth_Init (ToDo)\",",
											"            \"5. P Map Authenticate (ToDo)\",",
											"            \"6. P Auth_Authenticate (ToDo)\",",
											"            \"7. P Get Device (ToDo)\",",
											"            \"8. Push Srv asks DM during PUSH sending using /devices/find (ToDo)\",",
											"            \"9. Push messages - SEND MSG (ToDo)\",",
											"            \"10. P /messages/{pushid} (ToDo)\",",
											"            \"11. P /messages/{pushid}/state (ToDo)\",",
											"            \"12. P MAP /device/{deviceID}/messages?selector=undelivered (ToDo)\",",
											"            \"13. P MAP /device/{deviceID}/messages/{pushid} (ToDo)\",",
											"            \"14. P MAP /device/{deviceID}/messages?selector=all (ToDo)\"",
											"            ]; ",
											"        break;",
											"    case \"Quick\":",
											"        var testSession = [",
											"            ]; ",
											"        break;",
											"    case \"TestRailClean\":        ",
											"        var testSession = [",
											"            \"_Test session close\"",
											"            ]; ",
											"        break;",
											"    default:",
											"        throw new Error(\"No tests selected for execution!\")",
											"}        ",
											"    ",
											"// Session initiate from PrS using eval()",
											"eval(globals.sessionInit)(testSession, \"testSession\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "OPTIONS",
								"header": [],
								"url": {
									"raw": "httpbin.org/uuid",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"uuid"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "generate TOKEN with SUB key (ToDo)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestToken\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_getAuthTestToken\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "1. P Reg_Init (ToDo)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"pRegInit\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_pRegInit\",testRailTestCases);",
									"",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "2. P MapRegister (ToDo)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"pMapRegister\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_pMapRegister\",testRailTestCases);",
									"",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "3. P reg_Register (ToDo)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"pRegRegister\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_pRegRegister\",testRailTestCases);",
									"",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "4. P Auth_Init (ToDo)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"pAuthInit\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_pAuthInit\",testRailTestCases);",
									"",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "5. P Map Authenticate (ToDo)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"pMapAuthenticate\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_pMapAuthenticate\",testRailTestCases);",
									"",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "6. P Auth_Authenticate (ToDo)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"pAuthAuthenticate\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_pAuthAuthenticate\",testRailTestCases);",
									"",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "7. P Get Device (ToDo)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"pGetDevice\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_pGetDevice\",testRailTestCases);",
									"",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "8. Push Srv asks DM during PUSH sending using /devices/find (ToDo)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"pFindDevice\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_pFindDevice\",testRailTestCases);",
									"",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "9. Push messages - SEND MSG (ToDo)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"pSendMessage\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_pSendMessage\",testRailTestCases);",
									"",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "10. P /messages/{pushid} (ToDo)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"pGetMessage\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_pGetMessage\",testRailTestCases);",
									"",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "11. P /messages/{pushid}/state (ToDo)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"pGetMessageState\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_pGetMessageState\",testRailTestCases);",
									"",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "12. P MAP /device/{deviceID}/messages?selector=undelivered (ToDo)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"pMapMessagesUndelivered\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_pMapMessagesUndelivered\",testRailTestCases);",
									"",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "13. P MAP /device/{deviceID}/messages/{pushid} (ToDo)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"pMapGetMessage\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_pMapGetMessage\",testRailTestCases);",
									"",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				},
				{
					"name": "14. P MAP /device/{deviceID}/messages?selector=all (ToDo)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5613bab9-009b-4462-80ca-f5bd2c27989e",
								"exec": [
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"pMapGetMessagesAll\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_pMapGetMessagesAll\",testRailTestCases);",
									"",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8d89c55-a197-4bba-8d02-e5e81c58c79c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "PRODUCT-10393"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Requests",
			"item": [
				{
					"name": "getAuthTestToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "452e1058-3276-4acb-8d92-26dac196389c",
								"exec": [
									"pm.test(\"Body matches string\", function () {",
									"    var token = pm.response.text();",
									"    pm.environment.set(\"pushToken\", token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "feb9333c-20b9-4963-8e19-a3d8cabd7db0",
								"exec": [
									"var uuid = require('uuid');",
									"let deviceUUID = uuid.v4();",
									"console.log(\"deviceUUID: \" + deviceUUID);",
									"//pm.environment.set(\"deviceID\", \"e6736437-eea4-4130-a5c2-fc956a99dbcf\");",
									"pm.environment.set(\"deviceID\", deviceUUID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"tenant_id\": {{tenantId_security}},\r\n \"sub\": \"{{deviceID}}\",\r\n \"client_id\": \"mDevManager\",\r\n \"language\": \"en\",\r\n \"authorities\": [\"DBAN_ADMIN\",\"DBAN_USER\"],\r\n \"scope\": [\r\n   \"https://api.crealogix.com/dban\",\r\n   \"read\",\r\n   \"https://api.crealogix.com/push/messages.device#read\",\r\n   \"https://api.crealogix.com/push/messages\",\r\n   \"https://api.crealogix.com/mdevmanager/device\",\r\n   \"write\",\r\n   \"https://api.crealogix.com/mdevmanager/devices.write\"\r\n ]\r\n}"
						},
						"url": {
							"raw": "{{env_security_testToken}}",
							"host": [
								"{{env_security_testToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "pRegInit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "630f63dc-5868-48c3-8ebc-befbf85aaddf",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"postman.setEnvironmentVariable(\"content\", jsonData.content)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{urlDeviceManager}}/mdevmanager/mdevice/{{tenantId_security}}/v1/devices/{{deviceID}}/registration",
							"host": [
								"{{urlDeviceManager}}"
							],
							"path": [
								"mdevmanager",
								"mdevice",
								"{{tenantId_security}}",
								"v1",
								"devices",
								"{{deviceID}}",
								"registration"
							]
						}
					},
					"response": []
				},
				{
					"name": "pMapRegister",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f6da117-4cb2-43db-bdc5-d0b07ff28df2",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"postman.setEnvironmentVariable(\"deviceActivationResponseJWT\", jsonData.jwt)",
									"postman.setEnvironmentVariable(\"authenticationToken\", jsonData.authenticationToken)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"tenantId\":19901,\n\t\"deviceId\": \"{{deviceID}}\",\n\t\"content\": \"{{content}}\",\n\t\"mapVersion\": \"2.32\",\n\t\"deviceModel\": \"7\",\n\t\"deviceVendor\": \"Samsung\",\n\t\"osType\": \"ANDROID\",\n\t\"osVersion\": \"XX.XX.XX\",\n\t\"deviceType\": \"SMARTPHONE\",\n\t\"serverKeyChallenge\": \"Test server key challenge\"\n}"
						},
						"url": {
							"raw": "{{urlDeviceManager}}/mdevmanager/mdevice/{{tenantId_security}}/map/activateJWT?",
							"host": [
								"{{urlDeviceManager}}"
							],
							"path": [
								"mdevmanager",
								"mdevice",
								"{{tenantId_security}}",
								"map",
								"activateJWT"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "pRegRegister",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "82ac9835-d86d-44ef-8a82-e55faf2eec03",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "authenticationToken",
								"value": "{{authenticationToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"authenticationToken\": \"{{authenticationToken}}\",\n\t\"jwt\": \"{{deviceActivationResponseJWT}}\",\n\t\"deviceId\": \"{{deviceID}}\"\n}"
						},
						"url": {
							"raw": "{{urlDeviceManager}}/mdevmanager/mdevice/{{tenantId_security}}/v1/devices/{{deviceID}}/registration?",
							"host": [
								"{{urlDeviceManager}}"
							],
							"path": [
								"mdevmanager",
								"mdevice",
								"{{tenantId_security}}",
								"v1",
								"devices",
								"{{deviceID}}",
								"registration"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "pAuthInit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "630f63dc-5868-48c3-8ebc-befbf85aaddf",
								"exec": [
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"content\", jsonData.content);",
									"",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{urlDeviceManager}}/mdevmanager/mdevice/{{tenantId_security}}/v1/devices/{{deviceID}}/authentication?",
							"host": [
								"{{urlDeviceManager}}"
							],
							"path": [
								"mdevmanager",
								"mdevice",
								"{{tenantId_security}}",
								"v1",
								"devices",
								"{{deviceID}}",
								"authentication"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "pMapAuthenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f6da117-4cb2-43db-bdc5-d0b07ff28df2",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"postman.setEnvironmentVariable(\"jwt\", jsonData.jwt)",
									"",
									"",
									"postman.setEnvironmentVariable(\"token\", jsonData.authenticationToken)",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"tenantId\":19901,\n\t\"deviceId\": \"{{deviceID}}\",\n\t\"content\": \"{{content}}\",\n\t\"mapVersion\": \"2.33\",\n\t\"deviceModel\": \"7\",\n\t\"deviceVendor\": \"Samsung\",\n\t\"osType\": \"ANDROID\",\n\t\"osVersion\": \"XX.XX.XX\",\n\t\"deviceType\": \"SMARTPHONE\",\n\t\"softwareFingerprint\": \"Phone\",\n    \"notificationTokens\": {\n    \t\"FCM\":\"dWIP8Lx3YMU:APA91bEIPVyKVSvzGid_0oScAVjYow7CFxPFBegTdEgBATJgj8FwYkKgKDa6_VTndG6no58s34dyLApKMRrP-pD7rPJhsJ3-IKJ61WHkEBvNl5vOerH0co2OrsO5zTeKcEnwjkf2hpt_\"}\n}"
						},
						"url": {
							"raw": "{{urlDeviceManager}}/mdevmanager/mdevice/{{tenantId_security}}/map/authenticateJWT?",
							"host": [
								"{{urlDeviceManager}}"
							],
							"path": [
								"mdevmanager",
								"mdevice",
								"{{tenantId_security}}",
								"map",
								"authenticateJWT"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "pAuthAuthenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d8f276b1-957c-407a-b4a7-18f80ebbe725",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOjE5OTAxLCJ0ZW5hbnRfbmFtZSI6Im15YmFuayIsInVzZXJfbmFtZSI6IjEyMzEyOjEwMDAwMDE1MDEiLCJjb250cmFjdE5vIjoiMTAwMDAwMTUwMSIsImxhbmd1YWdlIjoiZW4iLCJ0ZW5hbnRfZXh0ZXJuYWxfaWQiOiIxMjMxMiIsImF1dGhvcml0aWVzIjpbXSwiY2xpZW50X2lkIjoibURldk1hbmFnZXIiLCJ1c2VyX2lkIjoxMDAwMDAxNTAxLCJzY29wZSI6WyJodHRwczovL2FwaS5jcmVhbG9naXguY29tL2RiYW4iLCJyZWFkIiwiaHR0cHM6Ly9hcGkuY3JlYWxvZ2l4LmNvbS9tZGV2bWFuYWdlci9kZXZpY2VzLnJlYWRvbmx5IiwiaHR0cHM6Ly9hcGkuY3JlYWxvZ2l4LmNvbS9wdXNoL21lc3NhZ2VzLnJlYWRvbmx5Iiwid3JpdGUiLCJodHRwczovL2FwaS5jcmVhbG9naXguY29tL21kZXZtYW5hZ2VyL2RldmljZXMud3JpdGUiXSwibG9naW5OYW1lIjoiMTAwMDAwMTUwMSIsImV4cCI6MzI0OTg0NjczNjMsImp0aSI6IjIyOGQyNmRkLTI3NjgtNGJlMy1iYTczLWU0NDkxN2QzZGFiZSIsInN1YiI6IjI0YWYxMTQxLTIyY2QtNDQwYS1hZTliLWJhY2ZjOGJjNzkxOCIsImF1ZCI6Im1EZXZNYW5hZ2VyIiwic2Vzc2lvbl9pZCI6Ikc3WFZMNkU3bmh1djhqNTdNZHY3Smhhd2tTdjc0YVJMOHZLWXM4VmExMDAwMjI4NzE0In0.UJ5X13k5FCnE2GG0RnZ6xMHzInybSPYU4jIMQgy-0y177PQQVz0MLywgOVwAa1MGUX_pGLWdywDVw4Nz3xvuijNMHdA8G8Fm1-Xzehu-pGHw2V2F6eAgd7zst7AwFMsSjhKJs5YyNhEqxbLP8PbhzgGyKzFI4UydVM8eflNaEKXZ1FfhMpD4W3wV9G0kSpgwgUn1fzZhedpO4r_BNxqcm00mxWWhfp3XK-HnwmlwLIihJY224qcGvzQd9ifgV0XhizAmYMqcJ7cP9qJp5Tckjad3yCPlB1MxSi9ltTkLem76-o36PX__-Jb_GR-tUl1xVtHMknVlOG6GmF7LNI9L_Q",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "authenticationToken",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"authenticationToken\": \"{{token}}\",\n\t\"jwt\": \"{{jwt}}\",\n\t\"deviceId\": \"{{deviceID}}\"\n}"
						},
						"url": {
							"raw": "{{urlDeviceManager}}/mdevmanager/mdevice/{{tenantId_security}}/v1/devices/{{deviceID}}/authentication?",
							"host": [
								"{{urlDeviceManager}}"
							],
							"path": [
								"mdevmanager",
								"mdevice",
								"{{tenantId_security}}",
								"v1",
								"devices",
								"{{deviceID}}",
								"authentication"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "pGetDevice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f08609da-ac09-4229-a2ff-f0fb66bfe8f8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{pushToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{urlDeviceManager}}/mdevmanager/admin/{{tenantId_security}}/v1/devices/{{deviceID}}",
							"host": [
								"{{urlDeviceManager}}"
							],
							"path": [
								"mdevmanager",
								"admin",
								"{{tenantId_security}}",
								"v1",
								"devices",
								"{{deviceID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "pFindDevice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2a8942a-da8f-4490-bf6d-952007236904",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOjE5OTAxLCJ0ZW5hbnRfbmFtZSI6Im15YmFuayIsInVzZXJfbmFtZSI6IjEyMzEyOjEwMDAwMDE1MDEiLCJjb250cmFjdE5vIjoiMTAwMDAwMTUwMSIsImxhbmd1YWdlIjoiZW4iLCJ0ZW5hbnRfZXh0ZXJuYWxfaWQiOiIxMjMxMiIsImF1dGhvcml0aWVzIjpbXSwiY2xpZW50X2lkIjoicG9zdG1hbiIsInVzZXJfaWQiOjEwMDAwMDE1MDEsInNjb3BlIjpbImh0dHBzOi8vYXBpLmNyZWFsb2dpeC5jb20vZGJhbiIsInJlYWQiLCJodHRwczovL2FwaS5jcmVhbG9naXguY29tL2NvbnRyYWN0cy9jb250cmFjdC5hZHZpc29yLnJlYWRvbmx5IiwiaHR0cHM6Ly9hcGkuY3JlYWxvZ2l4LmNvbS9hc3NldHMvYWNjb3VudC5iYWxhbmNlLnJlYWRvbmx5IiwiaHR0cHM6Ly9hcGkuY3JlYWxvZ2l4LmNvbS9jb250cmFjdHMvY29udHJhY3QubWV0YWRhdGEucmVhZG9ubHkiLCJodHRwczovL2FwaS5jcmVhbG9naXguY29tL2NvbnRyYWN0cy9jb250cmFjdC5wZXJzb24ucmVhZG9ubHkiLCJodHRwczovL2FwaS5jcmVhbG9naXguY29tL3BheW1lbnRzL3BheW1lbnQuaW5pdGlhdGUiLCJodHRwczovL2FwaS5jcmVhbG9naXguY29tL2Fzc2V0cy9hY2NvdW50LnRyYW5zYWN0aW9uLnJlYWRvbmx5IiwiaHR0cHM6Ly9hcGkuY3JlYWxvZ2l4LmNvbS9hc3NldHMvYWNjb3VudC5wZXJtaXNzaW9uLnJlYWRvbmx5Iiwid3JpdGUiLCJodHRwczovL2FwaS5jcmVhbG9naXguY29tL2Fzc2V0cy9hY2NvdW50Lm1ldGFkYXRhLnJlYWRvbmx5Il0sImxvZ2luTmFtZSI6IjEwMDAwMDE1MDEiLCJleHAiOjMyNDk4NDY3MzYzLCJqdGkiOiIyMjhkMjZkZC0yNzY4LTRiZTMtYmE3My1lNDQ5MTdkM2RhYmUiLCJzdWIiOiIyMGMxZmE5MS1mM2E4LTQ5ZTAtYmI3YS1kNGFkZTZjN2JkMzgiLCJzZXNzaW9uX2lkIjoiS1MzbERtbEpIREp5aVZQdXBSb2VZRWFqN3RVZU10M2U4aHNjWTFCajEwMDAwMDEwMDMifQ.lmE4m0mawCHcAeodvnmR23npPvGpf-ttnYactsBpJ72rx2-bFyJQEgYy-GctrEUNmxT54W6Oe_bwp9-r9cR4I9rqIwdGutzcjoDdQObPIz_w_uy5CHWlWFByxlLQuLT3KhguBey38ihgsj2KBCz95Xc5hqp9uZxxD6Mvh_LrOuNv6tU6lsi1sgX-bTXnsq4s7IZEC5ZsCcUlWvEbGsLg8AN_OTST3tlkTUvoVnkY_Y7E-yiGZYzx7A_QlhjgXYhddTfhp5kBRohCO-TiqoH_R4lcpELIfoil2ibc4N4Xd7FRMPuYVgNUJRdywMhc92PXhHetKfNZhsdgQ2S4aitkMA",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{pushToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"deviceids\": [\n    \"{{deviceID}}\"\n  ],\n  \"selectors\": [\n    \n  ]\n}"
						},
						"url": {
							"raw": "{{urlDeviceManager}}/mdevmanager/push/{{tenantId_security}}/v1/devices/find?",
							"host": [
								"{{urlDeviceManager}}"
							],
							"path": [
								"mdevmanager",
								"push",
								"{{tenantId_security}}",
								"v1",
								"devices",
								"find"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "pSendMessage",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a1936ce-436b-4884-a66e-177f82da84a4",
								"exec": [
									"var jsonData;",
									"",
									"pm.test(\"Check _status field\", function () {",
									"    jsonData = pm.response.json();",
									"    pm.expect(jsonData._status).to.eql(true);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"pushId\");",
									"});",
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"console.log(jsonData.pushId)",
									"pm.environment.set(\"pushid\", jsonData.pushId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{pushToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message\": {\n        \"title\":\"Title of demo message\",\n        \"body\":\"New message body\",\n        \"sortorder\":5,\n        \"category\":\"WO4W\",\n        \"ttl\": 130\n    },   \n    \"deviceids\":[\n        \"{{deviceID}}\"\n    ]\n\n}"
						},
						"url": {
							"raw": "{{urlPushServer}}/push/messaging/{{tenantId_security}}/v1/messages",
							"host": [
								"{{urlPushServer}}"
							],
							"path": [
								"push",
								"messaging",
								"{{tenantId_security}}",
								"v1",
								"messages"
							]
						},
						"description": "bearer"
					},
					"response": []
				},
				{
					"name": "pGetMessage",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "008e34f3-1fb2-4888-ac7a-6521d4c13408",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{pushToken}}"
							}
						],
						"url": {
							"raw": "{{urlPushServer}}/push/messaging/{{tenantId_security}}/v1/messages/{{pushid}}",
							"host": [
								"{{urlPushServer}}"
							],
							"path": [
								"push",
								"messaging",
								"{{tenantId_security}}",
								"v1",
								"messages",
								"{{pushid}}"
							]
						},
						"description": "bearer"
					},
					"response": []
				},
				{
					"name": "pGetMessageState",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a4053df-e009-480a-a05e-151d04d5bf21",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{pushToken}}"
							}
						],
						"url": {
							"raw": "{{urlPushServer}}/push/messaging/{{tenantId_security}}/v1/messages/{{pushid}}/state",
							"host": [
								"{{urlPushServer}}"
							],
							"path": [
								"push",
								"messaging",
								"{{tenantId_security}}",
								"v1",
								"messages",
								"{{pushid}}",
								"state"
							]
						},
						"description": "bearer"
					},
					"response": []
				},
				{
					"name": "pMapMessagesUndelivered",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bb6a4cd2-fdf8-4599-8d25-2f215f008471",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{pushToken}}"
							}
						],
						"url": {
							"raw": "{{urlPushServer}}/push/mdevice/{{tenantId_security}}/v1/devices/{{deviceID}}/messages?selector=undelivered",
							"host": [
								"{{urlPushServer}}"
							],
							"path": [
								"push",
								"mdevice",
								"{{tenantId_security}}",
								"v1",
								"devices",
								"{{deviceID}}",
								"messages"
							],
							"query": [
								{
									"key": "selector",
									"value": "undelivered"
								}
							]
						},
						"description": "bearer"
					},
					"response": []
				},
				{
					"name": "pMapGetMessage",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "deb4500b-2bcd-4252-ab41-0132c8c884ce",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOjE5OTAxLCJ0ZW5hbnRfbmFtZSI6Im15YmFuayIsInVzZXJfbmFtZSI6IjEyMzEyOjEwMDAwMDE1MDEiLCJjb250cmFjdE5vIjoiMTAwMDAwMTUwMSIsImxhbmd1YWdlIjoiZW4iLCJ0ZW5hbnRfZXh0ZXJuYWxfaWQiOiIxMjMxMiIsImF1dGhvcml0aWVzIjpbIkRCQU5fQURNSU4iLCJEQkFOX1VTRVIiXSwiY2xpZW50X2lkIjoibURldk1hbmFnZXIiLCJ1c2VyX2lkIjoxMDAwMDAxNTAxLCJzY29wZSI6WyJodHRwczovL2FwaS5jcmVhbG9naXguY29tL2RiYW4iLCJyZWFkIiwiaHR0cHM6Ly9hcGkuY3JlYWxvZ2l4LmNvbS9wdXNoL21lc3NhZ2VzLmRldmljZSNyZWFkIiwiaHR0cHM6Ly9hcGkuY3JlYWxvZ2l4LmNvbS9wdXNoL21lc3NhZ2VzIiwiaHR0cHM6Ly9hcGkuY3JlYWxvZ2l4LmNvbS9tZGV2bWFuYWdlci9kZXZpY2UiLCJ3cml0ZSIsImh0dHBzOi8vYXBpLmNyZWFsb2dpeC5jb20vbWRldm1hbmFnZXIvZGV2aWNlcy53cml0ZSJdLCJsb2dpbk5hbWUiOiIxMDAwMDAxNTAxIiwiZXhwIjozMjQ5ODQ2NzM2MywianRpIjoiMjI4ZDI2ZGQtMjc2OC00YmUzLWJhNzMtZTQ0OTE3ZDNkYWJlIiwic3ViIjoiMTY4ZGNmMjAtNTRlMi00NjE1LWJhM2YtZjNhOTUyOTlhNzc3IiwiYXVkIjoibURldk1hbmFnZXIiLCJzZXNzaW9uX2lkIjoiUWo3bEUySXN1Y3VFNUZiN1VkZWRoQ3hXbjJ1a3gxd2FWNEpKNlFMZDEwMDAyMzk0NDAifQ.B7OE-pKGHGtM6UhS5o2AfJ4TKZEyumN_RLafwwVlC3rfzSqkKZFvL_CnhHqj4Ttwp6XJmuXchfoCdhvhdNxfd3OA5GTW28GYZOVCPjZ-qz0BD1JmL-9m4wao6VCc7JL8jgSubdHkG93N6ru5hDnmgpZjdqNrrcnU_1dPen8Cf9zAHbFgJKHKNsHFineHd_bzbaQoxj2obdgDW0KyKGrsRtj8jOqaOjTwZc9N2JhEIYAW28NIhfE_f0H3VyWpkATC-fKvfZqgVIxK0SdF5jr7r-hn_CAgYzTSSiUT_U3-ZDIhv8oGMLCoo3DSnyX_n_bfzQNcCfpK8dBosv09reJq2w",
								"disabled": true
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{pushToken}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJtZGV2bWFuYWdlcmNsaWVudCIsInN1YiI6ImM5MGQxYmNkLTQ4YTgtNGMwOS1hNWQyLTBlZjIxN2UwOWQyZCIsInNjb3BlIjpbImh0dHBzOi8vYXBpLmNyZWFsb2dpeC5jb20vcHVzaC9tZXNzYWdlcy5kZXZpY2UjcmVhZCJdLCJpc3MiOiJodHRwOi8vbWFzdGVyLXdscy1sYXQuY3RyLmVicy5jcmVhbG9naXgubmV0OjgwMDQiLCJleHAiOjE1ODE2OTM2NDIsInR5cGUiOiJiZWFyZXIiLCJpYXQiOjE1ODE2OTI0NDIsIm5vbmNlIjoiYmY1MTU3NzEtOTM1NC00YjkzLThlZjctMmMxYjBjMzM3MTIyIiwianRpIjoiQVQuMi5EVC4wNzQ3Y2JlYy1hN2Q0LTQ1YjgtODY3OS1iNGM4ODMxOWQ2ZGMiLCJjbGllbnRfaWQiOiJtZGV2bWFuYWdlcmNsaWVudCIsImF1dGhvcml0aWVzIjpbXX0.MyrhksVtFlWkGYNa3ihtvsKjrn9h_7gEhua2Wqq39QDDK7b2vWtrC4LxyylDJegeQAqk7nczG4OyFgZiEGuXZPnw5CtJq_xc_UvfrDon-vdWjCYoWc5T3FJ-1K0EydLQ6p2d-dgD15toZ4JcREvQijTPirrWlX2ibFt6OAGX8x4RzRZHtadySOrUsI6k0giagYY18COVH_0hcYjOM5qPN7HmMPTIXCpvxHAjOjzaQ5ehTlp4f7mxH85PWi7WWDm_nABLfwdTZRvcEY32FRp7eszeyGsi2pfKTh5z1u9A8aZi3YDWK4nEJryhz2B57ixCl41S3oc_raSM-7h_xM97QA",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{urlPushServer}}/push/mdevice/{{tenantId_security}}/v1/devices/{{deviceID}}/messages/{{pushid}}",
							"host": [
								"{{urlPushServer}}"
							],
							"path": [
								"push",
								"mdevice",
								"{{tenantId_security}}",
								"v1",
								"devices",
								"{{deviceID}}",
								"messages",
								"{{pushid}}"
							]
						},
						"description": "bearer"
					},
					"response": []
				},
				{
					"name": "pMapGetMessagesAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c21716b-d65c-4305-826f-00ee98a8c683",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{pushToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{urlPushServer}}/push/mdevice/{{tenantId_security}}/v1/devices/{{deviceID}}/messages?selector=all",
							"host": [
								"{{urlPushServer}}"
							],
							"path": [
								"push",
								"mdevice",
								"{{tenantId_security}}",
								"v1",
								"devices",
								"{{deviceID}}",
								"messages"
							],
							"query": [
								{
									"key": "selector",
									"value": "all"
								}
							]
						},
						"description": "bearer"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c103a8ed-6948-42ed-96aa-8f49b94da4d8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f2986ba7-19c6-491e-90f7-0a457d42539b",
						"type": "text/javascript",
						"exec": [
							"eval(globals.sessionNavigate)();",
							"pm.globals.unset(\"_tr_\" + request.name);"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "a7df68d6-b1b8-43a0-87f4-4c3de681a6d9",
				"type": "text/javascript",
				"exec": [
					"//************************************************************************************************",
					"// variable initialization************************************************************************",
					"//************************************************************************************************",
					"var test = pm.environment.get(\"testRailTestsInRun\");",
					"if( !test) {",
					"    pm.environment.set(\"testRailTestsInRun\",\"\");",
					"}",
					"",
					"",
					"// Define test data, setup configuration per environment",
					"let pmEnv = pm.environment.get(\"envName\");",
					"//let pmEnv = pm.environment.name;",
					"let dataEnv = data.envName;",
					"if (dataEnv){",
					"    if (pmEnv !== dataEnv) {",
					"        throw new Error(\"Wrong environment selected, testing is terminated!\");",
					"    }",
					"}",
					"//************************************************************************************************",
					"// DEPRECATED !!!",
					"// set access token ******************************************************************************",
					"//************************************************************************************************",
					"//pm.environment.set(\"token\",data.accessToken);",
					"",
					"//************************************************************************************************",
					"// set parameters ********************************************************************************",
					"//************************************************************************************************",
					"/*",
					"var contractNumber = data.contractNumber;",
					"if (contractNumber){ ",
					"    pm.environment.set(\"contract\",JSON.parse(data.contractNumber));",
					"    console.log(\"dataFile/contractNumber: \" + contractNumber);",
					"}",
					"",
					"var paymentType = data.paymentType;",
					"if (paymentType){ ",
					"    pm.environment.set(\"paymentType\",data.paymentType);",
					"    console.log(\"dataFile/paymentType: \" + paymentType);",
					"}",
					"var beneficiaryAccount = data.beneficiaryAccount;",
					"if (beneficiaryAccount){ ",
					"    pm.environment.set(\"beneficiaryAccount\",data.beneficiaryAccount);",
					"    console.log(\"dataFile/beneficiaryAccount: \" + beneficiaryAccount);",
					"}",
					"var debtorAccountNo = data.debtorAccountNo;",
					"if (debtorAccountNo){ ",
					"    pm.environment.set(\"debtorAccountNo\",data.debtorAccountNo);",
					"    console.log(\"dataFile/debtorAccountNo: \" + debtorAccountNo);",
					"}",
					"var debtorAccountName = data.debtorAccountName;",
					"if (debtorAccountName){ ",
					"    pm.environment.set(\"debtorAccountName\",data.debtorAccountName);",
					"    console.log(\"dataFile/debtorAccountName: \" + debtorAccountName);",
					"}",
					"var debtorStreetName = data.debtorStreetName;",
					"if (debtorStreetName){ ",
					"    pm.environment.set(\"debtorStreetName\",data.debtorStreetName);",
					"    console.log(\"dataFile/debtorStreetName: \" + debtorStreetName);",
					"}",
					"var debtorPostalCode = data.debtorPostalCode;",
					"if (debtorPostalCode){ ",
					"    pm.environment.set(\"debtorPostalCode\",data.debtorPostalCode);",
					"    console.log(\"dataFile/debtorPostalCode: \" + debtorPostalCode);",
					"}",
					"var debtorTownName = data.debtorTownName;",
					"if (debtorTownName){ ",
					"    pm.environment.set(\"debtorTownName\",data.debtorTownName);",
					"    console.log(\"dataFile/debtorTownName: \" + debtorTownName);",
					"}",
					"var creditorAccountNo = data.creditorAccountNo;",
					"if (creditorAccountNo){ ",
					"    pm.environment.set(\"creditorAccountNo\",data.creditorAccountNo);",
					"    console.log(\"dataFile/creditorAccountNo: \" + creditorAccountNo);",
					"}",
					"var creditorAgentCountry = data.creditorAgentCountry;",
					"if (creditorAgentCountry){ ",
					"    pm.environment.set(\"creditorAgentCountry\",data.creditorAgentCountry);",
					"    console.log(\"dataFile/creditorAgentCountry: \" + creditorAgentCountry);",
					"}",
					"var currencyCode = data.currencyCode;",
					"if (currencyCode){ ",
					"    pm.environment.set(\"currencyCode\",data.currencyCode);",
					"    console.log(\"dataFile/currencyCode: \" + currencyCode);",
					"}",
					"var endToEndId = data.endToEndId;",
					"if (endToEndId){ ",
					"    pm.environment.set(\"endToEndId\",data.endToEndId);",
					"    console.log(\"dataFile/endToEndId: \" + endToEndId);",
					"}",
					"var postalAccountNo = data.postalAccountNo;",
					"if (postalAccountNo){ ",
					"    pm.environment.set(\"postalAccountNo\",data.postalAccountNo);",
					"    console.log(\"dataFile/postalAccountNo: \" + postalAccountNo);",
					"}*/",
					"",
					"//************************************************************************************************",
					"// connect to TestRail ***************************************************************************",
					"//************************************************************************************************",
					"pm.globals.set(\"TESTRAIL_DOMAIN\",\"testrail.ebs.crealogix.net\");",
					"pm.globals.set(\"TESTRAIL_USERNAME\",\"milan.karadeglic@crealogix.com\"); ",
					"pm.globals.set(\"TESTRAIL_APIKEY\",\"Q4MlDw1e70Kxh1g1YPq9-Dg0abDWer.pSWcVWcxO4\");",
					"pm.globals.set(\"TESTRAIL_PROJECTID\",8); ",
					"pm.globals.set(\"TESTRAIL_TITLE\",\"Postman API Tests\");",
					"",
					"//************************************************************************************************",
					"//global function to determine next day/next working day *****************************************",
					"//************************************************************************************************",
					"var moment = require('moment');",
					"let nextDay = moment().add(\"days\",1).format(\"YYYY-MM-DD\"); //next day in specified format",
					"let futureDay = moment().add(\"days\",30).format(\"YYYY-MM-DD\"); //next day in specified format",
					"switch (moment().add(\"days\",1).format(\"dddd\")){",
					"    case \"Sunday\":",
					"        var nextWorkingDay = moment().add(\"days\",2).format(\"YYYY-MM-DD\");",
					"        break;",
					"    case \"Saturday\":",
					"        var nextWorkingDay = moment().add(\"days\",3).format(\"YYYY-MM-DD\");",
					"        break;",
					"    default:",
					"        var nextWorkingDay = moment().add(\"days\",1).format(\"YYYY-MM-DD\");",
					"}",
					"switch (moment().add(\"days\",30).format(\"dddd\")){",
					"    case \"Sunday\":",
					"        var futureWorkingDay = moment().add(\"days\",31).format(\"YYYY-MM-DD\");",
					"        var futurePlusWorkingDay = moment().add(\"days\",38).format(\"YYYY-MM-DD\");",
					"        break;",
					"    case \"Saturday\":",
					"        var futureWorkingDay = moment().add(\"days\",32).format(\"YYYY-MM-DD\");",
					"        var futurePlusWorkingDay = moment().add(\"days\",39).format(\"YYYY-MM-DD\");",
					"        break;",
					"    default:",
					"        var futureWorkingDay = moment().add(\"days\",30).format(\"YYYY-MM-DD\");",
					"        var futurePlusWorkingDay = moment().add(\"days\",37).format(\"YYYY-MM-DD\");",
					"}",
					"",
					"pm.globals.set('PrS:nextDay', JSON.stringify(nextDay));",
					"pm.globals.set('PrS:nextWorkingDay', JSON.stringify(nextWorkingDay));",
					"pm.globals.set('PrS:futureWorkingDay', JSON.stringify(futureWorkingDay));",
					"pm.globals.set('PrS:futurePlusWorkingDay', JSON.stringify(futurePlusWorkingDay));",
					"",
					"/*",
					"// Define test data, setup configuration per environment",
					"var env = pm.environment.get(\"envName\");",
					"if (env === \"MDB-R191-TEST\") {",
					"//    var contractNumber = \"{{contractNumber}}\";",
					"//    var debtorAccountNo = \"{{debtorAccountNo}}\";",
					"//    var debtorAccountName = \"{{debtorAccountName}}\";",
					"//    var creditorAccountNo = \"{{creditorAccountNo}}\";",
					"    } else if (env === \"MDB-R191-LAT\") {",
					"} else {",
					"    throw new Error(\"Wrong environment selected, requests are skipped!\")",
					"}",
					"//pm.globals.set('PrS:contractNumber', JSON.stringify(contractNumber));",
					"//pm.globals.set('PrS:debtorAccountNo', JSON.stringify(debtorAccountNo));",
					"//pm.globals.set('PrS:debtorAccountName', JSON.stringify(debtorAccountName));",
					"//pm.globals.set('PrS:creditorAccountNo', JSON.stringify(creditorAccountNo));",
					"*/",
					"",
					"// Save the object as a variable.",
					"// JSON.stringify will serialize the object so that Postman can save it",
					"",
					"//pm.globals.set('PrS:tags', JSON.stringify(tags));",
					"//pm.environment.set(\"testGroup\",\"Patient Zero\") //set environment variable if/when needed",
					"",
					"                //pm.response.to.be.ok;         - Status code must be 200",
					"                //pm.response.to.be.error       - Checks 4XX or 5XX",
					"                //pm.response.to.be.serverError - Checks 5XX",
					"                //pm.response.to.be.clientError - Checks 4XX status code",
					"",
					"// Save common tests in a global variable",
					"postman.setGlobalVariable(\"commonTests\", () => {",
					"    pm.test(\"Response must be valid with/with out a body and with proper status code\", function () {",
					"        let newmanRun = pm.globals.get(\"newmanRun\");",
					"        if (newmanRun != 1) {",
					"            if ([\"GET\",\"POST\",\"PUT\"].indexOf(request.method) > -1) {",
					"                pm.response.to.not.be.error;",
					"                pm.response.to.be.withBody;",
					"                pm.response.to.be.json;",
					"                pm.response.to.have.jsonBody();",
					"                pm.response.to.not.have.jsonBody('error');",
					"                pm.response.to.have.header('Content-Type', 'application/json;charset=UTF-8');",
					"            } else {",
					"                pm.response.to.not.be.withBody;",
					"            }",
					"            switch(request.method){",
					"                case \"POST\":",
					"                    pm.response.to.have.status(201);",
					"                    break;",
					"                case \"PUT\":",
					"                    pm.response.to.have.status(200);",
					"                    break;",
					"                case \"GET\":",
					"                    pm.response.to.have.status(200);",
					"                    break;",
					"                case \"DELETE\":",
					"                    pm.response.to.have.status(200);",
					"                    break;",
					"            }        ",
					"        }",
					"    });",
					"    //pm.test(\"Response time is below 1000ms\", function () {",
					"    //    pm.expect(pm.response.responseTime).to.be.below(1000);",
					"    //});",
					"});",
					"",
					"postman.setGlobalVariable(\"assertValidCreditorAgent\", () => {",
					"    pm.expect(address).to.be.an('object').with.keys('name1', 'name2', 'street', 'city', 'country', 'bic');",
					"    pm.expect(address.name1).to.be.a('string').and.not.empty;",
					"    pm.expect(address.name2).to.be.a('string').and.not.empty;",
					"    pm.expect(address.street).to.be.a('string').and.not.empty;",
					"    pm.expect(address.city).to.be.a('string').and.not.empty;",
					"    pm.expect(address.country).to.be.a('string').with.lengthOf(2).and.match(/[A-Z]+/);",
					"    pm.expect(address.bic).to.be.a('string').and.not.empty;",
					"});",
					"",
					"postman.setGlobalVariable(\"sessionInit\", (testSession, sessionName) => {",
					"    //session init section",
					"    console.log(request.name + \", initialization: \" + testSession + \", global var: \" + sessionName);",
					"    console.log(request.name + \", executing: \" + testSession[0]);",
					"    ",
					"    // Select first test from session to be executed",
					"    postman.setNextRequest(testSession[0]);",
					"    testSession.shift();",
					"    if (testSession.length === 0) {",
					"        console.log(request.name + \", test session is empty, unset \" + sessionName);",
					"        pm.globals.unset(sessionName);",
					"        console.log(request.name + \", terminate tests execution list\");",
					"    } else {",
					"        pm.globals.set(sessionName, testSession);",
					"        console.log(request.name + \" for \" + sessionName + \", updated list of tests to be executed: \" + testSession);",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"sessionNavigate\", () => {",
					"    console.log(request.name + \", entering ...\");",
					"    if (pm.globals.get(\"requestsToRun\") === undefined){",
					"        console.log(request.name + \", requestsToRun is undefined\");",
					"        pm.globals.set(\"testRailTestCases\",\"\");",
					"        console.log(request.name + \", reset global var: testRailTestCases\");    ",
					"        if (pm.globals.get(\"testSession\") === undefined){",
					"            console.log(request.name + \", testSession is undefined\");",
					"            //here >> export list of tests executed",
					"            var tests = pm.environment.get(\"testRailTestsInRun\");",
					"            tests = tests.replace(/C/g, \"\");",
					"            tests = tests.replace(/ /g, \", \");",
					"            tests = tests.replace(/,,/g, \",\");",
					"            console.log(\"TestRail tests executed executed in this run: \" + tests);",
					"            console.log(\"The end\");",
					"            postman.setNextRequest(null);",
					"        } else {",
					"        var testSession = pm.globals.get(\"testSession\");",
					"        console.log(request.name + \", checking what to run: \" + testSession[0]);",
					"        postman.setNextRequest(testSession[0]); ",
					"        testSession.shift();",
					"        if (testSession.length === 0) {",
					"            pm.globals.unset(\"testSession\");",
					"            console.log(request.name + \", terminate execution list\");",
					"        } else {",
					"            pm.globals.set(\"testSession\", testSession);",
					"            console.log(request.name + \", updated list of tests to be executed: \" + testSession);",
					"        }}",
					"    } else {",
					"    var requestsToRun = pm.globals.get(\"requestsToRun\");",
					"    console.log(request.name + \", checking what to run: \" + requestsToRun[0]);",
					"    postman.setNextRequest(requestsToRun[0]); ",
					"    requestsToRun.shift();",
					"    if (requestsToRun.length === 0) {",
					"        pm.globals.unset(\"requestsToRun\");",
					"        console.log(request.name + \", terminate requests execution list\");",
					"    } else {",
					"        pm.globals.set(\"requestsToRun\", requestsToRun);",
					"        console.log(request.name + \", updated list of requests to be executed: \" + requestsToRun);",
					"    }}",
					"});",
					"",
					"postman.setGlobalVariable(\"cleanup\", () => {",
					"    const clean = [\"requestsToRun\", \"testSession\"];",
					"    for(let i = 0; i < clean.length; ++i){",
					"        pm.globals.unset(clean[i]);",
					"    }",
					"    //create single secure mail by default ",
					"    pm.environment.set(\"mailsToCreate\", 1);    ",
					"});",
					"",
					"postman.setGlobalVariable(\"testsExecuted\", (listOfExecutedTests) => {",
					"    let tests =  pm.environment.get(\"testRailTestsInRun\");",
					"    //console.log(\"TestRail tests stored in 'testRailTestsInRun': \" + tests);",
					"    if (tests.length > 0) {",
					"        tests = tests + \" \"",
					"    }",
					"    tests = tests + listOfExecutedTests;",
					"    //console.log(\"TestRail tests to be stored to 'testRailTestsInRun': \" + tests);",
					"    pm.environment.set(\"testRailTestsInRun\",tests);",
					"    //console.log(\"TestRail tests executed so far: \" + tests);",
					"});",
					"",
					"postman.setGlobalVariable(\"extractTestCaseIDFromRequestName\", () => {",
					"    let n = request.name.lastIndexOf(\"(\");",
					"    return request.name.substr(n + 1, request.name.length - n - 2);",
					"});",
					"",
					"postman.setGlobalVariable(\"schemaValidator\", (schema, jsonData) => {",
					"    //old, deprecated schema validationimplementation",
					"    //pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;",
					"    ",
					"    //new schema validation implementation",
					"    ",
					"    var schemaValidationPassed = true;",
					"    var serviceSchema = pm.environment.get(schema);",
					"    //var jsonData = JSON.parse(pm.responseBody);",
					"",
					"    var validationResult = tv4.validateMultiple(jsonData, serviceSchema, true, true);",
					"    for(var i =0; i<validationResult.errors.length;i++){",
					"        console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  ",
					"        //Skipping all \"Invalid type\" errors as they are expected with current service implementations",
					"        schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);",
					"        //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);",
					"    }    ",
					"    return schemaValidationPassed;",
					"}); ",
					"",
					"postman.setGlobalVariable(\"isTest\", () => {",
					"    let reqPurpose = pm.globals.get(\"_tr_\" + request.name);",
					"    //console.log(request.name + \" has purpose: \" + reqPurpose);",
					"    if ([\"[cleanUp]\",\"[preCondition]\",\"[postCondition]\"].indexOf(reqPurpose) > -1) {",
					"        //console.log(\"Conclusion: NOT a test\");",
					"        return false;",
					"    } else {",
					"        //console.log(\"Conclusion: IS a test\");",
					"        return true;",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"getQueryParams\", (uri) => {",
					"  var vars = [];",
					"",
					"  // Get the start index of the query string",
					"  var qsi = uri.indexOf('?');",
					"  if (qsi == -1)",
					"    return vars;",
					"",
					"  // Get the query string",
					"  var qs = uri.slice(qsi + 1);",
					"",
					"  // Check if there is a subsection reference",
					"  sri = qs.indexOf('#');",
					"  if (sri >= 0)",
					"    qs = qs.slice(0, sri);",
					"",
					"  // Build the associative array",
					"  var hashes = qs.split('&');",
					"  for (var i = 0; i < hashes.length; i++) {",
					"    var sep = hashes[i].indexOf('=');",
					"    if (sep <= 0)",
					"      continue;",
					"    var key = decodeURIComponent(hashes[i].slice(0, sep));",
					"    var val = decodeURIComponent(hashes[i].slice(sep + 1));",
					"    vars[key] = val;",
					"  }",
					"  const jar = pm.cookies.jar();",
					"",
					"  jar.clear(pm.request.url, function (error) {",
					"  // error - <Error>",
					"  });",
					"",
					"  return vars;",
					"  ",
					"});",
					"",
					"postman.setGlobalVariable(\"randomizeVariables\", () => {",
					"    let newmanRun = pm.globals.get(\"newmanRun\");",
					"    if (newmanRun != 1) {",
					"        console.log(\"Randomizing variables ...\");",
					"        pm.environment.set(\"endToEndId\",JSON.stringify(pm.variables.replaceIn(\"{{$randomLoremSlug}}\")));",
					"        pm.environment.set(\"unstructured\",JSON.stringify(pm.variables.replaceIn(\"{{$guid}}\")));",
					"        pm.environment.set(\"instructionIdentification\",JSON.stringify(pm.variables.replaceIn(\"{{$randomBitcoin}}\")));",
					"        pm.environment.set(\"name\",JSON.stringify(pm.variables.replaceIn(\"{{$randomFullName}}\")));",
					"        pm.environment.set(\"adrLine1\",JSON.stringify(pm.variables.replaceIn(\"{{$randomStreetName}}\")));",
					"        pm.environment.set(\"adrLine2\",JSON.stringify(pm.variables.replaceIn(\"{{$randomStreetAddress}}\")));",
					"        pm.environment.set(\"streetName\",JSON.stringify(pm.variables.replaceIn(\"{{$randomStreetName}}\")));",
					"        pm.environment.set(\"townName\",JSON.stringify(pm.variables.replaceIn(\"{{$randomCity}}\")));",
					"        pm.environment.set(\"country\",JSON.stringify(pm.variables.replaceIn(\"{{$randomCountryCode}}\")));",
					"        pm.environment.set(\"buildingNm\",pm.variables.replaceIn('{{$randomInt}}'));",
					"        pm.environment.set(\"postalCode\",pm.variables.replaceIn('{{$randomInt}}'));",
					"        pm.environment.set(\"buildingNmStr\",JSON.stringify(pm.variables.replaceIn('{{$randomInt}}')));",
					"        pm.environment.set(\"postalCodeStr\",JSON.stringify(pm.variables.replaceIn('{{$randomInt}}')));",
					"        console.log(\"... randomize is finished\");",
					"    }",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "5187e99a-07c8-402a-883d-8cd9ce28bbff",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}