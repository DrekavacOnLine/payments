{
	"info": {
		"_postman_id": "6bfd5285-3d3e-4790-b82d-dc12ea9b3370",
		"name": "MODULE: Assets (orig, Sasa)",
		"description": "Asset API:\n\n- Custody account API\n- Assets account\n- Portfolio API\n \nGlobal functions:\n- generateAccessToken //generate access token\n- portfolioRequest //lists portfolios, stores {{_tmp_customerId}} and {{_tmp_portfolioId}}\n- getCustodyAccounts //list custody accounts, stores {{_tmp_cuacsId}}\n- getPositionsByCustodyAccount //list positions for custody account, stores {{_tmp_positionsId}}\n- getTransactionsByCustodyAccount //list transactions for custody account, stores {{_tmp_transactionsId}}",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Tests",
			"item": [
				{
					"name": "Portfolios",
					"item": [
						{
							"name": "Get Portfolio List (C43024137)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f2fb0133-f8cf-4a00-8525-9d515ef6ff1f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a3629d73-6213-4dcb-bb91-1d427487733d",
										"exec": [
											"//Validate results\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of portfolios and response schema is validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    var schemaValidationPassed = true;\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"    \r",
											"    if (pm.response.code === 200) {\r",
											"        var jsonData = JSON.parse(responseBody)._embedded;\r",
											"        pm.environment.set(\"_tmp_portfolioId\", jsonData.portfolios[1].id);\r",
											"        pm.environment.set(\"_tmp_customerId\", jsonData.portfolios[1].customerId);\r",
											"    \r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_portfolioId\");\r",
											"        pm.environment.unset(\"_tmp_customerId\");\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Portfolio Details List (C43034139)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c22d441a-40a7-4b29-b9e7-15fd99b33e44",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "49702475-b7a1-4341-808a-f9f9dca057d6",
										"exec": [
											"//Validate results\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of portfolio details and response schema is validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioDetailsSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"    //Validate that the orders belong to the appropriate customer\r",
											"    let portId = pm.environment.get(\"_tmp_portfolioId\");\r",
											"    jsonData.id === portId\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Assets List (C43181622)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ea537f05-6bdf-4504-a788-9e543beaba14",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "edc09fa9-9964-4d58-a471-9c9184266b3a",
										"exec": [
											"//Validate results\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"assetsList\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"    if (pm.response.code === 200) {\r",
											"        pm.environment.set(\"_tmp_assetsId\", jsonData._embedded.assets[0].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_assetsId\");\r",
											"    }\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/assets",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"assets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Assets List Details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "280f4a89-4049-4187-b071-76a72069abe2",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca8950bd-868f-46ed-9c29-a13ccb8a5aba",
										"exec": [
											"//Validate results\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"assetsListDetails\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/assets/{{_tmp_assetsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"assets",
										"{{_tmp_assetsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Maturity  List (C43181624)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cf0948f2-4b03-4be4-9f32-13bad730330b",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c2dcad82-2e6e-4b56-946a-8059f634732d",
										"exec": [
											"//Validate results\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData._embedded.maturities === undefined || jsonData._embedded.maturities.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    var schemaValidationPassed = true;\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioDetailsSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/maturities",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"maturities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Performance Details (C43181629)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8b22fc9c-687f-4aa2-8e40-9e69a3e40419",
										"exec": [
											"eval(globals.portfolioRequest)(); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1105f5aa-1903-44c4-aa7c-8bda2946390a",
										"exec": [
											"//Validate results\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioPerformanceSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/performance",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"performance"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Custody accounts",
					"item": [
						{
							"name": "List of custody accounts (C41736189)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59d7a9f9-bdbd-4094-88ee-f571bb19b00b",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsSchema = pm.environment.get(\"cuacsSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Save custody account id as environment variable\r",
											"    if (pm.response.code === 200) {\r",
											"        pm.environment.set(\"_tmp_cuacsId\",jsonData._embedded.cuacs[0].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_cuacsId\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b20390cd-fefd-45fa-9b33-7492889c7297",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Custody account position list (C41853583)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e80a00dc-0545-49e9-8a96-40dc3cad368c",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Position details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsPositionSchema = pm.environment.get(\"cuacsPositionSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsPositionSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"   \r",
											"    //Save position id as environment variable\r",
											"    if (pm.response.code === 200) {\r",
											"        pm.environment.set(\"_tmp_positionsId\",jsonData._embedded.positions[0].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_positionsId\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8f23d1b9-5ac7-46b1-9cd6-c674577b344a",
										"exec": [
											"eval(globals.getCustodyAccounts)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/positions",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Custody account position details (C42065196)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3066b32c-19b7-43a4-91f8-feaec5c13756",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Position details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var positionIdSchema = pm.environment.get(\"positionIdSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"positionIdSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"    \r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4c169af0-42d6-435f-9637-ca831e912f5c",
										"exec": [
											"eval(globals.getCustodyAccounts)();",
											"setTimeout(function(){eval(globals.getPositionsByCustodyAccount)();}, 2000);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/positions/{{_tmp_positionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"positions",
										"{{_tmp_positionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get transactions for cuacsId (C42065197)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de71db2c-b359-4b57-9569-6efcf459a347",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Transactions details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsPositionSchema = pm.environment.get(\"cuacsPositionSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"   \r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsIdSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"   \r",
											"    //Save transaction id as environament variable\r",
											"    if (pm.response.code === 200) {\r",
											"        pm.environment.set(\"_tmp_transactionsId\",jsonData._embedded.transactions[0].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_transactionsId\");\r",
											"    }\r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "76471fa6-af3a-4977-b8c6-30bd64af5917",
										"exec": [
											"eval(globals.getCustodyAccounts)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/transactions/",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"transactions",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Custody account details (C41853582)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3268f7a-f96a-442a-91af-a35da5f5d795",
										"exec": [
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"    let cuacsId = pm.environment.get(\"_tmp_cuacsId\");",
											"    let result = true;",
											"    ",
											"    //Validate if execution status is correct",
											"    pm.response.to.have.status(200);",
											"    ",
											"    //Validate if response schema is correct",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsDetSchema\", jsonData);",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    ",
											"    //Validate if custody account is correct in the response",
											"    result = result && (jsonData.id === cuacsId);",
											"    pm.expect(result).to.be.eql(true);",
											"});",
											"",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b4d0ee31-be24-40f4-930e-685a917539c3",
										"exec": [
											"eval(globals.getCustodyAccounts)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Custody account transactions details (C43024136)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d498152-3fcf-4081-8227-0ac8c0deda2b",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Transactions details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var positionIdSchema = pm.environment.get(\"positionIdSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsIdDetailsSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "245b2d85-613c-4296-b6ab-2456a7645b2a",
										"exec": [
											"eval(globals.getCustodyAccounts)();",
											"setTimeout(function(){eval(globals.getTransactionsByCustodyAccount)();}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/transactions/{{_tmp_transactionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"transactions",
										"{{_tmp_transactionsId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "19413c04-fe7a-4428-9529-574e4cbea567",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "066007d6-00b1-4eea-9e4e-5a30e10dcf6e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Assets",
					"item": [
						{
							"name": "Account_Search (C41736193)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "414aa90d-2745-4bb9-87e9-3bbb5ec8ecf8",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Save values in the environment variables\r",
											"    if (pm.response.code === 200) {\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"        pm.environment.set(\"_tmp_accountId\", jsonData.accountList[jsonData.page.totalElements - 1].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_accountId\");\r",
											"    }\r",
											"    if (pm.response.code === 200) {\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"        pm.environment.set(\"_tmp_accountId2\", jsonData.accountList[1].id);\r",
											"        pm.environment.set(\"_tmp_accountIdAlias\", jsonData.accountList[2].id);\r",
											"        pm.environment.set(\"_tmp_accountNumber1\", jsonData.accountList[0].accountNumber);\r",
											"        pm.environment.set(\"_tmp_accountNumber2\", jsonData.accountList[1].accountNumber);\r",
											"        pm.environment.set(\"_tmp_iban1\", jsonData.accountList[0].iban);\r",
											"        pm.environment.set(\"_tmp_iban2\", jsonData.accountList[1].iban);\r",
											"        pm.environment.set(\"_tmp_id1\", jsonData.accountList[0].id);\r",
											"        pm.environment.set(\"_tmp_id2\", jsonData.accountList[1].id);\r",
											"        pm.environment.set(\"_tmp_contractId\", jsonData.accountList[0].permissions[0].contractId);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_accountId2\");\r",
											"        pm.environment.unset(\"_tmp_accountIdAlias\");\r",
											"        pm.environment.unset(\"_tmp_accountNumber1\");\r",
											"        pm.environment.unset(\"_tmp_accountNumber2\");\r",
											"        pm.environment.unset(\"_tmp_iban1\");\r",
											"        pm.environment.unset(\"_tmp_iban2\");\r",
											"        pm.environment.unset(\"_tmp_id1\");\r",
											"        pm.environment.unset(\"_tmp_id2\");\r",
											"        pm.environment.unset(\"_tmp_contractId\");\r",
											"    }\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b08c1852-802e-4741-a612-06e166b4bc33",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=30",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "30"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple_criteria_iban_asc (C38950548)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27498a6f-7ac3-4d47-a201-59ad2e2dd493",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account number\r",
											"    result = result && (jsonData.accountList[0].iban < jsonData.accountList[1].iban);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "91a2d715-0dcb-41a7-a6e0-a69c15572240",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"orderBy\": [\r\n{\r\n\"field\": \"IBAN\",\r\n\"sortOrder\": \"ASC\"\r\n}\r\n],\r\n\"criteria\": {\r\n\"iban\": [\r\n\"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"\r\n]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple_criteria_iban_desc (C38950549)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bdd242c3-8a35-4a49-8a45-9601772a5c94",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account order\r",
											"    result = result && (jsonData.accountList[0].iban > jsonData.accountList[1].iban);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d4646e9b-2057-419b-895b-e544912eb796",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"orderBy\": [\r\n{\r\n\"field\": \"IBAN\",\r\n\"sortOrder\": \"DESC\"\r\n}\r\n],\r\n\"criteria\": {\r\n\"iban\": [\r\n\"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"\r\n]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_BIC (C41939550)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8548bf7-4065-44b3-818a-2f1f216add82",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let bic = \"CLXNCHZZMDB\";\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper BIC\r",
											"    result = result && (jsonData.accountList[0].bank.bic === bic);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3892841c-2c53-4869-9db8-40dd569b7cd1",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=30",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "30"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Account number (C37972701)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b33509a-74d2-4ac4-9349-c9dbf72cf5bc",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accNumber = pm.environment.get(\"_tmp_accountNumber1\")\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account number\r",
											"    result = result && (jsonData.accountList[0].accountNumber === accNumber);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a177baad-80c4-4d2a-b24b-edbf61c83852",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\n    \"accountNumber\": [\n      {{_tmp_accountNumber1}}\n    ]\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple names (C38950539)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "368788e3-a1ef-4a2d-9eb3-de9774981328",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accName = \"1704 USD\";\r",
											"    let accName1 = \"1501 CHF\";\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account name\r",
											"    result = result && (jsonData.accountList[0].accountName === accName);\r",
											"    result = result && (jsonData.accountList[1].accountName === accName1);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "30465651-558e-4d9e-b4dc-6fe083a0cf26",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountName\": [\r\n      \"1704 USD\",\"1501 CHF\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple_Account_number (C38950540)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63da603e-3561-4a1a-bf41-c5820329106a",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accNumber1 = pm.environment.get(\"_tmp_accountNumber1\")\r",
											"    let accNumber2 = pm.environment.get(\"_tmp_accountNumber2\")\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account number\r",
											"    result = result && (jsonData.accountList[0].accountNumber === accNumber1);\r",
											"    result = result && (jsonData.accountList[1].accountNumber === accNumber2);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1cc35473-0fb2-4805-9a9a-fcc3cad462d1",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountNumber\": [\r\n      {{_tmp_accountNumber1}},{{_tmp_accountNumber2}}\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_Current (C38950541)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59c64d89-e7af-4b41-9362-551f2a0a02ff",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType = \"CURRENT\";\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account type   \r",
											"    result = result && (jsonData.accountList[0].accountType === accType);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "178d0e56-0a74-43b1-b5af-d8ec5d85851e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"CURRENT\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_SAVINGS (C38950542)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26984059-2886-480a-b9fd-786e769a7130",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType = \"SAVINGS\";\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account type\r",
											"    result = result && (jsonData.accountList[0].accountType === accType);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5f51c1aa-77c1-476f-9845-1579af2633c7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"SAVINGS\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Search_startDate&endDate (C379050538)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d07e1857-6dd8-4caa-b99a-a680f9b03d43",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fe7a4806-6cb1-4784-9a9a-f72fe73ae665",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_Multiple (C41083339)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8d22c90c-3d34-4d9e-bda6-d26a37fef326",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3c5be394-ba6a-4bae-9611-83a65fed4cab",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType1 = \"CURRENT\";\r",
											"    let accType2 = \"OTHER\";\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account types\r",
											"    var list=jsonData.accountList;\r",
											"    for(var i=0; i<list.length;i++){\r",
											"        if(list[i].accountType!=accType1 && list[i].accountType!=accType2){\r",
											"            pm.expect(false).to.be.eql(true);\r",
											"        }\r",
											"    }\r",
											"\r",
											" /*   result = result && (jsonData.accountList[0].accountType === accType1);\r",
											"    result = result && (jsonData.accountList[1].accountType === accType2);\r",
											"    pm.expect(result).to.be.eql(true);*/\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"OTHER\",\"CURRENT\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_Other  (C41083337)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8c738cc-40ca-4ba2-9e5f-0284802d6f9c",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType = \"OTHER\";\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account type\r",
											"    result = result && (jsonData.accountList[0].accountType === accType);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "48312605-9929-44b6-805e-9973674f5788",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"OTHER\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_iban (C38950543)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c6aeeab-3523-48bd-8452-779f129f3678",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let iban = pm.environment.get(\"_tmp_iban1\")\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account iban\r",
											"    result = result && (jsonData.accountList[0].iban === iban);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c49c426b-ff01-4be0-936f-4034a59f8265",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"iban\": [\r\n      \"{{_tmp_iban1}}\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_multiple_iban (C38950544)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d444ffd9-b63f-4d7b-b3b9-b7f26865c744",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let iban1 = pm.environment.get(\"_tmp_iban1\")\r",
											"    let iban2 = pm.environment.get(\"_tmp_iban2\")\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account ibans\r",
											"    result = result && (jsonData.accountList[0].iban === iban1);\r",
											"    result = result && (jsonData.accountList[1].iban === iban2);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "afbd2983-c397-4c23-bee7-f0d82f30d1c5",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"iban\": [\r\n      \"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"\r\n    ]\r\n\r\n}\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_ContractId (C38950547)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bda011cb-9d65-4007-9cb1-1bfae93257e4",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    // store last securityNumber as environment variable\r",
											"    if (pm.response.code === 200) {\r",
											"       var jsonData = JSON.parse(responseBody);\r",
											"       pm.environment.set(\"_tmp_accountId\", jsonData.accountList[0].id);\r",
											"      } else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"    }    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "65c1b1a4-57a4-4f8a-90d4-a0c7cc2e576e",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"contractId\": [\r\n      \"{{_tmp_contractId}}\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_account_Name (C37949168)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b2179ed-a772-4092-be6e-44ddc881417e",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accName = \"1704 USD\";\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account name\r",
											"    result = result && (jsonData.accountList[0].accountName === accName);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cb82491a-772c-4e21-8958-ac30fdb31ff0",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountName\": [\r\n      \"1704 USD\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_id (C38950545)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3dd2a94b-b745-4422-a8e8-43d4a0778ffa",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d3599210-4e48-4852-be19-861ee86255ab",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"id\": [\r\n      \"{{_tmp_id2}}\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3653155f-5931-4ffd-8b4d-1cf94451c268",
						"type": "text/javascript",
						"exec": [
							"/*determine test case ID from request name*/",
							"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
							"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
							"",
							"/*add current test case ID to list of already executed tests*/",
							"eval(globals.testsExecuted)(testRailTestCases);",
							"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
							"",
							"//store test case ID of current request for linking with Test Rail",
							"pm.globals.set(\"_tr_\" + request.name, testRailTestCases);",
							"",
							"//call global function to generate access token",
							"eval(globals.generateAccessToken)();"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7cebdf90-4f31-4fcc-966f-5912c6f3ea41",
						"type": "text/javascript",
						"exec": [
							"//eval(globals.sessionNavigate)();"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Requests",
			"item": [
				{
					"name": "portfolio request",
					"item": [
						{
							"name": "Get_portfolios_list (C43024137)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ff91651-8579-4e54-b96e-40b23577ac76",
										"exec": [
											"\r",
											"\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of portfolios and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let portId = pm.environment.get(\"_tmp_portfolioId\");\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioSchema\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_portfolioId\",jsonData.portfolios[1].id);\r",
											"    pm.environment.set(\"_tmp_customerId\",jsonData.portfolios[1].customerId);\r",
											"\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_portfolioId\");\r",
											"    pm.environment.unset(\"_tmp_customerId\");\r",
											"\r",
											"}\r",
											"});\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6bdb2497-db56-4d01-9750-3e7f0e63dbdc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_portfolios_details_list (C43024139)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b85cb134-3090-4cee-af45-7b200b09e11f",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ea10651-ee4e-4876-9023-5fbebdade34e",
										"exec": [
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let portId = pm.environment.get(\"_tmp_portfolioId\");\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioDetailsSchema\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returned orders match to specified cuacsId\", () => {\r",
											"  \r",
											"        result = result && (jsonData.id === portId);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"});\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_assets_list (C43181622)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83619227-f814-46bd-a73a-6ebc75ca211b",
										"exec": [
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"assetsList\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    \r",
											"    if (pm.response.code === 200) {\r",
											"    pm.environment.set(\"_tmp_assetsId\",jsonData._embedded.assets[0].id);\r",
											"    \r",
											"\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_assetsId\");\r",
											"    \r",
											"}\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1bcb4f07-58c3-49aa-a827-1b10b77599d2",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/assets",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"assets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_assets_list_details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f24affa2-d1fa-434f-9a35-3a91a741493d",
										"exec": [
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"assetsListDetails\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"});\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d06f05a4-43eb-4f94-a921-5ab81e7fb87f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/assets/{{_tmp_assetsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"assets",
										"{{_tmp_assetsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_maturity_list (C43181624)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ca5ae51-77c2-4d65-8186-96c3418fc61f",
										"exec": [
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"  \r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioDetailsSchema\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"});\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a7cb0043-be54-426e-98ce-a3b5c45daeba",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/maturities",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"maturities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_performance_details (C43181629)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d683615-3850-4a2f-8af1-44ce0d084d33",
										"exec": [
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let assetNo = pm.environment.get(\"_tmp_portfolioId\");\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioPerformanceSchema\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"});\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e108f97-5b99-4056-8ac5-8e52319a1391",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/performance",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"performance"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Custody accounts",
					"item": [
						{
							"name": "Get custody accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "568661f1-891a-40e2-b3b8-c0273ca771ee",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsSchema = pm.environment.get(\"cuacsSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_cuacsId\",jsonData.cuacs[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_cuacsId\");\r",
											"}\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "93c5f145-3777-4b33-b70f-eedef262d4d8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get positons for cuacsId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1cdb8825-58d2-4dbf-a705-123f50d3b141",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Position details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsPositionSchema = pm.environment.get(\"cuacsPositionSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsPositionSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"   }); \r",
											"   \r",
											" // store last securityNumber as environment variable\r",
											"    if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_positionsId\",jsonData.positions[0].id);\r",
											"    } else {\r",
											"    pm.environment.unset(\"_tmp_positionsId\");\r",
											"}\r",
											"\r",
											"    \r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b954b9d5-4cd6-42b4-90b0-b3a5d9695142",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/positions",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get custody account positions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "15971459-ba56-413e-afcf-e2e07a7d7a3c",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Position details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var positionIdSchema = pm.environment.get(\"positionIdSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"positionIdSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"   }); \r",
											"   \r",
											"\r",
											"    \r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9710629c-2b22-4922-a6f7-e3d94f4246d0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/positions/{{_tmp_positionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"positions",
										"{{_tmp_positionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get transactions for cuacsId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "482d95d8-4e20-400c-a3e8-909b9bbcb4a9",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Transactions details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsPositionSchema = pm.environment.get(\"cuacsPositionSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsIdSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"   }); \r",
											"   \r",
											" // store last securityNumber as environment variable\r",
											"    if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_transactionsId\",jsonData.transactions[0].id);\r",
											"    } else {\r",
											"    pm.environment.unset(\"_tmp_transactionsId\");\r",
											"}\r",
											"\r",
											"    \r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "acf6f990-14ef-4585-8383-78291b077cb6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/transactions/",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"transactions",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get custody account positions details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7429dec9-e284-4956-9a8e-e8d811af484e",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Position details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var positionIdSchema = pm.environment.get(\"positionIdSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"positionIdSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"   }); \r",
											"   \r",
											"\r",
											"    \r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cddb62c7-607f-42a0-b2c9-f3efdc91808c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/positions/{{_tmp_positionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"positions",
										"{{_tmp_positionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get custody account transactions details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55b39851-5bba-4ef5-98ab-117be8a30303",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Transactions details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var positionIdSchema = pm.environment.get(\"positionIdSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsIdDetailsSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"   }); \r",
											"   \r",
											"\r",
											"    \r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0fc9b6da-0e88-4f4c-a19b-e1c2593524ea",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/transactions/{{_tmp_transactionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"transactions",
										"{{_tmp_transactionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_customer_info_by_his_ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d41a2984-b77f-482f-8af9-a632d22d29a2",
										"exec": [
											"eval(globals.commonTests)();",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"    let cuacsId = pm.environment.get(\"_tmp_cuacsId\");",
											"    let result = true;",
											"",
											"    pm.test(\"Status 200 OK is displayed\", function() {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsDetSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"",
											"    pm.test(\"Returned orders match to specified cuacsId\", () => {",
											"  ",
											"        result = result && (jsonData.id === cuacsId);",
											"        ",
											"        pm.expect(result).to.be.eql(true);",
											"    });",
											"",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&",
											"        pm.expect(result).to.be.eql(true);",
											"});",
											"",
											"eval(globals.sessionNavigate)();",
											"pm.globals.unset(\"_tr_\" + request.name);",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e0482889-4160-409a-b903-8c3899d0e112",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Assets",
					"item": [
						{
							"name": "Account_Search (C41736193)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "edd28014-deb8-41e5-b2dc-cb22c19fb297",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[jsonData.page.totalElements-1].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId2\",jsonData.accountList[1].id);\r",
											"    pm.environment.set(\"_tmp_accountIdAlias\",jsonData.accountList[2].id);\r",
											"    pm.environment.set(\"_tmp_accountNumber1\",jsonData.accountList[0].accountNumber);\r",
											"    pm.environment.set(\"_tmp_accountNumber2\",jsonData.accountList[1].accountNumber);\r",
											"    pm.environment.set(\"_tmp_iban1\",jsonData.accountList[0].iban);\r",
											"    pm.environment.set(\"_tmp_iban2\",jsonData.accountList[1].iban);\r",
											"    pm.environment.set(\"_tmp_id1\",jsonData.accountList[0].id);\r",
											"    pm.environment.set(\"_tmp_id2\",jsonData.accountList[1].id);\r",
											"    pm.environment.set(\"_tmp_contractId\",jsonData.accountList[0].permissions[0].contractId);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId2\");\r",
											"    pm.environment.unset(\"_tmp_accountIdAlias\");\r",
											"    pm.environment.unset(\"_tmp_accountNumber1\");\r",
											"    pm.environment.unset(\"_tmp_accountNumber2\");\r",
											"    pm.environment.unset(\"_tmp_iban1\");\r",
											"    pm.environment.unset(\"_tmp_iban2\");\r",
											"    pm.environment.unset(\"_tmp_id1\");\r",
											"    pm.environment.unset(\"_tmp_id2\");\r",
											"    pm.environment.unset(\"_tmp_contractId\");\r",
											"}\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0dba479e-b029-40e2-b5b8-66ca7041ccc6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=30",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "30"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple_criteria_iban_asc (C38950548)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a88faa8-c5fe-4d12-9c38-46d9b794332b",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].iban < jsonData.accountList[1].iban);\r",
											"   \r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "93d0c232-e37a-4495-89c7-3b61492c9898",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"orderBy\": [\r\n{\r\n\"field\": \"IBAN\",\r\n\"sortOrder\": \"ASC\"\r\n}\r\n],\r\n\"criteria\": {\r\n\"iban\": [\r\n\"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"\r\n]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple_criteria_iban_desc (C38950549)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3ee9e83f-0f9c-413d-9dcc-7dd7c880fac7",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account order\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].iban > jsonData.accountList[1].iban);\r",
											"   \r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "382d704c-0880-4fe1-8401-8a2959eebb9b",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"orderBy\": [\r\n{\r\n\"field\": \"IBAN\",\r\n\"sortOrder\": \"DESC\"\r\n}\r\n],\r\n\"criteria\": {\r\n\"iban\": [\r\n\"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"\r\n]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_BIC (C41939550)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9f65578-f97e-4b89-9f55-099b0d0f2f44",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let bic = \"CLXNCHZZMDB\"\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].bank.bic === bic);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d83f51bc-52bc-4a20-88a5-8b20f3558fbc",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=30",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "30"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Account number (C37972701)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94ae9364-b19a-47a9-b61e-29c9cf9b46eb",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accNumber = pm.environment.get(\"_tmp_accountNumber1\")\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountNumber=== accNumber);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "386eb3ff-f655-421a-9123-97f60ac23ad0",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\n    \"accountNumber\": [\n      {{_tmp_accountNumber1}}\n    ]\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple names (C38950539)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03cee9db-8a01-4fd8-91e5-43eb83374c47",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accName = \"1704 USD\";\r",
											"    let accName1 = \"1501 CHF\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"       \r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"    pm.test(\"Returned proper account name\", () => {\r",
											"  \r",
											"    result = result && (jsonData.accountList[0].accountName === accName);\r",
											"    result = result && (jsonData.accountList[1].accountName === accName1);\r",
											"        \r",
											"    pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6c8e7fac-3a28-4419-b23a-b02ef914dcc4",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountName\": [\r\n      \"1704 USD\",\"1501 CHF\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple_Account_number (C38950540)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0bd3cce-ba4f-4269-8aba-d7d32156e06c",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accNumber1 = pm.environment.get(\"_tmp_accountNumber1\")\r",
											"    let accNumber2 = pm.environment.get(\"_tmp_accountNumber2\")\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountNumber=== accNumber1);\r",
											"        result = result && (jsonData.accountList[1].accountNumber=== accNumber2);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7a8f2008-7fc3-4f63-9c84-b7a639c93e31",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountNumber\": [\r\n      {{_tmp_accountNumber1}},{{_tmp_accountNumber2}}\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_Current (C38950541)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b63d755-2e44-4528-a4be-af5cfc4d96ae",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType = \"CURRENT\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountType=== accType);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "722bc79e-f099-46ee-b823-5ff29920f63a",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"CURRENT\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_SAVINGS (C38950542)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "847045f7-e175-47a5-907b-bc344bb04473",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType = \"SAVINGS\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountType=== accType);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5af7d1e0-9593-4c30-99c9-af377210632e",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"SAVINGS\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Search_startDate&endDate (C379050538)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "479c25d2-10cf-416f-8d62-6a825fcf2f45",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d3b789c5-6528-445f-82af-0ac888aef6b6",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_Multiple (C41083339)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "139e1b15-f460-4ee5-84d6-3192bde8c327",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d0f1beb8-037a-4580-8552-4483c8aa5fee",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType1 = \"CURRENT\";\r",
											"    let accType2 = \"OTHER\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account type\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountType=== accType1);\r",
											"        result = result && (jsonData.accountList[3].accountType=== accType2);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"OTHER\",\"CURRENT\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_Other  (C41083337)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1f5e333-c32e-4fb7-bc84-2b4641dc15a5",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType = \"OTHER\";\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"\r",
											"        result = result && (jsonData.accountList[0].accountType === accType);\r",
											"\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"        && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "15f8e13a-206e-4952-8a26-6fabd992bd12",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"OTHER\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_iban (C38950543)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae3784e7-6144-44ca-9635-05f6bccaefe2",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let iban = pm.environment.get(\"_tmp_iban1\")\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].iban === iban);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3606ed0d-0dd7-4850-bba2-eea3429d6bc1",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"iban\": [\r\n      \"{{_tmp_iban1}}\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_multiple_iban (C38950544)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "adde4c55-cc4b-4160-ab0f-2a58503149c4",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let iban1 = pm.environment.get(\"_tmp_iban1\")\r",
											"    let iban2 = pm.environment.get(\"_tmp_iban2\")\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].iban === iban1);\r",
											"        result = result && (jsonData.accountList[1].iban === iban2);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4f2e258b-74fa-438c-9323-77191f0e386f",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"iban\": [\r\n      \"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"\r\n    ]\r\n\r\n}\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_ContractId (C38950547)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f43e5d2-2f6a-421a-85ce-f239692b0a13",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53968ad0-5dc3-4866-b18a-f77ca3acd78d",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"contractId\": [\r\n      \"{{_tmp_contractId}}\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_account_Name (C37949168)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de974dbb-143f-4470-af2e-454919bb5ec4",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accName = \"1704 USD\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"    pm.test(\"Returned proper account name\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountName === accName);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"        \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39244bdc-9978-49d2-af1f-b14c2964d009",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountName\": [\r\n      \"1704 USD\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_id (C38950545)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b6bf0f3f-7559-4530-8db5-f70cdfac26b5",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a639ecc7-ce11-499a-8a55-bb1c5574727b",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"iban\": [\r\n      \"{{_tmp_id2}}\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search (C37972704)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c9d8f91-4eb1-4897-aace-dbf8ec5fb702",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"    \r",
											"    if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_transactionsId\",jsonData.transactionGroups[0].transactions[0].id);\r",
											"\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_transactionsId\");\r",
											"\r",
											"}\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8a75da09-c8fb-4654-bc0e-3386b37d57c5",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2020-06-01\"\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_overview",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "201545e8-45ce-4202-8002-4668e7b9b91d",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"  \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"    \r",
											"    if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_transactionsId\");\r",
											"\r",
											"}\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "252f004e-24e0-462c-8f47-da32ccaa8f3e",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2020-01-01\",\n\"endDate\": \"2020-06-01\",\n\"transactionFlow\": \"OUTGOING\",\n\"transactionType\": \"BOTH\",\n\"amountFrom\": \"999.00\",\n\"amountTo\": \"51001.01\"\n\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_validation 400 (C38763416)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "578036c5-7416-42b1-a55e-3c9f88e5f267",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 400 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"    \r",
											"    if (pm.response.code === 400) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_transactionsId\");\r",
											"\r",
											"}\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"error400\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(400)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "64737a62-bef7-4520-a347-99126283931a",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2020-01-01\",\n\"endDate\": \"2020-06-01\",\n\"transactionFlow\": \"OUTGOING\",\n\"transactionType\": \"BOTH\",\n\"amountFrom\": \"999.00\",\n\"amountTo\": \"51001.01\"\n\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{oldAccountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{oldAccountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_transaction 401 validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78927615-3144-4782-b59b-a85943ae12ac",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 401 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(401);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"    \r",
											"    if (pm.response.code === 401) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_transactionsId\");\r",
											"\r",
											"}\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"error400\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(401)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "878ae35b-a02d-46ee-ad09-9c516a21a0bd",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{insufficient_token_value}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2020-01-01\",\n\"endDate\": \"2020-06-01\",\n\"transactionFlow\": \"OUTGOING\",\n\"transactionType\": \"BOTH\",\n\"amountFrom\": \"999.00\",\n\"amountTo\": \"51001.01\"\n\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_multiple_criteria (C38763407)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99acb94e-5b96-498c-bc74-7bcbc0f1adb0",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var transactionDate = new Date('2019-01-01').getTime();\r",
											"    var endDate = new Date('2019-04-18').getTime();\r",
											"    let amountFrom = pm.environment.get(\"100.01\");\r",
											"    let amountTo = pm.environment.get(\"5001.21\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Returned orders match to specified transactions startDate 2019-01-01 \", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (transactionDate < convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Returned orders match to specified transactions endDate 2019-04-18 and after\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (endDate > convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont from\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountFrom <= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont to\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountTo <= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2e3f1dfc-c2a8-4c77-982d-e2fe5af4673a",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-04-18\",\n\n\"amountFrom\": 100.01,\n\"amountTo\": 50001.21\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_desc  (C38719010)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba6f5dbc-f3ca-4e1f-9b4e-149c75604d2b",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ca36a9c0-988b-4147-a0ea-1a88c07e741c",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_pagination (C47473070)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4eaf5e8-c37f-4a93-863a-752836770ffc",
										"exec": [
											"\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let number = 25;\r",
											"    let size = 3;\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"  \r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper response size\", () => {\r",
											"        result = result && (jsonData.page.size === size);\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"        pm.test(\"Returned proper number\", () => {\r",
											"        result = result && (jsonData.page.number === number);\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "202d579b-d55e-4648-b342-6b0c4f670e0b",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": {{PrS:nextWorkingDay}}\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?page=25&size=3",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "25"
										},
										{
											"key": "size",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_size (C47473979)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae723a75-ee92-4cb9-891c-eaa902cbdaaf",
										"exec": [
											"\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let number = 10;\r",
											"    let size = 4;\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"  \r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper response size\", () => {\r",
											"        result = result && (jsonData.page.size === size);\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"        pm.test(\"Returned proper number\", () => {\r",
											"        result = result && (jsonData.page.number === number);\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4b87b013-27de-4663-94af-c0ca68c61b5e",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": {{PrS:nextWorkingDay}}\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?page=10&size=4",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10"
										},
										{
											"key": "size",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_startDate (C37786354)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07c2b8da-0f89-4272-8f40-301ee4fab5d6",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var transactionDate = new Date('2019-01-01').getTime();\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-01-01 and after\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (transactionDate < convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d047ff8d-edd1-48f1-9b8d-623be8813032",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\"\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_Reference_Text (C37905050)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a32dc8c-ae80-436b-887f-35de782fcfd1",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var referenceText = null;\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"reference text is null\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var refText = new Date(jsonData.transactionGroups[0].transactions[0].referenceText[x].referenceText);\r",
											"            result = result && (referenceText === refText);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bea90f4a-a29d-4e41-a934-c07b641cd14f",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"referenceText\":null\n\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_amountFrom (C37905040)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63f88bb7-ffef-47af-a8f7-38d8fd68a1fd",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"       let amountFrom = pm.environment.get(\"1000.01\");\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont from\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountFrom <= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6864f8ad-7dd3-4952-aeaa-be7d081a1fdb",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"criteria\": {\r\n\"startDate\": \"2019-01-01\",\r\n\"amountFrom\":\"1000.01\"\r\n}\r\n}\r\n'date is set if contract don`t have transactions in last 30 days'",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "set_alias (C37905058)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8087af76-100e-485a-a123-42718f983a8b",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"aliasSet\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "557cc8c5-2d46-4884-9a79-9f14fb2bad5c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"alias\": \"test\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountIdAlias}}/alias",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountIdAlias}}",
										"alias"
									]
								}
							},
							"response": []
						},
						{
							"name": "update alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65436997-4223-4ff5-8e68-831b6b5e0467",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"aliasSet\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7b8f7764-b7df-4797-9c03-6a921e254f54",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"alias\": \"test2\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountIdAlias}}/alias",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountIdAlias}}",
										"alias"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "755c12df-4252-4294-80ca-2649d88b6642",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"aliasSet\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c1700ab1-0351-4ad0-8929-0004201fe3cc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountIdAlias}}/alias",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountIdAlias}}",
										"alias"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92bb75b4-8f13-4cea-85e3-3611de076680",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accName = \"test\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"    pm.test(\"Returned proper account name\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountName === accName);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"        \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "af965989-3c39-4fa4-80c1-f9026dbe3763",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\n    \"accountName\": [\n      \"test\"\n    ]\n\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=20",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_updated_alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f643bf8d-d52c-4fd7-85b5-a39cc6e5360e",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accName = \"test2\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"    pm.test(\"Returned proper account name\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountName === accName);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"        \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b43a2915-67c4-4dbf-969f-52676ff0e102",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\n    \"accountName\": [\n      \"test2\"\n    ]\n\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=20",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_alias_Postconditions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9e8b0ef-8a32-4296-a0d4-e209ba951bbc",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accName = \"1704 USD\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"    pm.test(\"Returned proper account name\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountName === accName);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"        \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b97233e7-8e0b-42ee-9eb0-62d35ad9d3f6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\n    \"accountName\": null\n\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=20",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_amountTo (C37905041)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "83b1156c-bf82-4d92-a28a-d88b4d85de2a",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8821a06f-b80d-4b30-aa53-86226f4e6159",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"       let amountTo = pm.environment.get(\"150000.01\");\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont from\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountTo >= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"criteria\": {\r\n\"startDate\": \"2019-01-01\",\r\n\"amountTo\":\"150000.01\"\r\n}\r\n}\r\n'date is set if contract don`t have transactions in last 30 days'",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_endDate (C62786800)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "058f78ae-49b0-4b15-a5c7-d7ae29d9182b",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var transactionDate = new Date(\"2019-12-32\");\r",
											"    var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions endDate 2019-12-31\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (convertedtransactionDate > convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "90c5ef1e-1f76-4c15-8cf8-c02fac4f70ac",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"endDate\": \"2019-12-31\"\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Search_endDate (C37786407)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f4c57fe-528d-4547-b8ae-e309e1a0dcac",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "00bc016b-89fb-40b3-94b0-fd2a4852ec61",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"endDate\": \"2019-12-31\"\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_multiple_amontFrom_amountTo (C37905042)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa37acd4-5b1b-44d9-b108-804be15062e4",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var transactionDate = new Date('2019-01-01').getTime();\r",
											"    var endDate = new Date('2019-04-18').getTime();\r",
											"    let amountFrom = pm.environment.get(\"100.01\");\r",
											"    let amountTo = pm.environment.get(\"1000.01\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"     pm.test(\"Check proper value for transactions amont from\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountFrom >= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont to\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountTo <= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "147aedee-50cb-4927-baad-95d940398bd2",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"amountFrom\": 100.01,\n\"amountTo\": 1001.21\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_startDate&endDate (C37905042)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0fc9395-d15d-4cac-b5a2-c7907e93da02",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var startDate = new Date('2019-01-01').getTime();\r",
											"    var endDate = new Date('2019-10-29').getTime();\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-01-01\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (startDate <= convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-10-29\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (endDate >= convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    });\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "34d24ee4-af5d-455a-8a44-60af28811497",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": {{PrS:nextWorkingDay}}\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_single_transaction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fd5a6106-fc37-4f2e-96ca-d63a8baba23d",
										"exec": [
											"//pm.environment.unset(\"_tmp_accountId\");",
											"",
											"eval(globals.assetsSearchFunction)(\"assetsTransactionSearchFunction\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "66bd6397-3098-4dc7-99c1-3baa0e32e9b7",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"singleTransactions\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/transactions/{{_tmp_transactionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"transactions",
										"{{_tmp_transactionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da50b1e7-2fce-4eb8-84bd-ebac82a4a0ce",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var startDate = new Date('2019-01-01').getTime();\r",
											"    var endDate = new Date('2019-10-29').getTime();\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-01-01\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (startDate <= convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-10-29\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (endDate >= convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    });\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d0e44ecf-efd2-4ca9-9db3-4616ea3ca542",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/permissions",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_permissions 400 validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2458aedc-c14b-4257-8808-aca919071d37",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 400 Bad request is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"error400\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    pm.response.to.have.status(400)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d6ac7212-1936-4f58-b5b0-98989c9f88f0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{insufficient_token_value}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{oldAccountId}}/permissions",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{oldAccountId}}",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_permissions 401 validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d66f46d-d887-4454-8bb5-4159ba6490b0",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 403  is displayed\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"error400\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    pm.response.to.have.status(403)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "086a327c-a373-4520-9aae-179229bb4bb9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{insufficient_token_value}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/permissions",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_details_get",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1a777a3-eb63-4846-a284-521d74668813",
										"exec": [
											"\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of permissions is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountIdDetails\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6a11d788-ded3-4dd9-9cac-6f8101f2fee3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-10-29\"\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7447173e-3467-4e9d-9e0f-2d7a1bba8dfd",
										"exec": [
											"\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of balance is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"balanceSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ea0851bd-ee01-442e-8b77-bf7c286e6eb7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-10-29\"\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/balance",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"balance"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_balance 400 validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3ed85ef-7701-4eab-aad0-456a80233072",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 400 Bad request is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"error400\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    pm.response.to.have.status(400)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d1e62388-86e0-4e9c-8f5e-32e2d7cdd19b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{oldAccountId}}/balance",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{oldAccountId}}",
										"balance"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_balance 401 validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "074f41c9-39ca-44b0-8c8c-a7815a03cced",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 401  is displayed\", function () {\r",
											"        pm.response.to.have.status(401);\r",
											"    });\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"error400\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    pm.response.to.have.status(401)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d134feb4-5cdf-4240-866d-588aca102596",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{insufficient_token_value}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{oldAccountId}}/balance",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{oldAccountId}}",
										"balance"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_list_of_all_accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0db849e-ab54-4dea-b9fc-3e8b232797d3",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of portfolios is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsSchema = pm.environment.get(\"portfolioSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, portfolioSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last portfolioId as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_portfolioId\",jsonData.portfolios[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_portfolioId\");\r",
											"}\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f36e6935-ffbf-4516-a07a-18d6e7dac27c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Incoming transactions (C37905043)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1de7707e-90d4-48a9-9d68-0299b5f3154d",
										"exec": [
											"\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"  \r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1449ff0e-3e25-40df-86f6-95b16d457f97",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionFlow\":\"INCOMING\"\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BOTH transactions (C37905045)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db89af8a-1a15-4118-ac45-b6fd9bc0a6c9",
										"exec": [
											"\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"  \r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "aacac37c-1ad0-4e5c-a249-979d0a1803e6",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionFlow\":\"BOTH\"\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OUTGOING transactions (C37905044)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8c8676e-8cd9-4ac6-a06e-7fa7a6d25af1",
										"exec": [
											"\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"  \r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a5abfeb7-d9aa-464e-a4f9-c1d1e82f9cb1",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionFlow\":\"OUTGOING\"\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "UNBOOKED transactions (C37905047)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d74c4a3c-0a84-4df8-9634-60c0f504c4d5",
										"exec": [
											"\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"  \r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f8418596-54f7-4f41-8f9a-edeee8dc20c4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionType\":\"UNBOOKED\"\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BOOKED transactions (C37905046)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "674989ae-cb02-4c31-b2d4-0beaf346ffe2",
										"exec": [
											"\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"  \r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "27e16e3d-7e7a-463d-ae71-576975a9ad58",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionType\":\"BOOKED\"\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BOTH transactionsType (C37905048)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d82cdfa-df29-42b4-90d8-5f88279b8182",
										"exec": [
											"\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"  \r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e9acb232-b3ef-4e02-b3fb-02e7631cc148",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionType\":\"BOTH\"\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "camt",
					"item": [
						{
							"name": "(C39248710) camt053 download",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5006edd4-be3d-4021-86fc-d837cce3ad68",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1e294d10-882d-4282-8029-e82a58b2c5e9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT052",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT052"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248697) camt053 download with endDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4a09dfa-7746-4e33-9132-3913c958127f",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(400)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5919f511-3f7f-4675-967e-591a10c07e50",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT053&endDate=2019-12-01",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT053"
										},
										{
											"key": "endDate",
											"value": "2019-12-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248700) camt053 download with startDate and endDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1dc6273f-8d02-46bf-923f-4a6f2535637f",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(400)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "95c3d30c-fdc6-4a57-bcd0-72ff509c48ef",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/__ID__4f784e474f5a6e44796f485532613845314188387337d58602a8f88557af9ab6fdc09e727eb0b3/transactions/camt?isoType=CAMT053&startDate=2019-12-01&endDate=2020-03-01",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"__ID__4f784e474f5a6e44796f485532613845314188387337d58602a8f88557af9ab6fdc09e727eb0b3",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT053"
										},
										{
											"key": "startDate",
											"value": "2019-12-01"
										},
										{
											"key": "endDate",
											"value": "2020-03-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248701) camt053 download WDETAIL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8269c94e-0c6a-48e6-8489-8fab57986809",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(400)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ac1739bd-3759-405b-aa70-1c390f2df2a8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT053&details=WDETAIL",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT053"
										},
										{
											"key": "details",
											"value": "WDETAIL"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248701) camt053 download WDETAIL Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab7925a2-2efa-497e-b112-99974b020a74",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(400)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4716f44c-d2eb-4895-894f-b64dc6448bae",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT053&details=WDETAIL",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT053"
										},
										{
											"key": "details",
											"value": "WDETAIL"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248702) camt052 download",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54c4549e-d76f-4b34-ad5b-f228aedc7207",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c1e96e3a-ca7c-4331-bcc6-aee64a40db4e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/banking-api/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT053",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"banking-api",
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT053"
										},
										{
											"key": "startDate",
											"value": "2020-03-01",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248698) camt052 download with startDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52781d96-a2ec-4ae9-8c06-9c565ac3ba5d",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "95ec4d28-744e-4752-b379-efa253aaa8ae",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/transactions/camt?isoType=CAMT052&startDate=2020-01-01",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT052"
										},
										{
											"key": "startDate",
											"value": "2020-01-01"
										},
										{
											"key": "endDate",
											"value": "2020-03-09",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248705) camt052 download with startDate and endDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4493472e-c8af-483b-bac1-9463ad1ff685",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "02640e61-dbb3-4623-ba1b-cea862a6b495",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT053&startDate=2019-01-06&endDate=2020-03-09",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT053"
										},
										{
											"key": "startDate",
											"value": "2019-01-06"
										},
										{
											"key": "endDate",
											"value": "2020-03-09"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248706) camt054 download",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4cbd1673-7c06-47f5-a82c-308b24bc127f",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8e033ce2-3251-4fe0-8a3d-bdd64bd827bc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT054",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT054"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248706) camt054 download Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c81985a7-e3b1-47a3-a865-6b834c27e6ea",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b9245948-21d5-405b-a39e-6c2935b18118",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT054",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT054"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Generate token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4513294a-d608-4252-a273-db9511e013d9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7e3fe019-1a8d-4488-95ea-6648a7e8a9e0",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.environment.set(\"access_token\", pm.response.text());",
									"});",
									"",
									"",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"tenant_id\": 19901,\n\"acsKey\": \"i6PiNObtdp2rCNW7mlV51BDSY4zAliSvBCyVsuML1000203567\",\n\"tenant_name\": \"CLX EBS\",\n\"user_name\": \"1284991501\",\n\"contractNo\": \"15054\",\n\"languageCode\": \"en\",\n\"bcNo\": \"12312\",\n\"authorities\": [\"DBAN_ADMIN\", \"DBAN_USER\"],\n\"client_id\": \"postman\",\n\"user_id\": 1284991501,\n\"scope\": [\n\"https://api.crealogix.com/dban\",\n\"read\",\n\"write\",\n\"https://api.crealogix.com/contracts/contract.advisor.readonly\",\n\"https://api.crealogix.com/contracts/contract.metadata.readonly\",\n\"https://api.crealogix.com/contracts/contract.person.readonly\",\n\"https://api.crealogix.com/payments/payment.initiate\",\n\"https://api.crealogix.com/payments/payment.read\",\n\"https://api.crealogix.com/payments/payment.write\",\n\"https://api.crealogix.com/assets/account.balance.readonly\",\n\"https://api.crealogix.com/assets/account.transaction.readonly\",\n\"https://api.crealogix.com/assets/account.permission.readonly\",\n\"https://api.crealogix.com/assets/account.metadata.readonly\",\n\"https://api.crealogix.com/assets/account.accountname.write\",\n\"https://api.crealogix.com/assets/account.accountimage.write\",\n\"https://api.crealogix.com/assets/cuac.readonly\",\n\"https://api.crealogix.com/assets/portfolio.readonly\",\n\"https://api.crealogix.com/messages/securemail.write\",\n\"https://api.crealogix.com/messages/securemail.read\",\n\"https://api.crealogix.com/messages/document.category.read\",\n\"https://api.crealogix.com/messages/document.category.write\",\n\"https://api.crealogix.com/messages/document.write\",\n\"https://api.crealogix.com/messages/document.read\",\n\"https://api.crealogix.com/brokerage/security.readonly\",\n\"https://api.crealogix.com/brokerage/tradingplace.readonly\",\n\"https://api.crealogix.com/brokerage/depository.readonly\",\n\"https://api.crealogix.com/brokerage/order.readonly\",\n\"https://api.crealogix.com/brokerage/order.write\",\n\"https://api.crealogix.com/deeplink/domains\",\n\"https://api.crealogix.com/deeplink/links\"\n],\n\"loginName\": \"1284991501\",\n\"exp\": 32479694642,\n\"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\n\"iat\": 1553855569\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{env_security_testToken}}",
							"host": [
								"{{env_security_testToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter_account_by_customerId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83fc17da-4cf0-431d-92e1-6f04641ff7c5",
								"exec": [
									"// Execute standard tests from PrS using eval()\r",
									"eval(globals.commonTests)();\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of portfolios is retrieved and response schema i validated\", function () {\r",
									"\r",
									"    var schemaValidationPassed = true;\r",
									"    //var cuacsSchema = pm.environment.get(\"portfolioSchema\");\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									"    \r",
									"    pm.test(\"Status 200 OK is displayed\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response schema is correct\", () => {\r",
									"\r",
									"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioSchema\",jsonData);\r",
									"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
									"    }); \r",
									"    \r",
									"    pm.response.to.have.status(200)\r",
									"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, portfolioSchema)).to.be.true;\r",
									"});\r",
									"\r",
									"// store last portfolioId as environment variable\r",
									"if (pm.response.code === 200) {\r",
									"    var jsonData = JSON.parse(responseBody)._embedded;\r",
									"    pm.environment.set(\"_tmp_portfolioId\",jsonData.portfolios[0].id);\r",
									"} else {\r",
									"    pm.environment.unset(\"_tmp_portfolioId\");\r",
									"}\r",
									"\r",
									"\r",
									"// Session navigate from PrS using eval()\r",
									"eval(globals.sessionNavigate)();\r",
									"\r",
									"// Reset reference to TR test cases\r",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0f4f14fa-4306-4a6f-9474-fdbdc0dcf9bc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json; charset=UTF-8"
							},
							{
								"key": "accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios",
							"host": [
								"{{env_assets}}"
							],
							"path": [
								"assets",
								"portfolios",
								"{{tenantId_assets}}",
								"v1",
								"portfolios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clean TestRail Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "65f1eef8-5133-4411-b0c8-61d24c34b8da",
								"exec": [
									"// Prepare list of TestRail tests for 'Clean TestRail Run' request",
									"//var execTests = pm.globals.get(\"testRailTestsInRun\");",
									"var execTests = data.executedTests;",
									"console.log(\"TestRail, tests executed in last run: \" + execTests);",
									"execTests = execTests.replace(/C/g, \"\");",
									"//console.log(\"TestRail, first cleanup: \" + execTests);",
									"execTests = execTests.replace(/ /g, \", \");",
									"//console.log(\"TestRail, second cleanup: \" + execTests);",
									"execTests = execTests.replace(/,,/g, \",\");",
									"pm.globals.set(\"testRailTestsInRun\", execTests); ",
									"",
									"var array = JSON.parse(\"[\" + execTests + \"]\"); //convert string to array",
									"for(let i = 0; i < 10; i++){",
									"    let runId = JSON.parse(responseBody)[i].id;",
									"    let runName = JSON.parse(responseBody)[i].name;",
									"    let runSuiteId = JSON.parse(responseBody)[i].suite_id;",
									"    if (runName === \"Postman API Tests\") { //determine proper run",
									"        //console.log(runId);   ",
									"        console.log(\"TestRail run '\" + runId + \"' updating for tests: \" + execTests);",
									"        pm.sendRequest({",
									"            url: \"https://testrail.ebs.crealogix.net/index.php?/api/v2/update_run/\" + runId,",
									"            method: \"POST\",",
									"            header: {",
									"                \"Authorization\": \"Basic bWlsYW4ua2FyYWRlZ2xpY0BjcmVhbG9naXguY29tOlNTQ25hcG9saTEyMzQ1Njc4OQ==\",",
									"                \"Content-Type\": \"application/json\"",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ include_all: false, case_ids: array })",
									"        \t}",
									"        });",
									"        break;",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2ceced74-5c98-4425-94d4-8e6ab5743aec",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "SSCnapoli123456789",
									"type": "string"
								},
								{
									"key": "username",
									"value": "milan.karadeglic@crealogix.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json; charset=UTF-8"
							},
							{
								"key": "accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "https://testrail.ebs.crealogix.net/index.php?/api/v2/get_runs/8=",
							"protocol": "https",
							"host": [
								"testrail",
								"ebs",
								"crealogix",
								"net"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "/api/v2/get_runs/8",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getAuthTestTokenK8S",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4de845fe-d0a4-43f8-bb5b-ca421d52c3d9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "12b42458-efdf-4125-8960-061d40e2a7d1",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.environment.set(\"access_token\", pm.response.text());",
									"});",
									"",
									"",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"tenant_id\": {{tenantId_security}},\n\"tenant_name\": \"CLX EBS\",\n\"user_name\": \"{{userId_security}}\",\n\"contractNo\": \"{{contractNo_security}}\",\n\"languageCode\": \"en\",\n\"bcNo\": \"{{bcNo_security}}\",\n\"authorities\": [\"DBAN_ADMIN\", \"DBAN_USER\"],\n\"client_id\": \"postman\",\n\"user_id\": {{userId_security}},\n\"scope\": [\n\"https://api.crealogix.com/dban\",\n\"read\",\n\"write\",\n\"https://api.crealogix.com/contracts/contract.advisor.readonly\",\n\"https://api.crealogix.com/contracts/contract.metadata.readonly\",\n\"https://api.crealogix.com/contracts/contract.person.readonly\",\n\"https://api.crealogix.com/payments/payment.initiate\",\n\"https://api.crealogix.com/payments/payment.read\",\n\"https://api.crealogix.com/payments/payment.write\",\n\"https://api.crealogix.com/assets/account/read\",\n\"https://api.crealogix.com/assets/account.transaction/read\",\n\"https://api.crealogix.com/assets/account.name\",\n\"https://api.crealogix.com/assets/account.image\",\n\"https://api.crealogix.com/assets/cuac/read\",\n\"https://api.crealogix.com/assets/portfolio/read\",\n\"https://api.crealogix.com/messages/securemail.write\",\n\"https://api.crealogix.com/messages/securemail.read\",\n\"https://api.crealogix.com/messages/document.category.read\",\n\"https://api.crealogix.com/messages/document.category.write\",\n\"https://api.crealogix.com/messages/document.write\",\n\"https://api.crealogix.com/messages/document.read\",\n\"https://api.crealogix.com/brokerage/security/read\",\n\"https://api.crealogix.com/brokerage/tradingplace/read\",\n\"https://api.crealogix.com/brokerage/depository/read\",\n\"https://api.crealogix.com/brokerage/order/read\",\n\"https://api.crealogix.com/brokerage/order\",\n\"https://api.crealogix.com/deeplink/domains\",\n\"https://api.crealogix.com/deeplink/links\"\n],\n\"loginName\": \"{{userId_security}}\",\n\"exp\": 32479694642,\n\"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\n\"iat\": 1553855569\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{env_security_testToken}}",
							"host": [
								"{{env_security_testToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAuthTestTokenK8S old&new scope",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b54765a7-35cc-41c1-b589-4e03af3ef154",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b26453d9-ff25-4e7c-ad7a-19985b9f94f3",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.environment.set(\"access_token\", pm.response.text());",
									"});",
									"",
									"",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"tenant_id\": {{tenantId_security}},\n\"tenant_name\": \"CLX EBS\",\n\"user_name\": \"{{userId_security}}\",\n\"contractNo\": \"{{contractNo_security}}\",\n\"languageCode\": \"en\",\n\"bcNo\": \"{{bcNo_security}}\",\n\"authorities\": [\"DBAN_ADMIN\", \"DBAN_USER\"],\n\"client_id\": \"postman\",\n\"user_id\": {{userId_security}},\n\"scope\": [\n\"https://api.crealogix.com/dban\",\n\"read\",\n\"write\",\n\"https://api.crealogix.com/contracts/contract.advisor.readonly\",\n\"https://api.crealogix.com/contracts/contract.metadata.readonly\",\n\"https://api.crealogix.com/contracts/contract.person.readonly\",\n\"https://api.crealogix.com/payments/payment.initiate\",\n\"https://api.crealogix.com/payments/payment.read\",\n\"https://api.crealogix.com/payments/payment.write\",\n\"https://api.crealogix.com/assets/account.balance.readonly\",\n\"https://api.crealogix.com/assets/account.transaction.readonly\",\n\"https://api.crealogix.com/assets/account.permission.readonly\",\n\"https://api.crealogix.com/assets/account.metadata.readonly\",\n\"https://api.crealogix.com/assets/account.accountname.write\",\n\"https://api.crealogix.com/assets/account.accountimage.write\",\n\"https://api.crealogix.com/assets/account/read\",\n\"https://api.crealogix.com/assets/account.transaction/read\",\n\"https://api.crealogix.com/assets/account.name\",\n\"https://api.crealogix.com/assets/account.image\",\n\"https://api.crealogix.com/assets/cuac/read\",\n\"https://api.crealogix.com/assets/portfolio/read\",\n\"https://api.crealogix.com/messages/securemail.write\",\n\"https://api.crealogix.com/messages/securemail.read\",\n\"https://api.crealogix.com/messages/document.category.read\",\n\"https://api.crealogix.com/messages/document.category.write\",\n\"https://api.crealogix.com/messages/document.write\",\n\"https://api.crealogix.com/messages/document.read\",\n\"https://api.crealogix.com/brokerage/security/read\",\n\"https://api.crealogix.com/brokerage/tradingplace/read\",\n\"https://api.crealogix.com/brokerage/depository/read\",\n\"https://api.crealogix.com/brokerage/order/read\",\n\"https://api.crealogix.com/brokerage/order\",\n\"https://api.crealogix.com/brokerage/security.readonly\",\n\"https://api.crealogix.com/brokerage/tradingplace.readonly\",\n\"https://api.crealogix.com/brokerage/depository.readonly\",\n\"https://api.crealogix.com/brokerage/order.readonly\",\n\"https://api.crealogix.com/brokerage/order.write\",\n\"https://api.crealogix.com/deeplink/domains\",\n\"https://api.crealogix.com/deeplink/links\"\n],\n\"loginName\": \"{{userId_security}}\",\n\"exp\": 32479694642,\n\"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\n\"iat\": 1553855569\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{env_security_testToken}}",
							"host": [
								"{{env_security_testToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAuthTestTokenK8S Oldscope",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4567a888-dc68-434b-be15-74994e018ce7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "06ba61dd-2549-4985-be6d-c504e402fa0a",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.environment.set(\"access_token\", pm.response.text());",
									"});",
									"",
									"",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"tenant_id\": {{tenantId_security}},\n\"tenant_name\": \"CLX EBS\",\n\"user_name\": \"{{userId_security}}\",\n\"contractNo\": \"{{contractNo_security}}\",\n\"languageCode\": \"en\",\n\"bcNo\": \"{{bcNo_security}}\",\n\"authorities\": [\"DBAN_ADMIN\", \"DBAN_USER\"],\n\"client_id\": \"postman\",\n\"user_id\": {{userId_security}},\n\"scope\": [\n    \"https://api.crealogix.com/dban\",\n    \"read\",\n    \"https://api.crealogix.com/contracts/contract.advisor.readonly\",\n    \"https://api.crealogix.com/assets/account.balance.readonly\",\n    \"https://api.crealogix.com/contracts/contract.metadata.readonly\",\n    \"https://api.crealogix.com/contracts/contract.person.readonly\",\n    \"https://api.crealogix.com/payments/payment.initiate\",\n    \"https://api.crealogix.com/assets/account.transaction.readonly\",\n    \"https://api.crealogix.com/assets/account.permission.readonly\",\n    \"write\",\n    \"https://api.crealogix.com/assets/account.metadata.readonly\",\n    \"https://api.crealogix.com/referencedata/countries\",\n    \"https://api.crealogix.com/referencedata/currencies\",\n    \"https://api.crealogix.com/referencedata/organisation-units\"\n  ],\n\"loginName\": \"{{userId_security}}\",\n\"exp\": 32479694642,\n\"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\n\"iat\": 1553855569\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{env_security_testToken}}",
							"host": [
								"{{env_security_testToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAuthTestTokenK8S_insufficientToken",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8c7a937c-de2e-4afe-b352-1dbc1f496db8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "13f78413-bf14-45a9-97a5-fe032456adf5",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.environment.set(\"access_token\", pm.response.text());",
									"});",
									"",
									"",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"tenant_id\": {{tenantId_security}},\n\"tenant_name\": \"CLX EBS\",\n\"user_name\": \"{{userId_security}}\",\n\"contractNo\": \"{{contractNo_security}}\",\n\"languageCode\": \"en\",\n\"bcNo\": \"{{bcNo_security}}\",\n\"authorities\": [\"DBAN_ADMIN\", \"DBAN_USER\"],\n\"client_id\": \"postman\",\n\"user_id\": {{userId_security}},\n\"scope\": [\n\"https://api.crealogix.com/dban\",\n\"read\",\n\"write\",\n\"https://api.crealogix.com/contracts/contract.advisor.readonly\",\n\"https://api.crealogix.com/contracts/contract.metadata.readonly\",\n\"https://api.crealogix.com/contracts/contract.person.readonly\",\n\"https://api.crealogix.com/payments/payment.initiate\",\n\"https://api.crealogix.com/payments/payment.read\",\n\"https://api.crealogix.com/payments/payment.write\",\n\"https://api.crealogix.com/assets/account.balance.readonly\",\n\"https://api.crealogix.com/assets/account.transaction.readonly\",\n\"https://api.crealogix.com/assets/account.permission.readonly\",\n\"https://api.crealogix.com/assets/account.metadata.readonly\",\n\"https://api.crealogix.com/assets/account.accountname.write\",\n\"https://api.crealogix.com/assets/account.accountimage.write\",\n\"https://api.crealogix.com/assets/cuac.readonly\",\n\"https://api.crealogix.com/assets/portfolio.readonly\",\n\"https://api.crealogix.com/messages/securemail.write\",\n\"https://api.crealogix.com/messages/securemail.read\",\n\"https://api.crealogix.com/messages/document.category.read\",\n\"https://api.crealogix.com/messages/document.category.write\",\n\"https://api.crealogix.com/messages/document.write\",\n\"https://api.crealogix.com/messages/document.read\",\n\"https://api.crealogix.com/brokerage/security.readonly\",\n\"https://api.crealogix.com/brokerage/tradingplace.readonly\",\n\"https://api.crealogix.com/brokerage/depository.readonly\",\n\"https://api.crealogix.com/brokerage/order.readonly\",\n\"https://api.crealogix.com/brokerage/order.write\",\n\"https://api.crealogix.com/deeplink/domains\",\n\"https://api.crealogix.com/deeplink/links\"\n],\n\"loginName\": \"{{userId_security}}\",\n\"exp\": 32479694642,\n\"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\n\"iat\": 1553855569\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{env_security_testToken}}",
							"host": [
								"{{env_security_testToken}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "eaa7867e-888b-49dd-9dd0-589ad08cc5bb",
						"type": "text/javascript",
						"exec": [
							"///*determine test case ID from request name*/",
							"//var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
							"////console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
							"//",
							"///*add current test case ID to list of already executed tests*/",
							"//eval(globals.testsExecuted)(testRailTestCases);",
							"//pm.globals.set(\"testRailTestCases\",testRailTestCases);",
							"//",
							"////store test case ID of current request for linking with Test Rail",
							"//pm.globals.set(\"_tr_\" + request.name, testRailTestCases);",
							"//",
							"////call global function to generate access token",
							"//eval(globals.generateAccessToken)();"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "53455c9f-fafb-41b1-beb9-1c4913f2a823",
						"type": "text/javascript",
						"exec": [
							"//eval(globals.sessionNavigate)();"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tools",
			"item": [],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tests.old",
			"item": [
				{
					"name": "_Test session",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8e51f17b-5b60-4378-82d8-6eb6e682f4f4",
								"exec": [
									"//reset global variables for controling execution flow",
									"eval(globals.cleanup)();",
									"//clear list of executed TestRail tests",
									"pm.environment.set(\"testRailTestsInRun\", \"\");",
									"",
									"//specify list of tests to be executed in exact order",
									"//const testsScope = \"Full\"; [Full|Core|Full+TestRail]",
									"let testsScope = data.testsScope;",
									"//console.log(testsScope); ",
									"",
									"switch (testsScope) {",
									"    case \"Core\":",
									"        var testSession = [",
									"            \"_Generate access token K8S\",",
									"            \"Accounts_Search (C41736193)\",",
									"            \"Accounts_Search_BIC (C41939550)\",",
									"            \"Accounts_Search_contract iban desc (C38950549)\",",
									"            \"Accounts_Search_contract iban asc (C38950548)\",",
									"            \"Accounts_Search_Account_Number (C37972701)\",",
									"            \"Accounts_Search_Multiple_Names (C38950539)\",",
									"            \"Accounts_Search_AccountType_Current (C38950541)\",",
									"            \"Accounts_Search_AccountType_SAVINGS (C38950542)\",",
									"            \"Accounts_Search_Multiple_Account_Number (C38950540)\",",
									"            \"Accounts_Search_AccountType_Multiple (C41083339)\",",
									"            \"Accounts_Search_AccountType_Other (C41083337)\",",
									"            \"Accounts_Search_iban (C38950543)\",",
									"            \"Accounts_Search_multiple_iban (C38950544)\",",
									"            \"Accounts_Search_contractId (C38950547)\",",
									"            \"List of custody accounts (C41736189)\",",
									"            \"List of portfolios (C43024137)\",",
									"            \"Portfolio details (C43024139)\",",
									"            \"Portfolio performance details (C43181629)\",",
									"            \"Portfolio assets details (C43181622)\",",
									"            \"Maturity details (C43181624)\",",
									"            \"Check proper custody account (C41853576)\",",
									"            \"Check proper custody account searched by PortfolioId (C41853577)\",",
									"            \"Custody account details (C41853582)\",",
									"            \"Search_by_startdate (C37786354)\",",
									"            \"Order_by_amount_asc (C37972704)\",",
									"            \"Order_by_amount_desc (C38719010)\",",
									"            \"Order_by_multiple_criteria (C38763407)\",",
									"            \"Transaction details search by amountForm (C37905040)\",",
									"            \"Transaction details search by amountTo (C37905041)\",",
									"            \"Transaction details search by amountTo-amountFrom (C37905042)\",",
									"            \"Individual transaction (C33706455)\",",
									"            \"Checking pagination (C47473979)\",",
									"            \"Transaction_search overview (C38763410)\",",
									"            \"AccountId Transactions 400 (C38763416)\",",
									"            \"AccountId Transactions 401 (C38763419)\",",
									"            \"set new alias (C37905058)\",",
									"            \"update alias (C37905064)\",",
									"            \"delete alias (C37905066)\",",
									"            \"AccountId Permissions (C36212106)\",",
									"            \"AccountId Permissions 400 (C38778991)\",",
									"            \"AccountId Permissions 401 (C38920771)\",",
									"            \"INCOMING transaction flow(C37905043)\",",
									"            \"OUTGOING transaction flow(C37905044)\",",
									"            \"BOTH transaction flow (C37905045)\",",
									"            \"BOTH transactionType (C37905048)\",",
									"            \"BOOKED transactionType (C37905046)\",",
									"            \"UNBOOKED transactionType (C37905047)\",",
									"            \"AccountId Balance (C35075337)\",",
									"            \"AccountId Balance 400 (C38920909)\",",
									"            \"AccountId Balance 401 (C38920911)\",",
									"            \"Search by accountName (C37949168)\",",
									"            \"List of custody accounts (C41736189)\",",
									"            \"List of portfolios (C43024137)\",",
									"            \"Portfolio details (C43024139)\",",
									"            \"Portfolio performance details (C43181629)\",",
									"",
									"            \"Check proper custody account (C41853576)\",",
									"",
									"            \"Custody account details (C41853582)\"",
									"        ];",
									"        break;",
									"",
									"    case \"Bogdan\":",
									"        var testSession = [",
									"            \"List of custody accounts (C41736189)\",",
									"            \"Custody account position list (C41853583)\",",
									"            \"Custody account position details (C42065196)\",",
									"            \"Get transactions for cuacsId (C42065197)\",",
									"            \"Custody account details (C41853582)\",",
									"            \"Custody account transactions details (C43024136)\",",
									"            \"Account_Search (C41736193)\",",
									"            \"Account_Search_Multiple_criteria_iban_asc (C38950548)\",",
									"            \"Account_Search_Multiple_criteria_iban_desc (C38950549)\",",
									"            \"Account_Search_BIC (C41939550)\",",
									"            \"Account_Search_Account number (C37972701)\",",
									"            \"Account_Search_Multiple names (C38950539)\",",
									"            \"Account_Search_Multiple_Account_number (C38950540)\",",
									"            \"Account_Search_AccountType_Current (C38950541)\",",
									"            \"Account_Search_AccountType_SAVINGS (C38950542)\",",
									"            \"AccountId_Search_startDate&endDate (C379050538)\",",
									"            \"Account_Search_AccountType_Multiple (C41083339)\",",
									"            \"Account_Search_AccountType_Other  (C41083337)\",",
									"            \"Account_Search_iban (C38950543)\",",
									"            \"Account_Search_multiple_iban (C38950544)\",",
									"            \"Account_Search_ContractId (C38950547)\",",
									"            \"Account_Search_account_Name (C37949168)\",",
									"            \"Account_Search_id (C38950545)\"",
									"        ];",
									"        break;",
									"    case \"ToDo\":",
									"        var testSession = [",
									"            \"Portfolio assets details (C43181622)\",",
									"            \"Maturity details (C43181624)\",",
									"            \"Check proper custody account searched by PortfolioId (C41853577)\"",
									"        ];",
									"        break;",
									"    case \"TestRailClean\":",
									"        var testSession = [",
									"            \"_Test session close\"",
									"        ];",
									"        break;",
									"",
									"    default:",
									"        throw new Error(\"No tests selected for execution!\")",
									"}",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(testSession, \"testSession\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bb165992-762c-4cb6-8f48-5dc2f6af3805",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "_Generate access token K8S",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "91484fc6-966a-4a56-9e84-545d32d6b7e9",
								"exec": [
									"var requestsToRun = [",
									"        \"getAuthTestTokenK8S\"",
									"    ]; ",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fd4e7afb-1c8e-40d3-bf72-038a0cbbc0d7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search (C41736193)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "77093c4c-2f8d-4139-bad6-74bed3fddacc",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search\"",
									"    ]; ",
									"    pm.environment.set(\"request_body\", ('{}'));",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5f4c5e09-50e0-4be6-afea-daf44a4eb686",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_BIC (C41939550)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "159b2afd-bcf7-4c17-8f6b-f7831c966d3e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search\",",
									"        \"Account_Search_BIC\"",
									"    ]; ",
									"    pm.environment.set(\"request_body\", ('{}'));",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Account_Search_BIC\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "552323ae-3742-4515-ab1e-43120f424b04",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_contract iban desc (C38950549)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "016c7bbc-8d34-4576-afd3-07abb770c7d7",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_Multiple_criteria_iban_desc\"",
									"    ]; ",
									"",
									"    pm.globals.set(\"_tr_Account_Search_Multiple_criteria_iban_desc\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8c1de412-8c45-49c7-a513-b2498300422f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_contract iban asc (C38950548)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7b991eac-1210-4c10-a7e9-116bee754259",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_Multiple_criteria_iban_asc\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_Multiple_criteria_iban_asc\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "39b1a30a-1bd3-4be8-9776-3e1f31b29f4c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_Account_Number (C37972701)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a3768c58-bd97-44e9-9d5e-550b39471f3b",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"Account_Search_Account number\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Account_Search_Account number\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c818d9c9-4d70-4289-b1a3-a17463a1e334",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_Multiple_Names (C38950539)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5b4554bd-67c7-4bc5-8ce3-95e8641f6186",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_Multiple names\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_Multiple names\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5b2acc4c-f095-47bd-b660-6c2f7cfdca08",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_AccountType_Current (C38950541)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ea43d465-0156-46b0-a0a7-7d4e0254d996",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_AccountType_Current\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_AccountType_Current\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "378faf7a-35d7-4151-840f-85940b54be2f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_AccountType_SAVINGS (C38950542)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b0689a9e-7ded-4b53-b32c-401fcf085f53",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_AccountType_SAVINGS\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_AccountType_SAVINGS\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a4f9cd3f-05b4-4772-ac5b-b55339e8dc9b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_Multiple_Account_Number (C38950540)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "42be2aee-279a-441e-8d04-d6ee6b07bdbf",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"Account_Search_Multiple_Account_number\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Account_Search_Multiple_Account_number\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "83bc44ae-6a75-4354-96e1-fc5b7813d3e2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_EndDate (C37786407)?????",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c0489398-6e88-40f2-8531-5ec6a6b148d6",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"Account_Search_Multiple_Account_number\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Account_Search_Multiple_Account_number\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ab884a60-71d3-4ab5-8e3e-15e45558ca26",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_startDate&EndDate (C379050538)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f67ff295-d6a2-490f-9830-31e65d9ae80c",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_Search_startDate&endDate\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_AccountId_Search_startDate&endDate\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5eaec5c7-c8d3-4684-962c-ded16701213e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_AccountType_Multiple (C41083339)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f253359f-cd03-4f4e-be5e-ffa69a5c220c",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_AccountType_Multiple\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_AccountType_Multiple\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c0ad41ef-499f-42c9-942d-7a68281fd34c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_AccountType_Other (C41083337)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d6cbd03e-a0c4-483d-9bda-bd9976adc72f",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_AccountType_Current\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_AccountType_Current\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dbd46f6f-1f2a-47df-aa78-bf3bf4ab9850",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_iban (C38950543)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0d7d34fe-d38f-486c-a776-3bc74d0bde5c",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"Account_Search_iban\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Account_Search_iban\",testRailTestCases);",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9b870fe1-5ba0-4000-9e35-31e1e5d13805",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_multiple_iban (C38950544)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3f96e963-e1be-4023-98c1-053241df7add",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_multiple_iban\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_multiple_iban\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8f061288-48ee-47f5-9e76-f12704d5da16",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_contractId (C38950547)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8645b292-89ba-4770-b2ea-00b12df8b9fc",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"Account_Search_ContractId\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Account_Search_ContractId\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3f38e7c2-4a65-46c3-b0a0-0daa7f78e5cc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "transactions search pagination (C47473070)/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ee41a174-ce26-4a95-b9ab-90ecfd24a0f4",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_Transaction_Search_pagination\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_AccountId_Search_startDate&endDate\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "78cb39dd-d607-4492-b90f-db11a501d450",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search_by_startdate (C37786354)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2afb8427-7f04-4939-a569-42fcfbc73536",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search_startDate\"",
									"    ]; ",
									"",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_startDate\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "50d26fbc-5035-4950-97b7-70709c7a131b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order_by_amount_asc (C37972704)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c0168e93-1bbd-4b63-b94b-ccd408cbd391",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "77c3e982-27eb-4f55-bf21-16cf23097750",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order_by_amount_desc (C38719010)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9d507f5b-b1eb-4b62-9314-fa60e25d4a40",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search_desc\"",
									"    ]; ",
									"",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_desc\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c75f42d7-4696-43b9-be9c-97c8a237ff51",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "List of custody accounts (C41736189)///",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "85803894-1b76-4d3e-8d1b-9bf7c4974e75",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get custody accounts\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get custody accounts\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "af9bec40-8a71-4631-ba9d-51f99732bdc7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "List of portfolios (C43024137)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "545db5f6-3510-4e0c-9a83-61da84da6209",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_portfolios_list\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_portfolios_list\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7264b378-669e-4c9d-acfe-fbac5997a592",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Portfolio details (C43024139)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9879c98e-8a6e-46bd-a196-4188204b0593",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_portfolios_details_list\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_portfolios_details_list\",testRailTestCases);",
									"",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "66e54265-1750-49ed-9f09-e8ce0edcfe3a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Portfolio performance details (C43181629)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0f7e8921-c5b0-4b8c-a541-a4dd25b74018",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_portfolios_list\",",
									"        \"Get_performance_details\"",
									"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_portfolios_list\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Get_performance_details\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8983172b-6bfd-4fcc-9b33-b576f5812e2a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Portfolio assets details (C43181622)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "598b7752-a589-423d-861c-4aa845372182",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_portfolios_list\",",
									"        \"Get_assets_list\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_portfolios_list\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Get_assets_list\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d90ca136-9858-4c05-b4b4-1c2c6247fa9c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Maturity details (C43181624)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "92f5ff06-0e75-489f-a22e-02ef1e085aa6",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_maturity_list\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_maturity_list\",testRailTestCases);",
									" ",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8378a222-e54a-4faf-828b-cc6047b14758",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check proper custody account (C41853576)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3b1ac58e-9935-4990-a93c-5baca937bb53",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get custody accounts\",",
									"        \"Get_customer_info_by_his_ID\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get custody accounts\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Get_customer_info_by_his_ID\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c1257272-aadf-4150-871d-dcc37d165ece",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check proper custody account searched by PortfolioId (C41853577)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1cc6df61-8bfe-44af-a798-3ec54dfe08bc",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get custody accounts\",",
									"        \"Get_customer_info_by_his_ID\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get custody accounts\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Get_customer_info_by_his_ID\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9117a25d-3a75-45a2-93d0-8b5d06657db7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Custody account details (C41853582)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5aa040b3-0f9d-465c-9fb6-e73742701cf2",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_customer_info_by_his_ID\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_customer_info_by_his_ID\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "654ae714-90f2-4215-a6be-76c4a9aec121",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Individual transaction (C33706455)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "784cd92e-2511-4ad5-be61-c7ed97a6e538",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search\",",
									"        \"get_single_transaction\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_get_single_transaction\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "eeaa1c21-689a-45b8-8c1d-f49ac9d11e0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Checking pagination (C47473979)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "13bd5a4a-b4c9-40fa-a670-7573954755bf",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search_pagination\",",
									"        \"AccountId_Transaction_Search_size\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_pagination\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_size\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "458b9eb4-b4fb-4ce6-9639-988b71c14d3d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Transaction_search overview (C38763410)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ba0b22ed-b18b-475b-a260-0c2ec0e0b113",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search\",",
									"        \"get_single_transaction\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_get_single_transaction\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d22a3918-8cec-4669-aae5-dee56ca75a03",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Transactions 400 (C38763416)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "277c2f88-f3a1-4943-a0bb-e1c72e329b5b",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_Transaction_Search_validation 400\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_validation 400\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b8821d04-efd0-4e46-89d9-c650c614cad1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Transactions 401 (C38763419)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "303bc623-069e-4a8c-a69d-effc2142624d",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestTokenK8S_insuficientToken\",",
									"        \"AccountId_transaction 401 validation\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_getAuthTestTokenK8S_insuficientToken\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_transaction 401 validation\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "470d2ad4-72e4-4482-acd4-8e647be2fdf9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "set new alias (C37905058)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a790a338-9ef7-4161-bb96-0f76e05cfaf0",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"set_alias\",",
									"        \"Account_Search_alias\",",
									"        \"Account_Search_alias_Postconditions\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_set_alias\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Account_Search_alias\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Account_Search_alias_Postconditions\",testRailTestCases);",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5d3c19f7-a0ba-4b2f-83d6-f542c7017240",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "update alias (C37905064)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "854929e8-ea41-4255-b849-c493f9d31210",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"set_alias\",",
									"        \"update alias\",",
									"        \"Account_Search_updated_alias\",",
									"        \"Account_Search_alias_Postconditions\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_set_alias\",testRailTestCases);",
									"    pm.globals.set(\"_tr_update alias\",testRailTestCases);",
									"",
									"    pm.globals.set(\"_tr_Account_Search_updated_alias\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Account_Search_alias_Postconditions\",testRailTestCases);",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "671bae3f-e9ac-4953-999d-30ec54571a55",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete alias (C37905066)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c9c00dd5-13e9-4525-b62a-12eff16b68d3",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"set_alias\",",
									"        \"delete alias\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_set_alias\",testRailTestCases);",
									"    pm.globals.set(\"_tr_delete alias\",testRailTestCases);",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e3bda6bc-6972-4eff-888d-524d7c5d363d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Permissions (C36212106)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "de04e6d3-48c2-40e1-bf87-803cd928f7ea",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_permissions\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_permissions\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "15d5b9c6-7198-4bae-9368-9108a6eaf46d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Permissions 400 (C38778991)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "780f8c59-2906-48c6-b131-0225aa09e1dd",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_permissions 400 validation\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_permissions 400 validation\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "eb34fd10-ec4f-440c-8c9f-47ebaa81dd5b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Permissions 401 (C38920771)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "53611520-a9d1-449e-a682-bba34d92476c",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestTokenK8S_insuficientToken\",",
									"        \"AccountId_permissions 401 validation\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_getAuthTestTokenK8S_insuficientToken\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_permissions 401 validation\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "04f92b86-b4e5-4c51-ae42-9e8d7fb4af57",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "INCOMING transaction flow(C37905043)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c4678106-bc0c-4cba-8a4f-b7eb9c9af6ac",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"Incoming transactions\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Incoming transactions\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6420c5c3-ff0c-404e-93e7-e1da16552fce",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "OUTGOING transaction flow(C37905044)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f2a81bfc-d694-48cc-87a3-54c2f5a5f5fa",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"OUTGOING transactions\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_OUTGOING transactions\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4ffe0177-8a7b-48fd-9bfa-627930a617cc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "BOTH transaction flow (C37905045)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "be4a66c6-9ccb-40e8-9989-08d793fae6f3",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"BOTH transactions\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_BOTH transactions\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "64e08fd3-beda-427c-b8ee-cad5ec0d986a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "BOTH transactionType (C37905048)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ec216100-52a9-4c93-ae39-b060fdd545b6",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"BOTH transactionsType\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_BOTH transactionsType\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7d257d6c-75b4-412d-b785-80cb37a21e29",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "BOOKED transactionType (C37905046)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e397a15-0de9-4ea3-94ac-62d3839798c1",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"BOOKED transactions\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_BOOKED transactions\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2d93313d-8354-4e51-af69-79bca6f05dba",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "UNBOOKED transactionType (C37905047)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0d9e411e-901f-4a6c-98f6-572309d6d556",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"UNBOOKED transactions\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_UNBOOKED transactions\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fd079c13-3ae0-4dad-9bb2-58cde321f991",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Balance (C35075337)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f34a8ef0-716a-48ac-977c-8fffc87d6216",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_balance\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_balance\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b7e9a859-bacd-4c96-b600-f731972648a4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Balance 400 (C38920909)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e41080e3-cbc4-4ea1-bcb3-32c57b289e41",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_balance 400 validation\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_balance 400 validation\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "be8eaa3b-2272-4242-8381-6edaaeb38be2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Balance 401 (C38920911)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2eb86017-dedc-43e9-a57b-2bbf55182a96",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestTokenK8S_insuficientToken\",",
									"        \"AccountId_balance 401 validation\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_getAuthTestTokenK8S_insuficientToken\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_balance 401 validation\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6cc505ea-1357-44b3-89fc-b0a6372a0abc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by accountName (C37949168)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "35b3a330-f3c5-4266-8c5e-23a9ba28b825",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_balance\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_balance\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4c1a8966-5221-444d-8e48-8d77f66598d0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Transaction details search by reference text (C37905050)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d03c810d-4c00-44a8-a752-8040ebe55898",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search_Reference_Text\"",
									"    ]; ",
									"",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_Reference_Text\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "81ea118d-e879-4b42-9111-aac3f6197fb5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Custody account transactions details (C43024136)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "64f46ad7-6c7b-44ba-ba42-314436f173fe",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get custody account transactions details\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get custody account transactions details\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "22c2bce3-d1b5-4ee2-a730-cce994772769",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Custody account position list (C41853583)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "81d07430-6306-49aa-80e1-8468429dc745",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get positons for cuacsId\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get positons for cuacsId\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e3797fcf-0a4b-4c56-9cae-5bcda681315b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Custody account position details (C42065196)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b3bb1d27-4507-4ec8-98d4-807f6d99aadb",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get custody account positions\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get custody account positions\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7584465e-b68c-45b6-8416-e7a920e2a935",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Display listing by listing ID (C43995816)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "05f0eb2e-f985-4e82-965e-c49f5298336e",
								"exec": [
									"//testRailTestCases = \"C43995816\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get listings\",",
									"        \"Get listing by listing ID\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get listings\",\"[precondition]\");",
									"    pm.globals.set(\"_tr_Get listing by listing ID\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Account transaction sorted by amount (C37972704)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e72873e-ed4b-49d7-8a17-8b8c30efc643",
								"exec": [
									"//testRailTestCases = \"C43995816\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    \"Account_Searchs\",",
									"    \"AccountId_Transaction_Search\"",
									"];",
									"pm.globals.set(\"_tr_Account_Search\");",
									"pm.globals.set(\"_tr_AccountId_Transaction_Search\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\", testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "List trading places (C43995818)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "16d2fcd4-2db1-4dc4-876c-acb912cb4812",
								"exec": [
									"//var testRailTestCases = \"C43995818\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get trading places\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get trading places\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d08e266a-3e1d-4807-bed7-ef9c3c104455",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Display trading place by tradingPlaceId (C43995821)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7aacb433-efb0-4387-9aa8-6bc8b2d43299",
								"exec": [
									"//testRailTestCases = \"C43995821\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get trading places\",",
									"        \"Get trading place by tradingPlaceId\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get trading places\",\"[precondition]\");",
									"    pm.globals.set(\"_tr_Get trading place by tradingPlaceId\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5e9ed6ac-8e08-4191-b49c-2749a5527cb6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "_Test session close",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "99a37387-44be-46cc-980a-5b0f7fadc685",
								"exec": [
									"var requestsToRun = ",
									"    [",
									"        \"Clean TestRail Run\"",
									"    ]; ",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f2179a7d-0ea9-42d3-8a2c-bb88a15a3d91",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e38b8dce-4e7f-4287-b7ae-b7712b2cdf68",
						"type": "text/javascript",
						"exec": [
							"/*determine test case ID from request name*/",
							"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
							"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
							"",
							"/*add current test case ID to list of already executed tests*/",
							"eval(globals.testsExecuted)(testRailTestCases);",
							"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
							"",
							"//store test case ID of current request for linking with Test Rail",
							"pm.globals.set(\"_tr_\" + request.name, testRailTestCases);",
							"",
							"//call global function to generate access token",
							"eval(globals.generateAccessToken)();"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4b32f04b-3245-4a91-925b-ae65c15c6fde",
						"type": "text/javascript",
						"exec": [
							"eval(globals.sessionNavigate)();"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "7d62c899-66bb-4c5f-af8c-cabb07270e21",
				"type": "text/javascript",
				"exec": [
					"//************************************************************************************************",
					"// variable initialization************************************************************************",
					"//************************************************************************************************",
					"var test = pm.environment.get(\"testRailTestsInRun\");",
					"if (!test) {",
					"  pm.environment.set(\"testRailTestsInRun\", \"\");",
					"}",
					"",
					"//************************************************************************************************",
					"// connect to TestRail ***************************************************************************",
					"//************************************************************************************************",
					"pm.globals.set(\"TESTRAIL_DOMAIN\", \"testrail.ebs.crealogix.net\");",
					"pm.globals.set(\"TESTRAIL_USERNAME\", \"milan.karadeglic@crealogix.com\");",
					"pm.globals.set(\"TESTRAIL_APIKEY\", \"Q4MlDw1e70Kxh1g1YPq9-Dg0abDWer.pSWcVWcxO4\");",
					"pm.globals.set(\"TESTRAIL_PROJECTID\", 8);",
					"pm.globals.set(\"TESTRAIL_TITLE\", \"Postman API Tests\");",
					"",
					"",
					"",
					"//************************************************************************************************",
					"//global function to determine next day/next working day *****************************************",
					"//************************************************************************************************",
					"var moment = require('moment');",
					"let nextDay = moment().add(\"days\", 1).format(\"YYYY-MM-DD\"); //next day in specified format",
					"switch (moment().add(\"days\", 1).format(\"dddd\")) {",
					"  case \"Sunday\":",
					"    var nextWorkingDay = moment().add(\"days\", 2).format(\"YYYY-MM-DD\");",
					"    break;",
					"  case \"Saturday\":",
					"    var nextWorkingDay = moment().add(\"days\", 3).format(\"YYYY-MM-DD\");",
					"    break;",
					"  default:",
					"    var nextWorkingDay = moment().add(\"days\", 1).format(\"YYYY-MM-DD\");",
					"}",
					"pm.globals.set('PrS:nextDay', JSON.stringify(nextDay));",
					"pm.globals.set('PrS:nextWorkingDay', JSON.stringify(nextWorkingDay));",
					"",
					"",
					"/* function for making assets search*/",
					"postman.setGlobalVariable(\"assetsSearchFunction\", (NextPrecondition) => {",
					"  pm.sendRequest({",
					"    url: `${pm.environment.get(\"env_assets\")}/assets/accounts/${pm.environment.get(\"tenantId_assets\")}/v4/accounts/search?size=30`,",
					"    method: \"POST\",",
					"    header: {",
					"      'Content-Type': 'application/json',",
					"      'Accept': 'application/json, application/hal+json',",
					"      'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"    },",
					"    body: {",
					"      mode: 'raw',",
					"      raw: JSON.stringify({",
					"",
					"",
					"      })",
					"    }",
					"",
					"  }, function (err, res) {",
					"    if (err) {",
					"      console.log(err ? err : res.json());",
					"    } else {",
					"      pm.environment.set(\"_tmp_accountId\", res.json().accountList[res.json().page.totalElements - 1].id);",
					"      console.log(\"New account ID: \" + pm.environment.get(\"_tmp_accountId\"));",
					"",
					"      pm.environment.set(\"_tmp_accountId2\", res.json().accountList[1].id);",
					"      console.log(\"New account ID2: \" + pm.environment.get(\"_tmp_accountId2\"));",
					"",
					"      pm.environment.set(\"_tmp_accountIdAlias\", res.json().accountList[2].id);",
					"      console.log(\"New account _tmp_accountIdAlias: \" + pm.environment.get(\"_tmp_accountIdAlias\"));",
					"",
					"      pm.environment.set(\"_tmp_accountNumber1\", res.json().accountList[0].accountNumber);",
					"      console.log(\"New _tmp_accountNumber1: \" + pm.environment.get(\"_tmp_accountNumber1\"));",
					"",
					"      pm.environment.set(\"_tmp_accountNumber2\", res.json().accountList[1].accountNumber);",
					"      console.log(\"New _tmp_accountNumber2: \" + pm.environment.get(\"_tmp_accountNumber2\"));",
					"",
					"      pm.environment.set(\"_tmp_iban1\", res.json().accountList[0].iban);",
					"      console.log(\"New _tmp_iban1: \" + pm.environment.get(\"_tmp_iban1\"));",
					"",
					"      pm.environment.set(\"_tmp_iban2\", res.json().accountList[1].iban);",
					"      console.log(\"New _tmp_iban2: \" + pm.environment.get(\"_tmp_iban2\"));",
					"",
					"      pm.environment.set(\"_tmp_id1\", res.json().accountList[0].id);",
					"      console.log(\"New _tmp_id1: \" + pm.environment.get(\"_tmp_id1\"));",
					"",
					"      pm.environment.set(\"_tmp_id2\", res.json().accountList[1].id);",
					"      console.log(\"New _tmp_id2: \" + pm.environment.get(\"_tmp_id2\"));",
					"",
					"      pm.environment.set(\"_tmp_contractId\", res.json().accountList[0].permissions[0].contractId);",
					"      console.log(\"New _tmp_contractId: \" + pm.environment.get(\"_tmp_contractId\"));",
					"",
					"      switch (NextPrecondition) {",
					"        case \"assetsTransactionSearchFunction\":",
					"          eval(globals.assetsTransactionSearchFunction)();",
					"          break;",
					"        default:",
					"      }",
					"    }",
					"  });",
					"});",
					"",
					"/* function for making cuacs request*/",
					"postman.setGlobalVariable(\"cuacsRequest\", () => {",
					"  pm.sendRequest({",
					"    url: `${pm.environment.get(\"env_assets\")}/assets/cuacs/${pm.environment.get(\"tenantId_assets\")}/v1/cuacs`,",
					"    method: \"GET\",",
					"    header: {",
					"      'Content-Type': 'application/json',",
					"      'Accept': 'application/json, application/hal+json',",
					"      'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"    },",
					"    body: {",
					"      mode: 'raw',",
					"      raw: JSON.stringify({",
					"",
					"",
					"      })",
					"    }",
					"",
					"  }, function (err, res) {",
					"    if (err) {",
					"      console.log(err ? err : res.json()._embedded);",
					"",
					"    } else {",
					"      pm.environment.set(\"_tmp_cuacsId\", res.json.cuacs[0].id);",
					"      console.log(\"New custody account ID: \" + pm.environment.get(\"_tmp_cuacsId\"));",
					"",
					"",
					"",
					"    }",
					"  });",
					"});",
					"",
					"/* function for making portfolio request*/",
					"postman.setGlobalVariable(\"portfolioRequest\", () => {",
					"  pm.sendRequest({",
					"    url: `${pm.environment.get(\"env_assets\")}/assets/portfolios/${pm.environment.get(\"tenantId_assets\")}/v1/portfolios`,",
					"    method: \"GET\",",
					"    header: {",
					"      'Content-Type': 'application/json',",
					"      'Accept': 'application/json, application/hal+json',",
					"      'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"    },",
					"    body: {",
					"      mode: 'raw',",
					"      raw: JSON.stringify({",
					"",
					"",
					"      })",
					"    }",
					"",
					"  }, function (err, res) {",
					"    if (err) {",
					"      //console.log(\"First:\");",
					"      //console.log(err);",
					"      //console.log(\"Second:\");",
					"      console.log(err ? err : res.json());",
					"    } else {",
					"      pm.environment.set(\"_tmp_portfolioId\", res.json()._embedded.portfolios[1].id);",
					"      console.log(\"New portfolio ID: \" + pm.environment.get(\"_tmp_portfolioId\"));",
					"      pm.environment.set(\"_tmp_customerId\", res.json()._embedded.portfolios[1].customerId);",
					"      console.log(\"New customer ID: \" + pm.environment.get(\"_tmp_customerId\"));",
					"    }",
					"  });",
					"});",
					"",
					"/* function for making assets transaction search*/",
					"postman.setGlobalVariable(\"assetsTransactionSearchFunction\", () => {",
					"  pm.sendRequest({",
					"    url: `${pm.environment.get(\"env_assets\")}/assets/accounts/${pm.environment.get(\"tenantId_assets\")}/v4/accounts/${pm.environment.get(\"_tmp_accountId\")}/transactions/search`,",
					"    method: \"POST\",",
					"    header: {",
					"      'Content-Type': 'application/json',",
					"      'Accept': 'application/json, application/hal+json',",
					"      'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"    },",
					"    body: {",
					"      mode: 'raw',",
					"      raw: JSON.stringify({",
					"        orderBy: [",
					"          {",
					"            field: \"AMOUNT\",",
					"            sortOrder: \"ASC\"",
					"          }]",
					"        ,",
					"        criteria: {",
					"          startDate: \"2019-01-01\",",
					"          endDate: \"2020-06-01\"",
					"        }",
					"      })",
					"    }",
					"  }, function (err, res) {",
					"    if (err) {",
					"      console.log(err ? err : res.json());",
					"    } else {",
					"      pm.environment.set(\"_tmp_transactionsId\", res.json.transactionGroups[0].transactions[0].id)",
					"      console.log(\"New transaction ID is set: \" + pm.environment.get(\"_tmp_transactionsId\"));",
					"    }",
					"  });",
					"});",
					"postman.setGlobalVariable(\"commonTests\", () => {",
					"  pm.test(\"Response must be valid with/with out a body and with proper status code\", function () {",
					"    if ([\"GET\", \"POST\", \"PUT\"].indexOf(request.method) > -1) {",
					"      pm.response.to.not.be.error;",
					"      pm.response.to.be.withBody;",
					"      pm.response.to.be.json;",
					"      pm.response.to.have.jsonBody();",
					"      pm.response.to.not.have.jsonBody('error');",
					"      pm.response.to.have.header('Content-Type', 'application/hal+json;charset=UTF-8');",
					"    } else {",
					"      pm.response.to.not.be.withBody;",
					"    }",
					"    switch (request.method) {",
					"      case \"POST\":",
					"        pm.response.to.have.status(201);",
					"        break;",
					"      case \"PUT\":",
					"        pm.response.to.have.status(200);",
					"        break;",
					"      case \"GET\":",
					"        pm.response.to.have.status(200);",
					"        break;",
					"      case \"DELETE\":",
					"        pm.response.to.have.status(204);",
					"        break;",
					"    }",
					"  });",
					"  //pm.test(\"Response time is below 1000ms\", function () {",
					"  //    pm.expect(pm.response.responseTime).to.be.below(1000);",
					"  //});",
					"});",
					"",
					"postman.setGlobalVariable(\"assertValidCreditorAgent\", () => {",
					"  pm.expect(address).to.be.an('object').with.keys('name1', 'name2', 'street', 'city', 'country');",
					"  pm.expect(address.name1).to.be.a('string').and.not.empty;",
					"  pm.expect(address.name2).to.be.a('string').and.not.empty;",
					"  pm.expect(address.street).to.be.a('string').and.not.empty;",
					"  pm.expect(address.city).to.be.a('string').and.not.empty;",
					"  pm.expect(address.country).to.be.a('string').with.lengthOf(2).and.match(/[A-Z]+/);",
					"});",
					"",
					"",
					"",
					"postman.setGlobalVariable(\"sessionInit\", (testSession, sessionName) => {",
					"  //session init section",
					"  console.log(request.name + \", initialization: \" + testSession + \", global var: \" + sessionName);",
					"  console.log(request.name + \", executing: \" + testSession[0]);",
					"",
					"  // Select first test from session to be executed",
					"  postman.setNextRequest(testSession[0]);",
					"  testSession.shift();",
					"  if (testSession.length === 0) {",
					"    console.log(request.name + \", test session is empty, unset \" + sessionName);",
					"    pm.globals.unset(sessionName);",
					"    console.log(request.name + \", terminate tests execution list\");",
					"  } else {",
					"    pm.globals.set(sessionName, testSession);",
					"    console.log(request.name + \" for \" + sessionName + \", updated list of tests to be executed: \" + testSession);",
					"  }",
					"});",
					"",
					"postman.setGlobalVariable(\"sessionNavigate\", () => {",
					"  console.log(request.name + \", entering ...\");",
					"  if (pm.globals.get(\"requestsToRun\") === undefined) {",
					"    console.log(request.name + \", requestsToRun is undefined\");",
					"    pm.globals.set(\"testRailTestCases\", \"\");",
					"    console.log(request.name + \", reset global var: testRailTestCases\");",
					"    if (pm.globals.get(\"testSession\") === undefined) {",
					"      console.log(request.name + \", testSession is undefined\");",
					"      //here >> export list of tests executed",
					"      var tests = pm.environment.get(\"testRailTestsInRun\");",
					"      tests = tests.replace(/C/g, \"\");",
					"      tests = tests.replace(/ /g, \", \");",
					"      tests = tests.replace(/,,/g, \",\");",
					"      console.log(\"TestRail tests executed executed in this run: \" + tests);",
					"      console.log(\"The end\");",
					"      postman.setNextRequest(null);",
					"    } else {",
					"      var testSession = pm.globals.get(\"testSession\");",
					"      console.log(request.name + \", checking what to run: \" + testSession[0]);",
					"      postman.setNextRequest(testSession[0]); // Run: GET SWIFT payment",
					"      testSession.shift();",
					"      if (testSession.length === 0) {",
					"        pm.globals.unset(\"testSession\");",
					"        console.log(request.name + \", terminate execution list\");",
					"      } else {",
					"        pm.globals.set(\"testSession\", testSession);",
					"        console.log(request.name + \", updated list of tests to be executed: \" + testSession);",
					"      }",
					"    }",
					"  } else {",
					"    var requestsToRun = pm.globals.get(\"requestsToRun\");",
					"    console.log(request.name + \", checking what to run: \" + requestsToRun[0]);",
					"    postman.setNextRequest(requestsToRun[0]);",
					"    requestsToRun.shift();",
					"    if (requestsToRun.length === 0) {",
					"      pm.globals.unset(\"requestsToRun\");",
					"      console.log(request.name + \", terminate requests execution list\");",
					"    } else {",
					"      pm.globals.set(\"requestsToRun\", requestsToRun);",
					"      console.log(request.name + \", updated list of requests to be executed: \" + requestsToRun);",
					"    }",
					"  }",
					"});",
					"",
					"postman.setGlobalVariable(\"cleanup\", () => {",
					"  const clean = [\"requestsToRun\", \"testSession\"];",
					"  for (let i = 0; i < clean.length; ++i) {",
					"    pm.globals.unset(clean[i]);",
					"  }",
					"});",
					"",
					"postman.setGlobalVariable(\"testsExecuted\", (listOfExecutedTests) => {",
					"  let tests = pm.environment.get(\"testRailTestsInRun\");",
					"  //console.log(\"TestRail tests stored in 'testRailTestsInRun': \" + tests);",
					"  if (tests.length > 0) {",
					"    tests = tests + \" \"",
					"  }",
					"  tests = tests + listOfExecutedTests;",
					"  //console.log(\"TestRail tests to be stored to 'testRailTestsInRun': \" + tests);",
					"  pm.environment.set(\"testRailTestsInRun\", tests);",
					"  //console.log(\"TestRail tests executed so far: \" + tests);",
					"});",
					"",
					"postman.setGlobalVariable(\"extractTestCaseIDFromRequestName\", () => {",
					"  let n = request.name.lastIndexOf(\"(\");",
					"  return request.name.substr(n + 1, request.name.length - n - 2);",
					"});",
					"",
					"postman.setGlobalVariable(\"schemaValidator\", (schema, jsonData) => {",
					"  //old, deprecated schema validationimplementation",
					"  //pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;",
					"",
					"  //new schema validation implementation",
					"",
					"  var schemaValidationPassed = true;",
					"  var serviceSchema = pm.environment.get(schema);",
					"  //var jsonData = JSON.parse(pm.responseBody);",
					"",
					"  var validationResult = tv4.validateMultiple(jsonData, serviceSchema, true, true);",
					"  for (var i = 0; i < validationResult.errors.length; i++) {",
					"    console.log(\"path :\" + validationResult.errors[i].dataPath + \" message :\" + validationResult.errors[i].message);",
					"    //Skipping all \"Invalid type\" errors as they are expected with current service implementations",
					"    schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);",
					"    //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);",
					"  }",
					"  return schemaValidationPassed;",
					"});",
					"",
					"postman.setGlobalVariable(\"isTest\", () => {",
					"  let reqPurpose = pm.globals.get(\"_tr_\" + request.name);",
					"  //console.log(request.name + \" has purpose: \" + reqPurpose);",
					"  if ([\"[cleanUp]\", \"[preCondition]\", \"[postCondition]\"].indexOf(reqPurpose) > -1) {",
					"    //console.log(\"Conclusion: NOT a test\");",
					"    return false;",
					"  } else {",
					"    //console.log(\"Conclusion: IS a test\");",
					"    return true;",
					"  }",
					"});",
					"",
					"postman.setGlobalVariable(\"getQueryParams\", (uri) => {",
					"  var vars = [];",
					"",
					"  // Get the start index of the query string",
					"  var qsi = uri.indexOf('?');",
					"  if (qsi == -1)",
					"    return vars;",
					"",
					"  // Get the query string",
					"  var qs = uri.slice(qsi + 1);",
					"",
					"  // Check if there is a subsection reference",
					"  sri = qs.indexOf('#');",
					"  if (sri >= 0)",
					"    qs = qs.slice(0, sri);",
					"",
					"  // Build the associative array",
					"  var hashes = qs.split('&');",
					"  for (var i = 0; i < hashes.length; i++) {",
					"    var sep = hashes[i].indexOf('=');",
					"    if (sep <= 0)",
					"      continue;",
					"    var key = decodeURIComponent(hashes[i].slice(0, sep));",
					"    var val = decodeURIComponent(hashes[i].slice(sep + 1));",
					"    vars[key] = val;",
					"  }",
					"  const jar = pm.cookies.jar();",
					"",
					"  jar.clear(pm.request.url, function (error) {",
					"    // error - <Error>",
					"  });",
					"",
					"  return vars;",
					"",
					"});",
					"",
					"postman.setGlobalVariable(\"randomizeVariables\", () => {",
					"  let newmanRun = pm.globals.get(\"newmanRun\");",
					"  if (newmanRun != 1) {",
					"    console.log(\"Randomizing variables ...\");",
					"    pm.environment.set(\"endToEndId\", JSON.stringify(pm.variables.replaceIn(\"{{$randomLoremSlug}}\")));",
					"    pm.environment.set(\"unstructured\", JSON.stringify(pm.variables.replaceIn(\"{{$guid}}\")));",
					"    pm.environment.set(\"instructionIdentification\", JSON.stringify(pm.variables.replaceIn(\"{{$randomBitcoin}}\")));",
					"    pm.environment.set(\"name\", JSON.stringify(pm.variables.replaceIn(\"{{$randomFullName}}\")));",
					"    pm.environment.set(\"adrLine1\", JSON.stringify(pm.variables.replaceIn(\"{{$randomStreetName}}\")));",
					"    pm.environment.set(\"adrLine2\", JSON.stringify(pm.variables.replaceIn(\"{{$randomStreetAddress}}\")));",
					"    pm.environment.set(\"streetName\", JSON.stringify(pm.variables.replaceIn(\"{{$randomStreetName}}\")));",
					"    pm.environment.set(\"townName\", JSON.stringify(pm.variables.replaceIn(\"{{$randomCity}}\")));",
					"    pm.environment.set(\"country\", JSON.stringify(pm.variables.replaceIn(\"{{$randomCountryCode}}\")));",
					"    pm.environment.set(\"buildingNm\", pm.variables.replaceIn('{{$randomInt}}'));",
					"    pm.environment.set(\"postalCode\", pm.variables.replaceIn('{{$randomInt}}'));",
					"    pm.environment.set(\"buildingNmStr\", JSON.stringify(pm.variables.replaceIn('{{$randomInt}}')));",
					"    pm.environment.set(\"postalCodeStr\", JSON.stringify(pm.variables.replaceIn('{{$randomInt}}')));",
					"    console.log(\"... randomize is finished\");",
					"  }",
					"});",
					"",
					"postman.setGlobalVariable(\"generateAccessToken\", () => {",
					"  const getAccessTokenRequest = {",
					"    url: pm.environment.get(\"env_security_testToken\"),",
					"    method: \"POST\",",
					"    header: {",
					"      'Content-Type': 'application/json',",
					"      'Accept': 'application/json'",
					"    },",
					"    body: {",
					"      mode: 'raw',",
					"      raw: JSON.stringify({",
					"        tenant_id: pm.environment.get(\"tenantId_security\"),",
					"        acsKey: \"i6PiNObtdp2rCNW7mlV51BDSY4zAliSvBCyVsuML1000203567\",",
					"        tenant_name: pm.environment.get(\"tenantName_security\"),",
					"        user_name: pm.environment.get(\"userId_security\"),",
					"        contractNo: pm.environment.get(\"contractNo_security\"),",
					"        language: \"en\",",
					"        bcNo: pm.environment.get(\"bcNo_security\"),",
					"        authorities: [\"DBAN_ADMIN\", \"DBAN_USER\"],",
					"        client_id: \"postman\",",
					"        user_id: pm.environment.get(\"userId_security\"),",
					"        loginName: pm.environment.get(\"userId_security\"),",
					"        exp: 32479694642,",
					"        jti: \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",",
					"        iat: 1553855569,",
					"        scope: [",
					"          \"https://api.crealogix.com/dban\",",
					"          \"read\",",
					"          \"write\",",
					"          \"https://api.crealogix.com/contracts/contract.advisor.readonly\",",
					"          \"https://api.crealogix.com/contracts/contract.metadata.readonly\",",
					"          \"https://api.crealogix.com/contracts/contract.person.readonly\",",
					"          \"https://api.crealogix.com/payments/payment.initiate\",",
					"          \"https://api.crealogix.com/payments/payment.read\",",
					"          \"https://api.crealogix.com/payments/payment.write\",",
					"          \"https://api.crealogix.com/assets/account/read\",",
					"          \"https://api.crealogix.com/assets/account.transaction/read\",",
					"          \"https://api.crealogix.com/assets/account.name\",",
					"          \"https://api.crealogix.com/assets/account.image\",",
					"          \"https://api.crealogix.com/assets/cuac/read\",",
					"          \"https://api.crealogix.com/assets/portfolio/read\",",
					"          \"https://api.crealogix.com/messages/securemail.write\",",
					"          \"https://api.crealogix.com/messages/securemail.read\",",
					"          \"https://api.crealogix.com/messages/document.category.read\",",
					"          \"https://api.crealogix.com/messages/document.category.write\",",
					"          \"https://api.crealogix.com/messages/document.write\",",
					"          \"https://api.crealogix.com/messages/document.read\",",
					"          \"https://api.crealogix.com/brokerage/security/read\",",
					"          \"https://api.crealogix.com/brokerage/tradingplace/read\",",
					"          \"https://api.crealogix.com/brokerage/depository/read\",",
					"          \"https://api.crealogix.com/brokerage/order/read\",",
					"          \"https://api.crealogix.com/brokerage/order\",",
					"          \"https://api.crealogix.com/deeplink/domains\",",
					"          \"https://api.crealogix.com/deeplink/links\"",
					"        ]",
					"      })",
					"    }",
					"  };",
					"  pm.environment.set(\"request\", JSON.stringify(getAccessTokenRequest));",
					"",
					"  pm.sendRequest(getAccessTokenRequest, function (err, res) {",
					"    if (err) {",
					"      console.log(err ? err : res.json());",
					"    } else {",
					"      pm.environment.set(\"access_token\", res.text());",
					"    }",
					"    /*",
					"    pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
					"        pm.expect(err).to.not.be.ok;",
					"        pm.expect(res).to.have.property('code', 200);",
					"        pm.expect(res).to.have.property('status', 'OK');          ",
					"    });",
					"    */",
					"  });",
					"});",
					"",
					"",
					"",
					"/* function for creating Swift payment*/",
					"postman.setGlobalVariable(\"paymentSwiftCreate\", () => {",
					"  pm.sendRequest({",
					"    url: `${pm.environment.get(\"environment\")}/banking-api/payment/swift/${pm.environment.get(\"tenant\")}/v2/credittransfer`,",
					"    method: \"POST\",",
					"    header: {",
					"      'Content-Type': 'application/json',",
					"      'Accept': 'application/json',",
					"      'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"    },",
					"    body: {",
					"      mode: 'raw',",
					"      raw: JSON.stringify({",
					"        storeOnly: false,",
					"        locked: false,",
					"        categoryPurposeCode: \"SALA\",",
					"        paymentInformation: {",
					"          endToEndId: JSON.parse(pm.environment.get(\"endToEndId\")),",
					"          instructedAmount: {",
					"            currency: {",
					"              code: \"GBP\"",
					"            },",
					"            value: 1",
					"          },",
					"          remittanceInformation: {",
					"            \"unstructured\": JSON.parse(pm.environment.get(\"unstructured\")),",
					"            \"structured\": JSON.parse(pm.environment.get(\"structuredRemittanceRF\"))",
					"          },",
					"          instructionIdentification: JSON.parse(pm.environment.get(\"instructionIdentification\")),",
					"          requestedExecutionDate: JSON.parse(pm.globals.get(\"PrS:nextWorkingDay\")),",
					"          instructionPriority: \"NORMAL\",",
					"          creditor: {",
					"            \"name\": JSON.parse(pm.environment.get(\"name\")),",
					"            \"address\": {",
					"              \"adrLine1\": JSON.parse(pm.environment.get(\"adrLine1\")),",
					"              \"adrLine2\": JSON.parse(pm.environment.get(\"adrLine2\")),",
					"              \"streetName\": JSON.parse(pm.environment.get(\"streetName\")),",
					"              \"buildingNm\": pm.environment.get(\"buildingNm\"),",
					"              \"postalCode\": pm.environment.get(\"postalCode\"),",
					"              \"townName\": JSON.parse(pm.environment.get(\"townName\")),",
					"              \"country\": JSON.parse(pm.environment.get(\"country\"))",
					"            }",
					"          },",
					"          creditorAccountNo: JSON.parse(pm.environment.get(\"creditorAccountNoSWIFT\")),",
					"          creditorAgent: {",
					"            bic: JSON.parse(pm.environment.get(\"creditorAgentBicSWIFT\"))",
					"          },",
					"          debtor: {",
					"            name: JSON.parse(pm.environment.get(\"debtorAccountName\")),",
					"            address: {",
					"              streetName: JSON.parse(pm.environment.get(\"debtorStreetName\")),",
					"              postalCode: JSON.parse(pm.environment.get(\"debtorPostalCode\")),",
					"              townName: JSON.parse(pm.environment.get(\"debtorTownName\"))",
					"            }",
					"          },",
					"          debtorAccountNo: JSON.parse(pm.environment.get(\"debtorAccountNo\"))",
					"        }",
					"      })",
					"    }",
					"  }, function (err, res) {",
					"    if (err) {",
					"      console.log(err ? err : res.json());",
					"    } else {",
					"      pm.environment.set(\"newPaymentSwiftID\", res.json().paymentId);",
					"      console.log(\"New payment ID: \" + pm.environment.get(\"newPaymentSwiftID\"));",
					"    }",
					"  });",
					"});",
					"",
					"/* function for deleting Swift payment*/",
					"postman.setGlobalVariable(\"paymentSwiftDelete\", () => {",
					"  pm.sendRequest({",
					"    url: `${pm.environment.get(\"environment\")}/banking-api/payment/swift/${pm.environment.get(\"tenant\")}/v2/credittransfer/${pm.environment.get(\"newPaymentSwiftID\")}`,",
					"    method: \"DELETE\",",
					"    header: {",
					"      'Content-Type': 'application/json',",
					"      'Accept': 'application/json',",
					"      'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"    },",
					"    body: {}",
					"  }, function (err, res) {",
					"    if (err) {",
					"      console.log(err ? err : res.json());",
					"    } else {",
					"      pm.environment.unset(\"newPaymentSwiftID\");",
					"    }",
					"  });",
					"});",
					"",
					"/* function for creating Sepa payment*/",
					"postman.setGlobalVariable(\"paymentSepaCreate\", () => {",
					"  pm.sendRequest({",
					"    url: `${pm.environment.get(\"environment\")}/banking-api/payment/sepa/${pm.environment.get(\"tenant\")}/v2/credittransfer`,",
					"    method: \"POST\",",
					"    header: {",
					"      'Content-Type': 'application/json',",
					"      'Accept': 'application/json',",
					"      'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"    },",
					"    body: {",
					"      mode: 'raw',",
					"      raw: JSON.stringify({",
					"        storeOnly: false,",
					"        locked: false,",
					"        categoryPurposeCode: \"SALA\",",
					"        paymentInformation: {",
					"          endToEndId: JSON.parse(pm.environment.get(\"endToEndId\")),",
					"          instructedAmount: {",
					"            currency: {",
					"              code: \"EUR\"",
					"            },",
					"            value: 312.00",
					"          },",
					"          remittanceInformation: {",
					"            \"unstructured\": JSON.parse(pm.environment.get(\"unstructured\")),",
					"            \"structured\": JSON.parse(pm.environment.get(\"structuredRemittanceRF\"))",
					"          },",
					"          instructionIdentification: JSON.parse(pm.environment.get(\"instructionIdentification\")),",
					"          requestedExecutionDate: JSON.parse(pm.globals.get(\"PrS:nextWorkingDay\")),",
					"          instructionPriority: \"NORMAL\",",
					"          creditor: {",
					"            \"name\": JSON.parse(pm.environment.get(\"name\")),",
					"            \"address\": {",
					"              \"adrLine1\": JSON.parse(pm.environment.get(\"adrLine1\")),",
					"              \"adrLine2\": JSON.parse(pm.environment.get(\"adrLine2\")),",
					"              \"streetName\": JSON.parse(pm.environment.get(\"streetName\")),",
					"              \"buildingNm\": pm.environment.get(\"buildingNm\"),",
					"              \"postalCode\": pm.environment.get(\"postalCode\"),",
					"              \"townName\": JSON.parse(pm.environment.get(\"townName\")),",
					"              \"country\": JSON.parse(pm.environment.get(\"country\"))",
					"            }",
					"          },",
					"          creditorAccountNo: JSON.parse(pm.environment.get(\"creditorAccountNoSEPA\")),",
					"          creditorAgent: {",
					"            bic: JSON.parse(pm.environment.get(\"creditorAgentBicSEPA\"))",
					"          },",
					"          debtor: {",
					"            name: JSON.parse(pm.environment.get(\"debtorAccountName\")),",
					"            address: {",
					"              streetName: JSON.parse(pm.environment.get(\"debtorStreetName\")),",
					"              postalCode: JSON.parse(pm.environment.get(\"debtorPostalCode\")),",
					"              townName: JSON.parse(pm.environment.get(\"debtorTownName\"))",
					"            }",
					"          },",
					"          debtorAccountNo: JSON.parse(pm.environment.get(\"debtorAccountNo\"))",
					"        }",
					"      })",
					"    }",
					"  }, function (err, res) {",
					"    if (err) {",
					"      console.log(err ? err : res.json());",
					"    } else {",
					"      pm.environment.set(\"newPaymentSepaID\", res.json().paymentId);",
					"      console.log(\"New payment ID: \" + pm.environment.get(\"newPaymentSepaID\"));",
					"    }",
					"  });",
					"});",
					"",
					"/* function for creating Sepa (standing order) payment*/",
					"postman.setGlobalVariable(\"paymentSepaSoCreate\", () => {",
					"  pm.sendRequest({",
					"    url: `${pm.environment.get(\"environment\")}/banking-api/payment/sepa/${pm.environment.get(\"tenant\")}/v2/credittransfer`,",
					"    method: \"POST\",",
					"    header: {",
					"      'Content-Type': 'application/json',",
					"      'Accept': 'application/json',",
					"      'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"    },",
					"    body: {",
					"      mode: 'raw',",
					"      raw: JSON.stringify({",
					"        storeOnly: false,",
					"        locked: false,",
					"        categoryPurposeCode: \"SALA\",",
					"        paymentInformation: {",
					"          instructedAmount: {",
					"            currency: {",
					"              code: \"EUR\"",
					"            },",
					"            value: 9.99",
					"          },",
					"          remittanceInformation: {",
					"            \"unstructured\": JSON.parse(pm.environment.get(\"unstructured\")),",
					"            \"structured\": JSON.parse(pm.environment.get(\"structuredRemittanceRF\"))",
					"          },",
					"          instructionIdentification: JSON.parse(pm.environment.get(\"instructionIdentification\")),",
					"          requestedExecutionDate: JSON.parse(pm.globals.get(\"PrS:nextWorkingDay\")),",
					"          instructionPriority: \"NORMAL\",",
					"          creditor: {",
					"            \"name\": JSON.parse(pm.environment.get(\"name\")),",
					"            \"address\": {",
					"              \"adrLine1\": JSON.parse(pm.environment.get(\"adrLine1\")),",
					"              \"adrLine2\": JSON.parse(pm.environment.get(\"adrLine2\")),",
					"              \"streetName\": JSON.parse(pm.environment.get(\"streetName\")),",
					"              \"buildingNm\": pm.environment.get(\"buildingNm\"),",
					"              \"postalCode\": pm.environment.get(\"postalCode\"),",
					"              \"townName\": JSON.parse(pm.environment.get(\"townName\")),",
					"              \"country\": JSON.parse(pm.environment.get(\"country\"))",
					"            }",
					"          },",
					"          creditorAccountNo: JSON.parse(pm.environment.get(\"creditorAccountNoSEPA\")),",
					"          creditorAgent: {",
					"            bic: JSON.parse(pm.environment.get(\"creditorAgentBicSEPA\"))",
					"          },",
					"          debtor: {",
					"            name: JSON.parse(pm.environment.get(\"debtorAccountName\")),",
					"            address: {",
					"              streetName: JSON.parse(pm.environment.get(\"debtorStreetName\")),",
					"              postalCode: JSON.parse(pm.environment.get(\"debtorPostalCode\")),",
					"              townName: JSON.parse(pm.environment.get(\"debtorTownName\"))",
					"            }",
					"          },",
					"          debtorAccountNo: JSON.parse(pm.environment.get(\"debtorAccountNo\")),",
					"          standingOrder: {",
					"            firstOn: JSON.parse(pm.globals.get(\"PrS:futureWorkingDay\")),",
					"            lastOn: JSON.parse(pm.globals.get(\"PrS:futurePlusWorkingDay\")),",
					"            beforeHoliday: true,",
					"            interval: \"WEEKLY\",",
					"            active: true,",
					"            ultimo: false",
					"          }",
					"        }",
					"      })",
					"    }",
					"  }, function (err, res) {",
					"    if (err) {",
					"      console.log(err ? err : res.json());",
					"    } else {",
					"      pm.environment.set(\"newPaymentSepaID\", res.json().paymentId);",
					"      console.log(\"New payment ID: \" + pm.environment.get(\"newPaymentSepaID\"));",
					"    }",
					"  });",
					"});",
					"",
					"/* function for deleting Sepa payment*/",
					"postman.setGlobalVariable(\"paymentSepaDelete\", () => {",
					"  pm.sendRequest({",
					"    url: `${pm.environment.get(\"environment\")}/banking-api/payment/sepa/${pm.environment.get(\"tenant\")}/v2/credittransfer/${pm.environment.get(\"newPaymentSepaID\")}`,",
					"    method: \"DELETE\",",
					"    header: {",
					"      'Content-Type': 'application/json',",
					"      'Accept': 'application/json',",
					"      'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"    },",
					"    body: {}",
					"  }, function (err, res) {",
					"    if (err) {",
					"      console.log(err ? err : res.json());",
					"    } else {",
					"      pm.environment.unset(\"newPaymentSepaID\");",
					"    }",
					"  });",
					"});",
					"",
					"",
					"//************************************************************************************************",
					"// Schema for 'assetsListDetails'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const assetsListDetails =",
					"{",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"  \"$id\": \"http://example.com/example.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"description\": \"The root schema comprises the entire JSON document.\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"assetNumber\",",
					"    \"assetType\",",
					"    \"amount\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__736666683854316a6b494f784436514f89eb3c7e757e6e6cce6ef081dbd7fd929f2dc9\"",
					"      ]",
					"    },",
					"    \"assetNumber\": {",
					"      \"$id\": \"#/properties/assetNumber\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Assetnumber Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"1000001704\"",
					"      ]",
					"    },",
					"    \"assetType\": {",
					"      \"$id\": \"#/properties/assetType\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Assettype Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"ACCOUNT\"",
					"      ]",
					"    },",
					"    \"amount\": {",
					"      \"$id\": \"#/properties/amount\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Amount Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": {},",
					"      \"examples\": [",
					"        {",
					"          \"value\": 123493.65,",
					"          \"currencyIsoCode\": \"USD\"",
					"        }",
					"      ],",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/amount/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"description\": \"An explanation about the purpose of this instance.\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"USD\"",
					"          ]",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/amount/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"description\": \"An explanation about the purpose of this instance.\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            123493.65",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"assetsListDetails\", assetsListDetails);",
					"",
					"",
					"//************************************************************************************************",
					"// Schema for 'assetsList'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const assetsList =",
					"{",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"  \"$id\": \"http://example.com/example.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"description\": \"The root schema comprises the entire JSON document.\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": {},",
					"      \"examples\": [",
					"        {",
					"          \"assets\": [",
					"            {",
					"              \"amount\": {",
					"                \"currencyIsoCode\": \"GBP\",",
					"                \"value\": 30308022.29",
					"              },",
					"              \"id\": \"__ID__306e513838756c61716c39766b6c3555bb32d1ccd955ff7aab9ac3e08bcea348da8e483186f4c4\",",
					"              \"assetNumber\": \"1286841506\",",
					"              \"assetType\": \"ACCOUNT\"",
					"            },",
					"            {",
					"              \"amount\": {",
					"                \"value\": 9959.94,",
					"                \"currencyIsoCode\": \"USD\"",
					"              },",
					"              \"id\": \"__ID__306e513838756c61716c39766b6c3555bb32d1ccd955fd8b6a4035b48babb2e18a7b6cbb4beb0b\",",
					"              \"assetNumber\": \"1286841517\",",
					"              \"assetType\": \"ACCOUNT\"",
					"            },",
					"            {",
					"              \"id\": \"__ID__306e513838756c61716c39766b6c3555bb33d5cddd5cfd2818088a0d01e714013dd045ffaaf1fa\",",
					"              \"assetNumber\": \"771286841506\",",
					"              \"assetType\": \"CUSTODY_ACCOUNT\",",
					"              \"amount\": {",
					"                \"value\": 7718.65,",
					"                \"currencyIsoCode\": \"GBP\"",
					"              }",
					"            }",
					"          ]",
					"        }",
					"      ],",
					"      \"required\": [",
					"        \"assets\"",
					"      ],",
					"      \"properties\": {",
					"        \"assets\": {",
					"          \"$id\": \"#/properties/_embedded/properties/assets\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Assets Schema\",",
					"          \"description\": \"An explanation about the purpose of this instance.\",",
					"          \"default\": [],",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/assets/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"              {",
					"                \"id\": \"__ID__306e513838756c61716c39766b6c3555bb32d1ccd955ff7aab9ac3e08bcea348da8e483186f4c4\",",
					"                \"assetNumber\": \"1286841506\",",
					"                \"assetType\": \"ACCOUNT\",",
					"                \"amount\": {",
					"                  \"value\": 30308022.29,",
					"                  \"currencyIsoCode\": \"GBP\"",
					"                }",
					"              },",
					"              {",
					"                \"assetType\": \"ACCOUNT\",",
					"                \"amount\": {",
					"                  \"value\": 9959.94,",
					"                  \"currencyIsoCode\": \"USD\"",
					"                },",
					"                \"id\": \"__ID__306e513838756c61716c39766b6c3555bb32d1ccd955fd8b6a4035b48babb2e18a7b6cbb4beb0b\",",
					"                \"assetNumber\": \"1286841517\"",
					"              },",
					"              {",
					"                \"amount\": {",
					"                  \"currencyIsoCode\": \"GBP\",",
					"                  \"value\": 7718.65",
					"                },",
					"                \"id\": \"__ID__306e513838756c61716c39766b6c3555bb33d5cddd5cfd2818088a0d01e714013dd045ffaaf1fa\",",
					"                \"assetNumber\": \"771286841506\",",
					"                \"assetType\": \"CUSTODY_ACCOUNT\"",
					"              }",
					"            ],",
					"            \"required\": [",
					"              \"id\",",
					"              \"assetNumber\",",
					"              \"assetType\",",
					"              \"amount\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"description\": \"An explanation about the purpose of this instance.\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__306e513838756c61716c39766b6c3555bb32d1ccd955ff7aab9ac3e08bcea348da8e483186f4c4\"",
					"                ]",
					"              },",
					"              \"assetNumber\": {",
					"                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/assetNumber\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Assetnumber Schema\",",
					"                \"description\": \"An explanation about the purpose of this instance.\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"1286841506\"",
					"                ]",
					"              },",
					"              \"assetType\": {",
					"                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/assetType\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Assettype Schema\",",
					"                \"description\": \"An explanation about the purpose of this instance.\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"ACCOUNT\"",
					"                ]",
					"              },",
					"              \"amount\": {",
					"                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Amount Schema\",",
					"                \"description\": \"An explanation about the purpose of this instance.\",",
					"                \"default\": {},",
					"                \"examples\": [",
					"                  {",
					"                    \"value\": 30308022.29,",
					"                    \"currencyIsoCode\": \"GBP\"",
					"                  }",
					"                ],",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"GBP\"",
					"                    ]",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": 0,",
					"                    \"examples\": [",
					"                      30308022.29",
					"                    ]",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": {},",
					"      \"examples\": [",
					"        {",
					"          \"number\": 0.0,",
					"          \"totalPages\": 1.0,",
					"          \"totalElements\": 3.0,",
					"          \"size\": 20.0",
					"        }",
					"      ],",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"description\": \"An explanation about the purpose of this instance.\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"description\": \"An explanation about the purpose of this instance.\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            20",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"description\": \"An explanation about the purpose of this instance.\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            3",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"description\": \"An explanation about the purpose of this instance.\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"assetsList\", assetsList);",
					"",
					"",
					"//************************************************************************************************",
					"// Schema for 'singleTransactions'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const singleTransactions =",
					"{",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"  \"$id\": \"http://example.com/example.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"description\": \"The root schema comprises the entire JSON document.\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"accountId\",",
					"    \"valutaDate\",",
					"    \"bookingDate\",",
					"    \"booked\",",
					"    \"amount\",",
					"    \"creditorAccount\",",
					"    \"debtorAccount\",",
					"    \"end2endID\",",
					"    \"referenceNumber\",",
					"    \"bookingText\",",
					"    \"referenceText\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__505237616d485741324e4339683554694ab1600a787e7c4213d74be5d7df5aa6720d6982bbcd73\"",
					"      ]",
					"    },",
					"    \"accountId\": {",
					"      \"$id\": \"#/properties/accountId\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Accountid Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__505237616d485741324e43396835546949b463067c737ed9bc3ddbe7d5ad67a4b38b0931b81881\"",
					"      ]",
					"    },",
					"    \"valutaDate\": {",
					"      \"$id\": \"#/properties/valutaDate\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Valutadate Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2019-12-23\"",
					"      ]",
					"    },",
					"    \"bookingDate\": {",
					"      \"$id\": \"#/properties/bookingDate\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Bookingdate Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2019-12-23\"",
					"      ]",
					"    },",
					"    \"booked\": {",
					"      \"$id\": \"#/properties/booked\",",
					"      \"type\": \"boolean\",",
					"      \"title\": \"The Booked Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": false,",
					"      \"examples\": [",
					"        true",
					"      ]",
					"    },",
					"    \"amount\": {",
					"      \"$id\": \"#/properties/amount\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Amount Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": {},",
					"      \"examples\": [",
					"        {",
					"          \"value\": 2.0,",
					"          \"currencyIsoCode\": \"CHF\"",
					"        }",
					"      ],",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/amount/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"description\": \"An explanation about the purpose of this instance.\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ]",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/amount/properties/value\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Value Schema\",",
					"          \"description\": \"An explanation about the purpose of this instance.\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            2",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"creditorAccount\": {",
					"      \"$id\": \"#/properties/creditorAccount\",",
					"      \"title\": \"The Creditoraccount Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"debtorAccount\": {",
					"      \"$id\": \"#/properties/debtorAccount\",",
					"      \"title\": \"The Debtoraccount Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"end2endID\": {",
					"      \"$id\": \"#/properties/end2endID\",",
					"      \"title\": \"The End2endid Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"referenceNumber\": {",
					"      \"$id\": \"#/properties/referenceNumber\",",
					"      \"title\": \"The Referencenumber Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"bookingText\": {",
					"      \"$id\": \"#/properties/bookingText\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Bookingtext Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"Payment 2\"",
					"      ]",
					"    },",
					"    \"referenceText\": {",
					"      \"$id\": \"#/properties/referenceText\",",
					"      \"title\": \"The Referencetext Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"singleTransactions\", singleTransactions);",
					"",
					"//************************************************************************************************",
					"// Schema for '400 error'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const error400 =",
					"{",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"  \"$id\": \"http://example.com/example.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"description\": \"The root schema comprises the entire JSON document.\",",
					"  \"required\": [",
					"    \"_status\",",
					"    \"_messages\",",
					"    \"_timestamp\"",
					"  ],",
					"  \"properties\": {",
					"    \"_status\": {",
					"      \"$id\": \"#/properties/_status\",",
					"      \"type\": \"boolean\",",
					"      \"title\": \"The _status Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": false,",
					"      \"examples\": [",
					"        false",
					"      ]",
					"    },",
					"    \"_messages\": {",
					"      \"$id\": \"#/properties/_messages\",",
					"      \"type\": \"array\",",
					"      \"title\": \"The _messages Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": [],",
					"      \"items\": {",
					"        \"$id\": \"#/properties/_messages/items\",",
					"        \"type\": \"object\",",
					"        \"title\": \"The Items Schema\",",
					"        \"description\": \"An explanation about the purpose of this instance.\",",
					"        \"default\": {},",
					"        \"examples\": [",
					"          {",
					"            \"category\": \"ERROR\",",
					"            \"code\": \"ERROR_ARGUMENT_MISMATCH\",",
					"            \"text\": \"Argument mismatch: __ID__505237616d485741324e43396835546949b463067c71799107b8d02d69a0300452557cf19dd4f7\",",
					"            \"path\": \"/assets/accounts/19901/v4/accounts/__ID__505237616d485741324e43396835546949b463067c71799107b8d02d69a0300452557cf19dd4f7/permissions\"",
					"          }",
					"        ],",
					"        \"required\": [",
					"          \"category\",",
					"          \"code\",",
					"          \"text\",",
					"          \"path\"",
					"        ],",
					"        \"properties\": {",
					"          \"category\": {",
					"            \"$id\": \"#/properties/_messages/items/properties/category\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Category Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"ERROR\"",
					"            ]",
					"          },",
					"          \"code\": {",
					"            \"$id\": \"#/properties/_messages/items/properties/code\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Code Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"ERROR_ARGUMENT_MISMATCH\"",
					"            ]",
					"          },",
					"          \"text\": {",
					"            \"$id\": \"#/properties/_messages/items/properties/text\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Text Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"Argument mismatch: __ID__505237616d485741324e43396835546949b463067c71799107b8d02d69a0300452557cf19dd4f7\"",
					"            ]",
					"          },",
					"          \"path\": {",
					"            \"$id\": \"#/properties/_messages/items/properties/path\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Path Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"/assets/accounts/19901/v4/accounts/__ID__505237616d485741324e43396835546949b463067c71799107b8d02d69a0300452557cf19dd4f7/permissions\"",
					"            ]",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"_timestamp\": {",
					"      \"$id\": \"#/properties/_timestamp\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The _timestamp Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2020-03-24T13:26:15.546+01:00\"",
					"      ]",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"error400\", error400);",
					"",
					"//************************************************************************************************",
					"// Schema for 'Alias set'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const aliasSet =",
					"{",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"  \"$id\": \"http://example.com/example.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"description\": \"The root schema comprises the entire JSON document.\",",
					"  \"required\": [",
					"    \"_timestamp\",",
					"    \"_status\",",
					"    \"_messages\"",
					"  ],",
					"  \"properties\": {",
					"    \"_timestamp\": {",
					"      \"$id\": \"#/properties/_timestamp\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The _timestamp Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2020-03-18T11:48:50.275\"",
					"      ]",
					"    },",
					"    \"_status\": {",
					"      \"$id\": \"#/properties/_status\",",
					"      \"type\": \"boolean\",",
					"      \"title\": \"The _status Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": false,",
					"      \"examples\": [",
					"        true",
					"      ]",
					"    },",
					"    \"_messages\": {",
					"      \"$id\": \"#/properties/_messages\",",
					"      \"type\": \"array\",",
					"      \"title\": \"The _messages Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": [],",
					"      \"items\": {",
					"        \"$id\": \"#/properties/_messages/items\",",
					"        \"type\": \"object\",",
					"        \"title\": \"The Items Schema\",",
					"        \"description\": \"An explanation about the purpose of this instance.\",",
					"        \"default\": {},",
					"        \"examples\": [",
					"          {",
					"            \"text\": \"Account alias set\",",
					"            \"path\": \"/assets/accounts/{tenantId}/v4/accounts/{accountId}/alias\",",
					"            \"category\": \"NORMAL\",",
					"            \"code\": \"200\"",
					"          }",
					"        ],",
					"        \"required\": [",
					"          \"code\",",
					"          \"category\",",
					"          \"text\",",
					"          \"path\"",
					"        ],",
					"        \"properties\": {",
					"          \"code\": {",
					"            \"$id\": \"#/properties/_messages/items/properties/code\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Code Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"200\"",
					"            ]",
					"          },",
					"          \"category\": {",
					"            \"$id\": \"#/properties/_messages/items/properties/category\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Category Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"NORMAL\"",
					"            ]",
					"          },",
					"          \"text\": {",
					"            \"$id\": \"#/properties/_messages/items/properties/text\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Text Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"Account alias set\"",
					"            ]",
					"          },",
					"          \"path\": {",
					"            \"$id\": \"#/properties/_messages/items/properties/path\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Path Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"/assets/accounts/{tenantId}/v4/accounts/{accountId}/alias\"",
					"            ]",
					"          }",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"aliasSet\", aliasSet);",
					"",
					"",
					"//************************************************************************************************",
					"// Schema for 'Account ID get response'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const accountIdDetails =",
					"{",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"  \"$id\": \"http://example.com/example.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"description\": \"The root schema comprises the entire JSON document.\",",
					"  \"required\": [",
					"    \"accountName\",",
					"    \"accountType\",",
					"    \"accountNumber\",",
					"    \"advisorId\",",
					"    \"bank\",",
					"    \"balances\",",
					"    \"contractId\",",
					"    \"creditInterest\",",
					"    \"currencyIsoCode\",",
					"    \"customerName\",",
					"    \"debtInterest\",",
					"    \"defaultDebtAccount\",",
					"    \"description\",",
					"    \"formattedAccountNumber\",",
					"    \"iban\",",
					"    \"id\",",
					"    \"overdraftInterest\",",
					"    \"overdraftLimit\",",
					"    \"portfolioId\",",
					"    \"permissions\"",
					"  ],",
					"  \"properties\": {",
					"    \"accountName\": {",
					"      \"$id\": \"#/properties/accountName\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Accountname Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"1501 CHF\"",
					"      ]",
					"    },",
					"    \"accountType\": {",
					"      \"$id\": \"#/properties/accountType\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Accounttype Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"CURRENT\"",
					"      ]",
					"    },",
					"    \"accountNumber\": {",
					"      \"$id\": \"#/properties/accountNumber\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Accountnumber Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"1000001501\"",
					"      ]",
					"    },",
					"    \"advisorId\": {",
					"      \"$id\": \"#/properties/advisorId\",",
					"      \"title\": \"The Advisorid Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"bank\": {",
					"      \"$id\": \"#/properties/bank\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Bank Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": {},",
					"      \"examples\": [",
					"        {",
					"          \"institutionId\": \"12312\",",
					"          \"bic\": \"CLXNCHZZMDB\",",
					"          \"name\": \"CLX EBS\"",
					"        }",
					"      ],",
					"      \"required\": [",
					"        \"bic\",",
					"        \"institutionId\",",
					"        \"name\"",
					"      ],",
					"      \"properties\": {",
					"        \"bic\": {",
					"          \"$id\": \"#/properties/bank/properties/bic\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Bic Schema\",",
					"          \"description\": \"An explanation about the purpose of this instance.\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CLXNCHZZMDB\"",
					"          ]",
					"        },",
					"        \"institutionId\": {",
					"          \"$id\": \"#/properties/bank/properties/institutionId\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Institutionid Schema\",",
					"          \"description\": \"An explanation about the purpose of this instance.\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"12312\"",
					"          ]",
					"        },",
					"        \"name\": {",
					"          \"$id\": \"#/properties/bank/properties/name\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Name Schema\",",
					"          \"description\": \"An explanation about the purpose of this instance.\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CLX EBS\"",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"balances\": {",
					"      \"$id\": \"#/properties/balances\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Balances Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": {},",
					"      \"examples\": [",
					"        {",
					"          \"availableAmount\": {",
					"            \"value\": 20365239.25,",
					"            \"currencyIsoCode\": \"CHF\"",
					"          },",
					"          \"balance\": {",
					"            \"value\": 20365239.25,",
					"            \"currencyIsoCode\": \"CHF\"",
					"          }",
					"        }",
					"      ],",
					"      \"required\": [",
					"        \"availableAmount\",",
					"        \"balance\"",
					"      ],",
					"      \"properties\": {",
					"        \"availableAmount\": {",
					"          \"$id\": \"#/properties/balances/properties/availableAmount\",",
					"          \"type\": \"object\",",
					"          \"title\": \"The Availableamount Schema\",",
					"          \"description\": \"An explanation about the purpose of this instance.\",",
					"          \"default\": {},",
					"          \"examples\": [",
					"            {",
					"              \"value\": 20365239.25,",
					"              \"currencyIsoCode\": \"CHF\"",
					"            }",
					"          ],",
					"          \"required\": [",
					"            \"currencyIsoCode\",",
					"            \"value\"",
					"          ],",
					"          \"properties\": {",
					"            \"currencyIsoCode\": {",
					"              \"$id\": \"#/properties/balances/properties/availableAmount/properties/currencyIsoCode\",",
					"              \"type\": \"string\",",
					"              \"title\": \"The Currencyisocode Schema\",",
					"              \"description\": \"An explanation about the purpose of this instance.\",",
					"              \"default\": \"\",",
					"              \"examples\": [",
					"                \"CHF\"",
					"              ]",
					"            },",
					"            \"value\": {",
					"              \"$id\": \"#/properties/balances/properties/availableAmount/properties/value\",",
					"              \"type\": \"number\",",
					"              \"title\": \"The Value Schema\",",
					"              \"description\": \"An explanation about the purpose of this instance.\",",
					"              \"default\": 0,",
					"              \"examples\": [",
					"                20365239.25",
					"              ]",
					"            }",
					"          }",
					"        },",
					"        \"balance\": {",
					"          \"$id\": \"#/properties/balances/properties/balance\",",
					"          \"type\": \"object\",",
					"          \"title\": \"The Balance Schema\",",
					"          \"description\": \"An explanation about the purpose of this instance.\",",
					"          \"default\": {},",
					"          \"examples\": [",
					"            {",
					"              \"currencyIsoCode\": \"CHF\",",
					"              \"value\": 20365239.25",
					"            }",
					"          ],",
					"          \"required\": [",
					"            \"currencyIsoCode\",",
					"            \"value\"",
					"          ],",
					"          \"properties\": {",
					"            \"currencyIsoCode\": {",
					"              \"$id\": \"#/properties/balances/properties/balance/properties/currencyIsoCode\",",
					"              \"type\": \"string\",",
					"              \"title\": \"The Currencyisocode Schema\",",
					"              \"description\": \"An explanation about the purpose of this instance.\",",
					"              \"default\": \"\",",
					"              \"examples\": [",
					"                \"CHF\"",
					"              ]",
					"            },",
					"            \"value\": {",
					"              \"$id\": \"#/properties/balances/properties/balance/properties/value\",",
					"              \"type\": \"number\",",
					"              \"title\": \"The Value Schema\",",
					"              \"description\": \"An explanation about the purpose of this instance.\",",
					"              \"default\": 0,",
					"              \"examples\": [",
					"                20365239.25",
					"              ]",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"contractId\": {",
					"      \"$id\": \"#/properties/contractId\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Contractid Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__4b3261526f43483250734f78384c3965cf4fbd0c52c6f98e68435eec4a20241839a18c\"",
					"      ]",
					"    },",
					"    \"creditInterest\": {",
					"      \"$id\": \"#/properties/creditInterest\",",
					"      \"title\": \"The Creditinterest Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"currencyIsoCode\": {",
					"      \"$id\": \"#/properties/currencyIsoCode\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Currencyisocode Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"CHF\"",
					"      ]",
					"    },",
					"    \"customerName\": {",
					"      \"$id\": \"#/properties/customerName\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Customername Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"Freddy Hinz\"",
					"      ]",
					"    },",
					"    \"debtInterest\": {",
					"      \"$id\": \"#/properties/debtInterest\",",
					"      \"title\": \"The Debtinterest Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"defaultDebtAccount\": {",
					"      \"$id\": \"#/properties/defaultDebtAccount\",",
					"      \"type\": \"boolean\",",
					"      \"title\": \"The Defaultdebtaccount Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": false,",
					"      \"examples\": [",
					"        false",
					"      ]",
					"    },",
					"    \"description\": {",
					"      \"$id\": \"#/properties/description\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Description Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"Current account\"",
					"      ]",
					"    },",
					"    \"formattedAccountNumber\": {",
					"      \"$id\": \"#/properties/formattedAccountNumber\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Formattedaccountnumber Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"CH5112312001000001501\"",
					"      ]",
					"    },",
					"    \"iban\": {",
					"      \"$id\": \"#/properties/iban\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Iban Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"CH5112312001000001501\"",
					"      ]",
					"    },",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__4b3261526f43483250734f78384c3965cf4dbab1755ff09f5775670adce3198e17d1b1\"",
					"      ]",
					"    },",
					"    \"overdraftInterest\": {",
					"      \"$id\": \"#/properties/overdraftInterest\",",
					"      \"title\": \"The Overdraftinterest Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"overdraftLimit\": {",
					"      \"$id\": \"#/properties/overdraftLimit\",",
					"      \"title\": \"The Overdraftlimit Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"portfolioId\": {",
					"      \"$id\": \"#/properties/portfolioId\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Portfolioid Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__4b3261526f43483250734f78384c3965cf48bc95bbfd7bf68b4908f97c8f3b59f5acfd\"",
					"      ]",
					"    },",
					"    \"permissions\": {",
					"      \"$id\": \"#/properties/permissions\",",
					"      \"type\": \"array\",",
					"      \"title\": \"The Permissions Schema\",",
					"      \"description\": \"An explanation about the purpose of this instance.\",",
					"      \"default\": [],",
					"      \"items\": {",
					"        \"$id\": \"#/properties/permissions/items\",",
					"        \"type\": \"object\",",
					"        \"title\": \"The Items Schema\",",
					"        \"description\": \"An explanation about the purpose of this instance.\",",
					"        \"default\": {},",
					"        \"examples\": [",
					"          {",
					"            \"permissions\": [",
					"              \"PAYM_DOM_INI\",",
					"              \"PAYM_TRANSFER_INI\",",
					"              \"PAYM_STN_ODR_INI\",",
					"              \"PAYM_INTL_INI\"",
					"            ],",
					"            \"accountId\": \"__ID__4b3261526f43483250734f78384c3965cf4dbab1755ff09f5775670adce3198e17d1b1\",",
					"            \"contractId\": \"__ID__4b3261526f43483250734f78384c3965cf4fbd0c52c6f98e68435eec4a20241839a18c\"",
					"          }",
					"        ],",
					"        \"required\": [",
					"          \"accountId\",",
					"          \"contractId\",",
					"          \"permissions\"",
					"        ],",
					"        \"properties\": {",
					"          \"accountId\": {",
					"            \"$id\": \"#/properties/permissions/items/properties/accountId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accountid Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"__ID__4b3261526f43483250734f78384c3965cf4dbab1755ff09f5775670adce3198e17d1b1\"",
					"            ]",
					"          },",
					"          \"contractId\": {",
					"            \"$id\": \"#/properties/permissions/items/properties/contractId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Contractid Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"__ID__4b3261526f43483250734f78384c3965cf4fbd0c52c6f98e68435eec4a20241839a18c\"",
					"            ]",
					"          },",
					"          \"permissions\": {",
					"            \"$id\": \"#/properties/permissions/items/properties/permissions\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The Permissions Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": [],",
					"            \"items\": {",
					"              \"$id\": \"#/properties/permissions/items/properties/permissions/items\",",
					"              \"type\": \"string\",",
					"              \"title\": \"The Items Schema\",",
					"              \"description\": \"An explanation about the purpose of this instance.\",",
					"              \"default\": \"\",",
					"              \"examples\": [",
					"                \"PAYM_DOM_INI\",",
					"                \"PAYM_TRANSFER_INI\",",
					"                \"PAYM_STN_ODR_INI\",",
					"                \"PAYM_INTL_INI\"",
					"              ]",
					"            }",
					"          }",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"accountIdDetails\", accountIdDetails);",
					"",
					"//************************************************************************************************",
					"// Schema for 'Balance scheme'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const balanceSchema =",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"availableAmount\",",
					"    \"balance\"",
					"  ],",
					"  \"properties\": {",
					"    \"availableAmount\": {",
					"      \"$id\": \"#/properties/availableAmount\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Availableamount Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/availableAmount/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/availableAmount/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0.0,",
					"          \"examples\": [",
					"            20365239.25",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"balance\": {",
					"      \"$id\": \"#/properties/balance\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Balance Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/balance/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/balance/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0.0,",
					"          \"examples\": [",
					"            20365239.25",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"balanceSchema\", balanceSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'Permission scheme'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const permissionSchema =",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"accountPermissions\"",
					"  ],",
					"  \"properties\": {",
					"    \"accountPermissions\": {",
					"      \"$id\": \"#/properties/accountPermissions\",",
					"      \"type\": \"array\",",
					"      \"title\": \"The Accountpermissions Schema\",",
					"      \"items\": {",
					"        \"$id\": \"#/properties/accountPermissions/items\",",
					"        \"type\": \"object\",",
					"        \"title\": \"The Items Schema\",",
					"        \"required\": [",
					"          \"accountId\",",
					"          \"contractId\",",
					"          \"permissions\"",
					"        ],",
					"        \"properties\": {",
					"          \"accountId\": {",
					"            \"$id\": \"#/properties/accountPermissions/items/properties/accountId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accountid Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"__ID__4b3261526f43483250734f78384c3965cf4eb38cdc28f72d342f4298166b0b84a7bfef\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"contractId\": {",
					"            \"$id\": \"#/properties/accountPermissions/items/properties/contractId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Contractid Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"__ID__4b3261526f43483250734f78384c3965cb4b99ac8b91244e464770e8894ac7b4c779\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"permissions\": {",
					"            \"$id\": \"#/properties/accountPermissions/items/properties/permissions\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The Permissions Schema\",",
					"            \"items\": {",
					"              \"$id\": \"#/properties/accountPermissions/items/properties/permissions/items\",",
					"              \"type\": \"string\",",
					"              \"title\": \"The Items Schema\",",
					"              \"default\": \"\",",
					"              \"examples\": [",
					"                \"PAYM_DOM_INI\",",
					"                \"PAYM_INTL_INI\",",
					"                \"PAYM_STN_ODR_INI\",",
					"                \"PAYM_TRANSFER_INI\"",
					"              ],",
					"              \"pattern\": \"^(.*)$\"",
					"            }",
					"          }",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"permissionSchema\", permissionSchema);",
					"",
					"",
					"//************************************************************************************************",
					"// Schema for 'Custody accounts'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const cuacsSchema =",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"cuacs\"",
					"      ],",
					"      \"properties\": {",
					"        \"cuacs\": {",
					"          \"$id\": \"#/properties/_embedded/properties/cuacs\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Cuacs Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/cuacs/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"id\",",
					"              \"custodyAccountNumber\",",
					"              \"lastChangeAt\",",
					"              \"valueCustodyCurrency\",",
					"              \"valueCustomerCurrency\",",
					"              \"valuePortfolioCurrency\",",
					"              \"yearEndValue\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__35695a31497042534976574d443565538b03820c945d6ab2c410438ef238fdba2c7e\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"custodyAccountNumber\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/custodyAccountNumber\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Custodyaccountnumber Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"771000061502\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"lastChangeAt\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/lastChangeAt\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Lastchangeat Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"2013-06-25T17:16:49\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"valueCustodyCurrency\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustodyCurrency\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Valuecustodycurrency Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustodyCurrency/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustodyCurrency/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      24558.32",
					"                    ]",
					"                  }",
					"                }",
					"              },",
					"              \"valueCustomerCurrency\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustomerCurrency\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Valuecustomercurrency Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustomerCurrency/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustomerCurrency/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      24558.32",
					"                    ]",
					"                  }",
					"                }",
					"              },",
					"              \"valuePortfolioCurrency\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valuePortfolioCurrency\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Valueportfoliocurrency Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valuePortfolioCurrency/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valuePortfolioCurrency/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      24558.32",
					"                    ]",
					"                  }",
					"                }",
					"              },",
					"              \"yearEndValue\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/yearEndValue\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Yearendvalue Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/yearEndValue/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/yearEndValue/properties/value\",",
					"                    \"type\": \"null\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": null,",
					"                    \"examples\": [",
					"                      null",
					"                    ]",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            3",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"};",
					"pm.environment.set(\"cuacsSchema\", cuacsSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'Assets details'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const assetsDetails =",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/example.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"checked\",",
					"    \"dimensions\",",
					"    \"id\",",
					"    \"name\",",
					"    \"price\",",
					"    \"tags\"",
					"  ],",
					"  \"properties\": {",
					"    \"checked\": {",
					"      \"$id\": \"/properties/checked\",",
					"      \"type\": \"boolean\",",
					"      \"title\": \"The Checked Schema\",",
					"      \"default\": false,",
					"      \"examples\": [",
					"        false",
					"      ]",
					"    },",
					"    \"dimensions\": {",
					"      \"$id\": \"/properties/dimensions\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Dimensions Schema\",",
					"      \"required\": [",
					"        \"width\",",
					"        \"height\"",
					"      ],",
					"      \"properties\": {",
					"        \"width\": {",
					"          \"$id\": \"/properties/dimensions/properties/width\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Width Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            5",
					"          ]",
					"        },",
					"        \"height\": {",
					"          \"$id\": \"/properties/dimensions/properties/height\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Height Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"id\": {",
					"      \"$id\": \"/properties/id\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        1",
					"      ]",
					"    },",
					"    \"name\": {",
					"      \"$id\": \"/properties/name\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Name Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"A green door\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"price\": {",
					"      \"$id\": \"/properties/price\",",
					"      \"type\": \"number\",",
					"      \"title\": \"The Price Schema\",",
					"      \"default\": 0.0,",
					"      \"examples\": [",
					"        12.5",
					"      ]",
					"    },",
					"    \"tags\": {",
					"      \"$id\": \"/properties/tags\",",
					"      \"type\": \"array\",",
					"      \"title\": \"The Tags Schema\",",
					"      \"items\": {",
					"        \"$id\": \"/properties/tags/items\",",
					"        \"type\": \"string\",",
					"        \"title\": \"The 0 Schema\",",
					"        \"default\": \"\",",
					"        \"examples\": [",
					"          \"home\",",
					"          \"green\"",
					"        ],",
					"        \"pattern\": \"^(.*)$\"",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"assetsDetails\", assetsDetails);",
					"//************************************************************************************************",
					"// Schema for 'DetailAssets'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const DetailAssets =",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"assets\"",
					"      ],",
					"      \"properties\": {",
					"        \"assets\": {",
					"          \"$id\": \"#/properties/_embedded/properties/assets\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Assets Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/assets/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"id\",",
					"              \"assetNumber\",",
					"              \"assetType\",",
					"              \"amount\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__4b3261526f43483250734f78384c3965cf43b264b6ab4c579325cbffc35ebda4ee4eae\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"assetNumber\": {",
					"                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/assetNumber\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Assetnumber Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"1000001704\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"assetType\": {",
					"                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/assetType\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Assettype Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"ACCOUNT\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"amount\": {",
					"                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Amount Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"USD\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      123493.65",
					"                    ]",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            20",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"DetailAssets\", DetailAssets);",
					"",
					"//************************************************************************************************",
					"// Schema for 'cuacs detail Schema' *************************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const cuacsDetSchema =",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"custodyAccountNumber\",",
					"    \"lastChangeAt\",",
					"    \"valueCustodyCurrency\",",
					"    \"valueCustomerCurrency\",",
					"    \"valuePortfolioCurrency\",",
					"    \"yearEndValue\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d443565538a54737638399ab0eef3b93ecb4eec4c5f\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"custodyAccountNumber\": {",
					"      \"$id\": \"#/properties/custodyAccountNumber\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Custodyaccountnumber Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"771000061502\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"lastChangeAt\": {",
					"      \"$id\": \"#/properties/lastChangeAt\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Lastchangeat Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2013-06-25T17:16:49\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"valueCustodyCurrency\": {",
					"      \"$id\": \"#/properties/valueCustodyCurrency\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Valuecustodycurrency Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/valueCustodyCurrency/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/valueCustodyCurrency/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0.0,",
					"          \"examples\": [",
					"            24558.32",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"valueCustomerCurrency\": {",
					"      \"$id\": \"#/properties/valueCustomerCurrency\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Valuecustomercurrency Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/valueCustomerCurrency/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/valueCustomerCurrency/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0.0,",
					"          \"examples\": [",
					"            24558.32",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"valuePortfolioCurrency\": {",
					"      \"$id\": \"#/properties/valuePortfolioCurrency\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Valueportfoliocurrency Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/valuePortfolioCurrency/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/valuePortfolioCurrency/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0.0,",
					"          \"examples\": [",
					"            24558.32",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"yearEndValue\": {",
					"      \"$id\": \"#/properties/yearEndValue\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Yearendvalue Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/yearEndValue/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/yearEndValue/properties/value\",",
					"          \"type\": \"null\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": null,",
					"          \"examples\": [",
					"            null",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"cuacsDetSchema\", cuacsDetSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'custody account positions' ********************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const cuacsPositionSchema =",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"positions\"",
					"      ],",
					"      \"properties\": {",
					"        \"positions\": {",
					"          \"$id\": \"#/properties/_embedded/properties/positions\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Positions Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/positions/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"id\",",
					"              \"amount\",",
					"              \"calculationFrom\",",
					"              \"exportTime\",",
					"              \"maturityDate\",",
					"              \"salePermitted\",",
					"              \"timeToMaturity\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__35695a31497042534976574d443565538a54737638399ab0eef3b93ecb4eec4c5f\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"amount\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/amount\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Amount Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"calculationFrom\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/calculationFrom\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Calculationfrom Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"exportTime\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/exportTime\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Exporttime Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"2019-11-04T23:11:08\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"maturityDate\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/maturityDate\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Maturitydate Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"salePermitted\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/salePermitted\",",
					"                \"type\": \"boolean\",",
					"                \"title\": \"The Salepermitted Schema\",",
					"                \"default\": false,",
					"                \"examples\": [",
					"                  false",
					"                ]",
					"              },",
					"              \"timeToMaturity\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/timeToMaturity\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Timetomaturity Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            8",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"cuacsPositionSchema\", cuacsPositionSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'accountSearch' ********************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const accountSearchSchema =",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"accountList\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"accountList\": {",
					"      \"$id\": \"#/properties/accountList\",",
					"      \"type\": \"array\",",
					"      \"title\": \"The Accountlist Schema\",",
					"      \"items\": {",
					"        \"$id\": \"#/properties/accountList/items\",",
					"        \"type\": \"object\",",
					"        \"title\": \"The Items Schema\",",
					"        \"required\": [",
					"          \"accountName\",",
					"          \"accountType\",",
					"          \"accountNumber\",",
					"          \"advisorId\",",
					"          \"bank\",",
					"          \"balances\",",
					"          \"contractId\",",
					"          \"creditInterest\",",
					"          \"currencyIsoCode\",",
					"          \"customerName\",",
					"          \"debtInterest\",",
					"          \"defaultDebtAccount\",",
					"          \"description\",",
					"          \"formattedAccountNumber\",",
					"          \"iban\",",
					"          \"id\",",
					"          \"overdraftInterest\",",
					"          \"overdraftLimit\",",
					"          \"portfolioId\",",
					"          \"permissions\"",
					"        ],",
					"        \"properties\": {",
					"          \"accountName\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/accountName\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accountname Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"1704 USD\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"accountType\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/accountType\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accounttype Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"CURRENT\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"accountNumber\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/accountNumber\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accountnumber Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"1000001704\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"advisorId\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/advisorId\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Advisorid Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"bank\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/bank\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Bank Schema\",",
					"            \"required\": [",
					"              \"bic\",",
					"              \"institutionId\",",
					"              \"name\"",
					"            ],",
					"            \"properties\": {",
					"              \"bic\": {",
					"                \"$id\": \"#/properties/accountList/items/properties/bank/properties/bic\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Bic Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"CLXNCHZZMDB\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"institutionId\": {",
					"                \"$id\": \"#/properties/accountList/items/properties/bank/properties/institutionId\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Institutionid Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"12312\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"name\": {",
					"                \"$id\": \"#/properties/accountList/items/properties/bank/properties/name\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Name Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"CLX EBS\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              }",
					"            }",
					"          },",
					"          \"balances\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/balances\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Balances Schema\",",
					"            \"required\": [",
					"              \"availableAmount\",",
					"              \"balance\"",
					"            ],",
					"            \"properties\": {",
					"              \"availableAmount\": {",
					"                \"$id\": \"#/properties/accountList/items/properties/balances/properties/availableAmount\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Availableamount Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/accountList/items/properties/balances/properties/availableAmount/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"USD\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/accountList/items/properties/balances/properties/availableAmount/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      123493.65",
					"                    ]",
					"                  }",
					"                }",
					"              },",
					"              \"balance\": {",
					"                \"$id\": \"#/properties/accountList/items/properties/balances/properties/balance\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Balance Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/accountList/items/properties/balances/properties/balance/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"USD\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/accountList/items/properties/balances/properties/balance/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      123493.65",
					"                    ]",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          },",
					"          \"contractId\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/contractId\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Contractid Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"creditInterest\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/creditInterest\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Creditinterest Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"currencyIsoCode\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/currencyIsoCode\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Currencyisocode Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"USD\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"customerName\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/customerName\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Customername Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"Harry Hasler\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"debtInterest\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/debtInterest\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Debtinterest Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"defaultDebtAccount\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/defaultDebtAccount\",",
					"            \"type\": \"boolean\",",
					"            \"title\": \"The Defaultdebtaccount Schema\",",
					"            \"default\": false,",
					"            \"examples\": [",
					"              false",
					"            ]",
					"          },",
					"          \"description\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/description\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Description Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"Foreign Currency Account\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"formattedAccountNumber\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/formattedAccountNumber\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Formattedaccountnumber Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"CH0212312001000001704\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"iban\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/iban\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Iban Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"CH0212312001000001704\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"id\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/id\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Id Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"__ID__4b3261526f43483250734f78384c3965cc48b362e94b60cd080a60990c2efce58ee3e0\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"overdraftInterest\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/overdraftInterest\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Overdraftinterest Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"overdraftLimit\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/overdraftLimit\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Overdraftlimit Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"portfolioId\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/portfolioId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Portfolioid Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"__ID__4b3261526f43483250734f78384c3965ca49b8b0f88c4c4ed50ead239f733eaef42f42\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"permissions\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/permissions\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The Permissions Schema\",",
					"            \"items\": {",
					"              \"$id\": \"#/properties/accountList/items/properties/permissions/items\",",
					"              \"type\": \"object\",",
					"              \"title\": \"The Items Schema\",",
					"              \"required\": [",
					"                \"accountId\",",
					"                \"contractId\",",
					"                \"permissions\"",
					"              ],",
					"              \"properties\": {",
					"                \"accountId\": {",
					"                  \"$id\": \"#/properties/accountList/items/properties/permissions/items/properties/accountId\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Accountid Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"__ID__4b3261526f43483250734f78384c3965cc48b362e94b60cd080a60990c2efce58ee3e0\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"contractId\": {",
					"                  \"$id\": \"#/properties/accountList/items/properties/permissions/items/properties/contractId\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Contractid Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"__ID__4b3261526f43483250734f78384c3965cf4fbd0c52c6f98e68435eec4a20241839a18c\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"permissions\": {",
					"                  \"$id\": \"#/properties/accountList/items/properties/permissions/items/properties/permissions\",",
					"                  \"type\": \"array\",",
					"                  \"title\": \"The Permissions Schema\",",
					"                  \"items\": {",
					"                    \"$id\": \"#/properties/accountList/items/properties/permissions/items/properties/permissions/items\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Items Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"PAYM_STN_ODR_INI\",",
					"                      \"PAYM_DOM_INI\",",
					"                      \"PAYM_INTL_INI\",",
					"                      \"PAYM_TRANSFER_INI\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            30",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            17",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"accountSearchSchema\", accountSearchSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'positionId details' ***************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const positionIdSchema =",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"amount\",",
					"    \"calculationFrom\",",
					"    \"exportTime\",",
					"    \"maturityDate\",",
					"    \"salePermitted\",",
					"    \"timeToMaturity\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d443565538a54737638399ab0eef3b93ecb4eec4c5f\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"amount\": {",
					"      \"$id\": \"#/properties/amount\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Amount Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"calculationFrom\": {",
					"      \"$id\": \"#/properties/calculationFrom\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Calculationfrom Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"exportTime\": {",
					"      \"$id\": \"#/properties/exportTime\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Exporttime Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2019-11-04T23:11:08\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"maturityDate\": {",
					"      \"$id\": \"#/properties/maturityDate\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Maturitydate Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"salePermitted\": {",
					"      \"$id\": \"#/properties/salePermitted\",",
					"      \"type\": \"boolean\",",
					"      \"title\": \"The Salepermitted Schema\",",
					"      \"default\": false,",
					"      \"examples\": [",
					"        false",
					"      ]",
					"    },",
					"    \"timeToMaturity\": {",
					"      \"$id\": \"#/properties/timeToMaturity\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Timetomaturity Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"positionIdSchema\", positionIdSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'transactionsId list' **************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const transactionsIdSchema =",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"transactions\"",
					"      ],",
					"      \"properties\": {",
					"        \"transactions\": {",
					"          \"$id\": \"#/properties/_embedded/properties/transactions\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Transactions Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/transactions/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"id\",",
					"              \"amount\",",
					"              \"bookedAt\",",
					"              \"bookingText\",",
					"              \"debitCreditCode\",",
					"              \"narrative\",",
					"              \"narrativeTextType\",",
					"              \"transactionKey\",",
					"              \"transactionNumber\",",
					"              \"valueDate\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__35695a31497042534976574d443565538509674406aa950ce346395913df5663780586\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"amount\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/amount\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Amount Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/amount/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/amount/properties/value\",",
					"                    \"type\": \"integer\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0,",
					"                    \"examples\": [",
					"                      200",
					"                    ]",
					"                  }",
					"                }",
					"              },",
					"              \"bookedAt\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/bookedAt\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Bookedat Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"2019-09-26\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"bookingText\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/bookingText\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Bookingtext Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"Split\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"debitCreditCode\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/debitCreditCode\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Debitcreditcode Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"DEBIT\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"narrative\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/narrative\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Narrative Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"narrativeTextType\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/narrativeTextType\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Narrativetexttype Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"transactionKey\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/transactionKey\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Transactionkey Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"900.100006.990028402\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"transactionNumber\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/transactionNumber\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Transactionnumber Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"16\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"valueDate\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/valueDate\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Valuedate Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"2019-09-26\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            3",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"transactionsIdSchema\", transactionsIdSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'transactionsId details' ***********************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const transactionsIdDetailsSchema =",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"amount\",",
					"    \"bookedAt\",",
					"    \"bookingText\",",
					"    \"debitCreditCode\",",
					"    \"narrative\",",
					"    \"narrativeTextType\",",
					"    \"transactionKey\",",
					"    \"transactionNumber\",",
					"    \"valueDate\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d4435655385046899cd9b77906150fee2f5be2c36f32c38\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"amount\": {",
					"      \"$id\": \"#/properties/amount\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Amount Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/amount/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/amount/properties/value\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            200",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"bookedAt\": {",
					"      \"$id\": \"#/properties/bookedAt\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Bookedat Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2019-09-26\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"bookingText\": {",
					"      \"$id\": \"#/properties/bookingText\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Bookingtext Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"Split\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"debitCreditCode\": {",
					"      \"$id\": \"#/properties/debitCreditCode\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Debitcreditcode Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"DEBIT\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"narrative\": {",
					"      \"$id\": \"#/properties/narrative\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Narrative Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"narrativeTextType\": {",
					"      \"$id\": \"#/properties/narrativeTextType\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Narrativetexttype Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"transactionKey\": {",
					"      \"$id\": \"#/properties/transactionKey\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Transactionkey Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"900.100006.990028402\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"transactionNumber\": {",
					"      \"$id\": \"#/properties/transactionNumber\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Transactionnumber Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"16\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"valueDate\": {",
					"      \"$id\": \"#/properties/valueDate\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Valuedate Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2019-09-26\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"transactionsIdDetailsSchema\", transactionsIdDetailsSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'portfolio schema' *****************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const portfolioSchema =",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"portfolios\"",
					"      ],",
					"      \"properties\": {",
					"        \"portfolios\": {",
					"          \"$id\": \"#/properties/_embedded/properties/portfolios\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Portfolios Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/portfolios/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"id\",",
					"              \"customerId\",",
					"              \"name\",",
					"              \"amount\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__35695a31497042534976574d443565538c1bf563cdd82c8db3cff41a82f5047a4b\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"customerId\": {",
					"                \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/customerId\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Customerid Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__35695a31497042534976574d44356553850438747409aafd55561799f639493d1665\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"name\": {",
					"                \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/name\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Name Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"77_1502 / Freddy Hinz 01\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"amount\": {",
					"                \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/amount\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Amount Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/amount/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/amount/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      259730.59",
					"                    ]",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            5",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"portfolioSchema\", portfolioSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'portfolio details schema' *****************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const portfolioDetailsSchema =",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"customerId\",",
					"    \"name\",",
					"    \"amount\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d443565538c1bf563cdd82c8db3cff41a82f5047a4b\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"customerId\": {",
					"      \"$id\": \"#/properties/customerId\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Customerid Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d44356553850438747409aafd55561799f639493d1665\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"name\": {",
					"      \"$id\": \"#/properties/name\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Name Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"77_1502 / Freddy Hinz 01\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"amount\": {",
					"      \"$id\": \"#/properties/amount\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Amount Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/amount/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/amount/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0.0,",
					"          \"examples\": [",
					"            259730.59",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"portfolioDetailsSchema\", portfolioDetailsSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'portfolio performance schema' *****************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const portfolioPerformanceSchema =",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"performancePeriod\",",
					"    \"accruedInterestBalance\",",
					"    \"accruedInterestChange\",",
					"    \"netIncome\",",
					"    \"tax\",",
					"    \"startDate\",",
					"    \"endDate\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d443565538c0365390f45bc8e11a4f9f29a255617de9b4244\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"performancePeriod\": {",
					"      \"$id\": \"#/properties/performancePeriod\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Performanceperiod Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"YTD\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"accruedInterestBalance\": {",
					"      \"$id\": \"#/properties/accruedInterestBalance\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Accruedinterestbalance Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        40",
					"      ]",
					"    },",
					"    \"accruedInterestChange\": {",
					"      \"$id\": \"#/properties/accruedInterestChange\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Accruedinterestchange Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        40",
					"      ]",
					"    },",
					"    \"netIncome\": {",
					"      \"$id\": \"#/properties/netIncome\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Netincome Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        141",
					"      ]",
					"    },",
					"    \"tax\": {",
					"      \"$id\": \"#/properties/tax\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Tax Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        47",
					"      ]",
					"    },",
					"    \"startDate\": {",
					"      \"$id\": \"#/properties/startDate\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Startdate Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2019-01-01\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"endDate\": {",
					"      \"$id\": \"#/properties/endDate\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Enddate Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2019-12-06\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"portfolioPerformanceSchema\", portfolioPerformanceSchema);",
					"",
					"",
					"//************************************************************************************************",
					"// Schema for 'transaction list schema' *****************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const transactionsListSchema =",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"transactionGroups\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"transactionGroups\": {",
					"      \"$id\": \"#/properties/transactionGroups\",",
					"      \"type\": \"array\",",
					"      \"title\": \"The Transactiongroups Schema\",",
					"      \"items\": {",
					"        \"$id\": \"#/properties/transactionGroups/items\",",
					"        \"type\": \"object\",",
					"        \"title\": \"The Items Schema\",",
					"        \"required\": [",
					"          \"balance\",",
					"          \"date\",",
					"          \"transactions\"",
					"        ],",
					"        \"properties\": {",
					"          \"balance\": {",
					"            \"$id\": \"#/properties/transactionGroups/items/properties/balance\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Balance Schema\",",
					"            \"required\": [",
					"              \"currencyIsoCode\",",
					"              \"value\"",
					"            ],",
					"            \"properties\": {",
					"              \"currencyIsoCode\": {",
					"                \"$id\": \"#/properties/transactionGroups/items/properties/balance/properties/currencyIsoCode\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Currencyisocode Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"CHF\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"value\": {",
					"                \"$id\": \"#/properties/transactionGroups/items/properties/balance/properties/value\",",
					"                \"type\": \"number\",",
					"                \"title\": \"The Value Schema\",",
					"                \"default\": 0.0,",
					"                \"examples\": [",
					"                  5451805.25",
					"                ]",
					"              }",
					"            }",
					"          },",
					"          \"date\": {",
					"            \"$id\": \"#/properties/transactionGroups/items/properties/date\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Date Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"2019-11-29\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"transactions\": {",
					"            \"$id\": \"#/properties/transactionGroups/items/properties/transactions\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The Transactions Schema\",",
					"            \"items\": {",
					"              \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items\",",
					"              \"type\": \"object\",",
					"              \"title\": \"The Items Schema\",",
					"              \"required\": [",
					"                \"id\",",
					"                \"accountId\",",
					"                \"valutaDate\",",
					"                \"bookingDate\",",
					"                \"booked\",",
					"                \"amount\",",
					"                \"creditorAccount\",",
					"                \"debtorAccount\",",
					"                \"end2endID\",",
					"                \"referenceNumber\",",
					"                \"bookingText\",",
					"                \"referenceText\"",
					"              ],",
					"              \"properties\": {",
					"                \"id\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/id\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Id Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"__ID__4b3261526f43483250734f78384c3965cc49b2e4f7cbe47097468e80074831cef8013b46\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"accountId\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/accountId\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Accountid Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"__ID__4b3261526f43483250734f78384c3965cf4aba2d610eb44b9e8acefccdfc6fdeabe3a6\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"valutaDate\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/valutaDate\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Valutadate Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"2019-11-29\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"bookingDate\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/bookingDate\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Bookingdate Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"2019-11-29\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"booked\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/booked\",",
					"                  \"type\": \"boolean\",",
					"                  \"title\": \"The Booked Schema\",",
					"                  \"default\": false,",
					"                  \"examples\": [",
					"                    true",
					"                  ]",
					"                },",
					"                \"amount\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/amount\",",
					"                  \"type\": \"object\",",
					"                  \"title\": \"The Amount Schema\",",
					"                  \"required\": [",
					"                    \"currencyIsoCode\",",
					"                    \"value\"",
					"                  ],",
					"                  \"properties\": {",
					"                    \"currencyIsoCode\": {",
					"                      \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/amount/properties/currencyIsoCode\",",
					"                      \"type\": \"string\",",
					"                      \"title\": \"The Currencyisocode Schema\",",
					"                      \"default\": \"\",",
					"                      \"examples\": [",
					"                        \"CHF\"",
					"                      ],",
					"                      \"pattern\": \"^(.*)$\"",
					"                    },",
					"                    \"value\": {",
					"                      \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/amount/properties/value\",",
					"                      \"type\": \"integer\",",
					"                      \"title\": \"The Value Schema\",",
					"                      \"default\": 0,",
					"                      \"examples\": [",
					"                        929012",
					"                      ]",
					"                    }",
					"                  }",
					"                },",
					"                \"creditorAccount\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/creditorAccount\",",
					"                  \"type\": \"null\",",
					"                  \"title\": \"The Creditoraccount Schema\",",
					"                  \"default\": null,",
					"                  \"examples\": [",
					"                    null",
					"                  ]",
					"                },",
					"                \"debtorAccount\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/debtorAccount\",",
					"                  \"type\": \"null\",",
					"                  \"title\": \"The Debtoraccount Schema\",",
					"                  \"default\": null,",
					"                  \"examples\": [",
					"                    null",
					"                  ]",
					"                },",
					"                \"end2endID\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/end2endID\",",
					"                  \"type\": \"null\",",
					"                  \"title\": \"The End2endid Schema\",",
					"                  \"default\": null,",
					"                  \"examples\": [",
					"                    null",
					"                  ]",
					"                },",
					"                \"referenceNumber\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/referenceNumber\",",
					"                  \"type\": \"null\",",
					"                  \"title\": \"The Referencenumber Schema\",",
					"                  \"default\": null,",
					"                  \"examples\": [",
					"                    null",
					"                  ]",
					"                },",
					"                \"bookingText\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/bookingText\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Bookingtext Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"ESR Payment Entry  10000019\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"referenceText\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/referenceText\",",
					"                  \"type\": \"null\",",
					"                  \"title\": \"The Referencetext Schema\",",
					"                  \"default\": null,",
					"                  \"examples\": [",
					"                    null",
					"                  ]",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            189",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            19",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"transactionsListSchema\", transactionsListSchema);",
					"",
					"",
					"/* function for getting custody accounts*/",
					"postman.setGlobalVariable(\"getCustodyAccounts\", () => {",
					"  pm.sendRequest({",
					"    url: `${pm.environment.get(\"env_assets\")}/assets/cuacs/${pm.environment.get(\"tenantId_assets\")}/v1/cuacs`,",
					"    method: \"GET\",",
					"    header: {",
					"      'Content-Type': 'application/json; charset=UTF-8',",
					"      'Accept': 'application/json, application/hal+json',",
					"      'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"    },",
					"    body: {}",
					"  }, function (err, res) {",
					"    if (err) {",
					"      console.log(err ? err : res.json());",
					"    } else {",
					"      console.log(res.json());",
					"      pm.environment.set(\"_tmp_cuacsId\", res.json()._embedded.cuacs[0].id);",
					"      console.log(\"Custody account ID: \" + pm.environment.get(\"_tmp_cuacsId\"));",
					"    }",
					"  });",
					"});",
					"",
					"",
					"/* function for getting positions by custody account*/",
					"postman.setGlobalVariable(\"getPositionsByCustodyAccount\", () => {",
					"  pm.sendRequest({",
					"    url: `${pm.environment.get(\"env_assets\")}/assets/cuacs/${pm.environment.get(\"tenantId_assets\")}/v1/cuacs/${pm.environment.get(\"_tmp_cuacsId\")}/positions`,",
					"    method: \"GET\",",
					"    header: {",
					"      'Content-Type': 'application/json; charset=UTF-8',",
					"      'Accept': 'application/json, application/hal+json',",
					"      'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"    },",
					"    body: {}",
					"  }, function (err, res) {",
					"    if (err) {",
					"      console.log(err ? err : res.json());",
					"    } else {",
					"      console.log(res.json());",
					"      pm.environment.set(\"_tmp_positionsId\", res.json()._embedded.positions[0].id);",
					"      console.log(\"Position ID: \" + pm.environment.get(\"_tmp_positionsId\"));",
					"    }",
					"  });",
					"});",
					"",
					"",
					"",
					"/* function for getting transactions by custody account*/",
					"postman.setGlobalVariable(\"getTransactionsByCustodyAccount\", () => {",
					"  pm.sendRequest({",
					"    url: `${pm.environment.get(\"env_assets\")}/assets/cuacs/${pm.environment.get(\"tenantId_assets\")}/v1/cuacs/${pm.environment.get(\"_tmp_cuacsId\")}/transactions`,",
					"    method: \"GET\",",
					"    header: {",
					"      'Content-Type': 'application/json; charset=UTF-8',",
					"      'Accept': 'application/json, application/hal+json',",
					"      'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"    },",
					"    body: {}",
					"  }, function (err, res) {",
					"    if (err) {",
					"      console.log(err ? err : res.json());",
					"    } else {",
					"      console.log(res.json());",
					"      pm.environment.set(\"_tmp_transactionsId\", res.json()._embedded.transactions[0].id);",
					"      console.log(\"Transaction ID: \" + pm.environment.get(\"_tmp_transactionsId\"));",
					"    }",
					"  });",
					"});",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "6a03fe77-852d-48e1-bcc1-8dbfd6bbbe5e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "9073d776-5d06-42cd-9959-9afa61fedb76",
			"key": "EPIC",
			"value": "PRODUCT-6323",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}