{
	"info": {
		"_postman_id": "4d73b0f6-05eb-4156-b2ca-871b23bb06f1",
		"name": "MODULE: Assets (Bogdan)",
		"description": "Asset API:\n\n- Custody account API\n- Assets account\n- Portfolio API\n \nGlobal functions:\n- generateAccessToken //generate access token\n- assetsSearchFunction //list accounts, stores {{_tmp_accountId}}, {{_tmp_accountId2}}, {{_tmp_accountIdAlias}}, \n\t{{_tmp_accountNumber1}}, {{_tmp_accountNumber2}}, {{_tmp_iban1}}, {{_tmp_iban2}}, {{_tmp_id1}}, {{_tmp_id2}} and  {{_tmp_contractId}} \n- portfolioRequest //lists portfolios, stores {{_tmp_customerId}} and {{_tmp_portfolioId}}\n- getCustodyAccounts //list custody accounts, stores {{_tmp_cuacsId}}\n- getPositionsByCustodyAccount //list positions for custody account, stores {{_tmp_positionsId}}\n- getTransactionsByCustodyAccount //list transactions for custody account, stores {{_tmp_transactionsId}}\n- getAssetsList // lisls assets for portfolio, stores {{_tmp_assetsId}}",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "#INIT",
			"item": [
				{
					"name": "_Test session",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1ec80ce1-d85d-4bc7-82da-8d87c9070aaa",
								"exec": [
									"//reset global variables for controling execution flow",
									"eval(globals.cleanup)();",
									"//clear list of executed TestRail tests",
									"pm.environment.set(\"testRailTestsInRun\", \"\");",
									"",
									"//specify list of tests to be executed in exact order",
									"//const testsScope = \"Full\"; [Full|Core|Full+TestRail]",
									"let testsScope = data.testsScope;",
									"//console.log(testsScope); ",
									"",
									"switch (testsScope) {",
									"    case \"Full\":",
									"        var testSession = [",
									"            \"_Generate access token K8S\",",
									"            \"Accounts_Search (C41736193)\",",
									"            \"Accounts_Search_BIC (C41939550)\",",
									"            \"Accounts_Search_contract iban desc (C38950549)\",",
									"            \"Accounts_Search_contract iban asc (C38950548)\",",
									"            \"Accounts_Search_Account_Number (C37972701)\",",
									"            \"Accounts_Search_Multiple_Names (C38950539)\",",
									"            \"Accounts_Search_AccountType_Current (C38950541)\",",
									"            \"Accounts_Search_AccountType_SAVINGS (C38950542)\",",
									"            \"Accounts_Search_Multiple_Account_Number (C38950540)\",",
									"            \"Accounts_Search_AccountType_Multiple (C41083339)\",",
									"            \"Accounts_Search_AccountType_Other (C41083337)\",",
									"            \"Accounts_Search_iban (C38950543)\",",
									"            \"Accounts_Search_multiple_iban (C38950544)\",",
									"            \"Accounts_Search_contractId (C38950547)\",",
									"            \"List of custody accounts (C41736189)\",",
									"            \"List of portfolios (C43024137)\",",
									"            \"Portfolio details (C43024139)\",",
									"            \"Portfolio performance details (C43181629)\",",
									"            \"Portfolio assets details (C43181622)\",",
									"            \"Maturity details (C43181624)\",",
									"            \"Check proper custody account (C41853576)\",",
									"            \"Check proper custody account searched by PortfolioId (C41853577)\",",
									"            \"Custody account details (C41853582)\",",
									"            \"Search_by_startdate (C37786354)\",",
									"            \"Order_by_amount_asc (C37972704)\",",
									"            \"Order_by_amount_desc (C38719010)\",",
									"            \"Order_by_multiple_criteria (C38763407)\",",
									"            \"Transaction details search by amountForm (C37905040)\",",
									"            \"Transaction details search by amountTo (C37905041)\",",
									"            \"Transaction details search by amountTo-amountFrom (C37905042)\",",
									"            \"Individual transaction (C33706455)\",",
									"            \"Checking pagination (C47473979)\",",
									"            \"Transaction_search overview (C38763410)\",",
									"            \"AccountId Transactions 400 (C38763416)\",",
									"            \"AccountId Transactions 401 (C38763419)\",",
									"            \"set new alias (C37905058)\",",
									"            \"update alias (C37905064)\",",
									"            \"delete alias (C37905066)\",",
									"            \"AccountId Permissions (C36212106)\",",
									"            \"AccountId Permissions 400 (C38778991)\",",
									"            \"AccountId Permissions 401 (C38920771)\",",
									"            \"INCOMING transaction flow (C37905043)\",",
									"            \"OUTGOING transaction flow (C37905044)\",",
									"            \"BOTH transaction flow (C37905045)\",",
									"            \"BOTH transaction type (C37905048)\",",
									"            \"BOOKED transaction type (C37905046)\",",
									"            \"UNBOOKED transaction type (C37905047)\",",
									"            \"AccountId Balance (C35075337)\",",
									"            \"AccountId Balance 400 (C38920909)\",",
									"            \"AccountId Balance 401 (C38920911)\",",
									"            \"Search by accountName (C37949168)\",",
									"            \"List of custody accounts (C41736189)\",",
									"            \"List of portfolios (C43024137)\",",
									"            \"Portfolio details (C43024139)\",",
									"            \"Portfolio performance details (C43181629)\",",
									"            ",
									"            \"Check proper custody account (C41853576)\",",
									"            ",
									"            \"Custody account details (C41853582)\"",
									"            ];",
									"        break;",
									"    case \"Core\":",
									"        var testSession = [",
									"            \"List of custody accounts (C41736189)\",",
									"            \"Custody account position list (C41853583)\",",
									"            \"Custody account position details (C42065196)\",",
									"            \"Get transactions for cuacsId (C42065197)\",",
									"            \"Custody account details (C41853582)\",",
									"            \"Custody account transactions details (C43024136)\",",
									"            \"Account_Search (C41736193)\",",
									"            \"Account_Search_Multiple_criteria_iban_asc (C38950548)\",",
									"            \"Account_Search_Multiple_criteria_iban_desc (C38950549)\",",
									"            \"Account_Search_BIC (C41939550)\",",
									"            \"Account_Search_Account number (C37972701)\",",
									"            \"Account_Search_Multiple names (C38950539)\",",
									"            \"Account_Search_Multiple_Account_number (C38950540)\",",
									"            \"Account_Search_AccountType_Current (C38950541)\",",
									"            \"Account_Search_AccountType_SAVINGS (C38950542)\",",
									"            \"AccountId_Search_startDate&endDate (C379050538)\",",
									"            \"Account_Search_AccountType_Multiple (C41083339)\",",
									"            \"Account_Search_AccountType_Other (C41083337)\",",
									"            \"Account_Search_iban (C38950543)\",",
									"            \"Account_Search_multiple_iban (C38950544)\",",
									"            \"Account_Search_ContractId (C38950547)\",",
									"            \"Account_Search_account_Name (C37949168)\",",
									"            \"Account_Search_id (C38950545)\",            ",
									"            \"AccountId Transaction Search (C37972704)\",",
									"            \"AccountId Transaction Search Overview\",",
									"            \"Get Portfolio List (C43024137)\",",
									"            \"Get Portfolio Details List (C43034139)\",",
									"            \"Get Assets List (C43181622)\",",
									"            \"Get Assets List Details\",",
									"            \"Get Maturity  List (C43181624)\",",
									"            \"Get Performance Details (C43181629)\",",
									"            \"INCOMING transaction flow (C37905043)\",",
									"            \"OUTGOING transaction flow (C37905044)\",",
									"            \"BOTH transaction flow (C37905045)\",",
									"            \"BOTH transaction type (C37905048)\",",
									"            \"BOOKED transaction type (C37905046)\",",
									"            \"UNBOOKED transaction type (C37905047)\"",
									"            ];",
									"        break;",
									"    case \"ToDo\":",
									"        var testSession = [",
									"            \"get_single_transaction\",",
									"            \"Portfolio assets details (C43181622)\",",
									"            \"Maturity details (C43181624)\",",
									"            \"Check proper custody account searched by PortfolioId (C41853577)\"",
									"            ];",
									"        break;",
									"    case \"TestRailClean\":",
									"        var testSession = [",
									"            \"_Test session close\"",
									"        ];",
									"        break;",
									"    default:",
									"        throw new Error(\"No tests selected for execution!\")",
									"}",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(testSession, \"testSession\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2397ade9-22e0-401c-a4a0-b4695c38e910",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "_Generate access token K8S",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0d2fecce-b299-40de-990a-67fbfb89f840",
								"exec": [
									"var requestsToRun = [",
									"        \"getAuthTestTokenK8S\"",
									"    ]; ",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "67250e34-1944-4e78-8e2c-f7a95c506087",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "Assets",
					"item": [
						{
							"name": "Account Search (C41736193)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "649c3bbd-a197-4e41-818e-e45eb261830e",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema is validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Save values in the environment variables\r",
											"    if (pm.response.code === 200) {\r",
											"        pm.environment.set(\"_tmp_accountId\", jsonData.accountList[jsonData.page.totalElements - 1].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_accountId\");\r",
											"    }\r",
											"    if (pm.response.code === 200) {\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"        pm.environment.set(\"_tmp_accountId2\", jsonData.accountList[1].id);\r",
											"        pm.environment.set(\"_tmp_accountIdAlias\", jsonData.accountList[2].id);\r",
											"        pm.environment.set(\"_tmp_accountNumber1\", jsonData.accountList[0].accountNumber);\r",
											"        pm.environment.set(\"_tmp_accountNumber2\", jsonData.accountList[1].accountNumber);\r",
											"        pm.environment.set(\"_tmp_iban1\", jsonData.accountList[0].iban);\r",
											"        pm.environment.set(\"_tmp_iban2\", jsonData.accountList[1].iban);\r",
											"        pm.environment.set(\"_tmp_id1\", jsonData.accountList[0].id);\r",
											"        pm.environment.set(\"_tmp_id2\", jsonData.accountList[1].id);\r",
											"        pm.environment.set(\"_tmp_contractId\", jsonData.accountList[0].permissions[0].contractId);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_accountId2\");\r",
											"        pm.environment.unset(\"_tmp_accountIdAlias\");\r",
											"        pm.environment.unset(\"_tmp_accountNumber1\");\r",
											"        pm.environment.unset(\"_tmp_accountNumber2\");\r",
											"        pm.environment.unset(\"_tmp_iban1\");\r",
											"        pm.environment.unset(\"_tmp_iban2\");\r",
											"        pm.environment.unset(\"_tmp_id1\");\r",
											"        pm.environment.unset(\"_tmp_id2\");\r",
											"        pm.environment.unset(\"_tmp_contractId\");\r",
											"    }\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b53b1a81-e93b-4465-9cbf-8be586b9a127",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=30",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "30"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search Multiple criteria iban asc (C38950548)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fdfbd010-aecc-489f-85cc-349c90d3f30e",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account number\r",
											"    result = result && (jsonData.accountList[0].iban < jsonData.accountList[1].iban);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5af94279-7df1-45bd-a3c4-d87f025ff6b7",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"orderBy\": [\r\n{\r\n\"field\": \"IBAN\",\r\n\"sortOrder\": \"ASC\"\r\n}\r\n],\r\n\"criteria\": {\r\n\"iban\": [\r\n\"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"\r\n]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search Multiple criteria iban desc (C38950549)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cbd64399-b67d-4cee-83e0-e48f4bb94970",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account order\r",
											"    result = result && (jsonData.accountList[0].iban > jsonData.accountList[1].iban);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0cbff7a8-9e52-4580-9df3-18ddc8ffbbf7",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"orderBy\": [\r\n{\r\n\"field\": \"IBAN\",\r\n\"sortOrder\": \"DESC\"\r\n}\r\n],\r\n\"criteria\": {\r\n\"iban\": [\r\n\"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"\r\n]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search BIC (C41939550)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ca86756-fa41-48cd-9488-84abe9c82f60",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let bic = \"CLXNCHZZMDB\";\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper BIC\r",
											"    result = result && (jsonData.accountList[0].bank.bic === bic);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0b14a8ac-7411-4306-9d3e-4603dc658484",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=30",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "30"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search Account number (C37972701)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aec858c8-b90d-4199-9192-4aed94e40927",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accNumber = pm.environment.get(\"_tmp_accountNumber1\")\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account number\r",
											"    result = result && (jsonData.accountList[0].accountNumber === accNumber);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1c72d0bb-4b76-4dfc-95c1-bdc3db1247e0",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\n    \"accountNumber\": [\n      {{_tmp_accountNumber1}}\n    ]\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search Multiple names (C38950539)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "078894bc-b63b-4cad-b97d-fedd5da8c48f",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.transactionGroups === undefined || jsonData.transactionGroups.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accName = \"1704 USD\";\r",
											"    let accName1 = \"1501 CHF\";\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account name\r",
											"    result = result && (jsonData.accountList[0].accountName === accName);\r",
											"    result = result && (jsonData.accountList[1].accountName === accName1);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5df44927-fdbb-4e29-a0ad-38194201a064",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountName\": [\r\n      \"1704 USD\",\"1501 CHF\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search Multiple Account number (C38950540)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69cd2c9b-68b2-4969-b7d9-0def1e75db9f",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accNumber1 = pm.environment.get(\"_tmp_accountNumber1\")\r",
											"    let accNumber2 = pm.environment.get(\"_tmp_accountNumber2\")\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account number\r",
											"    result = result && (jsonData.accountList[0].accountNumber === accNumber1);\r",
											"    result = result && (jsonData.accountList[1].accountNumber === accNumber2);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "15ffcf2b-c332-40e6-890f-206f21e3fa3c",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountNumber\": [\r\n      {{_tmp_accountNumber1}},{{_tmp_accountNumber2}}\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search AccountType Current (C38950541)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bb6017bd-e060-4d2e-9914-b0a76a194f02",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType = \"CURRENT\";\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account type   \r",
											"    result = result && (jsonData.accountList[0].accountType === accType);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2715a2e8-8f11-4bcf-aa4a-2eb406d09ee0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"CURRENT\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search AccountType SAVINGS (C38950542)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "414eb151-6f12-40ab-9909-83afc40349b7",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.transactionGroups === undefined || jsonData.transactionGroups.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType = \"SAVINGS\";\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account type\r",
											"    result = result && (jsonData.accountList[0].accountType === accType);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "aa2ce189-91e7-4973-8d6f-fed6cc32a5c7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"SAVINGS\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search startDate&endDate (C379050538)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fa79500-24ce-4c40-b675-96d2ac1b16b5",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8380d409-385a-4953-bbd4-8cf0adf78894",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search AccountType Multiple (C41083339)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "97c924bf-551a-4e8e-8f1f-af546b05f15b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e679cbcb-c34e-40ed-89ee-2bc494ec157c",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType1 = \"CURRENT\";\r",
											"    let accType2 = \"OTHER\";\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account types\r",
											"    var list=jsonData.accountList;\r",
											"    for(var i=0; i<list.length;i++){\r",
											"        if(list[i].accountType!=accType1 && list[i].accountType!=accType2){\r",
											"            pm.expect(false).to.be.eql(true);\r",
											"        }\r",
											"    }\r",
											"\r",
											" /*   result = result && (jsonData.accountList[0].accountType === accType1);\r",
											"    result = result && (jsonData.accountList[1].accountType === accType2);\r",
											"    pm.expect(result).to.be.eql(true);*/\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"OTHER\",\"CURRENT\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search AccountType Other (C41083337)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ea72fdc-54b7-45c2-8264-f58394330647",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType = \"OTHER\";\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account type\r",
											"    result = result && (jsonData.accountList[0].accountType === accType);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9311390f-ce83-4a01-8122-0bd12c5004ea",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"OTHER\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search iban (C38950543)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f4ae2b0-9437-455e-a437-0a8cca32d46b",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let iban = pm.environment.get(\"_tmp_iban1\")\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account iban\r",
											"    result = result && (jsonData.accountList[0].iban === iban);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "835a2613-a145-4c71-a64b-abc481f431ab",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"iban\": [\r\n      \"{{_tmp_iban1}}\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search multiple iban (C38950544)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1c9afed-7b6b-4c7e-88d5-7f12e3c6613d",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let iban1 = pm.environment.get(\"_tmp_iban1\")\r",
											"    let iban2 = pm.environment.get(\"_tmp_iban2\")\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account ibans\r",
											"    result = result && (jsonData.accountList[0].iban === iban1);\r",
											"    result = result && (jsonData.accountList[1].iban === iban2);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8ba58033-f30f-4a85-85a3-f76547890da7",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"iban\": [\r\n      \"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"\r\n    ]\r\n\r\n}\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search ContractId (C38950547)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "410e21e3-5495-463f-9a42-f9d4c647223f",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    // store last securityNumber as environment variable\r",
											"    if (pm.response.code === 200) {\r",
											"       var jsonData = JSON.parse(responseBody);\r",
											"       pm.environment.set(\"_tmp_accountId\", jsonData.accountList[0].id);\r",
											"      } else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"    }    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "49079361-6c4f-4f4c-848f-f8203cf2974b",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"contractId\": [\r\n      \"{{_tmp_contractId}}\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search account Name (C37949168)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "61151cd5-81b8-4585-b21f-b5aead426c4a",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.transactionGroups === undefined || jsonData.transactionGroups.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accName = \"1704 USD\";\r",
											"    let result = true;\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Returned proper account name\r",
											"    result = result && (jsonData.accountList[0].accountName === accName);\r",
											"    pm.expect(result).to.be.eql(true);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "303fe61e-95e1-4605-8cdb-e0885ab7f7bc",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountName\": [\r\n      \"1704 USD\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Search id (C38950545)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "261708fe-a417-44e3-97c0-bf8cd207fc0a",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c5268779-6b16-4d75-80b0-d30eaf9e50cd",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"id\": [\r\n      \"{{_tmp_id2}}\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId Transaction Search (C37972704)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cfc4accc-3a1f-4c3d-8c1f-471d86d88cf6",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.transactionGroups === undefined || jsonData.transactionGroups.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of transactions is retrieved (based on criteria specified) and response schema is validated\", function () {\r",
											"\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Status is ok\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    var schemaValidationPassed = true;\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"    if (pm.response.code === 200) {\r",
											"        pm.environment.set(\"_tmp_transactionsId\",jsonData.transactionGroups[0].transactions[0].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_transactionsId\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5af3a8cb-acb8-415b-a2df-ff728fd07392",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2020-06-01\"\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId Transaction Search Overview",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6813d6b9-8319-453e-b404-30f33f34b6ad",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData.transactionGroups === undefined || jsonData.transactionGroups.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of transactions is retrieved (based on criteria specified) and response schema is validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"  \r",
											"    //Validate the response code \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b5e929d8-5818-439d-9da2-75dc7d351b38",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"orderBy\": [{\r\n        \"field\": \"AMOUNT\",\r\n        \"sortOrder\": \"DESC\"\r\n    }],\r\n    \"criteria\": {\r\n        \"startDate\": \"2020-01-01\",\r\n        \"endDate\": \"2020-06-01\",\r\n        \"transactionFlow\": \"OUTGOING\",\r\n        \"transactionType\": \"BOTH\",\r\n        \"amountFrom\": \"999.00\",\r\n        \"amountTo\": \"51001.01\"\r\n    }\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Portfolios",
					"item": [
						{
							"name": "Get Portfolio List (C43024137)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e7e198f0-1117-4bb9-a8b4-a6e7fc44e80d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "de884037-2d6a-4276-9b97-7d91365a0822",
										"exec": [
											"//Validate results\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of portfolios and response schema is validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    var schemaValidationPassed = true;\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"    \r",
											"    if (pm.response.code === 200) {\r",
											"        var jsonData = JSON.parse(responseBody)._embedded;\r",
											"        pm.environment.set(\"_tmp_portfolioId\", jsonData.portfolios[1].id);\r",
											"        pm.environment.set(\"_tmp_customerId\", jsonData.portfolios[1].customerId);\r",
											"    \r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_portfolioId\");\r",
											"        pm.environment.unset(\"_tmp_customerId\");\r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Portfolio Details List (C43034139)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e49fdd1-981f-4509-9753-bd7d0bc781c0",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b8a6df05-c2b7-489d-bb6f-46d1e7e3c171",
										"exec": [
											"//Validate results\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of portfolio details and response schema is validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioDetailsSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"    //Validate that the orders belong to the appropriate customer\r",
											"    let portId = pm.environment.get(\"_tmp_portfolioId\");\r",
											"    jsonData.id === portId\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Assets List (C43181622)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e252e696-a7a2-4fcb-8426-e178456aa15e",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fbe75a44-004b-40cf-8349-83fedad43bd3",
										"exec": [
											"//Validate results\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"assetsList\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"    if (pm.response.code === 200) {\r",
											"        pm.environment.set(\"_tmp_assetsId\", jsonData._embedded.assets[0].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_assetsId\");\r",
											"    }\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/assets",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"assets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Assets List Details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4f875c31-5604-46c4-be21-758f3d4f980e",
										"exec": [
											"eval(globals.portfolioRequest)();",
											"setTimeout(function(){eval(globals.getAssetsList)();}, 2000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8c5c5d40-d8ec-4045-870e-aa03024e0502",
										"exec": [
											"//Validate results\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"assetsListDetails\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/assets/{{_tmp_assetsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"assets",
										"{{_tmp_assetsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Maturity  List (C43181624)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4adfa2c2-3dad-4ba8-94af-d5b11d22354a",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a5714f4d-db67-46fe-a882-6b41f586b490",
										"exec": [
											"//Validate results\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"let noData = (jsonData._embedded.maturities === undefined || jsonData._embedded.maturities.length === 0);\r",
											"(noData ? pm.test.skip : pm.test)(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    var schemaValidationPassed = true;\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioDetailsSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/maturities",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"maturities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Performance Details (C43181629)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cbfc85c6-8387-4390-ba42-d96e6c0da01f",
										"exec": [
											"eval(globals.portfolioRequest)(); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "73cf6a47-41b0-49e8-bb12-e66e28aeb213",
										"exec": [
											"//Validate results\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"\r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate the schema\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioPerformanceSchema\", jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, application/hal+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/performance",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"performance"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Custody accounts",
					"item": [
						{
							"name": "List of custody accounts (C41736189)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c16a44bf-77b6-46d6-b65c-c9f0c448fa4a",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsSchema = pm.environment.get(\"cuacsSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"    //Save custody account id as environment variable\r",
											"    if (pm.response.code === 200) {\r",
											"        pm.environment.set(\"_tmp_cuacsId\",jsonData._embedded.cuacs[0].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_cuacsId\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7a8bb28b-1baf-4070-b6ba-c77a450488c0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Custody account position list (C41853583)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7fe08dc-281a-4f7e-8e7f-f048d240ff18",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Position details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsPositionSchema = pm.environment.get(\"cuacsPositionSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsPositionSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"\r",
											"   \r",
											"    //Save position id as environment variable\r",
											"    if (pm.response.code === 200) {\r",
											"        pm.environment.set(\"_tmp_positionsId\",jsonData._embedded.positions[0].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_positionsId\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5733df49-4b1c-40b4-885e-3415d456b63f",
										"exec": [
											"eval(globals.getCustodyAccounts)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/positions",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Custody account position details (C42065196)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6464819c-5a13-4165-9061-e6affa04355c",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Position details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var positionIdSchema = pm.environment.get(\"positionIdSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"positionIdSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true)\r",
											"    \r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d6f38792-db7d-468f-9cea-994cf1adc705",
										"exec": [
											"eval(globals.getCustodyAccounts)();",
											"setTimeout(function(){eval(globals.getPositionsByCustodyAccount)();}, 2000);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/positions/{{_tmp_positionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"positions",
										"{{_tmp_positionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get transactions for cuacsId (C42065197)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57699fba-1ad0-4c3c-a8d7-41d56e17c7da",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Transactions details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsPositionSchema = pm.environment.get(\"cuacsPositionSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"   \r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsIdSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"   \r",
											"    //Save transaction id as environament variable\r",
											"    if (pm.response.code === 200) {\r",
											"        pm.environment.set(\"_tmp_transactionsId\",jsonData._embedded.transactions[0].id);\r",
											"    } else {\r",
											"        pm.environment.unset(\"_tmp_transactionsId\");\r",
											"    }\r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1095691b-d59d-4524-afa8-d551b713812a",
										"exec": [
											"eval(globals.getCustodyAccounts)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/transactions/",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"transactions",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Custody account details (C41853582)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc45fd0b-da0a-49b6-b3f4-cb03028c53ad",
										"exec": [
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"    let cuacsId = pm.environment.get(\"_tmp_cuacsId\");",
											"    let result = true;",
											"    ",
											"    //Validate if execution status is correct",
											"    pm.response.to.have.status(200);",
											"    ",
											"    //Validate if response schema is correct",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsDetSchema\", jsonData);",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    ",
											"    //Validate if custody account is correct in the response",
											"    result = result && (jsonData.id === cuacsId);",
											"    pm.expect(result).to.be.eql(true);",
											"});",
											"",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b739c3cc-93c1-4166-aff5-23f7198cffd5",
										"exec": [
											"eval(globals.getCustodyAccounts)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Custody account transactions details (C43024136)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2dce57ab-c292-4b25-b6dd-d05877094c0c",
										"exec": [
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Transactions details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var positionIdSchema = pm.environment.get(\"positionIdSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    //Validate if execution status is correct\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    //Validate if response schema is correct\r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsIdDetailsSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "529512a0-3b1e-47a6-ba6e-a38a2e8da56a",
										"exec": [
											"eval(globals.getCustodyAccounts)();",
											"setTimeout(function(){eval(globals.getTransactionsByCustodyAccount)();}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/transactions/{{_tmp_transactionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"transactions",
										"{{_tmp_transactionsId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2ca5f7fc-1969-4317-8ca2-84e4dccd025f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1c9afe36-296d-41fa-bf10-93b8e40d6361",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Transactions",
					"item": [
						{
							"name": "INCOMING transaction flow (C37905043)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9233037d-1bd0-4e18-bf60-ad17c959f7d0",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of transactions with flow 'INCOMING' is retrieved and response schema validated\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dd36f5cc-5b1e-4f92-bba3-ac1330a23a1d",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionFlow\":\"INCOMING\"\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OUTGOING transaction flow (C37905044)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8cb6170-af11-48e0-890c-a6aaaa95c1ef",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List transactions with flow 'OUTGOING' is retrieved and response schema is validated\", function () {\r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4db93016-8f9b-4131-bf98-57d99b2f4f5d",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionFlow\":\"OUTGOING\"\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BOTH transaction flow (C37905045)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8716587f-a208-455b-8b6e-4c587b232a94",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of transactions with flow 'BOTH' is retrieved and response schema is validated\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "79d9471b-ee24-4d82-8d27-7dd6025f4c46",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionFlow\":\"BOTH\"\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BOTH transaction type (C37905048)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4379afbf-cdbe-457d-a0c0-be4b01e77c2e",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of transactions with type 'BOTH' is retrieved and response schema is validated\", function () {\r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6db835ee-628c-4861-a06c-4b08c96e9401",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionType\":\"BOTH\"\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BOOKED transaction type (C37905046)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c57b05c-f7ac-463d-b299-02cf1f85cde4",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of transactions with type 'BOOKED' is retrieved and response schema is validated\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ef3afdc-7135-414f-ad29-3206cdaecdcb",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionType\":\"BOOKED\"\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "UNBOOKED transaction type (C37905047)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8bbc5a77-8dea-4bff-8edc-80b6f1900d94",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"    pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1fac5566-1abc-4770-8e4f-6b375f902e13",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"criteria\":{\r\n\t\t\"transactionType\":\"UNBOOKED\"\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?size=55",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "size",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_single_transaction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ec09102d-6132-4a3c-b983-51e0d4fb5ae4",
										"exec": [
											"//pm.environment.unset(\"_tmp_accountId\");",
											"",
											"//eval(globals.assetsSearchFunction)(\"assetsTransactionSearchFunction\");",
											"eval(globals.assetsSearchFunction)();",
											"setTimeout(function(){eval(globals.assetsTransactionSearchFunction)();}, 10000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ef1ebc6b-b4c7-4cf0-920a-e1fbe1aff815",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"singleTransactions\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/transactions/{{_tmp_transactionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"transactions",
										"{{_tmp_transactionsId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1768f447-6a46-4852-8f34-45d089b5eb37",
						"type": "text/javascript",
						"exec": [
							"/*determine test case ID from request name*/",
							"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
							"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
							"",
							"/*add current test case ID to list of already executed tests*/",
							"eval(globals.testsExecuted)(testRailTestCases);",
							"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
							"",
							"//store test case ID of current request for linking with Test Rail",
							"pm.globals.set(\"_tr_\" + request.name, testRailTestCases);",
							"",
							"//call global function to generate access token",
							"eval(globals.generateAccessToken)();"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "565b4f5e-aa48-43d3-a542-5c619899bece",
						"type": "text/javascript",
						"exec": [
							"//eval(globals.sessionNavigate)();",
							"//pm.globals.unset(\"_tr_\" + request.name);"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Requests",
			"item": [
				{
					"name": "portfolio request",
					"item": [
						{
							"name": "Get_portfolios_list (C43024137)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a251d215-f898-4c36-a384-76a1d0926e96",
										"exec": [
											"\r",
											"\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of portfolios and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let portId = pm.environment.get(\"_tmp_portfolioId\");\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioSchema\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_portfolioId\",jsonData.portfolios[1].id);\r",
											"    pm.environment.set(\"_tmp_customerId\",jsonData.portfolios[1].customerId);\r",
											"\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_portfolioId\");\r",
											"    pm.environment.unset(\"_tmp_customerId\");\r",
											"\r",
											"}\r",
											"});\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ce934523-cea7-4273-8882-17f43bcda6d8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_portfolios_details_list (C43024139)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5cd384e2-2937-4a3c-8000-5ed31d6fe3c9",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "54bc49e5-fa21-45ae-900a-1098212441cc",
										"exec": [
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let portId = pm.environment.get(\"_tmp_portfolioId\");\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioDetailsSchema\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returned orders match to specified cuacsId\", () => {\r",
											"  \r",
											"        result = result && (jsonData.id === portId);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"});\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_assets_list (C43181622)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e57a3a28-9c1c-4e23-bd2d-521f15a0a9bb",
										"exec": [
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"assetsList\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    \r",
											"    if (pm.response.code === 200) {\r",
											"    pm.environment.set(\"_tmp_assetsId\",jsonData._embedded.assets[0].id);\r",
											"    \r",
											"\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_assetsId\");\r",
											"    \r",
											"}\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5ab0a830-a7f1-470c-9c15-6170ddd225bd",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/assets",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"assets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_assets_list_details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e81bdab6-c510-418f-a9ba-077be09e7997",
										"exec": [
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"assetsListDetails\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"});\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d46a8396-25f8-465c-94b2-c3bf199aa06e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/assets/{{_tmp_assetsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"assets",
										"{{_tmp_assetsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_maturity_list (C43181624)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c8bd43d-fce8-491b-a01e-61f2e81e2987",
										"exec": [
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"  \r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioDetailsSchema\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"});\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ab204166-034b-4ec4-b1e8-29f0c4c11fd0",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/maturities",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"maturities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_performance_details (C43181629)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "edcbfa2c-14b9-48c4-8d20-4463ec08aa34",
										"exec": [
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let assetNo = pm.environment.get(\"_tmp_portfolioId\");\r",
											"    let result = true;\r",
											"\r",
											"    pm.test(\"Status 200 OK is displayed\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioPerformanceSchema\", jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"});\r",
											"\r",
											"eval(globals.sessionNavigate)();\r",
											"pm.globals.unset(\"_tr_\" + request.name);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e3560ea1-92d5-4c63-a135-7b2f3b6ad677",
										"exec": [
											"eval(globals.portfolioRequest)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios/{{_tmp_portfolioId}}/performance",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios",
										"{{_tmp_portfolioId}}",
										"performance"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Custody accounts",
					"item": [
						{
							"name": "Get custody accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73e7594f-9d80-49b3-902a-1d2761e20cf4",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsSchema = pm.environment.get(\"cuacsSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_cuacsId\",jsonData.cuacs[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_cuacsId\");\r",
											"}\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c055f869-e970-44c3-a1fc-4205ddc839e7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get positons for cuacsId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6dbf2b4b-4808-4f34-b301-622707fd2c28",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Position details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsPositionSchema = pm.environment.get(\"cuacsPositionSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsPositionSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"   }); \r",
											"   \r",
											" // store last securityNumber as environment variable\r",
											"    if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_positionsId\",jsonData.positions[0].id);\r",
											"    } else {\r",
											"    pm.environment.unset(\"_tmp_positionsId\");\r",
											"}\r",
											"\r",
											"    \r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "949c0d46-3988-44d1-aa94-fac66720302c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/positions",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get custody account positions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5fecab4-b5fd-4c5e-8137-2fbb28b61de2",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Position details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var positionIdSchema = pm.environment.get(\"positionIdSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"positionIdSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"   }); \r",
											"   \r",
											"\r",
											"    \r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b940aee1-2fab-4f6d-907d-8eefea4f1312",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/positions/{{_tmp_positionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"positions",
										"{{_tmp_positionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get transactions for cuacsId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d79a777-1eec-4d23-a71f-0b0e3dc8c87f",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Transactions details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsPositionSchema = pm.environment.get(\"cuacsPositionSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsIdSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"   }); \r",
											"   \r",
											" // store last securityNumber as environment variable\r",
											"    if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_transactionsId\",jsonData.transactions[0].id);\r",
											"    } else {\r",
											"    pm.environment.unset(\"_tmp_transactionsId\");\r",
											"}\r",
											"\r",
											"    \r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3bbf539d-8cac-4853-a8b3-e4e3110cf9d3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/transactions/",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"transactions",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get custody account positions details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ed18953-2456-4a3a-97c3-02c6c809852a",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Position details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var positionIdSchema = pm.environment.get(\"positionIdSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"positionIdSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"   }); \r",
											"   \r",
											"\r",
											"    \r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bd5c6408-e76d-4001-a32f-55ee3892bfed",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/positions/{{_tmp_positionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"positions",
										"{{_tmp_positionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get custody account transactions details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3462b448-28be-4419-88a1-d76ef5539855",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Transactions details is retrieved by id and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var positionIdSchema = pm.environment.get(\"positionIdSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											" \r",
											"       schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsIdDetailsSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"   }); \r",
											"   \r",
											"\r",
											"    \r",
											"//    pm.response.to.have.status(200)\r",
											"//pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, cuacsDetSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fd5bc6be-4342-4861-a0ab-8c4d36f4a395",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}/transactions/{{_tmp_transactionsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}",
										"transactions",
										"{{_tmp_transactionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_customer_info_by_his_ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2940ff64-9ae5-4057-a169-fd219d35f4d7",
										"exec": [
											"eval(globals.commonTests)();",
											"",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of custody accounts by Id is retrieved and response schema is validated\", function() {",
											"    var schemaValidationPassed = true;",
											"    var jsonData = JSON.parse(responseBody);",
											"    let cuacsId = pm.environment.get(\"_tmp_cuacsId\");",
											"    let result = true;",
											"",
											"    pm.test(\"Status 200 OK is displayed\", function() {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"Response schema is correct\", () => {",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"cuacsDetSchema\", jsonData);",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);",
											"    });",
											"",
											"    pm.test(\"Returned orders match to specified cuacsId\", () => {",
											"  ",
											"        result = result && (jsonData.id === cuacsId);",
											"        ",
											"        pm.expect(result).to.be.eql(true);",
											"    });",
											"",
											"    pm.response.to.have.status(200) && pm.expect(schemaValidationPassed).to.be.eql(true) &&",
											"        pm.expect(result).to.be.eql(true);",
											"});",
											"",
											"eval(globals.sessionNavigate)();",
											"pm.globals.unset(\"_tr_\" + request.name);",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3b4deced-3759-418a-9d72-cfed7f037536",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/cuacs/{{tenantId_assets}}/v1/cuacs/{{_tmp_cuacsId}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"cuacs",
										"{{tenantId_assets}}",
										"v1",
										"cuacs",
										"{{_tmp_cuacsId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Assets",
					"item": [
						{
							"name": "Account_Search (C41736193)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db61184a-a8ac-43e3-878b-af40e1d72e00",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[jsonData.page.totalElements-1].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId2\",jsonData.accountList[1].id);\r",
											"    pm.environment.set(\"_tmp_accountIdAlias\",jsonData.accountList[2].id);\r",
											"    pm.environment.set(\"_tmp_accountNumber1\",jsonData.accountList[0].accountNumber);\r",
											"    pm.environment.set(\"_tmp_accountNumber2\",jsonData.accountList[1].accountNumber);\r",
											"    pm.environment.set(\"_tmp_iban1\",jsonData.accountList[0].iban);\r",
											"    pm.environment.set(\"_tmp_iban2\",jsonData.accountList[1].iban);\r",
											"    pm.environment.set(\"_tmp_id1\",jsonData.accountList[0].id);\r",
											"    pm.environment.set(\"_tmp_id2\",jsonData.accountList[1].id);\r",
											"    pm.environment.set(\"_tmp_contractId\",jsonData.accountList[0].permissions[0].contractId);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId2\");\r",
											"    pm.environment.unset(\"_tmp_accountIdAlias\");\r",
											"    pm.environment.unset(\"_tmp_accountNumber1\");\r",
											"    pm.environment.unset(\"_tmp_accountNumber2\");\r",
											"    pm.environment.unset(\"_tmp_iban1\");\r",
											"    pm.environment.unset(\"_tmp_iban2\");\r",
											"    pm.environment.unset(\"_tmp_id1\");\r",
											"    pm.environment.unset(\"_tmp_id2\");\r",
											"    pm.environment.unset(\"_tmp_contractId\");\r",
											"}\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1561c04a-e65e-4269-9778-0a1ef32c304f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=30",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "30"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple_criteria_iban_asc (C38950548)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cab48821-b0f6-4134-a943-3d5c3f3a4028",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].iban < jsonData.accountList[1].iban);\r",
											"   \r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6dcc58bf-b997-4951-87b7-09bd327831bc",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"orderBy\": [\r\n{\r\n\"field\": \"IBAN\",\r\n\"sortOrder\": \"ASC\"\r\n}\r\n],\r\n\"criteria\": {\r\n\"iban\": [\r\n\"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"\r\n]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple_criteria_iban_desc (C38950549)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54a37a58-c830-4fb3-8c56-eafd86584b44",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account order\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].iban > jsonData.accountList[1].iban);\r",
											"   \r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0bda17ec-77d0-4264-b7a6-308a525b4b54",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"orderBy\": [\r\n{\r\n\"field\": \"IBAN\",\r\n\"sortOrder\": \"DESC\"\r\n}\r\n],\r\n\"criteria\": {\r\n\"iban\": [\r\n\"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"\r\n]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_BIC (C41939550)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fb2c526-6a6c-46dd-8e9f-4ccb7cd2c33c",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let bic = \"CLXNCHZZMDB\"\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].bank.bic === bic);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "23bef634-4702-4672-836b-ae1211744614",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=30",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "30"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Account number (C37972701)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78cfe356-16ef-4c6b-9452-69fc633b01fa",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accNumber = pm.environment.get(\"_tmp_accountNumber1\")\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountNumber=== accNumber);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5d0cff84-f6d7-4995-8306-2a9a5fd3398d",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\n    \"accountNumber\": [\n      {{_tmp_accountNumber1}}\n    ]\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple names (C38950539)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06ebd2b6-d5dd-48bb-a808-bd9f8166950b",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accName = \"1704 USD\";\r",
											"    let accName1 = \"1501 CHF\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"       \r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    \r",
											"    pm.test(\"Returned proper account name\", () => {\r",
											"  \r",
											"    result = result && (jsonData.accountList[0].accountName === accName);\r",
											"    result = result && (jsonData.accountList[1].accountName === accName1);\r",
											"        \r",
											"    pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b0558b13-bbe3-4f34-bf48-d4f48fd0d192",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountName\": [\r\n      \"1704 USD\",\"1501 CHF\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_Multiple_Account_number (C38950540)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2390c014-b124-474c-b0a6-6780a1c7ec38",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accNumber1 = pm.environment.get(\"_tmp_accountNumber1\")\r",
											"    let accNumber2 = pm.environment.get(\"_tmp_accountNumber2\")\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountNumber=== accNumber1);\r",
											"        result = result && (jsonData.accountList[1].accountNumber=== accNumber2);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5f258130-1b08-471a-bc30-ae88da515af7",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountNumber\": [\r\n      {{_tmp_accountNumber1}},{{_tmp_accountNumber2}}\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_Current (C38950541)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e52e5067-7711-4e07-a07b-0fd81d2b3903",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType = \"CURRENT\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountType=== accType);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e3e7dae9-f533-459d-9819-67158f5b4f0e",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"CURRENT\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_SAVINGS (C38950542)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f65e8e53-4afc-4bd4-80f9-100f73bb3e65",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType = \"SAVINGS\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountType=== accType);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "93b9d4c0-f626-499c-a403-86f586c94c45",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"SAVINGS\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Search_startDate&endDate (C379050538)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7767d6c4-51e4-4158-a2a1-cf358ed40e60",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3d4fec11-aabc-4d9d-8200-897a92795495",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_Multiple (C41083339)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c59272f1-043f-4d74-8d08-70b492e25e62",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "27b7967f-d4c3-4f6e-96d4-8746b9a3c373",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType1 = \"CURRENT\";\r",
											"    let accType2 = \"OTHER\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account type\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountType=== accType1);\r",
											"        result = result && (jsonData.accountList[3].accountType=== accType2);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"OTHER\",\"CURRENT\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_AccountType_Other  (C41083337)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e0204f5-8150-4618-af6f-1a9a50174ec7",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accType = \"OTHER\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountType=== accType);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1c6cc779-0a80-49f5-9455-f0ba7f558551",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountType\": [\r\n      \"OTHER\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_iban (C38950543)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d71e375d-a058-4cc2-ba8a-ec4136a63a43",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let iban = pm.environment.get(\"_tmp_iban1\")\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].iban === iban);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d31e444b-e433-49b4-a866-529e2ea4aa2c",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"iban\": [\r\n      \"{{_tmp_iban1}}\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_multiple_iban (C38950544)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d52b52a4-6542-4ac2-bfe3-5abd43207364",
										"exec": [
											";\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											" \r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let iban1 = pm.environment.get(\"_tmp_iban1\")\r",
											"    let iban2 = pm.environment.get(\"_tmp_iban2\")\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper account number\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].iban === iban1);\r",
											"        result = result && (jsonData.accountList[1].iban === iban2);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cf6fa800-c84a-48a2-9efc-81ee156b4eb1",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"iban\": [\r\n      \"{{_tmp_iban1}}\",\"{{_tmp_iban2}}\"\r\n    ]\r\n\r\n}\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_ContractId (C38950547)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ddfcf41a-80cc-4535-8e46-fb3af21aeacc",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last securityNumber as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_accountId\",jsonData.accountList[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_accountId\");\r",
											"}\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e5a892cb-ac81-49c3-a813-c5208b316ca4",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"contractId\": [\r\n      \"{{_tmp_contractId}}\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_account_Name (C37949168)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39ed0800-2af7-4e99-82f1-2715876b315e",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accName = \"1704 USD\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"    pm.test(\"Returned proper account name\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountName === accName);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"        \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "35b17984-de27-45a7-88b4-276fb1608e25",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"accountName\": [\r\n      \"1704 USD\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_id (C38950545)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "141d8599-a32b-4a1e-9e49-8586bf61ceaa",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "689b9395-9038-4f94-9cf2-f4b53f1be1b5",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\r\n    \"iban\": [\r\n      \"{{_tmp_id2}}\"\r\n    ]\r\n\r\n}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search (C37972704)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2d48f7e-10b8-4c69-989d-2251abad0591",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"    \r",
											"    if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.environment.set(\"_tmp_transactionsId\",jsonData.transactionGroups[0].transactions[0].id);\r",
											"\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_transactionsId\");\r",
											"\r",
											"}\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b12ef1ed-0988-4560-a34f-f84359653576",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2020-06-01\"\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_overview",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91396804-5bbe-4397-8533-da4d95901f69",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"  \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"    \r",
											"    if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_transactionsId\");\r",
											"\r",
											"}\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f80214f0-429d-4851-b92e-1a8b40a1c55e",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2020-01-01\",\n\"endDate\": \"2020-06-01\",\n\"transactionFlow\": \"OUTGOING\",\n\"transactionType\": \"BOTH\",\n\"amountFrom\": \"999.00\",\n\"amountTo\": \"51001.01\"\n\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_validation 400 (C38763416)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "87768573-5266-4465-b7d8-d4e762e51f3d",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 400 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"    \r",
											"    if (pm.response.code === 400) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_transactionsId\");\r",
											"\r",
											"}\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"error400\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(400)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "222ad14a-2655-4994-b436-e52445cfbc5c",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2020-01-01\",\n\"endDate\": \"2020-06-01\",\n\"transactionFlow\": \"OUTGOING\",\n\"transactionType\": \"BOTH\",\n\"amountFrom\": \"999.00\",\n\"amountTo\": \"51001.01\"\n\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{oldAccountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{oldAccountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_transaction 401 validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ea69d00-24c5-4464-953c-c2c0debb35a8",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 401 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(401);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"    \r",
											"    if (pm.response.code === 401) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_transactionsId\");\r",
											"\r",
											"}\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"error400\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(401)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6ac4b5e6-5e2d-4e2c-8745-5ccaf40e1a86",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{insufficient_token_value}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2020-01-01\",\n\"endDate\": \"2020-06-01\",\n\"transactionFlow\": \"OUTGOING\",\n\"transactionType\": \"BOTH\",\n\"amountFrom\": \"999.00\",\n\"amountTo\": \"51001.01\"\n\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_multiple_criteria (C38763407)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3329841-2d63-4b9e-8009-49077cac9b9d",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var transactionDate = new Date('2019-01-01').getTime();\r",
											"    var endDate = new Date('2019-04-18').getTime();\r",
											"    let amountFrom = pm.environment.get(\"100.01\");\r",
											"    let amountTo = pm.environment.get(\"5001.21\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Returned orders match to specified transactions startDate 2019-01-01 \", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (transactionDate < convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Returned orders match to specified transactions endDate 2019-04-18 and after\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (endDate > convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont from\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountFrom <= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont to\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountTo <= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ff464e05-d64f-4f71-b20d-4e1b6a6131b1",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-04-18\",\n\n\"amountFrom\": 100.01,\n\"amountTo\": 50001.21\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_desc  (C38719010)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8fb764e8-e959-4d04-be03-ed328b41bf87",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "354903ce-d9a4-465a-8861-41a8451f3153",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_pagination (C47473070)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3baaa1ee-f1d3-4b02-b7da-737c9b8d25de",
										"exec": [
											"\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let number = 25;\r",
											"    let size = 3;\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"  \r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper response size\", () => {\r",
											"        result = result && (jsonData.page.size === size);\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"        pm.test(\"Returned proper number\", () => {\r",
											"        result = result && (jsonData.page.number === number);\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cdeb94ca-85ce-47de-b306-d268bfe7f5b6",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": {{PrS:nextWorkingDay}}\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?page=25&size=3",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "25"
										},
										{
											"key": "size",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_size (C47473979)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "966bcae3-0a31-4582-b3d8-1782d7b8e0c8",
										"exec": [
											"\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let number = 10;\r",
											"    let size = 4;\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"  \r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"Returned proper response size\", () => {\r",
											"        result = result && (jsonData.page.size === size);\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"        pm.test(\"Returned proper number\", () => {\r",
											"        result = result && (jsonData.page.number === number);\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e835a15b-600d-4241-9502-23e25a5ad0d4",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": {{PrS:nextWorkingDay}}\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search?page=10&size=4",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "10"
										},
										{
											"key": "size",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_startDate (C37786354)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "41c17813-7e31-4bd0-a085-0d7fda9e64f3",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var transactionDate = new Date('2019-01-01').getTime();\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-01-01 and after\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (transactionDate < convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8003d766-b323-46fc-ac3b-58e359e1f054",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\"\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_Reference_Text (C37905050)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f0cfddc-0729-4fdf-a322-9c99f9472884",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var referenceText = null;\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.test(\"reference text is null\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var refText = new Date(jsonData.transactionGroups[0].transactions[0].referenceText[x].referenceText);\r",
											"            result = result && (referenceText === refText);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d306d984-2c45-488a-8c07-7995fa2105c3",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"referenceText\":null\n\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_amountFrom (C37905040)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4434e0d-5ff7-4b2d-b1fa-3f68ef3177e3",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"       let amountFrom = pm.environment.get(\"1000.01\");\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont from\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountFrom <= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c5777d26-6629-45b3-b462-545dc30a3e39",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"criteria\": {\r\n\"startDate\": \"2019-01-01\",\r\n\"amountFrom\":\"1000.01\"\r\n}\r\n}\r\n'date is set if contract don`t have transactions in last 30 days'",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "set_alias (C37905058)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c934dccb-e230-44ef-b3db-d525ca76da75",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"aliasSet\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "98f2b68b-d767-43e7-8997-2762e3ca33eb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"alias\": \"test\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountIdAlias}}/alias",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountIdAlias}}",
										"alias"
									]
								}
							},
							"response": []
						},
						{
							"name": "update alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9a8c000-c54d-4ca7-b068-a4a750d2a7f7",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"aliasSet\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "34fc3bd0-f77d-4e46-af88-2b17258251f9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"alias\": \"test2\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountIdAlias}}/alias",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountIdAlias}}",
										"alias"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82a6f57a-f41a-4f47-bfa3-e799bc1a813d",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"aliasSet\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1bdb63ce-8aa5-4a12-b727-1f645d683bd8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountIdAlias}}/alias",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountIdAlias}}",
										"alias"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "743bfeb1-99af-4992-aec6-f2bd701e69a7",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accName = \"test\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"    pm.test(\"Returned proper account name\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountName === accName);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"        \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ad9f6b82-ff69-4893-8bc3-eebffa991bda",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\n    \"accountName\": [\n      \"test\"\n    ]\n\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=20",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_updated_alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7972035-1d69-45e3-93ef-253e7fe54782",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accName = \"test2\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"    pm.test(\"Returned proper account name\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountName === accName);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"        \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "493cb30a-6bc9-4009-8e28-14d1208fdb3e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\n    \"accountName\": [\n      \"test2\"\n    ]\n\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=20",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account_Search_alias_Postconditions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2995754-8faf-4b3a-80ae-465816b11cc6",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let accName = \"1704 USD\";\r",
											"    let result = true;\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"    pm.test(\"Returned proper account name\", () => {\r",
											"  \r",
											"        result = result && (jsonData.accountList[0].accountName === accName);\r",
											"        \r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    })\r",
											"        \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6c11fa43-8d5e-47dc-a871-2be4570bb4dd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"criteria\": {\n    \"accountName\": null\n\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search?size=20",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									],
									"query": [
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_amountTo (C37905041)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7bbec360-c8c4-428d-8268-35833345481a",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8bd70317-d5b1-41b2-afc6-274b26c008f2",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"       let amountTo = pm.environment.get(\"150000.01\");\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont from\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountTo >= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"criteria\": {\r\n\"startDate\": \"2019-01-01\",\r\n\"amountTo\":\"150000.01\"\r\n}\r\n}\r\n'date is set if contract don`t have transactions in last 30 days'",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_endDate (C62786800)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86830239-8567-41dc-a5ec-aa4fc3a918a9",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var transactionDate = new Date(\"2019-12-32\");\r",
											"    var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions endDate 2019-12-31\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (convertedtransactionDate > convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0424ba6e-449c-4262-994e-def74006d515",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"endDate\": \"2019-12-31\"\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Search_endDate (C37786407)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b02fbecc-2119-4da3-9939-035f675d2633",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountSearchSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9be2cebf-1c03-4e28-9f12-f7b88ab63f21",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"endDate\": \"2019-12-31\"\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_multiple_amontFrom_amountTo (C37905042)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea9b2dce-72cc-4081-bfd4-f8b4f999ecba",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var transactionDate = new Date('2019-01-01').getTime();\r",
											"    var endDate = new Date('2019-04-18').getTime();\r",
											"    let amountFrom = pm.environment.get(\"100.01\");\r",
											"    let amountTo = pm.environment.get(\"1000.01\");\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"\r",
											"     pm.test(\"Check proper value for transactions amont from\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountFrom >= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"     pm.test(\"Check proper value for transactions amont to\", () => {\r",
											"           for(var x = 0;x<jsonData.transactionGroups[0].transactions[0].length;x++) {\r",
											"            var valueAmount = new Date(jsonData.transactionGroups[0].transactions[x].amount.value);\r",
											"            result = result && (amountTo <= valueAmount);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0742875e-25d8-44ab-b1a7-db2284c09a98",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"amountFrom\": 100.01,\n\"amountTo\": 1001.21\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_Transaction_Search_startDate&endDate (C37905042)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd2c06b2-fe44-4e59-b24b-c9fec17b6574",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var startDate = new Date('2019-01-01').getTime();\r",
											"    var endDate = new Date('2019-10-29').getTime();\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-01-01\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (startDate <= convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-10-29\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (endDate >= convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    });\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b66ae43d-2e8b-49f7-a184-ce449fca5ccf",
										"exec": [
											"eval(globals.assetsSearchFunction)();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": {{PrS:nextWorkingDay}}\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/transactions/search",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"transactions",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69587698-98bd-4d68-bea0-1b03f1bea52e",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var startDate = new Date('2019-01-01').getTime();\r",
											"    var endDate = new Date('2019-10-29').getTime();\r",
											"   // var convertedtransactionDate = transactionDate.getTime();\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-01-01\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (startDate <= convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    }); \r",
											"        pm.test(\"Returned orders match to specified transactions startDate 2019-10-29\", () => {\r",
											"        for(var x = 0;x<jsonData.transactionGroups.date;x++) {\r",
											"            var placedAtTime = new Date(jsonData.transactionGroups.date[x].date);\r",
											"            var convertedTime = placedAtTime.getTime();\r",
											"            result = result && (endDate >= convertedTime);\r",
											"        }\r",
											"        pm.expect(result).to.be.eql(true);\r",
											"    });\r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f26ea65c-3ac6-45bd-9fd5-f4130eca9995",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/permissions",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_permissions 400 validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "435d3b41-2a10-4d1e-a98e-cac4ac3b325f",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 400 Bad request is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"error400\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    pm.response.to.have.status(400)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3eac4049-87f9-4af7-a1c3-b64434aa7292",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{insufficient_token_value}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{oldAccountId}}/permissions",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{oldAccountId}}",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_permissions 401 validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "217b3c33-394a-4442-9d9a-6a2a2bd8e332",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 403  is displayed\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"error400\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    pm.response.to.have.status(403)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2cb05187-10ce-4606-86eb-06f713e5a4d1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{insufficient_token_value}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/permissions",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_details_get",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "697fe2b4-d279-4914-8515-aacbdbb87a90",
										"exec": [
											"\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of permissions is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"accountIdDetails\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f1673f61-cfbd-44ff-8df7-d9616486147f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-10-29\"\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a320ea1-e6cf-4afe-9663-9e03f573b487",
										"exec": [
											"\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of balance is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"balanceSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "aae02e67-b462-4dbe-a896-b99f808a15a5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"DESC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-10-29\"\n}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId2}}/balance",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId2}}",
										"balance"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_balance 400 validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7d4ac4d7-445c-4eb4-a180-bbb5332df649",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 400 Bad request is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"error400\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    pm.response.to.have.status(400)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "46c03922-c127-44c3-b7f3-c1c0bbada827",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{oldAccountId}}/balance",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{oldAccountId}}",
										"balance"
									]
								}
							},
							"response": []
						},
						{
							"name": "AccountId_balance 401 validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1999f729-ecc3-412c-b2e8-851d0889981f",
										"exec": [
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let result = true; \r",
											"    \r",
											"    pm.test(\"Status 401  is displayed\", function () {\r",
											"        pm.response.to.have.status(401);\r",
											"    });\r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"error400\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    pm.response.to.have.status(401)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "abcdaa96-beea-4a12-8aeb-3491f44192aa",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{insufficient_token_value}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{oldAccountId}}/balance",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{oldAccountId}}",
										"balance"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_list_of_all_accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b6461b7-c87b-4adc-822a-aebe9313e792",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of portfolios is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var cuacsSchema = pm.environment.get(\"portfolioSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, portfolioSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"// store last portfolioId as environment variable\r",
											"if (pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody)._embedded;\r",
											"    pm.environment.set(\"_tmp_portfolioId\",jsonData.portfolios[0].id);\r",
											"} else {\r",
											"    pm.environment.unset(\"_tmp_portfolioId\");\r",
											"}\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e09da7b5-6bd7-459c-aeee-1c7d3523b966",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"portfolios",
										"{{tenantId_assets}}",
										"v1",
										"portfolios"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "camt",
					"item": [
						{
							"name": "(C39248697) camt053 download with endDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f17326a6-dda4-4b13-81ac-b92267d397f6",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(400)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b857e9fe-e0eb-4c33-9417-08bbca5c96d3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT053&endDate=2019-12-01",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT053"
										},
										{
											"key": "endDate",
											"value": "2019-12-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248700) camt053 download with startDate and endDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eff73dd4-720c-40bd-9ec7-9ef68a3bb868",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(400)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "81c6f0f9-304c-4671-b2a6-33335b665078",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/__ID__4f784e474f5a6e44796f485532613845314188387337d58602a8f88557af9ab6fdc09e727eb0b3/transactions/camt?isoType=CAMT053&startDate=2019-12-01&endDate=2020-03-01",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"__ID__4f784e474f5a6e44796f485532613845314188387337d58602a8f88557af9ab6fdc09e727eb0b3",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT053"
										},
										{
											"key": "startDate",
											"value": "2019-12-01"
										},
										{
											"key": "endDate",
											"value": "2020-03-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248701) camt053 download WDETAIL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74cae225-802b-423a-8837-34e80a719d38",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(400)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8219196b-dcf5-4ba5-89b7-9eb0ed3afa99",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT053&details=WDETAIL",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT053"
										},
										{
											"key": "details",
											"value": "WDETAIL"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248701) camt053 download WDETAIL Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "293220ea-1a4c-42b8-886d-40aba6d2bb73",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(400)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7a569ee3-1477-42ea-8e01-60dafbc5fa11",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT053&details=WDETAIL",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT053"
										},
										{
											"key": "details",
											"value": "WDETAIL"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248702) camt052 download",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4e86a82-885c-4133-b24e-095e30569f49",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "21085c2e-5840-4a46-b9cd-eb3028f5340d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/banking-api/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT053",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"banking-api",
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT053"
										},
										{
											"key": "startDate",
											"value": "2020-03-01",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248698) camt052 download with startDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f829f98a-3585-4658-93d5-dd1d64707679",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "59b1ce6e-6090-44d4-8101-599690d067c5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/transactions/camt?isoType=CAMT052&startDate=2020-01-01",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT052"
										},
										{
											"key": "startDate",
											"value": "2020-01-01"
										},
										{
											"key": "endDate",
											"value": "2020-03-09",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248705) camt052 download with startDate and endDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e64b4e5-1d36-4583-b26d-7726ce81f9e1",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											" \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f5d17b59-4bc5-48ef-8310-2b3f67ab6ce3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT053&startDate=2019-01-06&endDate=2020-03-09",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT053"
										},
										{
											"key": "startDate",
											"value": "2019-01-06"
										},
										{
											"key": "endDate",
											"value": "2020-03-09"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248706) camt054 download",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a1c7a90b-5edb-41bc-9f90-4fee30ee06d1",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c721d249-cd4f-478f-a374-7aa812a3746d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT054",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT054"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248706) camt054 download Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "31a6720d-6d71-4048-bb83-d1e331e8f2b3",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1bbb2445-aa58-4e22-b9e5-6e6c978a7218",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT054",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT054"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "(C39248710) camt053 download",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8db6b302-d5df-4f49-bb4f-f3e6eacf1580",
										"exec": [
											"// Execute standard tests from PrS using eval()\r",
											"//eval(globals.commonTests)();\r",
											"\r",
											"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of accountSearch is retrieved and response schema i validated\", function () {\r",
											"\r",
											"    var schemaValidationPassed = true;\r",
											"    //var securitiesSchema = pm.environment.get(\"accountSearchSchema\");\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"    pm.test(\"Status 200 OK is displayed\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Response schema is correct\", () => {\r",
											"        /*\r",
											"        //old, deprecated schema validationimplementation\r",
											"        //pm.expect(tv4.validate(jsonData, accountSearchSchema)).to.be.true;\r",
											"        \r",
											"        //new schema validation implementation\r",
											"        var validationResult = tv4.validateMultiple(jsonData, accountSearchSchema, true, true);\r",
											"        for(var i =0; i<validationResult.errors.length;i++){\r",
											"            console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  \r",
											"            //Skipping all \"Invalid type\" errors as they are expected with current service implementations\r",
											"            schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);\r",
											"            //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);\r",
											"        }    \r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"        */\r",
											"        schemaValidationPassed = eval(globals.schemaValidator)(\"transactionsListSchema\",jsonData);\r",
											"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
											"    }); \r",
											"    \r",
											"    pm.response.to.have.status(200)\r",
											"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Session navigate from PrS using eval()\r",
											"eval(globals.sessionNavigate)();\r",
											"\r",
											"// Reset reference to TR test cases\r",
											"pm.globals.unset(\"_tr_\" + request.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1cc3ceab-ef75-4085-8d2e-7c70682f98c2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, application/hal+json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/zip+camt"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderBy\": [\n{\n\"field\": \"AMOUNT\",\n\"sortOrder\": \"ASC\"\n}\n],\n\"criteria\": {\n\"startDate\": \"2019-01-01\",\n\"endDate\": \"2019-12-31\"\n}\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{env_assets}}/assets/accounts/{{tenantId_assets}}/v4/accounts/{{_tmp_accountId}}/transactions/camt?isoType=CAMT052",
									"host": [
										"{{env_assets}}"
									],
									"path": [
										"assets",
										"accounts",
										"{{tenantId_assets}}",
										"v4",
										"accounts",
										"{{_tmp_accountId}}",
										"transactions",
										"camt"
									],
									"query": [
										{
											"key": "isoType",
											"value": "CAMT052"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Filter_account_by_customerId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d495f568-a1f9-4beb-bde6-27ae88fb8627",
								"exec": [
									"// Execute standard tests from PrS using eval()\r",
									"eval(globals.commonTests)();\r",
									"\r",
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" List of portfolios is retrieved and response schema i validated\", function () {\r",
									"\r",
									"    var schemaValidationPassed = true;\r",
									"    //var cuacsSchema = pm.environment.get(\"portfolioSchema\");\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									"    \r",
									"    pm.test(\"Status 200 OK is displayed\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response schema is correct\", () => {\r",
									"\r",
									"        schemaValidationPassed = eval(globals.schemaValidator)(\"portfolioSchema\",jsonData);\r",
									"        pm.expect(schemaValidationPassed).to.be.eql(true);\r",
									"    }); \r",
									"    \r",
									"    pm.response.to.have.status(200)\r",
									"    && pm.expect(schemaValidationPassed).to.be.eql(true);//pm.expect(tv4.validate(jsonData, portfolioSchema)).to.be.true;\r",
									"});\r",
									"\r",
									"// store last portfolioId as environment variable\r",
									"if (pm.response.code === 200) {\r",
									"    var jsonData = JSON.parse(responseBody)._embedded;\r",
									"    pm.environment.set(\"_tmp_portfolioId\",jsonData.portfolios[0].id);\r",
									"} else {\r",
									"    pm.environment.unset(\"_tmp_portfolioId\");\r",
									"}\r",
									"\r",
									"\r",
									"// Session navigate from PrS using eval()\r",
									"eval(globals.sessionNavigate)();\r",
									"\r",
									"// Reset reference to TR test cases\r",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ddbe479d-c99a-4447-98db-f45d370850e9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json; charset=UTF-8"
							},
							{
								"key": "accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{env_assets}}/assets/portfolios/{{tenantId_assets}}/v1/portfolios",
							"host": [
								"{{env_assets}}"
							],
							"path": [
								"assets",
								"portfolios",
								"{{tenantId_assets}}",
								"v1",
								"portfolios"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3cbe3668-df64-443b-8ba8-ca1f1d839717",
						"type": "text/javascript",
						"exec": [
							"///*determine test case ID from request name*/",
							"//var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
							"////console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
							"//",
							"///*add current test case ID to list of already executed tests*/",
							"//eval(globals.testsExecuted)(testRailTestCases);",
							"//pm.globals.set(\"testRailTestCases\",testRailTestCases);",
							"//",
							"////store test case ID of current request for linking with Test Rail",
							"//pm.globals.set(\"_tr_\" + request.name, testRailTestCases);",
							"//",
							"////call global function to generate access token",
							"//eval(globals.generateAccessToken)();"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "49d12244-5d58-4fa7-8331-9caf3ff7110e",
						"type": "text/javascript",
						"exec": [
							"//eval(globals.sessionNavigate)();"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tools",
			"item": [
				{
					"name": "Generate token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d5029a30-56f9-4e63-8e10-601220058386",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "83b581f4-1300-407f-9211-452e8cbccbfc",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.environment.set(\"access_token\", pm.response.text());",
									"});",
									"",
									"",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"tenant_id\": 19901,\n\"acsKey\": \"i6PiNObtdp2rCNW7mlV51BDSY4zAliSvBCyVsuML1000203567\",\n\"tenant_name\": \"CLX EBS\",\n\"user_name\": \"1284991501\",\n\"contractNo\": \"15054\",\n\"languageCode\": \"en\",\n\"bcNo\": \"12312\",\n\"authorities\": [\"DBAN_ADMIN\", \"DBAN_USER\"],\n\"client_id\": \"postman\",\n\"user_id\": 1284991501,\n\"scope\": [\n\"https://api.crealogix.com/dban\",\n\"read\",\n\"write\",\n\"https://api.crealogix.com/contracts/contract.advisor.readonly\",\n\"https://api.crealogix.com/contracts/contract.metadata.readonly\",\n\"https://api.crealogix.com/contracts/contract.person.readonly\",\n\"https://api.crealogix.com/payments/payment.initiate\",\n\"https://api.crealogix.com/payments/payment.read\",\n\"https://api.crealogix.com/payments/payment.write\",\n\"https://api.crealogix.com/assets/account.balance.readonly\",\n\"https://api.crealogix.com/assets/account.transaction.readonly\",\n\"https://api.crealogix.com/assets/account.permission.readonly\",\n\"https://api.crealogix.com/assets/account.metadata.readonly\",\n\"https://api.crealogix.com/assets/account.accountname.write\",\n\"https://api.crealogix.com/assets/account.accountimage.write\",\n\"https://api.crealogix.com/assets/cuac.readonly\",\n\"https://api.crealogix.com/assets/portfolio.readonly\",\n\"https://api.crealogix.com/messages/securemail.write\",\n\"https://api.crealogix.com/messages/securemail.read\",\n\"https://api.crealogix.com/messages/document.category.read\",\n\"https://api.crealogix.com/messages/document.category.write\",\n\"https://api.crealogix.com/messages/document.write\",\n\"https://api.crealogix.com/messages/document.read\",\n\"https://api.crealogix.com/brokerage/security.readonly\",\n\"https://api.crealogix.com/brokerage/tradingplace.readonly\",\n\"https://api.crealogix.com/brokerage/depository.readonly\",\n\"https://api.crealogix.com/brokerage/order.readonly\",\n\"https://api.crealogix.com/brokerage/order.write\",\n\"https://api.crealogix.com/deeplink/domains\",\n\"https://api.crealogix.com/deeplink/links\"\n],\n\"loginName\": \"1284991501\",\n\"exp\": 32479694642,\n\"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\n\"iat\": 1553855569\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{env_security_testToken}}",
							"host": [
								"{{env_security_testToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAuthTestTokenK8S",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "87e293c7-0a95-48d0-b6e6-907e5a01b4ad",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a5497f09-9d29-4949-ac7d-9944aef7d4c9",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.environment.set(\"access_token\", pm.response.text());",
									"});",
									"",
									"",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"tenant_id\": {{tenantId_security}},\n\"tenant_name\": \"CLX EBS\",\n\"user_name\": \"{{userId_security}}\",\n\"contractNo\": \"{{contractNo_security}}\",\n\"languageCode\": \"en\",\n\"bcNo\": \"{{bcNo_security}}\",\n\"authorities\": [\"DBAN_ADMIN\", \"DBAN_USER\"],\n\"client_id\": \"postman\",\n\"user_id\": {{userId_security}},\n\"scope\": [\n\"https://api.crealogix.com/dban\",\n\"read\",\n\"write\",\n\"https://api.crealogix.com/contracts/contract.advisor.readonly\",\n\"https://api.crealogix.com/contracts/contract.metadata.readonly\",\n\"https://api.crealogix.com/contracts/contract.person.readonly\",\n\"https://api.crealogix.com/payments/payment.initiate\",\n\"https://api.crealogix.com/payments/payment.read\",\n\"https://api.crealogix.com/payments/payment.write\",\n\"https://api.crealogix.com/assets/account/read\",\n\"https://api.crealogix.com/assets/account.transaction/read\",\n\"https://api.crealogix.com/assets/account.name\",\n\"https://api.crealogix.com/assets/account.image\",\n\"https://api.crealogix.com/assets/cuac/read\",\n\"https://api.crealogix.com/assets/portfolio/read\",\n\"https://api.crealogix.com/messages/securemail.write\",\n\"https://api.crealogix.com/messages/securemail.read\",\n\"https://api.crealogix.com/messages/document.category.read\",\n\"https://api.crealogix.com/messages/document.category.write\",\n\"https://api.crealogix.com/messages/document.write\",\n\"https://api.crealogix.com/messages/document.read\",\n\"https://api.crealogix.com/brokerage/security/read\",\n\"https://api.crealogix.com/brokerage/tradingplace/read\",\n\"https://api.crealogix.com/brokerage/depository/read\",\n\"https://api.crealogix.com/brokerage/order/read\",\n\"https://api.crealogix.com/brokerage/order\",\n\"https://api.crealogix.com/deeplink/domains\",\n\"https://api.crealogix.com/deeplink/links\"\n],\n\"loginName\": \"{{userId_security}}\",\n\"exp\": 32479694642,\n\"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\n\"iat\": 1553855569\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{env_security_testToken}}",
							"host": [
								"{{env_security_testToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAuthTestTokenK8S old&new scope",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6d5d2cb9-6dbc-43c9-ae4b-d125e7fd55e8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "118d6281-2d67-4b07-af22-89f179ac3468",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.environment.set(\"access_token\", pm.response.text());",
									"});",
									"",
									"",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"tenant_id\": {{tenantId_security}},\n\"tenant_name\": \"CLX EBS\",\n\"user_name\": \"{{userId_security}}\",\n\"contractNo\": \"{{contractNo_security}}\",\n\"languageCode\": \"en\",\n\"bcNo\": \"{{bcNo_security}}\",\n\"authorities\": [\"DBAN_ADMIN\", \"DBAN_USER\"],\n\"client_id\": \"postman\",\n\"user_id\": {{userId_security}},\n\"scope\": [\n\"https://api.crealogix.com/dban\",\n\"read\",\n\"write\",\n\"https://api.crealogix.com/contracts/contract.advisor.readonly\",\n\"https://api.crealogix.com/contracts/contract.metadata.readonly\",\n\"https://api.crealogix.com/contracts/contract.person.readonly\",\n\"https://api.crealogix.com/payments/payment.initiate\",\n\"https://api.crealogix.com/payments/payment.read\",\n\"https://api.crealogix.com/payments/payment.write\",\n\"https://api.crealogix.com/assets/account.balance.readonly\",\n\"https://api.crealogix.com/assets/account.transaction.readonly\",\n\"https://api.crealogix.com/assets/account.permission.readonly\",\n\"https://api.crealogix.com/assets/account.metadata.readonly\",\n\"https://api.crealogix.com/assets/account.accountname.write\",\n\"https://api.crealogix.com/assets/account.accountimage.write\",\n\"https://api.crealogix.com/assets/account/read\",\n\"https://api.crealogix.com/assets/account.transaction/read\",\n\"https://api.crealogix.com/assets/account.name\",\n\"https://api.crealogix.com/assets/account.image\",\n\"https://api.crealogix.com/assets/cuac/read\",\n\"https://api.crealogix.com/assets/portfolio/read\",\n\"https://api.crealogix.com/messages/securemail.write\",\n\"https://api.crealogix.com/messages/securemail.read\",\n\"https://api.crealogix.com/messages/document.category.read\",\n\"https://api.crealogix.com/messages/document.category.write\",\n\"https://api.crealogix.com/messages/document.write\",\n\"https://api.crealogix.com/messages/document.read\",\n\"https://api.crealogix.com/brokerage/security/read\",\n\"https://api.crealogix.com/brokerage/tradingplace/read\",\n\"https://api.crealogix.com/brokerage/depository/read\",\n\"https://api.crealogix.com/brokerage/order/read\",\n\"https://api.crealogix.com/brokerage/order\",\n\"https://api.crealogix.com/brokerage/security.readonly\",\n\"https://api.crealogix.com/brokerage/tradingplace.readonly\",\n\"https://api.crealogix.com/brokerage/depository.readonly\",\n\"https://api.crealogix.com/brokerage/order.readonly\",\n\"https://api.crealogix.com/brokerage/order.write\",\n\"https://api.crealogix.com/deeplink/domains\",\n\"https://api.crealogix.com/deeplink/links\"\n],\n\"loginName\": \"{{userId_security}}\",\n\"exp\": 32479694642,\n\"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\n\"iat\": 1553855569\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{env_security_testToken}}",
							"host": [
								"{{env_security_testToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAuthTestTokenK8S Oldscope",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f9d80865-f06b-44b1-bc5e-d193f9544317",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "25469449-a608-4f32-b5c7-79d7520cb445",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.environment.set(\"access_token\", pm.response.text());",
									"});",
									"",
									"",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"tenant_id\": {{tenantId_security}},\n\"tenant_name\": \"CLX EBS\",\n\"user_name\": \"{{userId_security}}\",\n\"contractNo\": \"{{contractNo_security}}\",\n\"languageCode\": \"en\",\n\"bcNo\": \"{{bcNo_security}}\",\n\"authorities\": [\"DBAN_ADMIN\", \"DBAN_USER\"],\n\"client_id\": \"postman\",\n\"user_id\": {{userId_security}},\n\"scope\": [\n    \"https://api.crealogix.com/dban\",\n    \"read\",\n    \"https://api.crealogix.com/contracts/contract.advisor.readonly\",\n    \"https://api.crealogix.com/assets/account.balance.readonly\",\n    \"https://api.crealogix.com/contracts/contract.metadata.readonly\",\n    \"https://api.crealogix.com/contracts/contract.person.readonly\",\n    \"https://api.crealogix.com/payments/payment.initiate\",\n    \"https://api.crealogix.com/assets/account.transaction.readonly\",\n    \"https://api.crealogix.com/assets/account.permission.readonly\",\n    \"write\",\n    \"https://api.crealogix.com/assets/account.metadata.readonly\",\n    \"https://api.crealogix.com/referencedata/countries\",\n    \"https://api.crealogix.com/referencedata/currencies\",\n    \"https://api.crealogix.com/referencedata/organisation-units\"\n  ],\n\"loginName\": \"{{userId_security}}\",\n\"exp\": 32479694642,\n\"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\n\"iat\": 1553855569\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{env_security_testToken}}",
							"host": [
								"{{env_security_testToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAuthTestTokenK8S_insufficientToken",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0e0f2bf7-2f31-4976-9414-85a809d73504",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1f051f47-8ee2-432a-9962-0ed154250c8f",
								"exec": [
									"pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.environment.set(\"access_token\", pm.response.text());",
									"});",
									"",
									"",
									"// Session navigate from PrS using eval()",
									"eval(globals.sessionNavigate)();",
									"",
									"// Reset reference to TR test cases",
									"pm.globals.unset(\"_tr_\" + request.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"tenant_id\": {{tenantId_security}},\n\"tenant_name\": \"CLX EBS\",\n\"user_name\": \"{{userId_security}}\",\n\"contractNo\": \"{{contractNo_security}}\",\n\"languageCode\": \"en\",\n\"bcNo\": \"{{bcNo_security}}\",\n\"authorities\": [\"DBAN_ADMIN\", \"DBAN_USER\"],\n\"client_id\": \"postman\",\n\"user_id\": {{userId_security}},\n\"scope\": [\n\"https://api.crealogix.com/dban\",\n\"read\",\n\"write\",\n\"https://api.crealogix.com/contracts/contract.advisor.readonly\",\n\"https://api.crealogix.com/contracts/contract.metadata.readonly\",\n\"https://api.crealogix.com/contracts/contract.person.readonly\",\n\"https://api.crealogix.com/payments/payment.initiate\",\n\"https://api.crealogix.com/payments/payment.read\",\n\"https://api.crealogix.com/payments/payment.write\",\n\"https://api.crealogix.com/assets/account.balance.readonly\",\n\"https://api.crealogix.com/assets/account.transaction.readonly\",\n\"https://api.crealogix.com/assets/account.permission.readonly\",\n\"https://api.crealogix.com/assets/account.metadata.readonly\",\n\"https://api.crealogix.com/assets/account.accountname.write\",\n\"https://api.crealogix.com/assets/account.accountimage.write\",\n\"https://api.crealogix.com/assets/cuac.readonly\",\n\"https://api.crealogix.com/assets/portfolio.readonly\",\n\"https://api.crealogix.com/messages/securemail.write\",\n\"https://api.crealogix.com/messages/securemail.read\",\n\"https://api.crealogix.com/messages/document.category.read\",\n\"https://api.crealogix.com/messages/document.category.write\",\n\"https://api.crealogix.com/messages/document.write\",\n\"https://api.crealogix.com/messages/document.read\",\n\"https://api.crealogix.com/brokerage/security.readonly\",\n\"https://api.crealogix.com/brokerage/tradingplace.readonly\",\n\"https://api.crealogix.com/brokerage/depository.readonly\",\n\"https://api.crealogix.com/brokerage/order.readonly\",\n\"https://api.crealogix.com/brokerage/order.write\",\n\"https://api.crealogix.com/deeplink/domains\",\n\"https://api.crealogix.com/deeplink/links\"\n],\n\"loginName\": \"{{userId_security}}\",\n\"exp\": 32479694642,\n\"jti\": \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\",\n\"iat\": 1553855569\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{env_security_testToken}}",
							"host": [
								"{{env_security_testToken}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clean TestRail Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68180792-7e19-487b-9bde-278a589eff66",
								"exec": [
									"// Prepare list of TestRail tests for 'Clean TestRail Run' request",
									"//var execTests = pm.globals.get(\"testRailTestsInRun\");",
									"var execTests = data.executedTests;",
									"console.log(\"TestRail, tests executed in last run: \" + execTests);",
									"execTests = execTests.replace(/C/g, \"\");",
									"//console.log(\"TestRail, first cleanup: \" + execTests);",
									"execTests = execTests.replace(/ /g, \", \");",
									"//console.log(\"TestRail, second cleanup: \" + execTests);",
									"execTests = execTests.replace(/,,/g, \",\");",
									"pm.globals.set(\"testRailTestsInRun\", execTests); ",
									"",
									"var array = JSON.parse(\"[\" + execTests + \"]\"); //convert string to array",
									"for(let i = 0; i < 10; i++){",
									"    let runId = JSON.parse(responseBody)[i].id;",
									"    let runName = JSON.parse(responseBody)[i].name;",
									"    let runSuiteId = JSON.parse(responseBody)[i].suite_id;",
									"    if (runName === \"Postman API Tests\") { //determine proper run",
									"        //console.log(runId);   ",
									"        console.log(\"TestRail run '\" + runId + \"' updating for tests: \" + execTests);",
									"        pm.sendRequest({",
									"            url: \"https://testrail.ebs.crealogix.net/index.php?/api/v2/update_run/\" + runId,",
									"            method: \"POST\",",
									"            header: {",
									"                \"Authorization\": \"Basic bWlsYW4ua2FyYWRlZ2xpY0BjcmVhbG9naXguY29tOlNTQ25hcG9saTEyMzQ1Njc4OQ==\",",
									"                \"Content-Type\": \"application/json\"",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({ include_all: false, case_ids: array })",
									"        \t}",
									"        });",
									"        break;",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5bfa2019-9d78-4384-aefb-852c2d8662c4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "SSCnapoli123456789",
									"type": "string"
								},
								{
									"key": "username",
									"value": "milan.karadeglic@crealogix.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json; charset=UTF-8"
							},
							{
								"key": "accept",
								"value": "application/json, application/hal+json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "https://testrail.ebs.crealogix.net/index.php?/api/v2/get_runs/8",
							"protocol": "https",
							"host": [
								"testrail",
								"ebs",
								"crealogix",
								"net"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "/api/v2/get_runs/8",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tests.old",
			"item": [
				{
					"name": "Accounts_Search (C41736193).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "46508ecc-a0db-4786-9b3a-287c8fb0fb68",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search\"",
									"    ]; ",
									"    pm.environment.set(\"request_body\", ('{}'));",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "faf4a213-cd4d-45a1-b57b-1c61ff8af5f9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_BIC (C41939550).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3a8a0af8-c0e6-4cc4-b35a-362efd920efa",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search\",",
									"        \"Account_Search_BIC\"",
									"    ]; ",
									"    pm.environment.set(\"request_body\", ('{}'));",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Account_Search_BIC\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aa00e631-2d63-42fc-9327-77b3a7cf4e85",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_contract iban desc (C38950549).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cefa3398-4f58-4105-9238-5e003d5ae15c",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_Multiple_criteria_iban_desc\"",
									"    ]; ",
									"",
									"    pm.globals.set(\"_tr_Account_Search_Multiple_criteria_iban_desc\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c3e0fb34-f33d-4518-9f9a-691c3f2a037b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_contract iban asc (C38950548).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0e64be72-aa0f-4518-9ede-df4fa6b1d6a9",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_Multiple_criteria_iban_asc\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_Multiple_criteria_iban_asc\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b27239f6-f886-4b16-920f-80baed5183af",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_Account_Number (C37972701).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2d05b331-f017-4200-ac10-29b26d1a4e7b",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"Account_Search_Account number\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Account_Search_Account number\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5b991d50-c151-44aa-a3f7-ef25704fdc1c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_Multiple_Names (C38950539).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cda3c167-21bd-4dfc-bb87-f98096aed726",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_Multiple names\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_Multiple names\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6a3a0e92-7b9f-4da2-8c26-db89a1048d0e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_AccountType_Current (C38950541).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d998fe09-9a8f-443b-89df-93ddbca596a3",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_AccountType_Current\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_AccountType_Current\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "71220c0a-e8fc-426f-b223-d6284b76a3b3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_AccountType_SAVINGS (C38950542).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9dd87bc4-fa7f-432a-b7af-c7bd8baa0df4",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_AccountType_SAVINGS\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_AccountType_SAVINGS\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0d24478f-23b4-4c30-a049-990b13ef4812",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_Multiple_Account_Number (C38950540).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "399db46d-77d1-432d-b4b6-a31eea13532c",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"Account_Search_Multiple_Account_number\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Account_Search_Multiple_Account_number\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ab8eb663-b2fc-4dd4-b7fa-217c0e42e0c1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_EndDate (C37786407)?????",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "18d60e77-3777-41a5-acaa-316b7478fa20",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"Account_Search_Multiple_Account_number\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Account_Search_Multiple_Account_number\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7ced0215-5b8f-4b00-a74c-3f033006034f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_startDate&EndDate (C379050538).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1ef5ef4c-17bd-41a0-8d65-5403fee936b7",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_Search_startDate&endDate\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_AccountId_Search_startDate&endDate\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fbd5281e-386b-4e78-8f86-3f6735d18bb4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_AccountType_Multiple (C41083339).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8f837f0f-5301-41a6-93b9-7cafd6b6120d",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_AccountType_Multiple\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_AccountType_Multiple\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cf4d3ce0-3d20-4dc6-9fa3-a699c797a667",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_AccountType_Other (C41083337).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "524b68fe-ad8f-4351-aaf8-6c2298d8b094",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_AccountType_Current\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_AccountType_Current\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "58ece08f-7624-4c18-b5ad-21d6f1585507",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_iban (C38950543).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1cc2519d-d87c-46f0-a0ac-1876b33d12d9",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"Account_Search_iban\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Account_Search_iban\",testRailTestCases);",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "203e8882-96d8-4761-aff7-31254b133dea",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_multiple_iban (C38950544).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bc7fb21e-11b8-4872-b7fe-3b57b89a8c8b",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"Account_Search_multiple_iban\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search_multiple_iban\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "eed920f8-24aa-4ef9-a32b-aa5fc5728f79",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts_Search_contractId (C38950547).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e71ea06-9b1c-4da4-9b19-f0622188ec52",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"Account_Search_ContractId\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Account_Search_ContractId\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f52a881f-ab78-446b-a942-d11bd568864f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "transactions search pagination (C47473070)/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "42eda7ce-2bed-4552-aa98-8b53f9f91b46",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_Transaction_Search_pagination\"",
									"    ]; ",
									"   // pm.environment.set(\"request_body\", ('{\"criteria\": {\"accountName\": [\"1704 USD\"]}}'));",
									"    pm.globals.set(\"_tr_Account_Search\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_AccountId_Search_startDate&endDate\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "35896109-1ebf-4177-b1ea-c962729e5363",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search_by_startdate (C37786354)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "712015f9-5628-4f05-ac53-0f169e6cfa9c",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search_startDate\"",
									"    ]; ",
									"",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_startDate\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "722e7244-b352-4c24-a54c-d07fa38d3342",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order_by_amount_asc (C37972704)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "77ad2f12-579f-4947-a7c3-ef1e4eafa0cd",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2415e0de-8f35-4bfd-8463-fa8328ee0404",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order_by_amount_desc (C38719010)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7e7b3a2e-c9df-4070-9fe6-d8cb1f1ebd98",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search_desc\"",
									"    ]; ",
									"",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_desc\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b8b468f4-3abd-4157-b803-524d5106e331",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "List of custody accounts (C41736189)///",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f8231b7f-1adb-4ea2-bf85-577cf19c1e47",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get custody accounts\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get custody accounts\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "926fe1ea-9e72-4dac-a661-3e9b0bc5179a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "List of portfolios (C43024137)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "31113c1c-9bf8-43ce-8575-0e3cb6fcabcc",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_portfolios_list\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_portfolios_list\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "73fb1d84-127a-48fb-be06-7594070f122b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Portfolio details (C43024139)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "03ef48a5-7f2e-4d66-96e1-4f93b21dec51",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_portfolios_details_list\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_portfolios_details_list\",testRailTestCases);",
									"",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2fa039c8-efce-4d92-8f63-b9ecddff45bf",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Portfolio performance details (C43181629)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a87928db-a013-4a80-8537-edca6b34e83e",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_portfolios_list\",",
									"        \"Get_performance_details\"",
									"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_portfolios_list\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Get_performance_details\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9a0eabd3-0dfe-4225-8f7c-80af567f942f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Portfolio assets details (C43181622)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ff04a8f1-01eb-4ba6-a120-22e1daabbdfa",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_portfolios_list\",",
									"        \"Get_assets_list\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_portfolios_list\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Get_assets_list\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a358d344-8fe8-446e-bb12-b6e88eee0733",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Maturity details (C43181624)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cb5de7e0-2388-43cc-bf11-ca6c78c6517c",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_maturity_list\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_maturity_list\",testRailTestCases);",
									" ",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "92f566ec-255a-4607-aa75-3e7693f36440",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check proper custody account (C41853576)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9fabd618-7287-4f56-b4b1-276675f7aa19",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get custody accounts\",",
									"        \"Get_customer_info_by_his_ID\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get custody accounts\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Get_customer_info_by_his_ID\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "69ab21ca-ac37-4423-be95-5fe7b9145274",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check proper custody account searched by PortfolioId (C41853577)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3f09260c-5d2f-4197-afbb-2f8734b5b829",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get custody accounts\",",
									"        \"Get_customer_info_by_his_ID\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get custody accounts\",\"<preCondition>\");",
									"    pm.globals.set(\"_tr_Get_customer_info_by_his_ID\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "558652ac-3ac3-44a9-bec2-076395104801",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Custody account details (C41853582)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d4933375-252f-4cfe-8415-85f31269338d",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get_customer_info_by_his_ID\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get_customer_info_by_his_ID\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "08c51056-f78c-409d-a708-9484ee1e8b88",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Individual transaction (C33706455)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9125eda1-86b5-499e-8fa4-c9b88cc9b2b4",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search\",",
									"        \"get_single_transaction\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_get_single_transaction\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e03fe6a1-3c2e-4aba-a65c-a85291f2e1d1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Checking pagination (C47473979)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "280227df-f3ce-4500-afcb-7dde9fc41089",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search_pagination\",",
									"        \"AccountId_Transaction_Search_size\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_pagination\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_size\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a005fd68-4e70-44b3-b07e-21231f8f5c28",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Transaction_search overview (C38763410)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "98333524-1d75-44f0-b455-9747c098587a",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search\",",
									"        \"get_single_transaction\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_get_single_transaction\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8d2375ca-58f4-4667-a061-97b3e59d8393",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Transactions 400 (C38763416)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7205915f-63f1-466b-a18f-89a6a7540aa6",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_Transaction_Search_validation 400\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_validation 400\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "acf763e7-4770-467d-8614-624e2bc55818",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Transactions 401 (C38763419)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b01aae88-4495-436e-b1ce-37036709591a",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestTokenK8S_insuficientToken\",",
									"        \"AccountId_transaction 401 validation\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_getAuthTestTokenK8S_insuficientToken\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_transaction 401 validation\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "355e4711-3743-4dd8-8485-73271f4de2a1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "set new alias (C37905058)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2353fcd3-a4f4-4662-8757-e8dc99f3a502",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"set_alias\",",
									"        \"Account_Search_alias\",",
									"        \"Account_Search_alias_Postconditions\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_set_alias\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Account_Search_alias\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Account_Search_alias_Postconditions\",testRailTestCases);",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6c2ea6ea-0039-4dc0-b4b4-d3068c2206d0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "update alias (C37905064)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2adb8ba9-0554-4d7e-9f0f-2dc53dbdb0b4",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"set_alias\",",
									"        \"update alias\",",
									"        \"Account_Search_updated_alias\",",
									"        \"Account_Search_alias_Postconditions\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_set_alias\",testRailTestCases);",
									"    pm.globals.set(\"_tr_update alias\",testRailTestCases);",
									"",
									"    pm.globals.set(\"_tr_Account_Search_updated_alias\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Account_Search_alias_Postconditions\",testRailTestCases);",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5a5bf033-3b72-46a7-b345-c40584fe8114",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete alias (C37905066)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7f92b0aa-78b6-4fb4-95e4-c09911c58cab",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"set_alias\",",
									"        \"delete alias\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_set_alias\",testRailTestCases);",
									"    pm.globals.set(\"_tr_delete alias\",testRailTestCases);",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "08616338-c58b-49f3-8014-2802c74f3287",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Permissions (C36212106)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2e2b5708-d883-43ed-b884-05e005a6c95c",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_permissions\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_permissions\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "32cf461c-4bab-4e50-b618-188d0e4e1a82",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Permissions 400 (C38778991)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0cda8b12-e81d-4252-a294-919b6bfc2ee7",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_permissions 400 validation\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_permissions 400 validation\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6e3cd1a6-4dbb-410f-9481-5d0d8e8a4aef",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Permissions 401 (C38920771)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f810d9d7-6b7e-4709-89f0-d3a920069cef",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestTokenK8S_insuficientToken\",",
									"        \"AccountId_permissions 401 validation\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_getAuthTestTokenK8S_insuficientToken\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_permissions 401 validation\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f072a4f0-55d5-4e48-b3b6-77be602900f9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "INCOMING transaction flow(C37905043).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "42068401-2e06-4f70-8fad-9e7ebccf4f61",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"Incoming transactions\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_Incoming transactions\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "38d761d6-37dc-41a1-8ab1-e068ab117ded",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "OUTGOING transaction flow(C37905044).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "df17b327-304d-4d2c-9f03-7ae48d86f2d2",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"OUTGOING transactions\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_OUTGOING transactions\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "09b27d80-98ba-4f45-ac10-b59b13b4fa8a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "BOTH transaction flow (C37905045).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9e4f4897-40b0-49ad-9bc9-89078e215c2a",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"BOTH transactions\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_BOTH transactions\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "86fd95c4-bf24-43a3-8f92-ca3cd326a321",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "BOTH transactionType (C37905048).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3ab87454-853c-4ca5-978d-0bb9b4e063a0",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"BOTH transactionsType\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_BOTH transactionsType\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "34f38a78-8637-44d4-8de0-25749a0843dc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "BOOKED transactionType (C37905046).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f0d11951-3b96-4c8a-b19d-277f13c7862b",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"BOOKED transactions\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_BOOKED transactions\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ca8a23b6-d14f-478c-901b-e5f6e608951a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "UNBOOKED transaction type (C37905047).old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "712b166d-993f-4302-9ceb-d37f4f6d6a71",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"UNBOOKED transactions\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_UNBOOKED transactions\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a879690b-350c-4b77-a3b4-4bb99feaf0ea",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Balance (C35075337)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1774c031-a500-40d5-8c69-3e0713f35311",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_balance\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_balance\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6104cab8-1085-4636-b7ae-87b5fbc4f47c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Balance 400 (C38920909)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1385603e-f977-492a-a277-ad1b5d2974a6",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_balance 400 validation\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_balance 400 validation\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b7c5ce15-496a-4cd4-b2d5-b9167f1e5477",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "AccountId Balance 401 (C38920911)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9e48763a-9d50-4c7c-96d8-2977640bf140",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"getAuthTestTokenK8S_insuficientToken\",",
									"        \"AccountId_balance 401 validation\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_getAuthTestTokenK8S_insuficientToken\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_balance 401 validation\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "88693f1e-4fee-438a-bb7a-fbf975def6ef",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by accountName (C37949168)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "29596645-30ad-423e-884a-ec0ad4fb26ed",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Account_Search\",",
									"        \"AccountId_balance\"",
									"      ",
									"    ]; ",
									"    pm.globals.set(\"_tr_Account_Search\",testRailTestCases);",
									"    pm.globals.set(\"_tr_AccountId_balance\",testRailTestCases);",
									"    ",
									"    ",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8711afe7-f486-42da-a9d1-9403ceb5808e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Transaction details search by reference text (C37905050)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3fe34745-19ed-421f-9767-a05779468111",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    ",
									"        \"AccountId_Transaction_Search_Reference_Text\"",
									"    ]; ",
									"",
									"    pm.globals.set(\"_tr_AccountId_Transaction_Search_Reference_Text\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0903e23f-dc58-4fe3-a60d-580231bbb286",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Custody account transactions details (C43024136)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "845a1996-1362-4568-9d78-8e63f55bd559",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get custody account transactions details\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get custody account transactions details\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "921c1734-6654-4de9-a3b2-a366716de663",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Custody account position list (C41853583)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2509fd98-1ce6-4d32-8009-48e8aa8fc5aa",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get positons for cuacsId\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get positons for cuacsId\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "edd3b2ac-ae0e-4641-8b38-b12d725466c7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Custody account position details (C42065196)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "db44e57c-a2e3-4bff-8a3f-e425b6c6258f",
								"exec": [
									"//var testRailTestCases = \"C43995762\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get custody account positions\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get custody account positions\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "50963ace-88ba-41ad-a8a6-9504ebaaf13b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Display listing by listing ID (C43995816)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ef88eb91-1134-4e76-baeb-1650c351338b",
								"exec": [
									"//testRailTestCases = \"C43995816\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get listings\",",
									"        \"Get listing by listing ID\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get listings\",\"[precondition]\");",
									"    pm.globals.set(\"_tr_Get listing by listing ID\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Account transaction sorted by amount (C37972704)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2dd2c4cc-0e4d-449e-b92c-89fdd9128019",
								"exec": [
									"//testRailTestCases = \"C43995816\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"    \"Account_Searchs\",",
									"    \"AccountId_Transaction_Search\"",
									"];",
									"pm.globals.set(\"_tr_Account_Search\");",
									"pm.globals.set(\"_tr_AccountId_Transaction_Search\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\", testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "List trading places (C43995818)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d094fa44-5e00-484b-95ca-11407f2c254f",
								"exec": [
									"//var testRailTestCases = \"C43995818\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get trading places\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get trading places\",testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6bf7363a-2854-4840-9276-cda631ab6e32",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Display trading place by tradingPlaceId (C43995821)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "797f7dc1-2875-4c50-9227-5f35c7c81859",
								"exec": [
									"//testRailTestCases = \"C43995821\"",
									"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
									"eval(globals.testsExecuted)(testRailTestCases);",
									"",
									"var requestsToRun = [",
									"        \"Get trading places\",",
									"        \"Get trading place by tradingPlaceId\"",
									"    ]; ",
									"    pm.globals.set(\"_tr_Get trading places\",\"[precondition]\");",
									"    pm.globals.set(\"_tr_Get trading place by tradingPlaceId\", testRailTestCases);",
									"",
									"//specify related TestRail tests",
									"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6a6510ba-cb06-4e41-b2d6-862b1325d385",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				},
				{
					"name": "_Test session close",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b13fefb4-cf06-473f-8ce5-04e64ae23b14",
								"exec": [
									"var requestsToRun = ",
									"    [",
									"        \"Clean TestRail Run\"",
									"    ]; ",
									"",
									"// Session initiate from PrS using eval()",
									"eval(globals.sessionInit)(requestsToRun, \"requestsToRun\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "37122f1b-af37-460e-8f61-c4a5250a205c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b5580ce3-c5c7-4f3e-9a8c-728259f6262d",
						"type": "text/javascript",
						"exec": [
							"/*determine test case ID from request name*/",
							"var testRailTestCases = eval(globals.extractTestCaseIDFromRequestName)();",
							"//console.log(\"TC ID extracted from request name: \" + testRailTestCases);",
							"",
							"/*add current test case ID to list of already executed tests*/",
							"eval(globals.testsExecuted)(testRailTestCases);",
							"pm.globals.set(\"testRailTestCases\",testRailTestCases);",
							"",
							"//store test case ID of current request for linking with Test Rail",
							"pm.globals.set(\"_tr_\" + request.name, testRailTestCases);",
							"",
							"//call global function to generate access token",
							"eval(globals.generateAccessToken)();"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6f9b60fd-77fc-4a59-80d9-4dd42bb655ec",
						"type": "text/javascript",
						"exec": [
							"eval(globals.sessionNavigate)();"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Manual tests",
			"item": [],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "1b950e71-01b0-4511-b571-627ae5d9f6a6",
				"type": "text/javascript",
				"exec": [
					"//************************************************************************************************",
					"// variable initialization************************************************************************",
					"//************************************************************************************************",
					"var test = pm.environment.get(\"testRailTestsInRun\");",
					"if( !test) {",
					"    pm.environment.set(\"testRailTestsInRun\",\"\");",
					"}",
					"",
					"//************************************************************************************************",
					"// connect to TestRail ***************************************************************************",
					"//************************************************************************************************",
					"pm.globals.set(\"TESTRAIL_DOMAIN\",\"testrail.ebs.crealogix.net\");",
					"pm.globals.set(\"TESTRAIL_USERNAME\",\"milan.karadeglic@crealogix.com\"); ",
					"pm.globals.set(\"TESTRAIL_APIKEY\",\"Q4MlDw1e70Kxh1g1YPq9-Dg0abDWer.pSWcVWcxO4\");",
					"pm.globals.set(\"TESTRAIL_PROJECTID\",8); ",
					"pm.globals.set(\"TESTRAIL_TITLE\",\"Postman API Tests\");",
					"",
					"",
					"",
					"//************************************************************************************************",
					"//global function to determine next day/next working day *****************************************",
					"//************************************************************************************************",
					"var moment = require('moment');",
					"let nextDay = moment().add(\"days\",1).format(\"YYYY-MM-DD\"); //next day in specified format",
					"switch (moment().add(\"days\",1).format(\"dddd\")){",
					"    case \"Sunday\":",
					"        var nextWorkingDay = moment().add(\"days\",2).format(\"YYYY-MM-DD\");",
					"        break;",
					"    case \"Saturday\":",
					"        var nextWorkingDay = moment().add(\"days\",3).format(\"YYYY-MM-DD\");",
					"        break;",
					"    default:",
					"        var nextWorkingDay = moment().add(\"days\",1).format(\"YYYY-MM-DD\");",
					"}",
					"pm.globals.set('PrS:nextDay', JSON.stringify(nextDay));",
					"pm.globals.set('PrS:nextWorkingDay', JSON.stringify(nextWorkingDay));",
					"",
					"",
					"/* function for making assets search*/",
					"postman.setGlobalVariable(\"assetsSearchFunction\", (NextPrecondition) => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/accounts/${pm.environment.get(\"tenantId_assets\")}/v4/accounts/search?size=30`,",
					"        method: \"POST\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"               ",
					"                       ",
					"            })",
					"        }",
					"    ",
					"}, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"_tmp_accountId\",res.json().accountList[res.json().page.totalElements-1].id);",
					"            console.log(\"New account ID: \" + pm.environment.get(\"_tmp_accountId\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_accountId2\",res.json().accountList[1].id);",
					"\t\t\tconsole.log(\"New account ID2: \" + pm.environment.get(\"_tmp_accountId2\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_accountIdAlias\",res.json().accountList[2].id);",
					"\t\t\tconsole.log(\"New account _tmp_accountIdAlias: \" + pm.environment.get(\"_tmp_accountIdAlias\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_accountNumber1\",res.json().accountList[0].accountNumber);",
					"\t\t\tconsole.log(\"New _tmp_accountNumber1: \" + pm.environment.get(\"_tmp_accountNumber1\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_accountNumber2\",res.json().accountList[1].accountNumber);",
					"\t\t\tconsole.log(\"New _tmp_accountNumber2: \" + pm.environment.get(\"_tmp_accountNumber2\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_iban1\",res.json().accountList[0].iban);",
					"\t\t\tconsole.log(\"New _tmp_iban1: \" + pm.environment.get(\"_tmp_iban1\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_iban2\",res.json().accountList[1].iban);",
					"\t\t\tconsole.log(\"New _tmp_iban2: \" + pm.environment.get(\"_tmp_iban2\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_id1\",res.json().accountList[0].id);",
					"\t\t\tconsole.log(\"New _tmp_id1: \" + pm.environment.get(\"_tmp_id1\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_id2\",res.json().accountList[1].id);",
					"\t\t\tconsole.log(\"New _tmp_id2: \" + pm.environment.get(\"_tmp_id2\"));",
					"\t\t\t",
					"\t\t\tpm.environment.set(\"_tmp_contractId\",res.json().accountList[0].permissions[0].contractId);",
					"\t\t\tconsole.log(\"New _tmp_contractId: \" + pm.environment.get(\"_tmp_contractId\"));",
					"",
					"            switch (NextPrecondition){",
					"                case \"assetsTransactionSearchFunction\":",
					"                    eval(globals.assetsTransactionSearchFunction)();",
					"                    break;",
					"                default:",
					"            }",
					"        }                          ",
					"    });",
					"});",
					"",
					"/* function for making cuacs request*/",
					"postman.setGlobalVariable(\"cuacsRequest\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/cuacs/${pm.environment.get(\"tenantId_assets\")}/v1/cuacs`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"               ",
					"                       ",
					"            })",
					"        }",
					"    ",
					"}, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json()._embedded);",
					"            ",
					"        } else {",
					"            pm.environment.set(\"_tmp_cuacsId\",res.json.cuacs[0].id);",
					"            console.log(\"New custody account ID: \" + pm.environment.get(\"_tmp_cuacsId\"));",
					"\t\t\t",
					"\t\t\t",
					"\t\t\t",
					"        }                          ",
					"    });",
					"});",
					"",
					"/* function for making portfolio request*/",
					"postman.setGlobalVariable(\"portfolioRequest\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/portfolios/${pm.environment.get(\"tenantId_assets\")}/v1/portfolios`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"               ",
					"                       ",
					"            })",
					"        }",
					"    ",
					"}, function(err, res) {",
					"        if (err) {",
					"            //console.log(\"First:\");",
					"            //console.log(err);",
					"            //console.log(\"Second:\");",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"_tmp_portfolioId\",res.json()._embedded.portfolios[1].id);",
					"            console.log(\"New portfolio ID: \" + pm.environment.get(\"_tmp_portfolioId\"));",
					"\t\t\tpm.environment.set(\"_tmp_customerId\",res.json()._embedded.portfolios[1].customerId);",
					"            console.log(\"New customer ID: \" + pm.environment.get(\"_tmp_customerId\"));",
					"        }                          ",
					"    });",
					"});",
					"",
					"/* function for making assets transaction search*/",
					"postman.setGlobalVariable(\"assetsTransactionSearchFunction\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/accounts/${pm.environment.get(\"tenantId_assets\")}/v4/accounts/${pm.environment.get(\"_tmp_accountId\")}/transactions/search`,",
					"        method: \"POST\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw:JSON.stringify({ ",
					"\t    \torderBy: [",
					"\t\t\t\t{",
					"\t\t\t\t\tfield: \"AMOUNT\",",
					"\t\t\t\t\tsortOrder:\"ASC\"",
					"\t\t\t\t}]",
					"\t\t\t,",
					"\t\t\tcriteria: {",
					"\t\t\t\t\tstartDate:\"2019-01-01\",",
					"\t\t\t\t\tendDate:\"2020-06-01\"",
					"\t\t\t\t\t\t}         \t",
					"            })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            let noData = (res.json.transactionGroups === undefined || res.json.transactionGroups.length === 0);     ",
					"            if(!noData){",
					"                pm.environment.set(\"_tmp_transactionsId\",res.json.transactionGroups[0].transactions[0].id);",
					"                console.log(\"New transaction ID is set: \" + pm.environment.get(\"_tmp_transactionsId\"));",
					"            } else {",
					"                pm.environment.unset(\"_tmp_transactionsId\");",
					"                console.log(\"!ERROR!: Response is empty, no transaction ID to store!\");",
					"            }",
					"        }              ",
					"    });",
					"});",
					"",
					"postman.setGlobalVariable(\"commonTests\", () => {",
					"    pm.test(\"Response must be valid with/with out a body and with proper status code\", function () {",
					"        if ([\"GET\",\"POST\",\"PUT\"].indexOf(request.method) > -1) {",
					"            pm.response.to.not.be.error;",
					"            pm.response.to.be.withBody;",
					"            pm.response.to.be.json;",
					"            pm.response.to.have.jsonBody();",
					"            pm.response.to.not.have.jsonBody('error');",
					"            pm.response.to.have.header('Content-Type', 'application/hal+json;charset=UTF-8');",
					"        } else {",
					"            pm.response.to.not.be.withBody;",
					"        }",
					"        switch(request.method){",
					"            case \"POST\":",
					"                pm.response.to.have.status(201);",
					"                break;",
					"            case \"PUT\":",
					"                pm.response.to.have.status(200);",
					"                break;",
					"            case \"GET\":",
					"                pm.response.to.have.status(200);",
					"                break;",
					"            case \"DELETE\":",
					"                pm.response.to.have.status(204);",
					"                break;",
					"        }        ",
					"    });",
					"    //pm.test(\"Response time is below 1000ms\", function () {",
					"    //    pm.expect(pm.response.responseTime).to.be.below(1000);",
					"    //});",
					"});",
					"",
					"postman.setGlobalVariable(\"assertValidCreditorAgent\", () => {",
					"    pm.expect(address).to.be.an('object').with.keys('name1', 'name2', 'street', 'city', 'country');",
					"    pm.expect(address.name1).to.be.a('string').and.not.empty;",
					"    pm.expect(address.name2).to.be.a('string').and.not.empty;",
					"    pm.expect(address.street).to.be.a('string').and.not.empty;",
					"    pm.expect(address.city).to.be.a('string').and.not.empty;",
					"    pm.expect(address.country).to.be.a('string').with.lengthOf(2).and.match(/[A-Z]+/);",
					"});",
					"",
					"",
					"",
					"postman.setGlobalVariable(\"sessionInit\", (testSession, sessionName) => {",
					"    //session init section",
					"    console.log(request.name + \", initialization: \" + testSession + \", global var: \" + sessionName);",
					"    console.log(request.name + \", executing: \" + testSession[0]);",
					"    ",
					"    // Select first test from session to be executed",
					"    postman.setNextRequest(testSession[0]); ",
					"    testSession.shift();",
					"    if (testSession.length === 0) {",
					"        console.log(request.name + \", test session is empty, unset \" + sessionName);",
					"        pm.globals.unset(sessionName);",
					"        console.log(request.name + \", terminate tests execution list\");",
					"    } else {",
					"        pm.globals.set(sessionName, testSession);",
					"        console.log(request.name + \" for \" + sessionName + \", updated list of tests to be executed: \" + testSession);",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"sessionNavigate\", () => {",
					"    console.log(request.name + \", entering ...\");",
					"    if (pm.globals.get(\"requestsToRun\") === undefined){",
					"        console.log(request.name + \", requestsToRun is undefined\");",
					"        pm.globals.set(\"testRailTestCases\",\"\");",
					"        console.log(request.name + \", reset global var: testRailTestCases\");    ",
					"        if (pm.globals.get(\"testSession\") === undefined){",
					"            console.log(request.name + \", testSession is undefined\");",
					"            //here >> export list of tests executed",
					"            var tests = pm.environment.get(\"testRailTestsInRun\");",
					"            tests = tests.replace(/C/g, \"\");",
					"            tests = tests.replace(/ /g, \", \");",
					"            tests = tests.replace(/,,/g, \",\");",
					"            console.log(\"TestRail tests executed executed in this run: \" + tests);",
					"            console.log(\"The end\");",
					"            postman.setNextRequest(null);",
					"        } else {",
					"        var testSession = pm.globals.get(\"testSession\");",
					"        console.log(request.name + \", checking what to run: \" + testSession[0]);",
					"        postman.setNextRequest(testSession[0]); // Run: GET SWIFT payment",
					"        testSession.shift();",
					"        if (testSession.length === 0) {",
					"            pm.globals.unset(\"testSession\");",
					"            console.log(request.name + \", terminate execution list\");",
					"        } else {",
					"            pm.globals.set(\"testSession\", testSession);",
					"            console.log(request.name + \", updated list of tests to be executed: \" + testSession);",
					"        }}",
					"    } else {",
					"    var requestsToRun = pm.globals.get(\"requestsToRun\");",
					"    console.log(request.name + \", checking what to run: \" + requestsToRun[0]);",
					"    postman.setNextRequest(requestsToRun[0]); ",
					"    requestsToRun.shift();",
					"    if (requestsToRun.length === 0) {",
					"        pm.globals.unset(\"requestsToRun\");",
					"        console.log(request.name + \", terminate requests execution list\");",
					"    } else {",
					"        pm.globals.set(\"requestsToRun\", requestsToRun);",
					"        console.log(request.name + \", updated list of requests to be executed: \" + requestsToRun);",
					"    }}",
					"});",
					"",
					"postman.setGlobalVariable(\"cleanup\", () => {",
					"    const clean = [\"requestsToRun\", \"testSession\"];",
					"    for(let i = 0; i < clean.length; ++i){",
					"        pm.globals.unset(clean[i]);",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"testsExecuted\", (listOfExecutedTests) => {",
					"    let tests =  pm.environment.get(\"testRailTestsInRun\");",
					"    //console.log(\"TestRail tests stored in 'testRailTestsInRun': \" + tests);",
					"    if (tests.length > 0) {",
					"        tests = tests + \" \"",
					"    }",
					"    tests = tests + listOfExecutedTests;",
					"    //console.log(\"TestRail tests to be stored to 'testRailTestsInRun': \" + tests);",
					"    pm.environment.set(\"testRailTestsInRun\",tests);",
					"    //console.log(\"TestRail tests executed so far: \" + tests);",
					"});",
					"",
					"postman.setGlobalVariable(\"extractTestCaseIDFromRequestName\", () => {",
					"    let n = request.name.lastIndexOf(\"(\");",
					"    return request.name.substr(n + 1, request.name.length - n - 2);",
					"});",
					"",
					"postman.setGlobalVariable(\"schemaValidator\", (schema, jsonData) => {",
					"    //old, deprecated schema validationimplementation",
					"    //pm.expect(tv4.validate(jsonData, securitiesSchema)).to.be.true;",
					"    ",
					"    //new schema validation implementation",
					"    ",
					"    var schemaValidationPassed = true;",
					"    var serviceSchema = pm.environment.get(schema);",
					"    //var jsonData = JSON.parse(pm.responseBody);",
					"",
					"    var validationResult = tv4.validateMultiple(jsonData, serviceSchema, true, true);",
					"    for(var i =0; i<validationResult.errors.length;i++){",
					"        console.log(\"path :\"+ validationResult.errors[i].dataPath +\" message :\"+ validationResult.errors[i].message);  ",
					"        //Skipping all \"Invalid type\" errors as they are expected with current service implementations",
					"        schemaValidationPassed = schemaValidationPassed && (validationResult.errors[i].message.lastIndexOf(\"Invalid type\") > -1);",
					"        //console.log(\"schemaValidationPassed :\" + schemaValidationPassed);",
					"    }    ",
					"    return schemaValidationPassed;",
					"}); ",
					"",
					"postman.setGlobalVariable(\"isTest\", () => {",
					"    let reqPurpose = pm.globals.get(\"_tr_\" + request.name);",
					"    //console.log(request.name + \" has purpose: \" + reqPurpose);",
					"    if ([\"[cleanUp]\",\"[preCondition]\",\"[postCondition]\"].indexOf(reqPurpose) > -1) {",
					"        //console.log(\"Conclusion: NOT a test\");",
					"        return false;",
					"    } else {",
					"        //console.log(\"Conclusion: IS a test\");",
					"        return true;",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"getQueryParams\", (uri) => {",
					"  var vars = [];",
					"",
					"  // Get the start index of the query string",
					"  var qsi = uri.indexOf('?');",
					"  if (qsi == -1)",
					"    return vars;",
					"",
					"  // Get the query string",
					"  var qs = uri.slice(qsi + 1);",
					"",
					"  // Check if there is a subsection reference",
					"  sri = qs.indexOf('#');",
					"  if (sri >= 0)",
					"    qs = qs.slice(0, sri);",
					"",
					"  // Build the associative array",
					"  var hashes = qs.split('&');",
					"  for (var i = 0; i < hashes.length; i++) {",
					"    var sep = hashes[i].indexOf('=');",
					"    if (sep <= 0)",
					"      continue;",
					"    var key = decodeURIComponent(hashes[i].slice(0, sep));",
					"    var val = decodeURIComponent(hashes[i].slice(sep + 1));",
					"    vars[key] = val;",
					"  }",
					"  const jar = pm.cookies.jar();",
					"",
					"  jar.clear(pm.request.url, function (error) {",
					"  // error - <Error>",
					"  });",
					"",
					"  return vars;",
					"  ",
					"});",
					"",
					"postman.setGlobalVariable(\"randomizeVariables\", () => {",
					"    let newmanRun = pm.globals.get(\"newmanRun\");",
					"    if (newmanRun != 1) {",
					"        console.log(\"Randomizing variables ...\");",
					"        pm.environment.set(\"endToEndId\",JSON.stringify(pm.variables.replaceIn(\"{{$randomLoremSlug}}\")));",
					"        pm.environment.set(\"unstructured\",JSON.stringify(pm.variables.replaceIn(\"{{$guid}}\")));",
					"        pm.environment.set(\"instructionIdentification\",JSON.stringify(pm.variables.replaceIn(\"{{$randomBitcoin}}\")));",
					"        pm.environment.set(\"name\",JSON.stringify(pm.variables.replaceIn(\"{{$randomFullName}}\")));",
					"        pm.environment.set(\"adrLine1\",JSON.stringify(pm.variables.replaceIn(\"{{$randomStreetName}}\")));",
					"        pm.environment.set(\"adrLine2\",JSON.stringify(pm.variables.replaceIn(\"{{$randomStreetAddress}}\")));",
					"        pm.environment.set(\"streetName\",JSON.stringify(pm.variables.replaceIn(\"{{$randomStreetName}}\")));",
					"        pm.environment.set(\"townName\",JSON.stringify(pm.variables.replaceIn(\"{{$randomCity}}\")));",
					"        pm.environment.set(\"country\",JSON.stringify(pm.variables.replaceIn(\"{{$randomCountryCode}}\")));",
					"        pm.environment.set(\"buildingNm\",pm.variables.replaceIn('{{$randomInt}}'));",
					"        pm.environment.set(\"postalCode\",pm.variables.replaceIn('{{$randomInt}}'));",
					"        pm.environment.set(\"buildingNmStr\",JSON.stringify(pm.variables.replaceIn('{{$randomInt}}')));",
					"        pm.environment.set(\"postalCodeStr\",JSON.stringify(pm.variables.replaceIn('{{$randomInt}}')));",
					"        console.log(\"... randomize is finished\");",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"generateAccessToken\", () => {",
					"    const getAccessTokenRequest = {",
					"        url: pm.environment.get(\"env_security_testToken\"),",
					"        method: \"POST\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json'",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"                tenant_id: pm.environment.get(\"tenantId_security\"), ",
					"                acsKey: \"i6PiNObtdp2rCNW7mlV51BDSY4zAliSvBCyVsuML1000203567\",",
					"                tenant_name: pm.environment.get(\"tenantName_security\"),",
					"                user_name: pm.environment.get(\"userId_security\"),",
					"                contractNo: pm.environment.get(\"contractNo_security\"),",
					"                language: \"en\",",
					"                bcNo: pm.environment.get(\"bcNo_security\"),",
					"                authorities: [\"DBAN_ADMIN\", \"DBAN_USER\"],",
					"                client_id: \"postman\",",
					"                user_id: pm.environment.get(\"userId_security\"),",
					"                loginName: pm.environment.get(\"userId_security\"),",
					"                exp: 32479694642,   ",
					"                jti: \"7f3ab973-18bb-4bcc-a91e-ac38a1ad2287\", ",
					"                iat: 1553855569,   ",
					"                scope: [",
					"                    \"https://api.crealogix.com/dban\",",
					"                    \"read\",",
					"                    \"write\",",
					"                    \"https://api.crealogix.com/contracts/contract.advisor.readonly\",",
					"                    \"https://api.crealogix.com/contracts/contract.metadata.readonly\",",
					"                    \"https://api.crealogix.com/contracts/contract.person.readonly\",",
					"                    \"https://api.crealogix.com/payments/payment.initiate\",",
					"                    \"https://api.crealogix.com/payments/payment.read\",",
					"                    \"https://api.crealogix.com/payments/payment.write\",",
					"                    \"https://api.crealogix.com/assets/account/read\",",
					"                    \"https://api.crealogix.com/assets/account.transaction/read\",",
					"                    \"https://api.crealogix.com/assets/account.name\",",
					"                    \"https://api.crealogix.com/assets/account.image\",",
					"                    \"https://api.crealogix.com/assets/cuac/read\",",
					"                    \"https://api.crealogix.com/assets/portfolio/read\",",
					"                    \"https://api.crealogix.com/messages/securemail.write\",",
					"                    \"https://api.crealogix.com/messages/securemail.read\",",
					"                    \"https://api.crealogix.com/messages/document.category.read\",",
					"                    \"https://api.crealogix.com/messages/document.category.write\",",
					"                    \"https://api.crealogix.com/messages/document.write\",",
					"                    \"https://api.crealogix.com/messages/document.read\",",
					"                    \"https://api.crealogix.com/brokerage/security/read\",",
					"                    \"https://api.crealogix.com/brokerage/tradingplace/read\",",
					"                    \"https://api.crealogix.com/brokerage/depository/read\",",
					"                    \"https://api.crealogix.com/brokerage/order/read\",",
					"                    \"https://api.crealogix.com/brokerage/order\",",
					"                    \"https://api.crealogix.com/deeplink/domains\",",
					"                    \"https://api.crealogix.com/deeplink/links\"",
					"                ]",
					"            })",
					"        }",
					"    };",
					"    pm.environment.set(\"request\", JSON.stringify(getAccessTokenRequest));",
					"    ",
					"    pm.sendRequest(getAccessTokenRequest, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"access_token\", res.text());",
					"        }         ",
					"        /*",
					"        pm.test(pm.globals.get(\"_tr_\" + request.name) + \" Fetch a valid test token from the test-token REST service\", function () {",
					"            pm.expect(err).to.not.be.ok;",
					"            pm.expect(res).to.have.property('code', 200);",
					"            pm.expect(res).to.have.property('status', 'OK');          ",
					"        });",
					"        */",
					"    });",
					"});",
					"",
					"",
					"",
					"/* function for creating Swift payment*/",
					"postman.setGlobalVariable(\"paymentSwiftCreate\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"environment\")}/banking-api/payment/swift/${pm.environment.get(\"tenant\")}/v2/credittransfer`,",
					"        method: \"POST\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"                storeOnly: false, ",
					"                locked: false,",
					"                categoryPurposeCode: \"SALA\",",
					"                paymentInformation: {",
					"                    endToEndId: JSON.parse(pm.environment.get(\"endToEndId\")),",
					"                    instructedAmount: {",
					"                        currency: {",
					"                            code: \"GBP\"",
					"                        },",
					"                        value: 1",
					"                    },",
					"                    remittanceInformation: {",
					"                        \"unstructured\": JSON.parse(pm.environment.get(\"unstructured\")),",
					"                        \"structured\": JSON.parse(pm.environment.get(\"structuredRemittanceRF\"))",
					"                    },",
					"                    instructionIdentification: JSON.parse(pm.environment.get(\"instructionIdentification\")),",
					"                    requestedExecutionDate: JSON.parse(pm.globals.get(\"PrS:nextWorkingDay\")),",
					"                    instructionPriority: \"NORMAL\",",
					"                    creditor: {",
					"                        \"name\": JSON.parse(pm.environment.get(\"name\")),",
					"                        \"address\": {",
					"                            \"adrLine1\": JSON.parse(pm.environment.get(\"adrLine1\")),",
					"                            \"adrLine2\": JSON.parse(pm.environment.get(\"adrLine2\")),",
					"                            \"streetName\": JSON.parse(pm.environment.get(\"streetName\")),",
					"                            \"buildingNm\": pm.environment.get(\"buildingNm\"),",
					"                            \"postalCode\": pm.environment.get(\"postalCode\"),",
					"                            \"townName\": JSON.parse(pm.environment.get(\"townName\")),",
					"                            \"country\": JSON.parse(pm.environment.get(\"country\"))",
					"                        }",
					"                    },",
					"                    creditorAccountNo: JSON.parse(pm.environment.get(\"creditorAccountNoSWIFT\")),",
					"                    creditorAgent: {",
					"                        bic: JSON.parse(pm.environment.get(\"creditorAgentBicSWIFT\"))",
					"                    },",
					"                    debtor: {",
					"                        name: JSON.parse(pm.environment.get(\"debtorAccountName\")),",
					"                        address: {",
					"                            streetName: JSON.parse(pm.environment.get(\"debtorStreetName\")),",
					"                            postalCode: JSON.parse(pm.environment.get(\"debtorPostalCode\")),",
					"                            townName: JSON.parse(pm.environment.get(\"debtorTownName\"))",
					"                        }",
					"                    },",
					"                    debtorAccountNo: JSON.parse( pm.environment.get(\"debtorAccountNo\"))",
					"                }         ",
					"            })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"newPaymentSwiftID\", res.json().paymentId);",
					"            console.log(\"New payment ID: \" + pm.environment.get(\"newPaymentSwiftID\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for deleting Swift payment*/",
					"postman.setGlobalVariable(\"paymentSwiftDelete\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"environment\")}/banking-api/payment/swift/${pm.environment.get(\"tenant\")}/v2/credittransfer/${pm.environment.get(\"newPaymentSwiftID\")}`,",
					"        method: \"DELETE\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.unset(\"newPaymentSwiftID\");",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for creating Sepa payment*/",
					"postman.setGlobalVariable(\"paymentSepaCreate\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"environment\")}/banking-api/payment/sepa/${pm.environment.get(\"tenant\")}/v2/credittransfer`,",
					"        method: \"POST\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"                storeOnly: false, ",
					"                locked: false,",
					"                categoryPurposeCode: \"SALA\",",
					"                paymentInformation: {",
					"                    endToEndId: JSON.parse(pm.environment.get(\"endToEndId\")),",
					"                    instructedAmount: {",
					"                        currency: {",
					"                            code: \"EUR\"",
					"                        },",
					"                        value: 312.00",
					"                    },",
					"                    remittanceInformation: {",
					"                        \"unstructured\": JSON.parse(pm.environment.get(\"unstructured\")),",
					"                        \"structured\": JSON.parse(pm.environment.get(\"structuredRemittanceRF\"))",
					"                    },",
					"                    instructionIdentification: JSON.parse(pm.environment.get(\"instructionIdentification\")),",
					"                    requestedExecutionDate: JSON.parse(pm.globals.get(\"PrS:nextWorkingDay\")),",
					"                    instructionPriority: \"NORMAL\",",
					"                    creditor: {",
					"                        \"name\": JSON.parse(pm.environment.get(\"name\")),",
					"                        \"address\": {",
					"                            \"adrLine1\": JSON.parse(pm.environment.get(\"adrLine1\")),",
					"                            \"adrLine2\": JSON.parse(pm.environment.get(\"adrLine2\")),",
					"                            \"streetName\": JSON.parse(pm.environment.get(\"streetName\")),",
					"                            \"buildingNm\": pm.environment.get(\"buildingNm\"),",
					"                            \"postalCode\": pm.environment.get(\"postalCode\"),",
					"                            \"townName\": JSON.parse(pm.environment.get(\"townName\")),",
					"                            \"country\": JSON.parse(pm.environment.get(\"country\"))",
					"                        }",
					"                    },",
					"                    creditorAccountNo: JSON.parse(pm.environment.get(\"creditorAccountNoSEPA\")),",
					"                    creditorAgent: {",
					"                        bic: JSON.parse(pm.environment.get(\"creditorAgentBicSEPA\"))",
					"                    },",
					"                    debtor: {",
					"                        name: JSON.parse(pm.environment.get(\"debtorAccountName\")),",
					"                        address: {",
					"                            streetName: JSON.parse(pm.environment.get(\"debtorStreetName\")),",
					"                            postalCode: JSON.parse(pm.environment.get(\"debtorPostalCode\")),",
					"                            townName: JSON.parse(pm.environment.get(\"debtorTownName\"))",
					"                        }",
					"                    },",
					"                    debtorAccountNo: JSON.parse( pm.environment.get(\"debtorAccountNo\"))",
					"                }         ",
					"            })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"newPaymentSepaID\", res.json().paymentId);",
					"            console.log(\"New payment ID: \" + pm.environment.get(\"newPaymentSepaID\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for creating Sepa (standing order) payment*/",
					"postman.setGlobalVariable(\"paymentSepaSoCreate\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"environment\")}/banking-api/payment/sepa/${pm.environment.get(\"tenant\")}/v2/credittransfer`,",
					"        method: \"POST\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"                storeOnly: false, ",
					"                locked: false,",
					"                categoryPurposeCode: \"SALA\",",
					"                paymentInformation: {",
					"                    instructedAmount: {",
					"                        currency: {",
					"                            code: \"EUR\"",
					"                        },",
					"                        value: 9.99",
					"                    },",
					"                    remittanceInformation: {",
					"                        \"unstructured\": JSON.parse(pm.environment.get(\"unstructured\")),",
					"                        \"structured\": JSON.parse(pm.environment.get(\"structuredRemittanceRF\"))",
					"                    },",
					"                    instructionIdentification: JSON.parse(pm.environment.get(\"instructionIdentification\")),",
					"                    requestedExecutionDate: JSON.parse(pm.globals.get(\"PrS:nextWorkingDay\")),",
					"                    instructionPriority: \"NORMAL\",",
					"                    creditor: {",
					"                        \"name\": JSON.parse(pm.environment.get(\"name\")),",
					"                        \"address\": {",
					"                            \"adrLine1\": JSON.parse(pm.environment.get(\"adrLine1\")),",
					"                            \"adrLine2\": JSON.parse(pm.environment.get(\"adrLine2\")),",
					"                            \"streetName\": JSON.parse(pm.environment.get(\"streetName\")),",
					"                            \"buildingNm\": pm.environment.get(\"buildingNm\"),",
					"                            \"postalCode\": pm.environment.get(\"postalCode\"),",
					"                            \"townName\": JSON.parse(pm.environment.get(\"townName\")),",
					"                            \"country\": JSON.parse(pm.environment.get(\"country\"))",
					"                        }",
					"                    },",
					"                    creditorAccountNo: JSON.parse(pm.environment.get(\"creditorAccountNoSEPA\")),",
					"                    creditorAgent: {",
					"                        bic: JSON.parse(pm.environment.get(\"creditorAgentBicSEPA\"))",
					"                    },",
					"                    debtor: {",
					"                        name: JSON.parse(pm.environment.get(\"debtorAccountName\")),",
					"                        address: {",
					"                            streetName: JSON.parse(pm.environment.get(\"debtorStreetName\")),",
					"                            postalCode: JSON.parse(pm.environment.get(\"debtorPostalCode\")),",
					"                            townName: JSON.parse(pm.environment.get(\"debtorTownName\"))",
					"                        }",
					"                    },",
					"                    debtorAccountNo: JSON.parse(pm.environment.get(\"debtorAccountNo\")),",
					"                    standingOrder: {",
					"                        firstOn: JSON.parse(pm.globals.get(\"PrS:futureWorkingDay\")),",
					"                        lastOn: JSON.parse(pm.globals.get(\"PrS:futurePlusWorkingDay\")),",
					"                        beforeHoliday: true,",
					"                        interval: \"WEEKLY\",",
					"                        active: true,",
					"                        ultimo: false",
					"                    }",
					"                }         ",
					"            })",
					"        }",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.set(\"newPaymentSepaID\", res.json().paymentId);",
					"            console.log(\"New payment ID: \" + pm.environment.get(\"newPaymentSepaID\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for deleting Sepa payment*/",
					"postman.setGlobalVariable(\"paymentSepaDelete\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"environment\")}/banking-api/payment/sepa/${pm.environment.get(\"tenant\")}/v2/credittransfer/${pm.environment.get(\"newPaymentSepaID\")}`,",
					"        method: \"DELETE\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            pm.environment.unset(\"newPaymentSepaID\");",
					"        }              ",
					"    });",
					"});",
					"",
					"",
					"//************************************************************************************************",
					"// Schema for 'assetsListDetails'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const assetsListDetails = ",
					"{",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"    \"$id\": \"http://example.com/example.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The Root Schema\",",
					"    \"description\": \"The root schema comprises the entire JSON document.\",",
					"    \"required\": [",
					"        \"id\",",
					"        \"assetNumber\",",
					"        \"assetType\",",
					"        \"amount\"",
					"    ],",
					"    \"properties\": {",
					"        \"id\": {",
					"            \"$id\": \"#/properties/id\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Id Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"__ID__736666683854316a6b494f784436514f89eb3c7e757e6e6cce6ef081dbd7fd929f2dc9\"",
					"            ]",
					"        },",
					"        \"assetNumber\": {",
					"            \"$id\": \"#/properties/assetNumber\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Assetnumber Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"1000001704\"",
					"            ]",
					"        },",
					"        \"assetType\": {",
					"            \"$id\": \"#/properties/assetType\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Assettype Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"ACCOUNT\"",
					"            ]",
					"        },",
					"        \"amount\": {",
					"            \"$id\": \"#/properties/amount\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Amount Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"                {",
					"                    \"value\": 123493.65,",
					"                    \"currencyIsoCode\": \"USD\"",
					"                }",
					"            ],",
					"            \"required\": [",
					"                \"currencyIsoCode\",",
					"                \"value\"",
					"            ],",
					"            \"properties\": {",
					"                \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/amount/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"USD\"",
					"                    ]",
					"                },",
					"                \"value\": {",
					"                    \"$id\": \"#/properties/amount/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": 0,",
					"                    \"examples\": [",
					"                        123493.65",
					"                    ]",
					"                }",
					"            }",
					"        }",
					"    }",
					"}",
					"pm.environment.set(\"assetsListDetails\", assetsListDetails);",
					"",
					"",
					"//************************************************************************************************",
					"// Schema for 'assetsList'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const assetsList = ",
					"{",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"    \"$id\": \"http://example.com/example.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The Root Schema\",",
					"    \"description\": \"The root schema comprises the entire JSON document.\",",
					"    \"required\": [",
					"        \"_embedded\",",
					"        \"page\"",
					"    ],",
					"    \"properties\": {",
					"        \"_embedded\": {",
					"            \"$id\": \"#/properties/_embedded\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The _embedded Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"                {",
					"                    \"assets\": [",
					"                        {",
					"                            \"amount\": {",
					"                                \"currencyIsoCode\": \"GBP\",",
					"                                \"value\": 30308022.29",
					"                            },",
					"                            \"id\": \"__ID__306e513838756c61716c39766b6c3555bb32d1ccd955ff7aab9ac3e08bcea348da8e483186f4c4\",",
					"                            \"assetNumber\": \"1286841506\",",
					"                            \"assetType\": \"ACCOUNT\"",
					"                        },",
					"                        {",
					"                            \"amount\": {",
					"                                \"value\": 9959.94,",
					"                                \"currencyIsoCode\": \"USD\"",
					"                            },",
					"                            \"id\": \"__ID__306e513838756c61716c39766b6c3555bb32d1ccd955fd8b6a4035b48babb2e18a7b6cbb4beb0b\",",
					"                            \"assetNumber\": \"1286841517\",",
					"                            \"assetType\": \"ACCOUNT\"",
					"                        },",
					"                        {",
					"                            \"id\": \"__ID__306e513838756c61716c39766b6c3555bb33d5cddd5cfd2818088a0d01e714013dd045ffaaf1fa\",",
					"                            \"assetNumber\": \"771286841506\",",
					"                            \"assetType\": \"CUSTODY_ACCOUNT\",",
					"                            \"amount\": {",
					"                                \"value\": 7718.65,",
					"                                \"currencyIsoCode\": \"GBP\"",
					"                            }",
					"                        }",
					"                    ]",
					"                }",
					"            ],",
					"            \"required\": [",
					"                \"assets\"",
					"            ],",
					"            \"properties\": {",
					"                \"assets\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/assets\",",
					"                    \"type\": \"array\",",
					"                    \"title\": \"The Assets Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": [],",
					"                    \"items\": {",
					"                        \"$id\": \"#/properties/_embedded/properties/assets/items\",",
					"                        \"type\": \"object\",",
					"                        \"title\": \"The Items Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": {},",
					"                        \"examples\": [",
					"                            {",
					"                                \"id\": \"__ID__306e513838756c61716c39766b6c3555bb32d1ccd955ff7aab9ac3e08bcea348da8e483186f4c4\",",
					"                                \"assetNumber\": \"1286841506\",",
					"                                \"assetType\": \"ACCOUNT\",",
					"                                \"amount\": {",
					"                                    \"value\": 30308022.29,",
					"                                    \"currencyIsoCode\": \"GBP\"",
					"                                }",
					"                            },",
					"                            {",
					"                                \"assetType\": \"ACCOUNT\",",
					"                                \"amount\": {",
					"                                    \"value\": 9959.94,",
					"                                    \"currencyIsoCode\": \"USD\"",
					"                                },",
					"                                \"id\": \"__ID__306e513838756c61716c39766b6c3555bb32d1ccd955fd8b6a4035b48babb2e18a7b6cbb4beb0b\",",
					"                                \"assetNumber\": \"1286841517\"",
					"                            },",
					"                            {",
					"                                \"amount\": {",
					"                                    \"currencyIsoCode\": \"GBP\",",
					"                                    \"value\": 7718.65",
					"                                },",
					"                                \"id\": \"__ID__306e513838756c61716c39766b6c3555bb33d5cddd5cfd2818088a0d01e714013dd045ffaaf1fa\",",
					"                                \"assetNumber\": \"771286841506\",",
					"                                \"assetType\": \"CUSTODY_ACCOUNT\"",
					"                            }",
					"                        ],",
					"                        \"required\": [",
					"                            \"id\",",
					"                            \"assetNumber\",",
					"                            \"assetType\",",
					"                            \"amount\"",
					"                        ],",
					"                        \"properties\": {",
					"                            \"id\": {",
					"                                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/id\",",
					"                                \"type\": \"string\",",
					"                                \"title\": \"The Id Schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": \"\",",
					"                                \"examples\": [",
					"                                    \"__ID__306e513838756c61716c39766b6c3555bb32d1ccd955ff7aab9ac3e08bcea348da8e483186f4c4\"",
					"                                ]",
					"                            },",
					"                            \"assetNumber\": {",
					"                                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/assetNumber\",",
					"                                \"type\": \"string\",",
					"                                \"title\": \"The Assetnumber Schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": \"\",",
					"                                \"examples\": [",
					"                                    \"1286841506\"",
					"                                ]",
					"                            },",
					"                            \"assetType\": {",
					"                                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/assetType\",",
					"                                \"type\": \"string\",",
					"                                \"title\": \"The Assettype Schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": \"\",",
					"                                \"examples\": [",
					"                                    \"ACCOUNT\"",
					"                                ]",
					"                            },",
					"                            \"amount\": {",
					"                                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount\",",
					"                                \"type\": \"object\",",
					"                                \"title\": \"The Amount Schema\",",
					"                                \"description\": \"An explanation about the purpose of this instance.\",",
					"                                \"default\": {},",
					"                                \"examples\": [",
					"                                    {",
					"                                        \"value\": 30308022.29,",
					"                                        \"currencyIsoCode\": \"GBP\"",
					"                                    }",
					"                                ],",
					"                                \"required\": [",
					"                                    \"currencyIsoCode\",",
					"                                    \"value\"",
					"                                ],",
					"                                \"properties\": {",
					"                                    \"currencyIsoCode\": {",
					"                                        \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount/properties/currencyIsoCode\",",
					"                                        \"type\": \"string\",",
					"                                        \"title\": \"The Currencyisocode Schema\",",
					"                                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                                        \"default\": \"\",",
					"                                        \"examples\": [",
					"                                            \"GBP\"",
					"                                        ]",
					"                                    },",
					"                                    \"value\": {",
					"                                        \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount/properties/value\",",
					"                                        \"type\": \"number\",",
					"                                        \"title\": \"The Value Schema\",",
					"                                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                                        \"default\": 0,",
					"                                        \"examples\": [",
					"                                            30308022.29",
					"                                        ]",
					"                                    }",
					"                                }",
					"                            }",
					"                        }",
					"                    }",
					"                }",
					"            }",
					"        },",
					"        \"page\": {",
					"            \"$id\": \"#/properties/page\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Page Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"                {",
					"                    \"number\": 0.0,",
					"                    \"totalPages\": 1.0,",
					"                    \"totalElements\": 3.0,",
					"                    \"size\": 20.0",
					"                }",
					"            ],",
					"            \"required\": [",
					"                \"number\",",
					"                \"size\",",
					"                \"totalElements\",",
					"                \"totalPages\"",
					"            ],",
					"            \"properties\": {",
					"                \"number\": {",
					"                    \"$id\": \"#/properties/page/properties/number\",",
					"                    \"type\": \"integer\",",
					"                    \"title\": \"The Number Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": 0,",
					"                    \"examples\": [",
					"                        0",
					"                    ]",
					"                },",
					"                \"size\": {",
					"                    \"$id\": \"#/properties/page/properties/size\",",
					"                    \"type\": \"integer\",",
					"                    \"title\": \"The Size Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": 0,",
					"                    \"examples\": [",
					"                        20",
					"                    ]",
					"                },",
					"                \"totalElements\": {",
					"                    \"$id\": \"#/properties/page/properties/totalElements\",",
					"                    \"type\": \"integer\",",
					"                    \"title\": \"The Totalelements Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": 0,",
					"                    \"examples\": [",
					"                        3",
					"                    ]",
					"                },",
					"                \"totalPages\": {",
					"                    \"$id\": \"#/properties/page/properties/totalPages\",",
					"                    \"type\": \"integer\",",
					"                    \"title\": \"The Totalpages Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": 0,",
					"                    \"examples\": [",
					"                        1",
					"                    ]",
					"                }",
					"            }",
					"        }",
					"    }",
					"}",
					"pm.environment.set(\"assetsList\", assetsList);",
					"",
					"",
					"//************************************************************************************************",
					"// Schema for 'singleTransactions'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const singleTransactions = ",
					"{",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"    \"$id\": \"http://example.com/example.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The Root Schema\",",
					"    \"description\": \"The root schema comprises the entire JSON document.\",",
					"    \"required\": [",
					"        \"id\",",
					"        \"accountId\",",
					"        \"valutaDate\",",
					"        \"bookingDate\",",
					"        \"booked\",",
					"        \"amount\",",
					"        \"creditorAccount\",",
					"        \"debtorAccount\",",
					"        \"end2endID\",",
					"        \"referenceNumber\",",
					"        \"bookingText\",",
					"        \"referenceText\"",
					"    ],",
					"    \"properties\": {",
					"        \"id\": {",
					"            \"$id\": \"#/properties/id\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Id Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"__ID__505237616d485741324e4339683554694ab1600a787e7c4213d74be5d7df5aa6720d6982bbcd73\"",
					"            ]",
					"        },",
					"        \"accountId\": {",
					"            \"$id\": \"#/properties/accountId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accountid Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"__ID__505237616d485741324e43396835546949b463067c737ed9bc3ddbe7d5ad67a4b38b0931b81881\"",
					"            ]",
					"        },",
					"        \"valutaDate\": {",
					"            \"$id\": \"#/properties/valutaDate\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Valutadate Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"2019-12-23\"",
					"            ]",
					"        },",
					"        \"bookingDate\": {",
					"            \"$id\": \"#/properties/bookingDate\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Bookingdate Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"2019-12-23\"",
					"            ]",
					"        },",
					"        \"booked\": {",
					"            \"$id\": \"#/properties/booked\",",
					"            \"type\": \"boolean\",",
					"            \"title\": \"The Booked Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": false,",
					"            \"examples\": [",
					"                true",
					"            ]",
					"        },",
					"        \"amount\": {",
					"            \"$id\": \"#/properties/amount\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Amount Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"                {",
					"                    \"value\": 2.0,",
					"                    \"currencyIsoCode\": \"CHF\"",
					"                }",
					"            ],",
					"            \"required\": [",
					"                \"currencyIsoCode\",",
					"                \"value\"",
					"            ],",
					"            \"properties\": {",
					"                \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/amount/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"CHF\"",
					"                    ]",
					"                },",
					"                \"value\": {",
					"                    \"$id\": \"#/properties/amount/properties/value\",",
					"                    \"type\": \"integer\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": 0,",
					"                    \"examples\": [",
					"                        2",
					"                    ]",
					"                }",
					"            }",
					"        },",
					"        \"creditorAccount\": {",
					"            \"$id\": \"#/properties/creditorAccount\",",
					"            \"title\": \"The Creditoraccount Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"debtorAccount\": {",
					"            \"$id\": \"#/properties/debtorAccount\",",
					"            \"title\": \"The Debtoraccount Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"end2endID\": {",
					"            \"$id\": \"#/properties/end2endID\",",
					"            \"title\": \"The End2endid Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"referenceNumber\": {",
					"            \"$id\": \"#/properties/referenceNumber\",",
					"            \"title\": \"The Referencenumber Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"bookingText\": {",
					"            \"$id\": \"#/properties/bookingText\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Bookingtext Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"Payment 2\"",
					"            ]",
					"        },",
					"        \"referenceText\": {",
					"            \"$id\": \"#/properties/referenceText\",",
					"            \"title\": \"The Referencetext Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        }",
					"    }",
					"}",
					"pm.environment.set(\"singleTransactions\", singleTransactions);",
					"",
					"//************************************************************************************************",
					"// Schema for '400 error'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const error400 = ",
					"{",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"    \"$id\": \"http://example.com/example.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The Root Schema\",",
					"    \"description\": \"The root schema comprises the entire JSON document.\",",
					"    \"required\": [",
					"        \"_status\",",
					"        \"_messages\",",
					"        \"_timestamp\"",
					"    ],",
					"    \"properties\": {",
					"        \"_status\": {",
					"            \"$id\": \"#/properties/_status\",",
					"            \"type\": \"boolean\",",
					"            \"title\": \"The _status Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": false,",
					"            \"examples\": [",
					"                false",
					"            ]",
					"        },",
					"        \"_messages\": {",
					"            \"$id\": \"#/properties/_messages\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The _messages Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": [],",
					"            \"items\": {",
					"                \"$id\": \"#/properties/_messages/items\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Items Schema\",",
					"                \"description\": \"An explanation about the purpose of this instance.\",",
					"                \"default\": {},",
					"                \"examples\": [",
					"                    {",
					"                        \"category\": \"ERROR\",",
					"                        \"code\": \"ERROR_ARGUMENT_MISMATCH\",",
					"                        \"text\": \"Argument mismatch: __ID__505237616d485741324e43396835546949b463067c71799107b8d02d69a0300452557cf19dd4f7\",",
					"                        \"path\": \"/assets/accounts/19901/v4/accounts/__ID__505237616d485741324e43396835546949b463067c71799107b8d02d69a0300452557cf19dd4f7/permissions\"",
					"                    }",
					"                ],",
					"                \"required\": [",
					"                    \"category\",",
					"                    \"code\",",
					"                    \"text\",",
					"                    \"path\"",
					"                ],",
					"                \"properties\": {",
					"                    \"category\": {",
					"                        \"$id\": \"#/properties/_messages/items/properties/category\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Category Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"ERROR\"",
					"                        ]",
					"                    },",
					"                    \"code\": {",
					"                        \"$id\": \"#/properties/_messages/items/properties/code\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Code Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"ERROR_ARGUMENT_MISMATCH\"",
					"                        ]",
					"                    },",
					"                    \"text\": {",
					"                        \"$id\": \"#/properties/_messages/items/properties/text\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Text Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"Argument mismatch: __ID__505237616d485741324e43396835546949b463067c71799107b8d02d69a0300452557cf19dd4f7\"",
					"                        ]",
					"                    },",
					"                    \"path\": {",
					"                        \"$id\": \"#/properties/_messages/items/properties/path\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Path Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"/assets/accounts/19901/v4/accounts/__ID__505237616d485741324e43396835546949b463067c71799107b8d02d69a0300452557cf19dd4f7/permissions\"",
					"                        ]",
					"                    }",
					"                }",
					"            }",
					"        },",
					"        \"_timestamp\": {",
					"            \"$id\": \"#/properties/_timestamp\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The _timestamp Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"2020-03-24T13:26:15.546+01:00\"",
					"            ]",
					"        }",
					"    }",
					"}",
					"pm.environment.set(\"error400\", error400);",
					"",
					"//************************************************************************************************",
					"// Schema for 'Alias set'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const aliasSet = ",
					"{",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"    \"$id\": \"http://example.com/example.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The Root Schema\",",
					"    \"description\": \"The root schema comprises the entire JSON document.\",",
					"    \"required\": [",
					"        \"_timestamp\",",
					"        \"_status\",",
					"        \"_messages\"",
					"    ],",
					"    \"properties\": {",
					"        \"_timestamp\": {",
					"            \"$id\": \"#/properties/_timestamp\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The _timestamp Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"2020-03-18T11:48:50.275\"",
					"            ]",
					"        },",
					"        \"_status\": {",
					"            \"$id\": \"#/properties/_status\",",
					"            \"type\": \"boolean\",",
					"            \"title\": \"The _status Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": false,",
					"            \"examples\": [",
					"                true",
					"            ]",
					"        },",
					"        \"_messages\": {",
					"            \"$id\": \"#/properties/_messages\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The _messages Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": [],",
					"            \"items\": {",
					"                \"$id\": \"#/properties/_messages/items\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Items Schema\",",
					"                \"description\": \"An explanation about the purpose of this instance.\",",
					"                \"default\": {},",
					"                \"examples\": [",
					"                    {",
					"                        \"text\": \"Account alias set\",",
					"                        \"path\": \"/assets/accounts/{tenantId}/v4/accounts/{accountId}/alias\",",
					"                        \"category\": \"NORMAL\",",
					"                        \"code\": \"200\"",
					"                    }",
					"                ],",
					"                \"required\": [",
					"                    \"code\",",
					"                    \"category\",",
					"                    \"text\",",
					"                    \"path\"",
					"                ],",
					"                \"properties\": {",
					"                    \"code\": {",
					"                        \"$id\": \"#/properties/_messages/items/properties/code\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Code Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"200\"",
					"                        ]",
					"                    },",
					"                    \"category\": {",
					"                        \"$id\": \"#/properties/_messages/items/properties/category\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Category Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"NORMAL\"",
					"                        ]",
					"                    },",
					"                    \"text\": {",
					"                        \"$id\": \"#/properties/_messages/items/properties/text\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Text Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"Account alias set\"",
					"                        ]",
					"                    },",
					"                    \"path\": {",
					"                        \"$id\": \"#/properties/_messages/items/properties/path\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Path Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"/assets/accounts/{tenantId}/v4/accounts/{accountId}/alias\"",
					"                        ]",
					"                    }",
					"                }",
					"            }",
					"        }",
					"    }",
					"}",
					"pm.environment.set(\"aliasSet\", aliasSet);",
					"",
					"",
					"//************************************************************************************************",
					"// Schema for 'Account ID get response'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const accountIdDetails = ",
					"{",
					"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
					"    \"$id\": \"http://example.com/example.json\",",
					"    \"type\": \"object\",",
					"    \"title\": \"The Root Schema\",",
					"    \"description\": \"The root schema comprises the entire JSON document.\",",
					"    \"required\": [",
					"        \"accountName\",",
					"        \"accountType\",",
					"        \"accountNumber\",",
					"        \"advisorId\",",
					"        \"bank\",",
					"        \"balances\",",
					"        \"contractId\",",
					"        \"creditInterest\",",
					"        \"currencyIsoCode\",",
					"        \"customerName\",",
					"        \"debtInterest\",",
					"        \"defaultDebtAccount\",",
					"        \"description\",",
					"        \"formattedAccountNumber\",",
					"        \"iban\",",
					"        \"id\",",
					"        \"overdraftInterest\",",
					"        \"overdraftLimit\",",
					"        \"portfolioId\",",
					"        \"permissions\"",
					"    ],",
					"    \"properties\": {",
					"        \"accountName\": {",
					"            \"$id\": \"#/properties/accountName\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accountname Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"1501 CHF\"",
					"            ]",
					"        },",
					"        \"accountType\": {",
					"            \"$id\": \"#/properties/accountType\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accounttype Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"CURRENT\"",
					"            ]",
					"        },",
					"        \"accountNumber\": {",
					"            \"$id\": \"#/properties/accountNumber\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accountnumber Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"1000001501\"",
					"            ]",
					"        },",
					"        \"advisorId\": {",
					"            \"$id\": \"#/properties/advisorId\",",
					"            \"title\": \"The Advisorid Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"bank\": {",
					"            \"$id\": \"#/properties/bank\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Bank Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"                {",
					"                    \"institutionId\": \"12312\",",
					"                    \"bic\": \"CLXNCHZZMDB\",",
					"                    \"name\": \"CLX EBS\"",
					"                }",
					"            ],",
					"            \"required\": [",
					"                \"bic\",",
					"                \"institutionId\",",
					"                \"name\"",
					"            ],",
					"            \"properties\": {",
					"                \"bic\": {",
					"                    \"$id\": \"#/properties/bank/properties/bic\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Bic Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"CLXNCHZZMDB\"",
					"                    ]",
					"                },",
					"                \"institutionId\": {",
					"                    \"$id\": \"#/properties/bank/properties/institutionId\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Institutionid Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"12312\"",
					"                    ]",
					"                },",
					"                \"name\": {",
					"                    \"$id\": \"#/properties/bank/properties/name\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Name Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                        \"CLX EBS\"",
					"                    ]",
					"                }",
					"            }",
					"        },",
					"        \"balances\": {",
					"            \"$id\": \"#/properties/balances\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Balances Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": {},",
					"            \"examples\": [",
					"                {",
					"                    \"availableAmount\": {",
					"                        \"value\": 20365239.25,",
					"                        \"currencyIsoCode\": \"CHF\"",
					"                    },",
					"                    \"balance\": {",
					"                        \"value\": 20365239.25,",
					"                        \"currencyIsoCode\": \"CHF\"",
					"                    }",
					"                }",
					"            ],",
					"            \"required\": [",
					"                \"availableAmount\",",
					"                \"balance\"",
					"            ],",
					"            \"properties\": {",
					"                \"availableAmount\": {",
					"                    \"$id\": \"#/properties/balances/properties/availableAmount\",",
					"                    \"type\": \"object\",",
					"                    \"title\": \"The Availableamount Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": {},",
					"                    \"examples\": [",
					"                        {",
					"                            \"value\": 20365239.25,",
					"                            \"currencyIsoCode\": \"CHF\"",
					"                        }",
					"                    ],",
					"                    \"required\": [",
					"                        \"currencyIsoCode\",",
					"                        \"value\"",
					"                    ],",
					"                    \"properties\": {",
					"                        \"currencyIsoCode\": {",
					"                            \"$id\": \"#/properties/balances/properties/availableAmount/properties/currencyIsoCode\",",
					"                            \"type\": \"string\",",
					"                            \"title\": \"The Currencyisocode Schema\",",
					"                            \"description\": \"An explanation about the purpose of this instance.\",",
					"                            \"default\": \"\",",
					"                            \"examples\": [",
					"                                \"CHF\"",
					"                            ]",
					"                        },",
					"                        \"value\": {",
					"                            \"$id\": \"#/properties/balances/properties/availableAmount/properties/value\",",
					"                            \"type\": \"number\",",
					"                            \"title\": \"The Value Schema\",",
					"                            \"description\": \"An explanation about the purpose of this instance.\",",
					"                            \"default\": 0,",
					"                            \"examples\": [",
					"                                20365239.25",
					"                            ]",
					"                        }",
					"                    }",
					"                },",
					"                \"balance\": {",
					"                    \"$id\": \"#/properties/balances/properties/balance\",",
					"                    \"type\": \"object\",",
					"                    \"title\": \"The Balance Schema\",",
					"                    \"description\": \"An explanation about the purpose of this instance.\",",
					"                    \"default\": {},",
					"                    \"examples\": [",
					"                        {",
					"                            \"currencyIsoCode\": \"CHF\",",
					"                            \"value\": 20365239.25",
					"                        }",
					"                    ],",
					"                    \"required\": [",
					"                        \"currencyIsoCode\",",
					"                        \"value\"",
					"                    ],",
					"                    \"properties\": {",
					"                        \"currencyIsoCode\": {",
					"                            \"$id\": \"#/properties/balances/properties/balance/properties/currencyIsoCode\",",
					"                            \"type\": \"string\",",
					"                            \"title\": \"The Currencyisocode Schema\",",
					"                            \"description\": \"An explanation about the purpose of this instance.\",",
					"                            \"default\": \"\",",
					"                            \"examples\": [",
					"                                \"CHF\"",
					"                            ]",
					"                        },",
					"                        \"value\": {",
					"                            \"$id\": \"#/properties/balances/properties/balance/properties/value\",",
					"                            \"type\": \"number\",",
					"                            \"title\": \"The Value Schema\",",
					"                            \"description\": \"An explanation about the purpose of this instance.\",",
					"                            \"default\": 0,",
					"                            \"examples\": [",
					"                                20365239.25",
					"                            ]",
					"                        }",
					"                    }",
					"                }",
					"            }",
					"        },",
					"        \"contractId\": {",
					"            \"$id\": \"#/properties/contractId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Contractid Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"__ID__4b3261526f43483250734f78384c3965cf4fbd0c52c6f98e68435eec4a20241839a18c\"",
					"            ]",
					"        },",
					"        \"creditInterest\": {",
					"            \"$id\": \"#/properties/creditInterest\",",
					"            \"title\": \"The Creditinterest Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"currencyIsoCode\": {",
					"            \"$id\": \"#/properties/currencyIsoCode\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Currencyisocode Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"CHF\"",
					"            ]",
					"        },",
					"        \"customerName\": {",
					"            \"$id\": \"#/properties/customerName\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Customername Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"Freddy Hinz\"",
					"            ]",
					"        },",
					"        \"debtInterest\": {",
					"            \"$id\": \"#/properties/debtInterest\",",
					"            \"title\": \"The Debtinterest Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"defaultDebtAccount\": {",
					"            \"$id\": \"#/properties/defaultDebtAccount\",",
					"            \"type\": \"boolean\",",
					"            \"title\": \"The Defaultdebtaccount Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": false,",
					"            \"examples\": [",
					"                false",
					"            ]",
					"        },",
					"        \"description\": {",
					"            \"$id\": \"#/properties/description\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Description Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"Current account\"",
					"            ]",
					"        },",
					"        \"formattedAccountNumber\": {",
					"            \"$id\": \"#/properties/formattedAccountNumber\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Formattedaccountnumber Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"CH5112312001000001501\"",
					"            ]",
					"        },",
					"        \"iban\": {",
					"            \"$id\": \"#/properties/iban\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Iban Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"CH5112312001000001501\"",
					"            ]",
					"        },",
					"        \"id\": {",
					"            \"$id\": \"#/properties/id\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Id Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"__ID__4b3261526f43483250734f78384c3965cf4dbab1755ff09f5775670adce3198e17d1b1\"",
					"            ]",
					"        },",
					"        \"overdraftInterest\": {",
					"            \"$id\": \"#/properties/overdraftInterest\",",
					"            \"title\": \"The Overdraftinterest Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"overdraftLimit\": {",
					"            \"$id\": \"#/properties/overdraftLimit\",",
					"            \"title\": \"The Overdraftlimit Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"                null",
					"            ]",
					"        },",
					"        \"portfolioId\": {",
					"            \"$id\": \"#/properties/portfolioId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Portfolioid Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"                \"__ID__4b3261526f43483250734f78384c3965cf48bc95bbfd7bf68b4908f97c8f3b59f5acfd\"",
					"            ]",
					"        },",
					"        \"permissions\": {",
					"            \"$id\": \"#/properties/permissions\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The Permissions Schema\",",
					"            \"description\": \"An explanation about the purpose of this instance.\",",
					"            \"default\": [],",
					"            \"items\": {",
					"                \"$id\": \"#/properties/permissions/items\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Items Schema\",",
					"                \"description\": \"An explanation about the purpose of this instance.\",",
					"                \"default\": {},",
					"                \"examples\": [",
					"                    {",
					"                        \"permissions\": [",
					"                            \"PAYM_DOM_INI\",",
					"                            \"PAYM_TRANSFER_INI\",",
					"                            \"PAYM_STN_ODR_INI\",",
					"                            \"PAYM_INTL_INI\"",
					"                        ],",
					"                        \"accountId\": \"__ID__4b3261526f43483250734f78384c3965cf4dbab1755ff09f5775670adce3198e17d1b1\",",
					"                        \"contractId\": \"__ID__4b3261526f43483250734f78384c3965cf4fbd0c52c6f98e68435eec4a20241839a18c\"",
					"                    }",
					"                ],",
					"                \"required\": [",
					"                    \"accountId\",",
					"                    \"contractId\",",
					"                    \"permissions\"",
					"                ],",
					"                \"properties\": {",
					"                    \"accountId\": {",
					"                        \"$id\": \"#/properties/permissions/items/properties/accountId\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Accountid Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"__ID__4b3261526f43483250734f78384c3965cf4dbab1755ff09f5775670adce3198e17d1b1\"",
					"                        ]",
					"                    },",
					"                    \"contractId\": {",
					"                        \"$id\": \"#/properties/permissions/items/properties/contractId\",",
					"                        \"type\": \"string\",",
					"                        \"title\": \"The Contractid Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": \"\",",
					"                        \"examples\": [",
					"                            \"__ID__4b3261526f43483250734f78384c3965cf4fbd0c52c6f98e68435eec4a20241839a18c\"",
					"                        ]",
					"                    },",
					"                    \"permissions\": {",
					"                        \"$id\": \"#/properties/permissions/items/properties/permissions\",",
					"                        \"type\": \"array\",",
					"                        \"title\": \"The Permissions Schema\",",
					"                        \"description\": \"An explanation about the purpose of this instance.\",",
					"                        \"default\": [],",
					"                        \"items\": {",
					"                            \"$id\": \"#/properties/permissions/items/properties/permissions/items\",",
					"                            \"type\": \"string\",",
					"                            \"title\": \"The Items Schema\",",
					"                            \"description\": \"An explanation about the purpose of this instance.\",",
					"                            \"default\": \"\",",
					"                            \"examples\": [",
					"                                \"PAYM_DOM_INI\",",
					"                                \"PAYM_TRANSFER_INI\",",
					"                                \"PAYM_STN_ODR_INI\",",
					"                                \"PAYM_INTL_INI\"",
					"                            ]",
					"                        }",
					"                    }",
					"                }",
					"            }",
					"        }",
					"    }",
					"}",
					"pm.environment.set(\"accountIdDetails\", accountIdDetails);",
					"",
					"//************************************************************************************************",
					"// Schema for 'Balance scheme'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const balanceSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"availableAmount\",",
					"    \"balance\"",
					"  ],",
					"  \"properties\": {",
					"    \"availableAmount\": {",
					"      \"$id\": \"#/properties/availableAmount\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Availableamount Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/availableAmount/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/availableAmount/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0.0,",
					"          \"examples\": [",
					"            20365239.25",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"balance\": {",
					"      \"$id\": \"#/properties/balance\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Balance Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/balance/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/balance/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0.0,",
					"          \"examples\": [",
					"            20365239.25",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"balanceSchema\", balanceSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'Permission scheme'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const permissionSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"accountPermissions\"",
					"  ],",
					"  \"properties\": {",
					"    \"accountPermissions\": {",
					"      \"$id\": \"#/properties/accountPermissions\",",
					"      \"type\": \"array\",",
					"      \"title\": \"The Accountpermissions Schema\",",
					"      \"items\": {",
					"        \"$id\": \"#/properties/accountPermissions/items\",",
					"        \"type\": \"object\",",
					"        \"title\": \"The Items Schema\",",
					"        \"required\": [",
					"          \"accountId\",",
					"          \"contractId\",",
					"          \"permissions\"",
					"        ],",
					"        \"properties\": {",
					"          \"accountId\": {",
					"            \"$id\": \"#/properties/accountPermissions/items/properties/accountId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accountid Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"__ID__4b3261526f43483250734f78384c3965cf4eb38cdc28f72d342f4298166b0b84a7bfef\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"contractId\": {",
					"            \"$id\": \"#/properties/accountPermissions/items/properties/contractId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Contractid Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"__ID__4b3261526f43483250734f78384c3965cb4b99ac8b91244e464770e8894ac7b4c779\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"permissions\": {",
					"            \"$id\": \"#/properties/accountPermissions/items/properties/permissions\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The Permissions Schema\",",
					"            \"items\": {",
					"              \"$id\": \"#/properties/accountPermissions/items/properties/permissions/items\",",
					"              \"type\": \"string\",",
					"              \"title\": \"The Items Schema\",",
					"              \"default\": \"\",",
					"              \"examples\": [",
					"                \"PAYM_DOM_INI\",",
					"                \"PAYM_INTL_INI\",",
					"                \"PAYM_STN_ODR_INI\",",
					"                \"PAYM_TRANSFER_INI\"",
					"              ],",
					"              \"pattern\": \"^(.*)$\"",
					"            }",
					"          }",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"permissionSchema\", permissionSchema);",
					"",
					"",
					"//************************************************************************************************",
					"// Schema for 'Custody accounts'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const cuacsSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"cuacs\"",
					"      ],",
					"      \"properties\": {",
					"        \"cuacs\": {",
					"          \"$id\": \"#/properties/_embedded/properties/cuacs\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Cuacs Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/cuacs/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"id\",",
					"              \"custodyAccountNumber\",",
					"              \"lastChangeAt\",",
					"              \"valueCustodyCurrency\",",
					"              \"valueCustomerCurrency\",",
					"              \"valuePortfolioCurrency\",",
					"              \"yearEndValue\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__35695a31497042534976574d443565538b03820c945d6ab2c410438ef238fdba2c7e\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"custodyAccountNumber\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/custodyAccountNumber\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Custodyaccountnumber Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"771000061502\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"lastChangeAt\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/lastChangeAt\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Lastchangeat Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"2013-06-25T17:16:49\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"valueCustodyCurrency\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustodyCurrency\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Valuecustodycurrency Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustodyCurrency/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustodyCurrency/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      24558.32",
					"                    ]",
					"                  }",
					"                }",
					"              },",
					"              \"valueCustomerCurrency\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustomerCurrency\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Valuecustomercurrency Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustomerCurrency/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valueCustomerCurrency/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      24558.32",
					"                    ]",
					"                  }",
					"                }",
					"              },",
					"              \"valuePortfolioCurrency\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valuePortfolioCurrency\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Valueportfoliocurrency Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valuePortfolioCurrency/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/valuePortfolioCurrency/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      24558.32",
					"                    ]",
					"                  }",
					"                }",
					"              },",
					"              \"yearEndValue\": {",
					"                \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/yearEndValue\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Yearendvalue Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/yearEndValue/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/cuacs/items/properties/yearEndValue/properties/value\",",
					"                    \"type\": \"null\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": null,",
					"                    \"examples\": [",
					"                      null",
					"                    ]",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            3",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"};",
					"pm.environment.set(\"cuacsSchema\", cuacsSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'Assets details'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const assetsDetails = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/example.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"checked\",",
					"    \"dimensions\",",
					"    \"id\",",
					"    \"name\",",
					"    \"price\",",
					"    \"tags\"",
					"  ],",
					"  \"properties\": {",
					"    \"checked\": {",
					"      \"$id\": \"/properties/checked\",",
					"      \"type\": \"boolean\",",
					"      \"title\": \"The Checked Schema\",",
					"      \"default\": false,",
					"      \"examples\": [",
					"        false",
					"      ]",
					"    },",
					"    \"dimensions\": {",
					"      \"$id\": \"/properties/dimensions\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Dimensions Schema\",",
					"      \"required\": [",
					"        \"width\",",
					"        \"height\"",
					"      ],",
					"      \"properties\": {",
					"        \"width\": {",
					"          \"$id\": \"/properties/dimensions/properties/width\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Width Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            5",
					"          ]",
					"        },",
					"        \"height\": {",
					"          \"$id\": \"/properties/dimensions/properties/height\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Height Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"id\": {",
					"      \"$id\": \"/properties/id\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        1",
					"      ]",
					"    },",
					"    \"name\": {",
					"      \"$id\": \"/properties/name\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Name Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"A green door\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"price\": {",
					"      \"$id\": \"/properties/price\",",
					"      \"type\": \"number\",",
					"      \"title\": \"The Price Schema\",",
					"      \"default\": 0.0,",
					"      \"examples\": [",
					"        12.5",
					"      ]",
					"    },",
					"    \"tags\": {",
					"      \"$id\": \"/properties/tags\",",
					"      \"type\": \"array\",",
					"      \"title\": \"The Tags Schema\",",
					"      \"items\": {",
					"        \"$id\": \"/properties/tags/items\",",
					"        \"type\": \"string\",",
					"        \"title\": \"The 0 Schema\",",
					"        \"default\": \"\",",
					"        \"examples\": [",
					"          \"home\",",
					"          \"green\"",
					"        ],",
					"        \"pattern\": \"^(.*)$\"",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"assetsDetails\", assetsDetails);",
					"//************************************************************************************************",
					"// Schema for 'DetailAssets'******************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const DetailAssets = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"assets\"",
					"      ],",
					"      \"properties\": {",
					"        \"assets\": {",
					"          \"$id\": \"#/properties/_embedded/properties/assets\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Assets Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/assets/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"id\",",
					"              \"assetNumber\",",
					"              \"assetType\",",
					"              \"amount\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__4b3261526f43483250734f78384c3965cf43b264b6ab4c579325cbffc35ebda4ee4eae\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"assetNumber\": {",
					"                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/assetNumber\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Assetnumber Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"1000001704\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"assetType\": {",
					"                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/assetType\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Assettype Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"ACCOUNT\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"amount\": {",
					"                \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Amount Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"USD\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/assets/items/properties/amount/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      123493.65",
					"                    ]",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            20",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"DetailAssets\", DetailAssets);",
					"",
					"//************************************************************************************************",
					"// Schema for 'cuacs detail Schema' *************************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const cuacsDetSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"custodyAccountNumber\",",
					"    \"lastChangeAt\",",
					"    \"valueCustodyCurrency\",",
					"    \"valueCustomerCurrency\",",
					"    \"valuePortfolioCurrency\",",
					"    \"yearEndValue\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d443565538a54737638399ab0eef3b93ecb4eec4c5f\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"custodyAccountNumber\": {",
					"      \"$id\": \"#/properties/custodyAccountNumber\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Custodyaccountnumber Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"771000061502\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"lastChangeAt\": {",
					"      \"$id\": \"#/properties/lastChangeAt\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Lastchangeat Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2013-06-25T17:16:49\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"valueCustodyCurrency\": {",
					"      \"$id\": \"#/properties/valueCustodyCurrency\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Valuecustodycurrency Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/valueCustodyCurrency/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/valueCustodyCurrency/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0.0,",
					"          \"examples\": [",
					"            24558.32",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"valueCustomerCurrency\": {",
					"      \"$id\": \"#/properties/valueCustomerCurrency\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Valuecustomercurrency Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/valueCustomerCurrency/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/valueCustomerCurrency/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0.0,",
					"          \"examples\": [",
					"            24558.32",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"valuePortfolioCurrency\": {",
					"      \"$id\": \"#/properties/valuePortfolioCurrency\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Valueportfoliocurrency Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/valuePortfolioCurrency/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/valuePortfolioCurrency/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0.0,",
					"          \"examples\": [",
					"            24558.32",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"yearEndValue\": {",
					"      \"$id\": \"#/properties/yearEndValue\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Yearendvalue Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/yearEndValue/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/yearEndValue/properties/value\",",
					"          \"type\": \"null\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": null,",
					"          \"examples\": [",
					"            null",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"cuacsDetSchema\", cuacsDetSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'custody account positions' ********************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const cuacsPositionSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"positions\"",
					"      ],",
					"      \"properties\": {",
					"        \"positions\": {",
					"          \"$id\": \"#/properties/_embedded/properties/positions\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Positions Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/positions/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"id\",",
					"              \"amount\",",
					"              \"calculationFrom\",",
					"              \"exportTime\",",
					"              \"maturityDate\",",
					"              \"salePermitted\",",
					"              \"timeToMaturity\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__35695a31497042534976574d443565538a54737638399ab0eef3b93ecb4eec4c5f\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"amount\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/amount\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Amount Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"calculationFrom\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/calculationFrom\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Calculationfrom Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"exportTime\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/exportTime\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Exporttime Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"2019-11-04T23:11:08\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"maturityDate\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/maturityDate\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Maturitydate Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"salePermitted\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/salePermitted\",",
					"                \"type\": \"boolean\",",
					"                \"title\": \"The Salepermitted Schema\",",
					"                \"default\": false,",
					"                \"examples\": [",
					"                  false",
					"                ]",
					"              },",
					"              \"timeToMaturity\": {",
					"                \"$id\": \"#/properties/_embedded/properties/positions/items/properties/timeToMaturity\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Timetomaturity Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            8",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"cuacsPositionSchema\", cuacsPositionSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'accountSearch' ********************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const accountSearchSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"accountList\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"accountList\": {",
					"      \"$id\": \"#/properties/accountList\",",
					"      \"type\": \"array\",",
					"      \"title\": \"The Accountlist Schema\",",
					"      \"items\": {",
					"        \"$id\": \"#/properties/accountList/items\",",
					"        \"type\": \"object\",",
					"        \"title\": \"The Items Schema\",",
					"        \"required\": [",
					"          \"accountName\",",
					"          \"accountType\",",
					"          \"accountNumber\",",
					"          \"advisorId\",",
					"          \"bank\",",
					"          \"balances\",",
					"          \"contractId\",",
					"          \"creditInterest\",",
					"          \"currencyIsoCode\",",
					"          \"customerName\",",
					"          \"debtInterest\",",
					"          \"defaultDebtAccount\",",
					"          \"description\",",
					"          \"formattedAccountNumber\",",
					"          \"iban\",",
					"          \"id\",",
					"          \"overdraftInterest\",",
					"          \"overdraftLimit\",",
					"          \"portfolioId\",",
					"          \"permissions\"",
					"        ],",
					"        \"properties\": {",
					"          \"accountName\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/accountName\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accountname Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"1704 USD\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"accountType\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/accountType\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accounttype Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"CURRENT\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"accountNumber\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/accountNumber\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Accountnumber Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"1000001704\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"advisorId\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/advisorId\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Advisorid Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"bank\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/bank\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Bank Schema\",",
					"            \"required\": [",
					"              \"bic\",",
					"              \"institutionId\",",
					"              \"name\"",
					"            ],",
					"            \"properties\": {",
					"              \"bic\": {",
					"                \"$id\": \"#/properties/accountList/items/properties/bank/properties/bic\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Bic Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"CLXNCHZZMDB\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"institutionId\": {",
					"                \"$id\": \"#/properties/accountList/items/properties/bank/properties/institutionId\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Institutionid Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"12312\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"name\": {",
					"                \"$id\": \"#/properties/accountList/items/properties/bank/properties/name\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Name Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"CLX EBS\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              }",
					"            }",
					"          },",
					"          \"balances\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/balances\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Balances Schema\",",
					"            \"required\": [",
					"              \"availableAmount\",",
					"              \"balance\"",
					"            ],",
					"            \"properties\": {",
					"              \"availableAmount\": {",
					"                \"$id\": \"#/properties/accountList/items/properties/balances/properties/availableAmount\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Availableamount Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/accountList/items/properties/balances/properties/availableAmount/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"USD\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/accountList/items/properties/balances/properties/availableAmount/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      123493.65",
					"                    ]",
					"                  }",
					"                }",
					"              },",
					"              \"balance\": {",
					"                \"$id\": \"#/properties/accountList/items/properties/balances/properties/balance\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Balance Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/accountList/items/properties/balances/properties/balance/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"USD\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/accountList/items/properties/balances/properties/balance/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      123493.65",
					"                    ]",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          },",
					"          \"contractId\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/contractId\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Contractid Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"creditInterest\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/creditInterest\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Creditinterest Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"currencyIsoCode\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/currencyIsoCode\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Currencyisocode Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"USD\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"customerName\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/customerName\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Customername Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"Harry Hasler\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"debtInterest\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/debtInterest\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Debtinterest Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"defaultDebtAccount\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/defaultDebtAccount\",",
					"            \"type\": \"boolean\",",
					"            \"title\": \"The Defaultdebtaccount Schema\",",
					"            \"default\": false,",
					"            \"examples\": [",
					"              false",
					"            ]",
					"          },",
					"          \"description\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/description\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Description Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"Foreign Currency Account\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"formattedAccountNumber\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/formattedAccountNumber\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Formattedaccountnumber Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"CH0212312001000001704\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"iban\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/iban\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Iban Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"CH0212312001000001704\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"id\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/id\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Id Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"__ID__4b3261526f43483250734f78384c3965cc48b362e94b60cd080a60990c2efce58ee3e0\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"overdraftInterest\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/overdraftInterest\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Overdraftinterest Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"overdraftLimit\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/overdraftLimit\",",
					"            \"type\": \"null\",",
					"            \"title\": \"The Overdraftlimit Schema\",",
					"            \"default\": null,",
					"            \"examples\": [",
					"              null",
					"            ]",
					"          },",
					"          \"portfolioId\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/portfolioId\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Portfolioid Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"__ID__4b3261526f43483250734f78384c3965ca49b8b0f88c4c4ed50ead239f733eaef42f42\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"permissions\": {",
					"            \"$id\": \"#/properties/accountList/items/properties/permissions\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The Permissions Schema\",",
					"            \"items\": {",
					"              \"$id\": \"#/properties/accountList/items/properties/permissions/items\",",
					"              \"type\": \"object\",",
					"              \"title\": \"The Items Schema\",",
					"              \"required\": [",
					"                \"accountId\",",
					"                \"contractId\",",
					"                \"permissions\"",
					"              ],",
					"              \"properties\": {",
					"                \"accountId\": {",
					"                  \"$id\": \"#/properties/accountList/items/properties/permissions/items/properties/accountId\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Accountid Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"__ID__4b3261526f43483250734f78384c3965cc48b362e94b60cd080a60990c2efce58ee3e0\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"contractId\": {",
					"                  \"$id\": \"#/properties/accountList/items/properties/permissions/items/properties/contractId\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Contractid Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"__ID__4b3261526f43483250734f78384c3965cf4fbd0c52c6f98e68435eec4a20241839a18c\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"permissions\": {",
					"                  \"$id\": \"#/properties/accountList/items/properties/permissions/items/properties/permissions\",",
					"                  \"type\": \"array\",",
					"                  \"title\": \"The Permissions Schema\",",
					"                  \"items\": {",
					"                    \"$id\": \"#/properties/accountList/items/properties/permissions/items/properties/permissions/items\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Items Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"PAYM_STN_ODR_INI\",",
					"                      \"PAYM_DOM_INI\",",
					"                      \"PAYM_INTL_INI\",",
					"                      \"PAYM_TRANSFER_INI\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            30",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            17",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"accountSearchSchema\", accountSearchSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'positionId details' ***************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const positionIdSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"amount\",",
					"    \"calculationFrom\",",
					"    \"exportTime\",",
					"    \"maturityDate\",",
					"    \"salePermitted\",",
					"    \"timeToMaturity\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d443565538a54737638399ab0eef3b93ecb4eec4c5f\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"amount\": {",
					"      \"$id\": \"#/properties/amount\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Amount Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"calculationFrom\": {",
					"      \"$id\": \"#/properties/calculationFrom\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Calculationfrom Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"exportTime\": {",
					"      \"$id\": \"#/properties/exportTime\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Exporttime Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2019-11-04T23:11:08\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"maturityDate\": {",
					"      \"$id\": \"#/properties/maturityDate\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Maturitydate Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"salePermitted\": {",
					"      \"$id\": \"#/properties/salePermitted\",",
					"      \"type\": \"boolean\",",
					"      \"title\": \"The Salepermitted Schema\",",
					"      \"default\": false,",
					"      \"examples\": [",
					"        false",
					"      ]",
					"    },",
					"    \"timeToMaturity\": {",
					"      \"$id\": \"#/properties/timeToMaturity\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Timetomaturity Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"positionIdSchema\", positionIdSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'transactionsId list' **************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const transactionsIdSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"transactions\"",
					"      ],",
					"      \"properties\": {",
					"        \"transactions\": {",
					"          \"$id\": \"#/properties/_embedded/properties/transactions\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Transactions Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/transactions/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"id\",",
					"              \"amount\",",
					"              \"bookedAt\",",
					"              \"bookingText\",",
					"              \"debitCreditCode\",",
					"              \"narrative\",",
					"              \"narrativeTextType\",",
					"              \"transactionKey\",",
					"              \"transactionNumber\",",
					"              \"valueDate\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__35695a31497042534976574d443565538509674406aa950ce346395913df5663780586\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"amount\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/amount\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Amount Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/amount/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/amount/properties/value\",",
					"                    \"type\": \"integer\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0,",
					"                    \"examples\": [",
					"                      200",
					"                    ]",
					"                  }",
					"                }",
					"              },",
					"              \"bookedAt\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/bookedAt\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Bookedat Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"2019-09-26\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"bookingText\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/bookingText\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Bookingtext Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"Split\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"debitCreditCode\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/debitCreditCode\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Debitcreditcode Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"DEBIT\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"narrative\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/narrative\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Narrative Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"narrativeTextType\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/narrativeTextType\",",
					"                \"type\": \"null\",",
					"                \"title\": \"The Narrativetexttype Schema\",",
					"                \"default\": null,",
					"                \"examples\": [",
					"                  null",
					"                ]",
					"              },",
					"              \"transactionKey\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/transactionKey\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Transactionkey Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"900.100006.990028402\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"transactionNumber\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/transactionNumber\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Transactionnumber Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"16\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"valueDate\": {",
					"                \"$id\": \"#/properties/_embedded/properties/transactions/items/properties/valueDate\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Valuedate Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"2019-09-26\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            3",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"transactionsIdSchema\", transactionsIdSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'transactionsId details' ***********************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const transactionsIdDetailsSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"amount\",",
					"    \"bookedAt\",",
					"    \"bookingText\",",
					"    \"debitCreditCode\",",
					"    \"narrative\",",
					"    \"narrativeTextType\",",
					"    \"transactionKey\",",
					"    \"transactionNumber\",",
					"    \"valueDate\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d4435655385046899cd9b77906150fee2f5be2c36f32c38\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"amount\": {",
					"      \"$id\": \"#/properties/amount\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Amount Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/amount/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/amount/properties/value\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            200",
					"          ]",
					"        }",
					"      }",
					"    },",
					"    \"bookedAt\": {",
					"      \"$id\": \"#/properties/bookedAt\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Bookedat Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2019-09-26\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"bookingText\": {",
					"      \"$id\": \"#/properties/bookingText\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Bookingtext Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"Split\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"debitCreditCode\": {",
					"      \"$id\": \"#/properties/debitCreditCode\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Debitcreditcode Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"DEBIT\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"narrative\": {",
					"      \"$id\": \"#/properties/narrative\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Narrative Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"narrativeTextType\": {",
					"      \"$id\": \"#/properties/narrativeTextType\",",
					"      \"type\": \"null\",",
					"      \"title\": \"The Narrativetexttype Schema\",",
					"      \"default\": null,",
					"      \"examples\": [",
					"        null",
					"      ]",
					"    },",
					"    \"transactionKey\": {",
					"      \"$id\": \"#/properties/transactionKey\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Transactionkey Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"900.100006.990028402\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"transactionNumber\": {",
					"      \"$id\": \"#/properties/transactionNumber\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Transactionnumber Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"16\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"valueDate\": {",
					"      \"$id\": \"#/properties/valueDate\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Valuedate Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2019-09-26\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"transactionsIdDetailsSchema\", transactionsIdDetailsSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'portfolio schema' *****************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const portfolioSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"_embedded\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"_embedded\": {",
					"      \"$id\": \"#/properties/_embedded\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The _embedded Schema\",",
					"      \"required\": [",
					"        \"portfolios\"",
					"      ],",
					"      \"properties\": {",
					"        \"portfolios\": {",
					"          \"$id\": \"#/properties/_embedded/properties/portfolios\",",
					"          \"type\": \"array\",",
					"          \"title\": \"The Portfolios Schema\",",
					"          \"items\": {",
					"            \"$id\": \"#/properties/_embedded/properties/portfolios/items\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Items Schema\",",
					"            \"required\": [",
					"              \"id\",",
					"              \"customerId\",",
					"              \"name\",",
					"              \"amount\"",
					"            ],",
					"            \"properties\": {",
					"              \"id\": {",
					"                \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/id\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Id Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__35695a31497042534976574d443565538c1bf563cdd82c8db3cff41a82f5047a4b\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"customerId\": {",
					"                \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/customerId\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Customerid Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"__ID__35695a31497042534976574d44356553850438747409aafd55561799f639493d1665\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"name\": {",
					"                \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/name\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Name Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"77_1502 / Freddy Hinz 01\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"amount\": {",
					"                \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/amount\",",
					"                \"type\": \"object\",",
					"                \"title\": \"The Amount Schema\",",
					"                \"required\": [",
					"                  \"currencyIsoCode\",",
					"                  \"value\"",
					"                ],",
					"                \"properties\": {",
					"                  \"currencyIsoCode\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/amount/properties/currencyIsoCode\",",
					"                    \"type\": \"string\",",
					"                    \"title\": \"The Currencyisocode Schema\",",
					"                    \"default\": \"\",",
					"                    \"examples\": [",
					"                      \"CHF\"",
					"                    ],",
					"                    \"pattern\": \"^(.*)$\"",
					"                  },",
					"                  \"value\": {",
					"                    \"$id\": \"#/properties/_embedded/properties/portfolios/items/properties/amount/properties/value\",",
					"                    \"type\": \"number\",",
					"                    \"title\": \"The Value Schema\",",
					"                    \"default\": 0.0,",
					"                    \"examples\": [",
					"                      259730.59",
					"                    ]",
					"                  }",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            5",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            1",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"portfolioSchema\", portfolioSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'portfolio details schema' *****************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const portfolioDetailsSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"customerId\",",
					"    \"name\",",
					"    \"amount\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d443565538c1bf563cdd82c8db3cff41a82f5047a4b\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"customerId\": {",
					"      \"$id\": \"#/properties/customerId\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Customerid Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d44356553850438747409aafd55561799f639493d1665\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"name\": {",
					"      \"$id\": \"#/properties/name\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Name Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"77_1502 / Freddy Hinz 01\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"amount\": {",
					"      \"$id\": \"#/properties/amount\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Amount Schema\",",
					"      \"required\": [",
					"        \"currencyIsoCode\",",
					"        \"value\"",
					"      ],",
					"      \"properties\": {",
					"        \"currencyIsoCode\": {",
					"          \"$id\": \"#/properties/amount/properties/currencyIsoCode\",",
					"          \"type\": \"string\",",
					"          \"title\": \"The Currencyisocode Schema\",",
					"          \"default\": \"\",",
					"          \"examples\": [",
					"            \"CHF\"",
					"          ],",
					"          \"pattern\": \"^(.*)$\"",
					"        },",
					"        \"value\": {",
					"          \"$id\": \"#/properties/amount/properties/value\",",
					"          \"type\": \"number\",",
					"          \"title\": \"The Value Schema\",",
					"          \"default\": 0.0,",
					"          \"examples\": [",
					"            259730.59",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"portfolioDetailsSchema\", portfolioDetailsSchema);",
					"",
					"//************************************************************************************************",
					"// Schema for 'portfolio performance schema' *****************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const portfolioPerformanceSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"id\",",
					"    \"performancePeriod\",",
					"    \"accruedInterestBalance\",",
					"    \"accruedInterestChange\",",
					"    \"netIncome\",",
					"    \"tax\",",
					"    \"startDate\",",
					"    \"endDate\"",
					"  ],",
					"  \"properties\": {",
					"    \"id\": {",
					"      \"$id\": \"#/properties/id\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Id Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"__ID__35695a31497042534976574d443565538c0365390f45bc8e11a4f9f29a255617de9b4244\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"performancePeriod\": {",
					"      \"$id\": \"#/properties/performancePeriod\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Performanceperiod Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"YTD\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"accruedInterestBalance\": {",
					"      \"$id\": \"#/properties/accruedInterestBalance\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Accruedinterestbalance Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        40",
					"      ]",
					"    },",
					"    \"accruedInterestChange\": {",
					"      \"$id\": \"#/properties/accruedInterestChange\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Accruedinterestchange Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        40",
					"      ]",
					"    },",
					"    \"netIncome\": {",
					"      \"$id\": \"#/properties/netIncome\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Netincome Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        141",
					"      ]",
					"    },",
					"    \"tax\": {",
					"      \"$id\": \"#/properties/tax\",",
					"      \"type\": \"integer\",",
					"      \"title\": \"The Tax Schema\",",
					"      \"default\": 0,",
					"      \"examples\": [",
					"        47",
					"      ]",
					"    },",
					"    \"startDate\": {",
					"      \"$id\": \"#/properties/startDate\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Startdate Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2019-01-01\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    },",
					"    \"endDate\": {",
					"      \"$id\": \"#/properties/endDate\",",
					"      \"type\": \"string\",",
					"      \"title\": \"The Enddate Schema\",",
					"      \"default\": \"\",",
					"      \"examples\": [",
					"        \"2019-12-06\"",
					"      ],",
					"      \"pattern\": \"^(.*)$\"",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"portfolioPerformanceSchema\", portfolioPerformanceSchema);",
					"",
					"",
					"//************************************************************************************************",
					"// Schema for 'transaction list schema' *****************************************************************",
					"// created via https://jsonschema.net/ ***********************************************************",
					"//************************************************************************************************",
					"const transactionsListSchema = ",
					"{",
					"  \"definitions\": {},",
					"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
					"  \"$id\": \"http://example.com/root.json\",",
					"  \"type\": \"object\",",
					"  \"title\": \"The Root Schema\",",
					"  \"required\": [",
					"    \"transactionGroups\",",
					"    \"page\"",
					"  ],",
					"  \"properties\": {",
					"    \"transactionGroups\": {",
					"      \"$id\": \"#/properties/transactionGroups\",",
					"      \"type\": \"array\",",
					"      \"title\": \"The Transactiongroups Schema\",",
					"      \"items\": {",
					"        \"$id\": \"#/properties/transactionGroups/items\",",
					"        \"type\": \"object\",",
					"        \"title\": \"The Items Schema\",",
					"        \"required\": [",
					"          \"balance\",",
					"          \"date\",",
					"          \"transactions\"",
					"        ],",
					"        \"properties\": {",
					"          \"balance\": {",
					"            \"$id\": \"#/properties/transactionGroups/items/properties/balance\",",
					"            \"type\": \"object\",",
					"            \"title\": \"The Balance Schema\",",
					"            \"required\": [",
					"              \"currencyIsoCode\",",
					"              \"value\"",
					"            ],",
					"            \"properties\": {",
					"              \"currencyIsoCode\": {",
					"                \"$id\": \"#/properties/transactionGroups/items/properties/balance/properties/currencyIsoCode\",",
					"                \"type\": \"string\",",
					"                \"title\": \"The Currencyisocode Schema\",",
					"                \"default\": \"\",",
					"                \"examples\": [",
					"                  \"CHF\"",
					"                ],",
					"                \"pattern\": \"^(.*)$\"",
					"              },",
					"              \"value\": {",
					"                \"$id\": \"#/properties/transactionGroups/items/properties/balance/properties/value\",",
					"                \"type\": \"number\",",
					"                \"title\": \"The Value Schema\",",
					"                \"default\": 0.0,",
					"                \"examples\": [",
					"                  5451805.25",
					"                ]",
					"              }",
					"            }",
					"          },",
					"          \"date\": {",
					"            \"$id\": \"#/properties/transactionGroups/items/properties/date\",",
					"            \"type\": \"string\",",
					"            \"title\": \"The Date Schema\",",
					"            \"default\": \"\",",
					"            \"examples\": [",
					"              \"2019-11-29\"",
					"            ],",
					"            \"pattern\": \"^(.*)$\"",
					"          },",
					"          \"transactions\": {",
					"            \"$id\": \"#/properties/transactionGroups/items/properties/transactions\",",
					"            \"type\": \"array\",",
					"            \"title\": \"The Transactions Schema\",",
					"            \"items\": {",
					"              \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items\",",
					"              \"type\": \"object\",",
					"              \"title\": \"The Items Schema\",",
					"              \"required\": [",
					"                \"id\",",
					"                \"accountId\",",
					"                \"valutaDate\",",
					"                \"bookingDate\",",
					"                \"booked\",",
					"                \"amount\",",
					"                \"creditorAccount\",",
					"                \"debtorAccount\",",
					"                \"end2endID\",",
					"                \"referenceNumber\",",
					"                \"bookingText\",",
					"                \"referenceText\"",
					"              ],",
					"              \"properties\": {",
					"                \"id\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/id\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Id Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"__ID__4b3261526f43483250734f78384c3965cc49b2e4f7cbe47097468e80074831cef8013b46\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"accountId\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/accountId\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Accountid Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"__ID__4b3261526f43483250734f78384c3965cf4aba2d610eb44b9e8acefccdfc6fdeabe3a6\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"valutaDate\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/valutaDate\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Valutadate Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"2019-11-29\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"bookingDate\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/bookingDate\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Bookingdate Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"2019-11-29\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"booked\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/booked\",",
					"                  \"type\": \"boolean\",",
					"                  \"title\": \"The Booked Schema\",",
					"                  \"default\": false,",
					"                  \"examples\": [",
					"                    true",
					"                  ]",
					"                },",
					"                \"amount\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/amount\",",
					"                  \"type\": \"object\",",
					"                  \"title\": \"The Amount Schema\",",
					"                  \"required\": [",
					"                    \"currencyIsoCode\",",
					"                    \"value\"",
					"                  ],",
					"                  \"properties\": {",
					"                    \"currencyIsoCode\": {",
					"                      \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/amount/properties/currencyIsoCode\",",
					"                      \"type\": \"string\",",
					"                      \"title\": \"The Currencyisocode Schema\",",
					"                      \"default\": \"\",",
					"                      \"examples\": [",
					"                        \"CHF\"",
					"                      ],",
					"                      \"pattern\": \"^(.*)$\"",
					"                    },",
					"                    \"value\": {",
					"                      \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/amount/properties/value\",",
					"                      \"type\": \"integer\",",
					"                      \"title\": \"The Value Schema\",",
					"                      \"default\": 0,",
					"                      \"examples\": [",
					"                        929012",
					"                      ]",
					"                    }",
					"                  }",
					"                },",
					"                \"creditorAccount\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/creditorAccount\",",
					"                  \"type\": \"null\",",
					"                  \"title\": \"The Creditoraccount Schema\",",
					"                  \"default\": null,",
					"                  \"examples\": [",
					"                    null",
					"                  ]",
					"                },",
					"                \"debtorAccount\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/debtorAccount\",",
					"                  \"type\": \"null\",",
					"                  \"title\": \"The Debtoraccount Schema\",",
					"                  \"default\": null,",
					"                  \"examples\": [",
					"                    null",
					"                  ]",
					"                },",
					"                \"end2endID\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/end2endID\",",
					"                  \"type\": \"null\",",
					"                  \"title\": \"The End2endid Schema\",",
					"                  \"default\": null,",
					"                  \"examples\": [",
					"                    null",
					"                  ]",
					"                },",
					"                \"referenceNumber\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/referenceNumber\",",
					"                  \"type\": \"null\",",
					"                  \"title\": \"The Referencenumber Schema\",",
					"                  \"default\": null,",
					"                  \"examples\": [",
					"                    null",
					"                  ]",
					"                },",
					"                \"bookingText\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/bookingText\",",
					"                  \"type\": \"string\",",
					"                  \"title\": \"The Bookingtext Schema\",",
					"                  \"default\": \"\",",
					"                  \"examples\": [",
					"                    \"ESR Payment Entry  10000019\"",
					"                  ],",
					"                  \"pattern\": \"^(.*)$\"",
					"                },",
					"                \"referenceText\": {",
					"                  \"$id\": \"#/properties/transactionGroups/items/properties/transactions/items/properties/referenceText\",",
					"                  \"type\": \"null\",",
					"                  \"title\": \"The Referencetext Schema\",",
					"                  \"default\": null,",
					"                  \"examples\": [",
					"                    null",
					"                  ]",
					"                }",
					"              }",
					"            }",
					"          }",
					"        }",
					"      }",
					"    },",
					"    \"page\": {",
					"      \"$id\": \"#/properties/page\",",
					"      \"type\": \"object\",",
					"      \"title\": \"The Page Schema\",",
					"      \"required\": [",
					"        \"number\",",
					"        \"size\",",
					"        \"totalElements\",",
					"        \"totalPages\"",
					"      ],",
					"      \"properties\": {",
					"        \"number\": {",
					"          \"$id\": \"#/properties/page/properties/number\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Number Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            0",
					"          ]",
					"        },",
					"        \"size\": {",
					"          \"$id\": \"#/properties/page/properties/size\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Size Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            10",
					"          ]",
					"        },",
					"        \"totalElements\": {",
					"          \"$id\": \"#/properties/page/properties/totalElements\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalelements Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            189",
					"          ]",
					"        },",
					"        \"totalPages\": {",
					"          \"$id\": \"#/properties/page/properties/totalPages\",",
					"          \"type\": \"integer\",",
					"          \"title\": \"The Totalpages Schema\",",
					"          \"default\": 0,",
					"          \"examples\": [",
					"            19",
					"          ]",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"pm.environment.set(\"transactionsListSchema\", transactionsListSchema);",
					"",
					"",
					"/* function for getting custody accounts*/",
					"postman.setGlobalVariable(\"getCustodyAccounts\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/cuacs/${pm.environment.get(\"tenantId_assets\")}/v1/cuacs`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json; charset=UTF-8',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            console.log(res.json());",
					"            pm.environment.set(\"_tmp_cuacsId\", res.json()._embedded.cuacs[0].id);",
					"            console.log(\"Custody account ID: \" + pm.environment.get(\"_tmp_cuacsId\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"",
					"/* function for getting positions by custody account*/",
					"postman.setGlobalVariable(\"getPositionsByCustodyAccount\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/cuacs/${pm.environment.get(\"tenantId_assets\")}/v1/cuacs/${pm.environment.get(\"_tmp_cuacsId\")}/positions`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json; charset=UTF-8',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            console.log(res.json());",
					"            pm.environment.set(\"_tmp_positionsId\", res.json()._embedded.positions[0].id);",
					"            console.log(\"Position ID: \" + pm.environment.get(\"_tmp_positionsId\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"",
					"",
					"/* function for getting transactions by custody account*/",
					"postman.setGlobalVariable(\"getTransactionsByCustodyAccount\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/cuacs/${pm.environment.get(\"tenantId_assets\")}/v1/cuacs/${pm.environment.get(\"_tmp_cuacsId\")}/transactions`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json; charset=UTF-8',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {}",
					"    }, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            console.log(res.json());",
					"            pm.environment.set(\"_tmp_transactionsId\", res.json()._embedded.transactions[0].id);",
					"            console.log(\"Transaction ID: \" + pm.environment.get(\"_tmp_transactionsId\"));",
					"        }              ",
					"    });",
					"});",
					"",
					"/* function for getting asset id from asset list request*/",
					"postman.setGlobalVariable(\"getAssetsList\", () => {",
					"    pm.sendRequest({",
					"        url: `${pm.environment.get(\"env_assets\")}/assets/portfolios/${pm.environment.get(\"tenantId_assets\")}/v1/portfolios/${pm.environment.get(\"_tmp_portfolioId\")}/assets`,",
					"        method: \"GET\",",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json, application/hal+json',",
					"            'Authorization': `Bearer ${pm.environment.get(\"access_token\")}`",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ ",
					"            })",
					"        }    ",
					"}, function(err, res) {",
					"        if (err) {",
					"            console.log(err ? err : res.json());",
					"        } else {",
					"            console.log(res.json());\t\t\t",
					"            pm.environment.set(\"_tmp_assetsId\", res.json()._embedded.assets[0].id);",
					"            console.log(\"New asset ID: \" + pm.environment.get(\"_tmp_assetsId\"));",
					"        }                          ",
					"    });",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "685c8086-5b9f-416c-bf5a-ffd427a12f74",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "4fd771e9-4717-4d2f-8ac4-e9cb88837d31",
			"key": "EPIC",
			"value": "PRODUCT-6323",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}